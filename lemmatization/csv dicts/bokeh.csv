0,"{'func name': 'main', 'comments': 'Execute the ""bokeh"" command line program.\n\n\n', 'stemmed comments': ['program', 'line', 'bokeh', 'execut', 'command']}"
1,"{'func name': 'glyph_method', 'comments': '', 'stemmed comments': []}"
2,"{'func name': '_docstring_other', 'comments': '', 'stemmed comments': []}"
3,"{'func name': 'get_user', 'comments': '', 'stemmed comments': []}"
4,"{'func name': 'get_graph_kwargs', 'comments': '', 'stemmed comments': []}"
5,"{'func name': '_handle_legend_label', 'comments': '', 'stemmed comments': []}"
6,"{'func name': '_get_num_minor_ticks', 'comments': '', 'stemmed comments': []}"
7,"{'func name': '_process_sequence_literals', 'comments': '', 'stemmed comments': []}"
8,"{'func name': 'install_js', 'comments': 'Copy built BokehJS files into the Python source tree.\n\n\n##### Returns\n', 'stemmed comments': ['tree', 'file', 'sourc', 'built', 'copi', 'python', 'bokehj', 'return']}"
9,"{'func name': 'double_stack', 'comments': '', 'stemmed comments': []}"
10,"{'func name': '_collect_repeated_tools', 'comments': '', 'stemmed comments': []}"
11,"{'func name': 'check_marker_properties', 'comments': '', 'stemmed comments': []}"
12,"{'func name': 'ws_url', 'comments': '', 'stemmed comments': []}"
13,"{'func name': 'get_versions', 'comments': 'Get version information or return default if unable to do so.\n\n\n', 'stemmed comments': ['get', 'inform', 'default', 'unabl', 'version', 'return']}"
14,"{'func name': 'plot', 'comments': '', 'stemmed comments': []}"
15,"{'func name': '_read_data', 'comments': '\n\n\n', 'stemmed comments': []}"
16,"{'func name': 'data', 'comments': '', 'stemmed comments': []}"
17,"{'func name': '_DEFAULT_TEE', 'comments': '', 'stemmed comments': []}"
18,"{'func name': 'make_plot', 'comments': '', 'stemmed comments': []}"
19,"{'func name': 'verify_all', 'comments': '\n\n\n', 'stemmed comments': []}"
20,"{'func name': 'on_server_loaded', 'comments': '', 'stemmed comments': []}"
21,"{'func name': 'on_server_loaded', 'comments': '', 'stemmed comments': []}"
22,"{'func name': 'update_data', 'comments': '', 'stemmed comments': []}"
23,"{'func name': 'draw_test_figure', 'comments': '', 'stemmed comments': []}"
24,"{'func name': 'probably_relative_url', 'comments': 'Return True if a URL is not one of the common absolute URL formats.\n\nArguments: url (str): a URL string\n##### Returns\n', 'stemmed comments': ['url', 'argument', 'absolut', 'true', 'format', 'string', 'str', 'return', 'common', 'one']}"
25,"{'func name': 'get_user', 'comments': '', 'stemmed comments': []}"
26,"{'func name': 'make_plot', 'comments': '', 'stemmed comments': []}"
27,"{'func name': '_clean_data', 'comments': '\n\n\n', 'stemmed comments': []}"
28,"{'func name': '_read_data', 'comments': '\n\n\n', 'stemmed comments': []}"
29,"{'func name': 'validation_on', 'comments': 'Check if property validation is currently active\n\n\n##### Returns\n', 'stemmed comments': ['valid', 'current', 'properti', 'activ', 'check', 'return']}"
30,"{'func name': 'setup', 'comments': 'Required Sphinx extension setup function.\n\n\n', 'stemmed comments': ['setup', 'function', 'extens', 'sphinx', 'requir']}"
31,"{'func name': 'setup', 'comments': 'Required Sphinx extension setup function.\n\n\n', 'stemmed comments': ['setup', 'function', 'extens', 'sphinx', 'requir']}"
32,"{'func name': 'setup', 'comments': 'Required Sphinx extension setup function.\n\n\n', 'stemmed comments': ['setup', 'function', 'extens', 'sphinx', 'requir']}"
33,"{'func name': 'setup', 'comments': 'Required Sphinx extension setup function.\n\n\n', 'stemmed comments': ['setup', 'function', 'extens', 'sphinx', 'requir']}"
34,"{'func name': '_make_gh_link_node', 'comments': 'Return a link to a Bokeh Github resource.\n\n\n##### Args\n* **app (Sphinx app) **: current app\n\n* **rawtext (str) **: text being replaced with link node.\n\n* **role (str) **: role name\n\n* **kind (str) **: resource type (issue, pull, etc.)\n\n* **api_type (str) **: type for api link\n\n* **id **: (str)\n\n* **options (dict) **: options dictionary passed to role function\n\n', 'stemmed comments': ['resourc', 'type', 'option', 'name', 'text', 'github', 'issu', 'function', 'role', 'node', 'bokeh', 'dict', 'str', 'rawtext', 'current', 'replac', 'dictionari', 'etc', 'kind', 'arg', 'return', 'app', 'pass', 'api', 'sphinx', 'api_typ', 'id', 'link', 'pull']}"
35,"{'func name': 'setup', 'comments': 'Required Sphinx extension setup function.\n\n\n', 'stemmed comments': ['setup', 'function', 'extens', 'sphinx', 'requir']}"
36,"{'func name': 'setup', 'comments': 'Required Sphinx extension setup function.\n\n\n', 'stemmed comments': ['setup', 'function', 'extens', 'sphinx', 'requir']}"
37,"{'func name': 'setup', 'comments': 'Required Sphinx extension setup function.\n\n\n', 'stemmed comments': ['setup', 'function', 'extens', 'sphinx', 'requir']}"
38,"{'func name': 'setup', 'comments': 'Required Sphinx extension setup function.\n\n\n', 'stemmed comments': ['setup', 'function', 'extens', 'sphinx', 'requir']}"
39,"{'func name': 'setup', 'comments': 'Required Sphinx extension setup function.\n\n\n', 'stemmed comments': ['setup', 'function', 'extens', 'sphinx', 'requir']}"
40,"{'func name': '_process_script', 'comments': '', 'stemmed comments': []}"
41,"{'func name': 'setup', 'comments': 'Required Sphinx extension setup function.\n\n\n', 'stemmed comments': ['setup', 'function', 'extens', 'sphinx', 'requir']}"
42,"{'func name': 'setup', 'comments': 'Required Sphinx extension setup function.\n\n\n', 'stemmed comments': ['setup', 'function', 'extens', 'sphinx', 'requir']}"
43,"{'func name': 'update_data', 'comments': '', 'stemmed comments': []}"
44,"{'func name': 'bokeh_server', 'comments': '', 'stemmed comments': []}"
45,"{'func name': 'setup', 'comments': 'Required Sphinx extension setup function.\n\n\n', 'stemmed comments': ['setup', 'function', 'extens', 'sphinx', 'requir']}"
46,"{'func name': 'setup', 'comments': 'Required Sphinx extension setup function.\n\n\n', 'stemmed comments': ['setup', 'function', 'extens', 'sphinx', 'requir']}"
47,"{'func name': 'setup', 'comments': 'Required Sphinx extension setup function.\n\n\n', 'stemmed comments': ['setup', 'function', 'extens', 'sphinx', 'requir']}"
48,"{'func name': 'main', 'comments': 'Execute the Bokeh command.\n\n\n##### Args\n* **argv (seq[str]) **: a list of command line arguments to process\n\n##### Returns\n* **he name of one of the available subcommands**: \n\n* **ef**: `static <bokeh.command.subcommands.static>`\n\n', 'stemmed comments': ['argument', '[', '<', ']', 'name', 'argv', 'seq', '>', 'list', 'line', 'bokeh', 'str', 'command', 'ef', 'bokehcommandsubcommandsstat', 'arg', 'return', 'execut', 'static', 'subcommand', 'process', 'avail', 'one']}"
49,"{'func name': 'outliers', 'comments': '', 'stemmed comments': []}"
50,"{'func name': 'stacked', 'comments': '', 'stemmed comments': []}"
51,"{'func name': 'view', 'comments': 'Open a browser to view the specified location.\n\n\n##### Args\n* **location (str) **: Location to open\n    If location does not begin with ""http\n\n* **browser (str or None) **: what browser to use (default\n\n* **new (str) **: How to open the location. Valid values are\n\n* **autoraise (bool) **: Whether to automatically raise the location\n    in a new browser window (default\n\n##### Returns\n', 'stemmed comments': ['open', 'none', 'bool', 'If', 'valid', 'how', 'view', 'specifi', 'rais', 'use', 'whether', 'str', 'locat', 'browser', 'http', 'window', 'arg', 'autorais', 'return', 'new', 'default', 'valu', 'automat', 'begin']}"
52,"{'func name': '_read_data', 'comments': '\n\n\n', 'stemmed comments': []}"
53,"{'func name': 'update_hash_manifest', 'comments': '', 'stemmed comments': []}"
54,"{'func name': '_ext_use_widgets', 'comments': '', 'stemmed comments': []}"
55,"{'func name': 'rad', 'comments': '', 'stemmed comments': []}"
56,"{'func name': 'button_click', 'comments': '', 'stemmed comments': []}"
57,"{'func name': 'make_calendar', 'comments': '', 'stemmed comments': []}"
58,"{'func name': '_check_callback', 'comments': 'Bokeh-internal function to check callback signature\n\n\n', 'stemmed comments': ['bokehintern', 'function', 'signatur', 'check', 'callback']}"
59,"{'func name': 'ridge', 'comments': '', 'stemmed comments': []}"
60,"{'func name': 'check_integrity', 'comments': 'Apply validation and integrity checks to a collection of Bokeh models.\n\n\n##### Args\n* **models (seq[Model]) **: a collection of Models to test\n\n##### Returns\n* **dren will trigger a warning**: \n\n* **ode-block**: \n\n* **W-1002 (EMPTY_LAYOUT)**: Layout has no children\n\n', 'stemmed comments': ['[', 'children', ']', 'empty_layout', 'valid', 'seq', 'test', 'integr', 'odeblock', 'layout', 'warn', 'check', 'bokeh', 'trigger', 'w1002', 'appli', 'arg', 'return', 'dren', 'model', 'collect']}"
61,"{'func name': 'checkbox_button_click', 'comments': '', 'stemmed comments': []}"
62,"{'func name': 'checkbox_click', 'comments': '', 'stemmed comments': []}"
63,"{'func name': 'check_milestone_labels', 'comments': '', 'stemmed comments': []}"
64,"{'func name': 'setup', 'comments': 'Required Sphinx extension setup function.\n\n\n', 'stemmed comments': ['setup', 'function', 'extens', 'sphinx', 'requir']}"
65,"{'func name': 'test_color_bar_with_scale_alpha', 'comments': '', 'stemmed comments': []}"
66,"{'func name': 'make_plot', 'comments': '', 'stemmed comments': []}"
67,"{'func name': 'plot_js', 'comments': '', 'stemmed comments': []}"
68,"{'func name': 'hex_to_dec', 'comments': '', 'stemmed comments': []}"
69,"{'func name': '_read_data', 'comments': '\n\n\n', 'stemmed comments': []}"
70,"{'func name': 'cds_data_almost_equal', 'comments': 'Compares data dictionaries containing floats, lists and arrays Also supports nested lists and arrays\n\n\n', 'stemmed comments': ['array', 'compar', 'dictionari', 'list', 'float', 'also', 'support', 'nest', 'contain', 'data']}"
71,"{'func name': '_bundle_models', 'comments': 'Create a JavaScript bundle with selected `models`.\n\n\n', 'stemmed comments': ['model', 'bundl', 'creat', 'javascript', 'select']}"
72,"{'func name': 'pytest_addoption', 'comments': '', 'stemmed comments': []}"
73,"{'func name': 'generate_data', 'comments': '', 'stemmed comments': []}"
74,"{'func name': 'verify_aws_credentials', 'comments': '\n\n\n', 'stemmed comments': []}"
75,"{'func name': 'make_figure', 'comments': '', 'stemmed comments': []}"
76,"{'func name': 'make_figure', 'comments': '', 'stemmed comments': []}"
77,"{'func name': 'datetime', 'comments': '', 'stemmed comments': []}"
78,"{'func name': 'linked_panning', 'comments': '', 'stemmed comments': []}"
79,"{'func name': 'datetime', 'comments': '', 'stemmed comments': []}"
80,"{'func name': 'process_data', 'comments': '', 'stemmed comments': []}"
81,"{'func name': 'value', 'comments': 'Convenience function to explicitly return a ""value"" specification for a Bokeh :class:`~bokeh.core.properties.DataSpec` property.\n\n\n##### Args\n* **val (any) **: a fixed value to specify for a ``DataSpec`` property.\n\n* **transform (Transform, optional) **: a transform to apply (default\n\n##### Returns\n* **dict **: ``{ ""value""\n\n* **ote**: \n\n* **ple**: \n\n* **.. code-block**: \n\n', 'stemmed comments': ['codeblock', 'val', 'class', 'option', 'ote', 'specif', 'properti', 'function', 'specifi', 'bokeh', 'dict', '{', 'conveni', 'dataspec', 'fix', 'appli', 'arg', '~bokehcorepropertiesdataspec', 'return', 'ple', 'transform', 'default', 'valu', 'explicitli']}"
82,"{'func name': '_read_data', 'comments': '\n\n\n', 'stemmed comments': []}"
83,"{'func name': 'warning', 'comments': 'Decorator to mark a validator method for a Bokeh error condition\n\n\n##### Args\n* **code_or_name (int or str) **: a code from ``bokeh.validation.errors`` or a string label for a custom check\n\n##### Returns\n* **callable **: decorator for Bokeh model methods\n\n* **ples**: \n\n* **ode-block**: \n\n* **def _check_no_glyph_renderers(self)**: if bad_condition\n\n* **def _check_my_custom_warning(self)**: if bad_condition\n\n', 'stemmed comments': ['method', 'self', 'bad_condit', '_check_my_custom_warn', 'string', 'valid', 'decor', '_check_no_glyph_render', 'odeblock', 'mark', 'check', 'bokeh', 'code_or_nam', 'str', 'condit', 'custom', 'callabl', 'error', 'int', 'bokehvalidationerror', 'def', 'arg', 'return', 'ple', 'model', 'label', 'code']}"
84,"{'func name': 'import_required', 'comments': 'Attempt to import a required dependency.\n\n\n##### Args\n* **mod_name (str) **: name of the required module to try to import\n\n* **error_msg (str) **: error message to raise when the module is missing\n\n##### Returns\n', 'stemmed comments': ['error_msg', 'import', 'messag', 'miss', 'tri', 'modul', 'error', 'depend', 'rais', 'arg', 'str', 'requir', 'return', 'mod_nam', 'name', 'attempt']}"
85,"{'func name': 'deprecated', 'comments': 'Issue a nicely formatted deprecation warning.\n\n\n', 'stemmed comments': ['deprec', 'issu', 'warn', 'format', 'nice']}"
86,"{'func name': 'load_setup_py_data', 'comments': '', 'stemmed comments': []}"
87,"{'func name': 'set_curdoc', 'comments': 'Configure the current document (returned by curdoc()).\n\n\n##### Args\n* **doc (Document) **: Document we will output.\n\n##### Returns\n* **arning**: \n\n', 'stemmed comments': ['document', 'curdoc', 'doc', 'configur', 'current', 'output', 'arg', 'return', 'arn']}"
88,"{'func name': 'ui', 'comments': '', 'stemmed comments': []}"
89,"{'func name': '_on_session_destroyed', 'comments': 'Calls any on_session_destroyed callbacks defined on the Document\n\n\n', 'stemmed comments': ['document', 'defin', 'on_session_destroy', 'callback', 'call']}"
90,"{'func name': '_combine_document_events', 'comments': 'Attempt to combine a new event with a list of previous events.\n\nThe ``old_event`` will be scanned in reverse, and ``.combine(new_event)`` will be called on each. If a combination can be made, the function will return immediately. Otherwise, ``new_event`` will be appended to ``old_events``.\n##### Args\n* **new_event (DocumentChangedEvent) **: The new event to attempt to combine\n\n##### Returns\n', 'stemmed comments': ['immedi', 'append', 'otherwis', 'the', 'If', 'previou', 'function', 'list', 'event', 'call', 'made', 'combin', 'scan', 'new_ev', 'arg', 'return', 'new', 'documentchangedev', 'old_ev', 'attempt', 'revers']}"
91,"{'func name': 'to_base64', 'comments': '', 'stemmed comments': []}"
92,"{'func name': 'extract_zip', 'comments': 'Extracts a zip file to its containing directory.\n\n\n', 'stemmed comments': ['extract', 'file', 'directori', 'zip', 'contain']}"
93,"{'func name': '_advance', 'comments': 'Yield a sequence generated by calling a given function with successively incremented integer values.\n\n\n##### Args\n* **f (callable) **: The function to advance\n\n* **ds**: \n\n', 'stemmed comments': ['integ', 'the', 'sequenc', 'function', 'gener', 'given', 'increment', 'valu', 'callabl', 'ds', 'arg', 'success', 'advanc', 'yield', 'f', 'call']}"
94,"{'func name': 'dropdown_click', 'comments': '', 'stemmed comments': []}"
95,"{'func name': 'script_for_render_items', 'comments': 'Render an script for Bokeh render items. Args: docs_json_or_id: can be None\n\nrender_items (RenderItems) : Specific items to render from the document and where\n\napp_path (str, optional) :\n\nabsolute_url (Theme, optional)\n##### Returns\n', 'stemmed comments': ['document', 'specif', 'render_item', 'docs_json_or_id', 'renderitem', 'app_path', 'absolute_url', 'render', 'item', 'none', 'option', 'bokeh', 'arg', 'str', 'return', 'theme', 'script']}"
96,"{'func name': 'enumeration', 'comments': 'Create an |Enumeration| object from a sequence of values.\n\nCall ``enumeration`` with a sequence of (unique) strings to create an Enumeration object:\n\n.. code-block:: python\n\n#: Specify the horizontal alignment for rendering text TextAlign = enumeration(""left"", ""right"", ""center"")\n##### Args\n* **values (str) **: string enumeration values, passed as positional arguments\n    The order of arguments is the order of the enumeration, and the\n    first element will be considered the default value when used\n    to create |Enum| properties.\n\n* **ord Args**: \n\n* **case_sensitive (bool, optional) **: Whether validation should consider case or not (default\n\n* **quote (bool, optional)**: Whether values should be quoted in the string representations\n    (default\n\n##### Returns\n', 'stemmed comments': ['argument', 'codeblock', '=', 'right', 'case_sensit', 'render', 'creat', 'option', 'string', 'the', 'bool', 'consid', 'left', 'case', 'quot', 'valid', 'text', 'properti', 'ord', 'specifi', '|enum|', 'object', 'uniqu', 'horizont', 'order', 'use', 'str', 'whether', '|enumeration|', 'represent', 'align', 'python', 'arg', 'textalign', 'return', 'enumer', 'sequenc', 'posit', 'default', 'pass', 'valu', 'first', 'element', 'center', 'call']}"
97,"{'func name': 'print_event', 'comments': 'Function that returns a Python callback to pretty print the events.\n\n\n', 'stemmed comments': ['print', 'function', 'event', 'pretti', 'python', 'callback', 'return']}"
98,"{'func name': '_store_binary', 'comments': '', 'stemmed comments': []}"
99,"{'func name': '_tmp_html', 'comments': '', 'stemmed comments': []}"
100,"{'func name': '_run_command', 'comments': '', 'stemmed comments': []}"
101,"{'func name': 'markers', 'comments': 'Prints a list of valid marker types for scatter()\n\n\n##### Returns\n', 'stemmed comments': ['valid', 'type', 'marker', 'print', 'list', 'scatter', 'return']}"
102,"{'func name': 'selected_name', 'comments': '', 'stemmed comments': []}"
103,"{'func name': 'file_server', 'comments': '', 'stemmed comments': []}"
104,"{'func name': 'with_temporary_file', 'comments': '\n\n\n', 'stemmed comments': []}"
105,"{'func name': 'bk_worker', 'comments': '', 'stemmed comments': []}"
106,"{'func name': 'bk_worker', 'comments': '', 'stemmed comments': []}"
107,"{'func name': 'visualization', 'comments': '', 'stemmed comments': []}"
108,"{'func name': '_DATETIME_TICK_FORMATTER_HELP', 'comments': '', 'stemmed comments': []}"
109,"{'func name': 'cb', 'comments': '', 'stemmed comments': []}"
110,"{'func name': 'make_figure', 'comments': '', 'stemmed comments': []}"
111,"{'func name': 'get_param_info', 'comments': 'Find parameters with defaults and return them.\n\nArguments: sig (Signature) : a function signature\n##### Returns\n* **tuple(list, list) **: parameters with defaults\n\n', 'stemmed comments': ['paramet', 'argument', 'find', 'tupl', 'default', 'signatur', 'function', 'list', 'sig', 'return']}"
112,"{'func name': 'add_gauge', 'comments': '', 'stemmed comments': []}"
113,"{'func name': 'epicyclic_gear', 'comments': '', 'stemmed comments': []}"
114,"{'func name': 'output_defaults_module', 'comments': '', 'stemmed comments': []}"
115,"{'func name': 'tag_release_version', 'comments': '', 'stemmed comments': []}"
116,"{'func name': 'make_tabs', 'comments': '', 'stemmed comments': []}"
117,"{'func name': 'gmap', 'comments': 'Create a new :class:`~bokeh.plotting.gmap.GMap` for plotting.\n\n\n##### Args\n* **google_api_key (str)**: Google requires an API key be supplied for maps to function. See\n\n* **map_options**: (\n\n* **ddition to the standard **: class\n\n* **tional options can be passed as well**: \n\n* **okeh-options**: \n\n* ****: module\n\n##### Returns\n', 'stemmed comments': ['google_api_key', 'creat', 'tional', 'class', 'option', 'requir', 'googl', 'key', 'function', 'map_opt', 'plot', 'str', 'well', 'ddition', 'standard', 'arg', 'suppli', 'return', 'new', '~bokehplottinggmapgmap', 'pass', 'modul', 'api', 'map', 'okehopt', 'see']}"
118,"{'func name': 'bezier', 'comments': '', 'stemmed comments': []}"
119,"{'func name': '_handle_sublists', 'comments': '', 'stemmed comments': []}"
120,"{'func name': 'create_graph', 'comments': '', 'stemmed comments': []}"
121,"{'func name': 'from_networkx', 'comments': '', 'stemmed comments': []}"
122,"{'func name': 'handle_exception', 'comments': 'Record an exception and details on a Handler.\n\n\n', 'stemmed comments': ['record', 'handler', 'detail', 'except']}"
123,"{'func name': 'accumulate_dict_from_superclasses', 'comments': 'Traverse the class hierarchy and accumulate the special dicts ``MetaHasProps`` stores on classes\n\n\n##### Args\n* **name (str) **: name of the special attribute to collect.\n    Typically meaningful values are\n\n', 'stemmed comments': ['travers', 'attribut', 'hierarchi', 'store', 'collect', 'accumul', 'typic', 'metahasprop', 'valu', 'special', 'class', 'str', 'dict', 'arg', 'name', 'meaning']}"
124,"{'func name': '_round_hex', 'comments': 'Round floating point axial hex coordinates to integer *(q,r)* coordinates.\n\nThis code was adapted from:\n\nhttps://www.redblobgames.com/grids/hexagons/#rounding\n##### Args\n* **q (array[float]) **: NumPy array of Floating point axial *q* coordinates to round\n\n* **r (array[float]) **: NumPy array of Floating point axial *q* coordinates to round\n\n##### Returns\n', 'stemmed comments': ['integ', 'r', '[', 'numpi', 'adapt', 'round', 'point', ']', 'hex', 'thi', 'array', 'float', 'axial', 'coordin', 'http', 'arg', 'return', 'q', 'code', '//wwwredblobgamescom/grids/hexagons/']}"
125,"{'func name': 'make_plot', 'comments': '', 'stemmed comments': []}"
126,"{'func name': 'scb', 'comments': '', 'stemmed comments': []}"
127,"{'func name': 'update', 'comments': '', 'stemmed comments': []}"
128,"{'func name': '_version', 'comments': '', 'stemmed comments': []}"
129,"{'func name': 'logger', 'comments': 'Log errors by appending to a .txt file.  The name and directory the file is saved into is provided by the name and log_dir args.\n\n\n', 'stemmed comments': ['provid', 'append', 'txt', 'error', 'file', 'directori', 'log', 'log_dir', 'arg', 'the', 'save', 'name']}"
130,"{'func name': 'ipython', 'comments': 'A PyTest fixture that will automatically skip a test if IPython is not installed.\n\n\n', 'stemmed comments': ['instal', 'test', 'A', 'fixtur', 'automat', 'pytest', 'ipython', 'skip']}"
131,"{'func name': 'change_z', 'comments': '', 'stemmed comments': []}"
132,"{'func name': 'make_plot', 'comments': '', 'stemmed comments': []}"
133,"{'func name': 'display_event', 'comments': 'Function to build a suitable CustomJS to display the current event in the div model.\n\n\n', 'stemmed comments': ['model', 'current', 'function', 'build', 'customj', 'event', 'display', 'suitabl', 'div']}"
134,"{'func name': 'display_event', 'comments': 'Build a suitable CustomJS to display the current event in the div model.\n\n\n', 'stemmed comments': ['model', 'current', 'build', 'customj', 'event', 'display', 'suitabl', 'div']}"
135,"{'func name': 'serialize_json', 'comments': 'Return a serialized JSON representation of objects, suitable to send to BokehJS.\n\nThis function is typically used to serialize single python objects in the manner expected by BokehJS. In particular, many datetime values are automatically normalized to an expected format. Some Bokeh objects can also be passed, but note that Bokeh models are typically properly serialized in the context of an entire Bokeh document.\n\nThe resulting JSON always has sorted keys. By default. the output is as compact as possible unless pretty output or indentation is requested.\n##### Args\n* **obj (obj) **: the object to serialize to JSON format\n\n* **pretty (bool, optional) **: Whether to generate prettified output. If ``True``, spaces are\n    added after added after separators, and indentation and newlines\n    are applied. (default\n\n* **indent (int or None, optional) **: Amount of indentation to use in generated JSON output. If ``None``\n    then no indentation is used, unless pretty output is enabled,\n    in which case two spaces are used. (default\n\n* **additional keyword arguments are passed to ``json.dumps``, except for\n that  are computed internally, and cannot be overridden**: \n\n* **ples**: \n\n* **.. code-block**: \n\n', 'stemmed comments': ['datetim', 'codeblock', 'option', 'ad', 'none', 'alway', 'thi', 'properli', 'function', 'key', 'separ', 'bokehj', 'json', 'entir', 'result', 'return', 'ple', 'By', 'pretti', 'serial', 'case', 'gener', 'context', 'two', 'use', 'whether', 'prettifi', 'int', 'arg', 'jsondump', 'addit', 'sort', 'amount', 'overridden', 'send', 'argument', 'note', 'typic', 'bool', 'request', 'intern', 'output', 'mani', 'enabl', 'bokeh', 'compact', 'document', 'represent', 'appli', 'some', 'model', 'pass', 'valu', 'obj', 'singl', 'possibl', 'indent', 'expect', 'except', 'also', 'the', 'If', 'true', 'object', 'newlin', 'comput', 'particular', 'space', 'python', 'suitabl', 'default', 'manner', 'automat', 'keyword', 'unless', 'format', 'normal', 'In']}"
136,"{'func name': 'plot2', 'comments': '', 'stemmed comments': []}"
137,"{'func name': 'plot2', 'comments': '', 'stemmed comments': []}"
138,"{'func name': 'jupyter_notebook', 'comments': 'Starts a jupyter notebook server at the beginning of a session, and closes at the end of a session.\n\nAdds custom.js that runs all the cells on notebook opening. Cleans out this custom.js at the end of the test run.\n', 'stemmed comments': ['add', 'close', 'start', 'test', 'jupyt', 'end', 'open', 'clean', 'notebook', 'customj', 'run', 'session', 'begin', 'server', 'cell']}"
139,"{'func name': '_chunks', 'comments': 'Yield successive n-sized chunks from list, l.\n\n\n', 'stemmed comments': ['nsize', 'chunk', 'list', 'l', 'success', 'yield']}"
140,"{'func name': 'add_legend', 'comments': '', 'stemmed comments': []}"
141,"{'func name': '_do_nothing', 'comments': '', 'stemmed comments': []}"
142,"{'func name': 'make_dropdown', 'comments': '', 'stemmed comments': []}"
143,"{'func name': 'update', 'comments': '', 'stemmed comments': []}"
144,"{'func name': 'update', 'comments': '', 'stemmed comments': []}"
145,"{'func name': 'without_document_lock', 'comments': 'Wrap a callback function to execute without first obtaining the document lock.\n\n\n##### Args\n* **func (callable) **: The function to wrap\n\n##### Returns\n* **callable **: a function wrapped to execute without a |Document| lock.\n\n* **h are**: \n\n* **unc**: `~bokeh.document.Document.remove_next_tick_callback`\n these may be used safely without taking the document lock. To make\n\n', 'stemmed comments': ['func', 'the', 'callback', 'To', 'safe', 'function', 'may', 'use', 'document', '|document|', 'h', 'unc', 'take', '~bokehdocumentdocumentremove_next_tick_callback', 'without', 'callabl', 'arg', 'wrap', 'return', 'execut', 'lock', 'first', 'obtain', 'make']}"
146,"{'func name': 'log_file', 'comments': '', 'stemmed comments': []}"
147,"{'func name': 'make_figure', 'comments': '', 'stemmed comments': []}"
148,"{'func name': 'trace', 'comments': '', 'stemmed comments': []}"
149,"{'func name': 'lorenz', 'comments': '', 'stemmed comments': []}"
150,"{'func name': 'update_samples_or_dataset', 'comments': '', 'stemmed comments': []}"
151,"{'func name': 'update', 'comments': '', 'stemmed comments': []}"
152,"{'func name': 'update', 'comments': '', 'stemmed comments': []}"
153,"{'func name': 'update', 'comments': '', 'stemmed comments': []}"
154,"{'func name': 'animate', 'comments': '', 'stemmed comments': []}"
155,"{'func name': 'update', 'comments': '', 'stemmed comments': []}"
156,"{'func name': 'update', 'comments': '', 'stemmed comments': []}"
157,"{'func name': 'update', 'comments': '', 'stemmed comments': []}"
158,"{'func name': 'update', 'comments': '', 'stemmed comments': []}"
159,"{'func name': 'selection_change', 'comments': '', 'stemmed comments': []}"
160,"{'func name': 'update', 'comments': '', 'stemmed comments': []}"
161,"{'func name': 'update_plot', 'comments': '', 'stemmed comments': []}"
162,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
163,"{'func name': 'ManagedServerLoop', 'comments': '', 'stemmed comments': []}"
164,"{'func name': 'make_plot', 'comments': '', 'stemmed comments': []}"
165,"{'func name': 'main', 'comments': 'Generates a bokeh changelog which includes the given milestone.\n\nRequires that you set GITHUB_TOKEN to your GitHub API Token. Exit code 2 indicates there was a verification problem whereas exit code 1 indicates a general error in the script. Otherwise you can expect an exit code of 0 for success.\n', 'stemmed comments': ['expect', 'otherwis', 'given', 'github_token', 'token', '2', 'requir', '0', 'github', 'set', 'gener', '1', 'mileston', 'bokeh', 'wherea', 'success', 'verif', 'script', 'includ', 'exit', 'problem', 'error', 'changelog', 'indic', 'api', 'code']}"
166,"{'func name': '_visit_value_and_its_immediate_references', 'comments': 'Recurse down Models, HasProps, and Python containers\n\nThe ordering in this function is to optimize performance.\n\nWe check the most comomn types (int, float, str) first so that we can quickly return in the common case.\n\nWe avoid isinstance and issubclass checks in a couple places with `type` checks because isinstance checks can be slow.\n', 'stemmed comments': ['type', 'comomn', 'optim', 'the', 'case', 'hasprop', 'issubclass', 'function', 'coupl', 'float', 'recurs', 'We', 'order', 'check', 'isinst', 'str', 'common', 'int', 'quickli', 'python', 'place', 'return', 'model', 'avoid', 'first', 'perform', 'slow', 'contain']}"
167,"{'func name': 'datetime', 'comments': '', 'stemmed comments': []}"
168,"{'func name': 'fig', 'comments': '', 'stemmed comments': []}"
169,"{'func name': 'multiselect_click', 'comments': '', 'stemmed comments': []}"
170,"{'func name': 'notebook_content', 'comments': 'Return script and div that will display a Bokeh plot in a Jupyter Notebook.\n\nThe data for the plot is stored directly in the returned HTML.\n##### Args\n* **model (Model) **: Bokeh object to render\n\n* **notebook_comms_target (str, optional) **: A target name for a Jupyter Comms object that can update\n    the document that is rendered to this notebook div\n\n* **theme (Theme, optional) **: Defaults to the ``Theme`` instance in the current document.\n    Setting this to ``None`` uses the default theme or the theme\n    already specified in the document. Any other value must be an\n    instance of the ``Theme`` class.\n\n##### Returns\n* **ote**: \n\n* **Assumes **: func\n\n', 'stemmed comments': ['updat', 'render', 'func', 'option', 'none', 'class', 'ote', 'the', 'target', 'name', 'ani', 'set', 'store', 'specifi', 'object', 'plot', 'bokeh', 'use', 'str', 'theme', 'script', 'document', 'current', 'jupyt', 'A', 'notebook', 'html', 'comm', 'display', 'arg', 'return', 'div', 'must', 'model', 'default', 'alreadi', 'instanc', 'valu', 'directli', 'notebook_comms_target', 'assum', 'data']}"
171,"{'func name': '_server_url', 'comments': '\n\n\n', 'stemmed comments': []}"
172,"{'func name': 'reset_output', 'comments': 'Clear the default state of all output modes.\n\n\n##### Returns\n', 'stemmed comments': ['output', 'default', 'clear', 'state', 'mode', 'return']}"
173,"{'func name': 'gray', 'comments': 'Generate a palette of colors or from the Greys palette.\n\nThe full Greys palette that serves as input for deriving new palettes has 256 colors, and looks like:\n\n:bokeh-palette:`grey(256)`\n##### Args\n* **n (int) **: size of the palette to generate\n\n##### Returns\n* **seq[str] **: a sequence of hex RGB color strings\n\n', 'stemmed comments': ['[', ']', 'string', 'the', 'hex', 'input', 'seq', 'rgb', '256', 'gener', 'full', 'look', 'size', 'str', 'grey', 'int', 'deriv', 'arg', 'palett', 'return', 'new', 'n', 'serv', 'sequenc', 'like', 'color', 'bokehpalett']}"
174,"{'func name': 'pd', 'comments': 'A PyTest fixture that will automatically skip a test if Pandas is not installed.\n\n\n', 'stemmed comments': ['panda', 'instal', 'test', 'A', 'fixtur', 'automat', 'pytest', 'skip']}"
175,"{'func name': 'add_title', 'comments': '', 'stemmed comments': []}"
176,"{'func name': 'parallel_plot', 'comments': 'From a dataframe create a parallel coordinate plot\n\n\n', 'stemmed comments': ['datafram', 'coordin', 'from', 'parallel', 'creat', 'plot']}"
177,"{'func name': 'update', 'comments': '', 'stemmed comments': []}"
178,"{'func name': 'process_document_events', 'comments': 'Create a JSON string describing a patch to be applied as well as any optional buffers.\n\n\n##### Args\n* **events **: list of events to be translated into patches\n\n##### Returns\n* **str, list **: JSON string which can be applied to make the given updates to obj\n  as well as any optional buffers\n\n', 'stemmed comments': ['updat', 'given', 'creat', 'option', 'string', 'list', 'event', 'str', 'json', 'translat', 'well', 'buffer', 'appli', 'arg', 'return', 'patch', 'obj', 'describ', 'make']}"
179,"{'func name': 'bokehjsdir', 'comments': 'Get the location of the bokehjs source files. If dev is True, the files in bokehjs/build are preferred. Otherwise uses the files in bokeh/server/static.\n\n\n', 'stemmed comments': ['get', 'bokehjs/build', 'dev', 'true', 'otherwis', 'sourc', 'file', 'bokeh/server/stat', 'use', 'bokehj', 'locat', 'prefer', 'If']}"
180,"{'func name': 'is_check', 'comments': '', 'stemmed comments': []}"
181,"{'func name': '_select_helper', 'comments': 'Allow flexible selector syntax.\n\n\n##### Returns\n', 'stemmed comments': ['selector', 'syntax', 'allow', 'flexibl', 'return']}"
182,"{'func name': 'normal2d', 'comments': '', 'stemmed comments': []}"
183,"{'func name': 'update', 'comments': '', 'stemmed comments': []}"
184,"{'func name': '_read_data', 'comments': '\n\n\n', 'stemmed comments': []}"
185,"{'func name': 'bokeh_server_page', 'comments': '', 'stemmed comments': []}"
186,"{'func name': 'upload_deployment_tarball', 'comments': '', 'stemmed comments': []}"
187,"{'func name': '_or', 'comments': '', 'stemmed comments': []}"
188,"{'func name': 'radiogroup_click', 'comments': '', 'stemmed comments': []}"
189,"{'func name': 'radiogroup_click', 'comments': '', 'stemmed comments': []}"
190,"{'func name': 'slider_change', 'comments': '', 'stemmed comments': []}"
191,"{'func name': '_return_empty', 'comments': '', 'stemmed comments': []}"
192,"{'func name': '_compute_single_hash', 'comments': '', 'stemmed comments': []}"
193,"{'func name': 'ridge', 'comments': '', 'stemmed comments': []}"
194,"{'func name': 'is_bokeh_app', 'comments': '', 'stemmed comments': []}"
195,"{'func name': '_download_file', 'comments': '\n\n\n', 'stemmed comments': []}"
196,"{'func name': '_save_helper', 'comments': '\n\n\n', 'stemmed comments': []}"
197,"{'func name': '_run_in_browser', 'comments': 'wait is in milliseconds\n\n\n', 'stemmed comments': ['wait', 'millisecond']}"
198,"{'func name': '_read_data', 'comments': '', 'stemmed comments': []}"
199,"{'func name': 'callback', 'comments': '', 'stemmed comments': []}"
200,"{'func name': 'select_click', 'comments': '', 'stemmed comments': []}"
201,"{'func name': 'update', 'comments': '', 'stemmed comments': []}"
202,"{'func name': 'mkglyph', 'comments': '', 'stemmed comments': []}"
203,"{'func name': 'has_no_console_errors', 'comments': 'Provide a function to assert no browser console errors are present.\n\nUnfortunately logs are only accessibly with Chrome web driver, see e.g.\n\nhttps://github.com/mozilla/geckodriver/issues/284\n\nFor non-Chrome webdrivers this check always returns True.\n', 'stemmed comments': ['web', 'webdriv', 'nonchrom', 'log', 'alway', 'for', 'eg', 'function', 'unfortun', 'true', 'check', 'browser', 'http', '//githubcom/mozilla/geckodriver/issues/284', 'error', 'return', 'assert', 'driver', 'consol', 'access', 'chrome', 'present', 'see', 'provid']}"
204,"{'func name': 'get_slider_bar_color', 'comments': '', 'stemmed comments': []}"
205,"{'func name': 'decode_base64_dict', 'comments': 'Decode a base64 encoded array into a NumPy array.\n\n\n##### Args\n* **data (dict) **: encoded array data to decode\n should have the format encoded by\n\n##### Returns\n', 'stemmed comments': ['array', 'numpi', 'arg', 'encod', 'format', 'data', 'decod', 'dict', 'return', 'base64']}"
206,"{'func name': 'bkapp_page', 'comments': '', 'stemmed comments': []}"
207,"{'func name': 'stream', 'comments': '', 'stemmed comments': []}"
208,"{'func name': '_src_path', 'comments': 'Return a base autoload URL for a given element ID\n\n\n##### Args\n* **url (str) **: The base server URL\n\n* **elementid (str) **: The div ID for autload to target\n\n##### Returns\n', 'stemmed comments': ['url', 'the', 'autoload', 'base', 'given', 'autload', 'ID', 'server', 'element', 'arg', 'str', 'target', 'return', 'div', 'elementid']}"
209,"{'func name': 'show_session', 'comments': ""Open a browser displaying a session document.\n\nIf you have a session from ``pull_session()`` or ``push_session`` you can ``show_session(session=mysession)``. If you don't need to open a connection to the server yourself, you can show a new session in a browser by providing just the ``url``.\n##### Args\n* **session_id (string, optional) **: The name of the session, None to autogenerate a random one (default\n\n* **url **: (str, optional)\n\n* **session (ClientSession, optional) **: session to get session ID and server URL from\n    If you specify this, you don't need to specify session_id and url\n\n* **browser (str, optional) **: browser to show with (default\n\n* **new (str, optional) **: new file output mode (default\n\n"", 'stemmed comments': ['clientsess', 'open', 'show', 'option', 'none', 'mode', 'string', 'session_id', 'the', 'name', 'If', 'session=mysess', 'output', 'autogener', 'specifi', 'file', 'pull_sess', 'need', 'server', 'str', 'connect', 'browser', 'document', 'get', 'push_sess', 'display', 'ID', 'arg', 'show_sess', 'nt', 'new', 'url', 'default', 'random', 'session', 'provid', 'one']}"
210,"{'func name': 'current_time', 'comments': 'Return the time in milliseconds since the epoch as a floating point number.\n\n\n', 'stemmed comments': ['number', 'time', 'float', 'epoch', 'millisecond', 'point', 'sinc', 'return']}"
211,"{'func name': 'is_dev', 'comments': '', 'stemmed comments': []}"
212,"{'func name': 'shape_viewer', 'comments': '', 'stemmed comments': []}"
213,"{'func name': '_show_with_state', 'comments': '\n\n\n', 'stemmed comments': []}"
214,"{'func name': 'slider_change', 'comments': '', 'stemmed comments': []}"
215,"{'func name': 'update_data', 'comments': '', 'stemmed comments': []}"
216,"{'func name': 'color_picker', 'comments': '', 'stemmed comments': []}"
217,"{'func name': '_check_slice', 'comments': '', 'stemmed comments': []}"
218,"{'func name': '_proto', 'comments': '', 'stemmed comments': []}"
219,"{'func name': 'selected_name', 'comments': '', 'stemmed comments': []}"
220,"{'func name': 'update_package', 'comments': '', 'stemmed comments': []}"
221,"{'func name': 'bkapp', 'comments': '', 'stemmed comments': []}"
222,"{'func name': '_title_from_models', 'comments': '', 'stemmed comments': []}"
223,"{'func name': 'curstate', 'comments': 'Return the current State object\n\n\n##### Returns\n* **State **: the current default State object\n\n', 'stemmed comments': ['current', 'default', 'state', 'object', 'return']}"
224,"{'func name': 'static_extensions', 'comments': '', 'stemmed comments': []}"
225,"{'func name': 'datetime', 'comments': '', 'stemmed comments': []}"
226,"{'func name': '_read_data', 'comments': '\n\n\n', 'stemmed comments': []}"
227,"{'func name': 'format_url_query_arguments', 'comments': 'Format a base URL with optional query arguments\n\n\n##### Args\n* **url (str) **: An base URL to append query arguments to\n\n* **arguments (dict or None, optional) **: A mapping of key/value URL query arguments, or None (default\n\n##### Returns\n', 'stemmed comments': ['url', 'argument', 'queri', 'base', 'A', 'default', 'append', 'option', 'none', 'map', 'format', 'key/valu', 'dict', 'arg', 'str', 'return', 'An']}"
228,"{'func name': 'generate_structure_plot', 'comments': 'Given a bokeh model f, return a model that displays the graph of its submodels.\n\nClicking on the nodes of the graph reveals the attributes of that submodel.\n', 'stemmed comments': ['model', 'attribut', 'click', 'graph', 'given', 'submodel', 'node', 'display', 'reveal', 'bokeh', 'return', 'f']}"
229,"{'func name': 'fds', 'comments': '', 'stemmed comments': []}"
230,"{'func name': 'update', 'comments': '', 'stemmed comments': []}"
231,"{'func name': 'get_env', 'comments': 'Get the correct Jinja2 Environment, also for frozen scripts.\n\n\n', 'stemmed comments': ['get', 'jinja2', 'correct', 'environ', 'frozen', 'also', 'script']}"
232,"{'func name': 'warn', 'comments': '', 'stemmed comments': []}"
233,"{'func name': 'test_doc', 'comments': '', 'stemmed comments': []}"
234,"{'func name': 'test_jupyter_notebook_hook_installed', 'comments': '', 'stemmed comments': []}"
235,"{'func name': 'test_all_count', 'comments': '', 'stemmed comments': []}"
236,"{'func name': 'test_license', 'comments': '', 'stemmed comments': []}"
237,"{'func name': 'test_main', 'comments': '', 'stemmed comments': []}"
238,"{'func name': 'test__glyph_receives_renderer_arg', 'comments': '', 'stemmed comments': []}"
239,"{'func name': 'test__find_legend_item', 'comments': '', 'stemmed comments': []}"
240,"{'func name': 'test__collect_repeated_tools', 'comments': '', 'stemmed comments': []}"
241,"{'func name': 'test_routes', 'comments': '', 'stemmed comments': []}"
242,"{'func name': 'test_data', 'comments': '', 'stemmed comments': []}"
243,"{'func name': 'test_legend_item_with_field_label_raises_error_if_field_not_in_cds', 'comments': '', 'stemmed comments': []}"
244,"{'func name': 'test_probably_relative_url', 'comments': '', 'stemmed comments': []}"
245,"{'func name': 'modify_doc', 'comments': '', 'stemmed comments': []}"
246,"{'func name': 'test_autompg_clean', 'comments': '', 'stemmed comments': []}"
247,"{'func name': 'test_autompg2', 'comments': '', 'stemmed comments': []}"
248,"{'func name': 'test_ticker_accepts_number_sequences', 'comments': '', 'stemmed comments': []}"
249,"{'func name': 'test_balck', 'comments': 'Assures that the Python codebase imports are correctly formatted.\n\n\n', 'stemmed comments': ['import', 'assur', 'codebas', 'correctli', 'format', 'python']}"
250,"{'func name': 'test_error', 'comments': '', 'stemmed comments': []}"
251,"{'func name': '_make_server_plot', 'comments': '', 'stemmed comments': []}"
252,"{'func name': '_make_plot', 'comments': '', 'stemmed comments': []}"
253,"{'func name': 'test_NEW_PARAM', 'comments': '', 'stemmed comments': []}"
254,"{'func name': 'test_icons', 'comments': '', 'stemmed comments': []}"
255,"{'func name': 'test_widget', 'comments': '', 'stemmed comments': []}"
256,"{'func name': '_partially_bad_event', 'comments': '', 'stemmed comments': []}"
257,"{'func name': 'test_js_callback', 'comments': '', 'stemmed comments': []}"
258,"{'func name': 'run', 'comments': '', 'stemmed comments': []}"
259,"{'func name': 'test_session_show_adds_obj_to_curdoc_if_necessary', 'comments': '', 'stemmed comments': []}"
260,"{'func name': 'bad_files', 'comments': '', 'stemmed comments': []}"
261,"{'func name': 'enter_value_in_color_picker', 'comments': '', 'stemmed comments': []}"
262,"{'func name': 'test_data', 'comments': '', 'stemmed comments': []}"
263,"{'func name': 'test_inline_extension', 'comments': '', 'stemmed comments': []}"
264,"{'func name': '_make_plot', 'comments': '', 'stemmed comments': []}"
265,"{'func name': 'test_daylight_warsaw_2013', 'comments': '', 'stemmed comments': []}"
266,"{'func name': 'test_default_values', 'comments': '', 'stemmed comments': []}"
267,"{'func name': 'test_data', 'comments': '', 'stemmed comments': []}"
268,"{'func name': 'test_since_with_extra', 'comments': '', 'stemmed comments': []}"
269,"{'func name': 'script_adds_two_roots', 'comments': '', 'stemmed comments': []}"
270,"{'func name': 'test_set_curdoc_sets_curstate', 'comments': '', 'stemmed comments': []}"
271,"{'func name': 'test__advance', 'comments': '', 'stemmed comments': []}"
272,"{'func name': 'test_enums_contents', 'comments': '', 'stemmed comments': []}"
273,"{'func name': 'test_pinch_callbacks', 'comments': '', 'stemmed comments': []}"
274,"{'func name': '_run_example', 'comments': '', 'stemmed comments': []}"
275,"{'func name': 'test_layout_html_on_parent_first', 'comments': '', 'stemmed comments': []}"
276,"{'func name': '_names', 'comments': '', 'stemmed comments': []}"
277,"{'func name': 'p', 'comments': '', 'stemmed comments': []}"
278,"{'func name': 'test_flake8', 'comments': 'Assures that the Python codebase passes configured Flake8 checks\n\n\n', 'stemmed comments': ['configur', 'assur', 'pass', 'codebas', 'check', 'python', 'flake8']}"
279,"{'func name': '_make_server_plot', 'comments': '', 'stemmed comments': []}"
280,"{'func name': 'test_data', 'comments': '', 'stemmed comments': []}"
281,"{'func name': 'test_data', 'comments': '', 'stemmed comments': []}"
282,"{'func name': 'test_X', 'comments': '', 'stemmed comments': []}"
283,"{'func name': 'test_from_networkx_with_missing_layout', 'comments': '', 'stemmed comments': []}"
284,"{'func name': 'test_from_networkx_deprecated', 'comments': '', 'stemmed comments': []}"
285,"{'func name': 'test_ticker_accepts_axis', 'comments': '', 'stemmed comments': []}"
286,"{'func name': 'test_color', 'comments': '', 'stemmed comments': []}"
287,"{'func name': 'test_data', 'comments': '', 'stemmed comments': []}"
288,"{'func name': 'test_HasProps_apply_theme_func_default', 'comments': '', 'stemmed comments': []}"
289,"{'func name': 'test__version_missing', 'comments': '', 'stemmed comments': []}"
290,"{'func name': 'test_flowers', 'comments': '', 'stemmed comments': []}"
291,"{'func name': 'test_isort', 'comments': 'Assures that the Python codebase imports are correctly sorted.\n\n\n', 'stemmed comments': ['import', 'sort', 'assur', 'codebas', 'correctli', 'python']}"
292,"{'func name': 'test_js_license_set', 'comments': 'If the current set of JS licenses changes, they should be noted in the bokehjs/LICENSE file.\n\n\n', 'stemmed comments': ['JS', 'chang', 'current', 'set', 'note', 'bokehjs/licens', 'file', 'licens', 'If']}"
293,"{'func name': 'test_basic_script_with_output_before', 'comments': '', 'stemmed comments': []}"
294,"{'func name': 'test_widgetbox_deprecated', 'comments': '', 'stemmed comments': []}"
295,"{'func name': 'test_repeated_children', 'comments': '', 'stemmed comments': []}"
296,"{'func name': 'test_data', 'comments': '', 'stemmed comments': []}"
297,"{'func name': 'test_without_document_lock', 'comments': '', 'stemmed comments': []}"
298,"{'func name': 'test_all_markers_in_markers_dictionary', 'comments': '', 'stemmed comments': []}"
299,"{'func name': 'test_create_header', 'comments': '', 'stemmed comments': []}"
300,"{'func name': 'test_select', 'comments': '', 'stemmed comments': []}"
301,"{'func name': 'test_movie_path', 'comments': '', 'stemmed comments': []}"
302,"{'func name': 'test_obiszow_mtb_xcm', 'comments': '', 'stemmed comments': []}"
303,"{'func name': 'modify_doc', 'comments': '', 'stemmed comments': []}"
304,"{'func name': 'test_color', 'comments': '', 'stemmed comments': []}"
305,"{'func name': 'test_no_client_server_common', 'comments': 'Basic usage of Bokeh should not result in any client/server code being imported. This test ensures that importing basic modules does not bring in bokeh.client or bokeh.server.\n\n\n', 'stemmed comments': ['ensur', 'thi', 'import', 'client/serv', 'test', 'bokehcli', 'bring', 'modul', 'result', 'bokehserv', 'basic', 'bokeh', 'code', 'usag']}"
306,"{'func name': 'test_no_ipython_common', 'comments': 'Basic usage of Bokeh should not result in any IPython code being imported. This test ensures that importing basic modules does not bring in IPython.\n\n\n', 'stemmed comments': ['ensur', 'thi', 'import', 'test', 'bring', 'modul', 'result', 'ipython', 'basic', 'bokeh', 'code', 'usag']}"
307,"{'func name': 'collect_errors', 'comments': '', 'stemmed comments': []}"
308,"{'func name': 'test_no_tornado_common', 'comments': 'Basic usage of Bokeh should not result in any Selenium code being imported. This test ensures that importing basic modules does not bring in Tornado.\n\n\n', 'stemmed comments': ['ensur', 'thi', 'import', 'tornado', 'test', 'bring', 'modul', 'result', 'basic', 'bokeh', 'code', 'usag', 'selenium']}"
309,"{'func name': 'test_no_tornado_common', 'comments': 'Basic usage of Bokeh should not result in any Tornado code being imported. This test ensures that importing basic modules does not bring in Tornado.\n\n\n', 'stemmed comments': ['ensur', 'thi', 'import', 'tornado', 'test', 'bring', 'modul', 'result', 'basic', 'bokeh', 'code', 'usag']}"
310,"{'func name': 'test_plot', 'comments': '', 'stemmed comments': []}"
311,"{'func name': 'with_script_contents', 'comments': '', 'stemmed comments': []}"
312,"{'func name': 'test__server_url', 'comments': '', 'stemmed comments': []}"
313,"{'func name': 'large_plot', 'comments': '', 'stemmed comments': []}"
314,"{'func name': 'test_data', 'comments': '', 'stemmed comments': []}"
315,"{'func name': 'test_mixed', 'comments': '', 'stemmed comments': []}"
316,"{'func name': 'test_reset_output', 'comments': '', 'stemmed comments': []}"
317,"{'func name': 'test_palettes_dir', 'comments': '', 'stemmed comments': []}"
318,"{'func name': '_make_plot', 'comments': '', 'stemmed comments': []}"
319,"{'func name': 'modify_doc', 'comments': '', 'stemmed comments': []}"
320,"{'func name': 'test_process_document_events_with_buffers_and_use_buffers_false', 'comments': '', 'stemmed comments': []}"
321,"{'func name': 'test_probly', 'comments': '', 'stemmed comments': []}"
322,"{'func name': 'test_elements', 'comments': '', 'stemmed comments': []}"
323,"{'func name': 'test__check_compatible_scale_and_ranges_incompat_factor_scale_and_numeric_range', 'comments': '', 'stemmed comments': []}"
324,"{'func name': '_make_server_plot', 'comments': '', 'stemmed comments': []}"
325,"{'func name': '_make_server_plot', 'comments': '', 'stemmed comments': []}"
326,"{'func name': '_make_server_plot', 'comments': '', 'stemmed comments': []}"
327,"{'func name': 'test_data', 'comments': '', 'stemmed comments': []}"
328,"{'func name': 'test_HasProps_clone', 'comments': '', 'stemmed comments': []}"
329,"{'func name': 'test_python_execution_with_OO', 'comments': 'Running python with -OO will discard docstrings (__doc__ is None) which can cause problems if docstrings are naively formatted.\n\nThis test ensures that the all modules are importable, even with -OO set.\n\nIf you encounter a new problem with docstrings being formatted, try using format_docstring.\n', 'stemmed comments': ['none', 'OO', 'If', 'thi', 'test', 'set', 'tri', 'run', 'use', 'ensur', 'import', 'caus', 'problem', 'discard', 'python', 'naiv', 'even', '__doc__', 'new', 'format_docstr', 'encount', 'modul', 'format', 'docstr']}"
330,"{'func name': 'test_with_context', 'comments': '', 'stemmed comments': []}"
331,"{'func name': '_make_plot', 'comments': '', 'stemmed comments': []}"
332,"{'func name': 'test_creation', 'comments': '', 'stemmed comments': []}"
333,"{'func name': '_make_plot', 'comments': '', 'stemmed comments': []}"
334,"{'func name': 'test_external_js_and_css_resource_ordering', 'comments': '', 'stemmed comments': []}"
335,"{'func name': 'test_geojson', 'comments': '', 'stemmed comments': []}"
336,"{'func name': '_mock_download', 'comments': '', 'stemmed comments': []}"
337,"{'func name': 'test__save_helper', 'comments': '', 'stemmed comments': []}"
338,"{'func name': 'test_sea_surface_temperature', 'comments': '', 'stemmed comments': []}"
339,"{'func name': 'test_run', 'comments': '', 'stemmed comments': []}"
340,"{'func name': 'modify_doc', 'comments': '', 'stemmed comments': []}"
341,"{'func name': 'test_transform_column_source_data_with_buffers', 'comments': '', 'stemmed comments': []}"
342,"{'func name': 'test_auth_module_printed', 'comments': '', 'stemmed comments': []}"
343,"{'func name': 'Test__src_path', 'comments': '', 'stemmed comments': []}"
344,"{'func name': 'test__ioloop_not_forcibly_stopped', 'comments': '', 'stemmed comments': []}"
345,"{'func name': 'test_DEFAULT_SERVER_WEBSOCKET_URL', 'comments': '', 'stemmed comments': []}"
346,"{'func name': 'test_destroy_calls', 'comments': '', 'stemmed comments': []}"
347,"{'func name': 'test', 'comments': '', 'stemmed comments': []}"
348,"{'func name': 'has_cds_data_patches', 'comments': '', 'stemmed comments': []}"
349,"{'func name': 'is_cds_data_streamed', 'comments': '', 'stemmed comments': []}"
350,"{'func name': 'enter_value_in_spinner', 'comments': '', 'stemmed comments': []}"
351,"{'func name': 'test_sprint', 'comments': '', 'stemmed comments': []}"
352,"{'func name': 'test_plot_and_widget', 'comments': '', 'stemmed comments': []}"
353,"{'func name': 'test_curstate', 'comments': '', 'stemmed comments': []}"
354,"{'func name': 'test_data', 'comments': '', 'stemmed comments': []}"
355,"{'func name': 'test_snakify', 'comments': '', 'stemmed comments': []}"
356,"{'func name': 'test_structure', 'comments': '', 'stemmed comments': []}"
357,"{'func name': 'test_base_invoke', 'comments': '', 'stemmed comments': []}"
358,"{'func name': 'test_autoload_template_has_changed', 'comments': 'This is not really a test but a reminder that if you change the autoload_nb_js.js template then you should make sure that insertion of plots into notebooks is working as expected. In particular, this test was created as part of https://github.com/bokeh/bokeh/issues/7125.\n\n\n', 'stemmed comments': ['expect', 'creat', 'thi', 'test', 'autoload_nb_jsj', 'sure', 'plot', 'particular', 'chang', 'remind', 'http', 'part', 'notebook', 'templat', '//githubcom/bokeh/bokeh/issues/7125', 'insert', 'work', 'realli', 'In', 'make']}"
359,"{'func name': 'modify_doc', 'comments': '', 'stemmed comments': []}"
360,"{'func name': 'modify_doc', 'comments': '', 'stemmed comments': []}"
361,"{'func name': '_nie', 'comments': '', 'stemmed comments': []}"
362,"{'func name': 'test_toolbar_box_with_no_children_does_not_raise_a_bokeh_warning', 'comments': '', 'stemmed comments': []}"
363,"{'func name': 'test_log_stats', 'comments': '', 'stemmed comments': []}"
364,"{'func name': 'test_StepInterpolator', 'comments': '', 'stemmed comments': []}"
365,"{'func name': 'test_data', 'comments': '', 'stemmed comments': []}"
366,"{'func name': 'test_data', 'comments': '', 'stemmed comments': []}"
367,"{'func name': 'test_data', 'comments': '', 'stemmed comments': []}"
368,"{'func name': 'test_data', 'comments': '', 'stemmed comments': []}"
369,"{'func name': 'test_us_holidays', 'comments': '', 'stemmed comments': []}"
370,"{'func name': 'test_data', 'comments': '', 'stemmed comments': []}"
371,"{'func name': 'test_data', 'comments': '', 'stemmed comments': []}"
372,"{'func name': 'test_build_single_handler_application_main_py', 'comments': '', 'stemmed comments': []}"
373,"{'func name': 'test_plot', 'comments': '', 'stemmed comments': []}"
374,"{'func name': 'test__shares_exec_prefix', 'comments': '', 'stemmed comments': []}"
375,"{'func name': 'test_match_host', 'comments': '', 'stemmed comments': []}"
376,"{'func name': 'test_silence_remove_warning_that_is_not_in_silencers_is_ok', 'comments': '', 'stemmed comments': []}"
377,"{'func name': 'test_create_chromium_webdriver', 'comments': '', 'stemmed comments': []}"
378,"{'func name': '_make_plot', 'comments': '', 'stemmed comments': []}"
379,"{'func name': 'get_prop_set', 'comments': '', 'stemmed comments': []}"
380,"{'func name': 'test_windows_reserved_filenames', 'comments': 'Certain seemingly innocuous filenames like ""aux.js"" will cause Windows packages to fail spectacularly. This test ensures those reserved names are not present in the codebase.\n\n\n', 'stemmed comments': ['ensur', 'thi', 'packag', 'reserv', 'filenam', 'test', 'window', 'caus', 'fail', 'like', 'name', 'codebas', 'innocu', 'certain', 'present', 'auxj', 'spectacularli', 'seemingli']}"
381,"{'func name': 'test_data', 'comments': '', 'stemmed comments': []}"
382,"{'func name': 'test__SAFELY', 'comments': '', 'stemmed comments': []}"
383,"{'func name': '_make_plot', 'comments': '', 'stemmed comments': []}"
384,"{'func name': '_make_plot', 'comments': '', 'stemmed comments': []}"
385,"{'func name': 'ys', 'comments': '', 'stemmed comments': []}"
386,"{'func name': 'setup', 'comments': '', 'stemmed comments': []}"
387,"{'func name': 'lnglat_to_meters', 'comments': ""Projects the given (longitude, latitude) values into Web Mercator coordinates (meters East of Greenwich and meters North of the Equator).\n\nLongitude and latitude can be provided as scalars, Pandas columns, or Numpy arrays, and will be returned in the same form.\n\nLists or tuples will be converted to Numpy arrays.\n\nExamples: easting, northing = lnglat_to_meters(-74,40.71)\n\neasting, northing = lnglat_to_meters(np.array([-74]),np.array([40.71]))\n\ndf=pandas.DataFrame(dict(longitude=np.array([-74]),latitude=np.array([40.71]))) df.loc[:, 'longitude'], df.loc[:, 'latitude'] = lnglat_to_meters(df.longitude,df.latitude)\n"", 'stemmed comments': ['[', 'web', 'numpi', '=', 'given', 'east', 'exampl', 'meter', '74', ']', 'form', 'scalar', '4071', 'dfloc', 'project', 'tupl', 'north', 'array', 'equat', 'list', 'dflatitud', 'df=pandasdatafram', 'dict', '744071', 'latitud', 'coordin', 'column', 'dflongitud', 'latitude=nparray', 'return', 'lnglat_to_met', 'panda', 'longitude=nparray', 'valu', 'longitud', 'mercat', 'nparray', 'greenwich', 'convert', 'provid']}"
388,"{'func name': 'make_plot', 'comments': '', 'stemmed comments': []}"
389,"{'func name': '_get_random_string', 'comments': 'Return a securely generated random string. With the a-z, A-Z, 0-9 character set: Length 12 is a 71-bit value. log_2((26+26+10)^12) =~ 71 Length 44 is a 261-bit value. log_2((26+26+10)^44) = 261\n\n\n', 'stemmed comments': ['length', '=', 'string', 'charact', '09', '261bit', 'set', '^44', 'gener', 'secur', 'az', '^12', 'AZ', '261', '262610', '=~', 'with', 'return', 'log_2', '12', 'valu', 'random', '71', '71bit', '44']}"
390,"{'func name': 'make_plot', 'comments': '', 'stemmed comments': []}"
391,"{'func name': 'mkplot', 'comments': '', 'stemmed comments': []}"
392,"{'func name': 'mkgrid', 'comments': '', 'stemmed comments': []}"
393,"{'func name': 'mkplot', 'comments': '', 'stemmed comments': []}"
394,"{'func name': 'datetime', 'comments': '', 'stemmed comments': []}"
395,"{'func name': 'bkapp', 'comments': '', 'stemmed comments': []}"
396,"{'func name': 'altitude_profile', 'comments': '', 'stemmed comments': []}"
397,"{'func name': 'transform', 'comments': 'Create a ``DataSpec`` dict that applies an arbitrary client-side ``Transform`` to a ``ColumnDataSource`` column.\n\n\n##### Args\n* **field_name (str) **: A field name to configure ``DataSpec`` with\n\n* **transform (Transform) **: A transforms to apply to that field\n\n##### Returns\n', 'stemmed comments': ['clientsid', 'columndatasourc', 'arbitrari', 'transform', 'column', 'A', 'dataspec', 'field_nam', 'configur', 'creat', 'field', 'appli', 'dict', 'arg', 'str', 'return', 'name']}"
398,"{'func name': 'task', 'comments': '\n\n\n', 'stemmed comments': []}"
399,"{'func name': '_read_data', 'comments': '\n\n\n', 'stemmed comments': []}"
400,"{'func name': '_read_data', 'comments': '\n\n\n', 'stemmed comments': []}"
401,"{'func name': '_read_data', 'comments': '\n\n\n', 'stemmed comments': []}"
402,"{'func name': '_read_data', 'comments': '\n\n\n', 'stemmed comments': []}"
403,"{'func name': '_read_data', 'comments': '\n\n\n', 'stemmed comments': []}"
404,"{'func name': 'skip_for_prerelease', 'comments': '', 'stemmed comments': []}"
405,"{'func name': 'websocket_url_for_server_url', 'comments': 'Convert an ``http(s)`` URL for a Bokeh server websocket endpoint into the appropriate ``ws(s)`` URL\n\n\n##### Args\n* **url (str)**: An ``http(s)`` URL\n\n##### Returns\n* **str**: The corresponding ``ws(s)`` URL ending in ``/ws``\n\n', 'stemmed comments': ['url', 'ws', 'the', 'http', 'websocket', 'end', '/w', 'str', 'server', 'bokeh', 'arg', 'endpoint', 'correspond', 'return', 'convert', 'An', 'appropri']}"
406,"{'func name': 'references_json', 'comments': 'Given a list of all models in a graph, return JSON representing them and their properties.\n\n\n##### Args\n* **references (seq[Model]) **: A list of models to convert to JSON\n\n##### Returns\n', 'stemmed comments': ['convert', 'model', 'seq', 'properti', '[', 'A', 'refer', 'graph', 'list', 'given', 'repres', ']', 'arg', 'return', 'json']}"
407,"{'func name': 'set_single_plot_width_height', 'comments': '', 'stemmed comments': []}"
408,"{'func name': 'match_host', 'comments': ""Match a host string against a pattern\n\n\n##### Args\n##### Returns\n* **ples**: \n\n* **>>> match_host('192.168.0.1**: 80', '192.168.0.1\n\n* **>>> match_host('alice**: 8080', '*\n\n* **>>> match_host('alice', '***: *')\n\n"", 'stemmed comments': ['match_host', 'host', '80', '8080', 'ple', 'pattern', 'string', 'alic', 'arg', 'match', 'return', '19216801', '>']}"
409,"{'func name': '_shares_exec_prefix', 'comments': 'Whether a give base directory is on the system exex prefix\n\n\n', 'stemmed comments': ['give', 'system', 'base', 'directori', 'prefix', 'exex', 'whether']}"
410,"{'func name': 'get_sphinx_resources', 'comments': '', 'stemmed comments': []}"
411,"{'func name': '_unset_temp_theme', 'comments': '', 'stemmed comments': []}"
412,"{'func name': 'without_property_validation', 'comments': 'Turn off property validation during update callbacks\n\nExample: .. code-block:: python\n\n@without_property_validation def update(attr, old, new): # do things without validation\n\nSee Also: :class:`~bokeh.core.properties.validate`: context mangager for more fine-grained control\n', 'stemmed comments': ['updat', 'codeblock', 'exampl', 'turn', 'class', 'also', 'callback', 'valid', 'old', 'thing', 'properti', 'control', 'context', 'attr', '@', 'without', 'without_property_valid', 'python', 'def', 'new', 'finegrain', '~bokehcorepropertiesvalid', 'see', 'mangag']}"
413,"{'func name': 'streamlines', 'comments': 'Return streamlines of a vector flow.\n\n* x and y are 1d arrays defining an *evenly spaced* grid. * u and v are 2d arrays (shape [y,x]) giving velocities. * density controls the closeness of the streamlines.\n', 'stemmed comments': ['shape', '[', 'evenli', ']', 'densiti', 'vector', '2d', 'array', 'control', 'give', 'veloc', 'space', 'grid', 'u', 'return', '1d', 'v', 'close', 'streamlin', 'defin', 'flow', 'x']}"
414,"{'func name': '_base_version_helper', 'comments': '', 'stemmed comments': []}"
415,"{'func name': 'scan_setup_py', 'comments': ""Validate the contents of setup.py against Versioneer's expectations.\n\n\n"", 'stemmed comments': ['valid', 's', 'expect', 'content', 'version', 'setuppi']}"
416,"{'func name': 'sea_surface_custom_uri', 'comments': '', 'stemmed comments': []}"
417,"{'func name': '_try_create_chromium_webdriver', 'comments': '', 'stemmed comments': []}"
418,"{'func name': 'mk_tab', 'comments': '', 'stemmed comments': []}"
419,"{'func name': 'intro', 'comments': '', 'stemmed comments': []}"
420,"{'func name': 'notify_owner', 'comments': 'A decorator for mutating methods of property container classes that notifies owners of the property container about mutating changes.\n\n\n##### Args\n* **func (callable) **: the container method to wrap in a notification\n\n##### Returns\n* **ples**: \n\n* **A ``__setitem__`` could be wrapped like this**: \n\n* **.. code-block**: \n\n', 'stemmed comments': ['method', 'codeblock', 'func', 'class', 'decor', 'properti', 'notifi', 'chang', 'notif', 'A', 'callabl', 'arg', 'wrap', 'ple', 'return', 'mutat', '__setitem__', 'owner', 'could', 'like', 'contain']}"
421,"{'func name': 'wrap_in_script_tag', 'comments': '\n\n\n', 'stemmed comments': []}"
