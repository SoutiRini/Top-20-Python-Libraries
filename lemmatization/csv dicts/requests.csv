0,"{'func name': 'unicode_is_ascii', 'comments': 'Determine if unicode string only contains ASCII characters.\n\nparam str u_string: unicode string to check. Must be unicode and not Python 2 `str`. :rtype: bool\n', 'stemmed comments': ['param', 'determin', 'bool', 'str', 'contain', 'rtype', 'u_str', 'check', 'ascii', 'string', 'must', '2', 'charact', 'python', 'unicod']}"
1,"{'func name': 'delete', 'comments': 'Sends a DELETE request.\n\nparam url: URL for the new :class:`Request` object. :param \\*\\*kwargs: Optional arguments that ``request`` takes. :return: :class:`Response <Response>` object :rtype: requests.Response\n', 'stemmed comments': ['param', 'delet', 'rtype', 'requestsrespons', '>', 'url', 'request', 'return', 'send', 'respons', 'kwarg', 'take', 'new', '\\', 'argument', 'object', '<', 'class', 'option']}"
2,"{'func name': '_basic_auth_str', 'comments': 'Returns a Basic Auth string.\n\n\n', 'stemmed comments': ['auth', 'basic', 'string', 'return']}"
3,"{'func name': 'httpbin_secure', 'comments': '', 'stemmed comments': []}"
4,"{'func name': 'merge_cookies', 'comments': 'Add cookies to cookiejar and returns a merged CookieJar.\n\nparam cookiejar: CookieJar object to add the cookies to. :param cookies: Dictionary or CookieJar object to be added. :rtype: CookieJar\n', 'stemmed comments': ['param', 'merg', 'return', 'ad', 'rtype', 'cookiejar', 'dictionari', 'add', 'object', 'cooki']}"
5,"{'func name': 'main', 'comments': 'Pretty-print the bug information as JSON.\n\n\n', 'stemmed comments': ['bug', 'prettyprint', 'json', 'inform']}"
6,"{'func name': 'dispatch_hook', 'comments': 'Dispatches a hook dictionary on a given piece of data.\n\n\n', 'stemmed comments': ['given', 'piec', 'dictionari', 'dispatch', 'hook', 'data']}"
7,"{'func name': 'consume_socket_content', 'comments': '', 'stemmed comments': []}"
8,"{'func name': 'session', 'comments': 'Returns a :class:`Session` for context-management.\n\n.. deprecated:: 1.0.0\n\nThis method has been deprecated since version 1.0.0 and is only kept for backwards compatibility. New code should use :class:`~requests.sessions.Session` to create a session. This may be removed at a future date.\n\n:rtype: Session\n', 'stemmed comments': ['version', 'kept', 'rtype', 'backward', 'return', 'thi', 'may', 'sinc', 'code', 'use', '100', 'new', 'method', 'date', 'contextmanag', 'session', 'futur', 'deprec', 'remov', 'compat', '~requestssessionssess', 'creat', 'class']}"
9,"{'func name': '_init', 'comments': '', 'stemmed comments': []}"
10,"{'func name': 'test_idna_with_version_attribute', 'comments': ""Verify we're actually setting idna version when it should be available.\n\n\n"", 'stemmed comments': ['verifi', 'version', 'avail', 'idna', 'actual', 'set', 're']}"
11,"{'func name': 'test_default_hooks', 'comments': '', 'stemmed comments': []}"
12,"{'func name': 'test_fragment_update_on_redirect', 'comments': ""Verify we only append previous fragment if one doesn't exist on new location. If a new fragment is encountered in a Location header, it should be added to all subsequent requests.\n\n\n"", 'stemmed comments': ['exist', 'verifi', 'locat', 'previou', 'ad', 'encount', 'append', 'new', 'header', 'If', 'subsequ', 'request', 'nt', 'fragment', 'one']}"
13,"{'func name': 'test_can_access_chardet_attribute', 'comments': '', 'stemmed comments': []}"
14,"{'func name': 'test_urllib3_pool_connection_closed', 'comments': '', 'stemmed comments': []}"
15,"{'func name': 'test_set_environ_raises_exception', 'comments': 'Tests set_environ will raise exceptions in context when the value parameter is None.\n\n\n', 'stemmed comments': ['valu', 'set_environ', 'paramet', 'none', 'except', 'rais', 'context', 'test']}"
16,"{'func name': 'rewind_body', 'comments': 'Move file pointer back to its recorded starting position so it can be read again on redirect.\n\n\n', 'stemmed comments': ['pointer', 'move', 'start', 'read', 'posit', 'record', 'file', 'back', 'redirect']}"
17,"{'func name': 'override_environ', 'comments': '', 'stemmed comments': []}"
