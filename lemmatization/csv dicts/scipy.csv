0,"{'func name': 'zero_ext', 'comments': 'Zero padding at the boundaries of an array\n\nGenerate a new ndarray that is a zero-padded extension of `x` along an axis.\n\nParameters ---------- x : ndarray The array to be extended. n : int The number of elements by which to extend `x` at each end of the axis. axis : int, optional The axis along which to extend `x`. Default is -1.\n\nExamples -------- >>> from scipy.signal._arraytools import zero_ext >>> a = np.array([[1, 2, 3, 4, 5], [0, 1, 4, 9, 16]]) >>> zero_ext(a, 2) array([[ 0,\n\n0,\n\n1,\n\n2,\n\n3,\n\n4,\n\n5,\n\n0,\n\n0], [ 0,\n\n0,\n\n0,\n\n1,\n\n4,\n\n9, 16,\n\n0,\n\n0]])\n', 'stemmed comments': ['option', 'default', '>', 'array', 'ndarray', 'number', 'along', 'the', 'end', 'exampl', 'new', 'paramet', '5', '2', 'gener', '16', 'zeropad', '3', '4', '[', '1', 'n', 'scipysignal_arraytool', 'zero', 'axi', ']', 'int', 'element', '9', 'extens', 'x', 'nparray', '0', 'zero_ext', 'boundari', 'extend', '=', 'pad', 'import']}"
1,"{'func name': 'wrap_single_convertor', 'comments': 'Wraps a ``__ua_convert__`` defined for a single element to all elements. If any of them return ``NotImplemented``, the operation is assumed to be undefined.\n\nAccepts a signature of (value, type, coerce).\n', 'stemmed comments': ['signatur', 'defin', 'wrap', 'assum', 'oper', 'undefin', 'valu', 'notimpl', 'type', 'return', 'If', 'accept', 'singl', 'coerc', '__ua_convert__', 'element']}"
2,"{'func name': 'skip_backend', 'comments': ""Context manager to skip a backend within a fixed scope.\n\nWithin the context of a ``with`` statement, the given backend will not be called. This covers backends registered both locally and globally. Upon exit, the backend will again be considered.\n\nParameters ---------- backend: {object, 'scipy'} The backend to skip. Can either be a ``str`` containing the name of a known backend {'scipy'} or an object that implements the uarray protocol.\n\nExamples -------- >>> import scipy.fft as fft >>> fft.fft([1])\n\n# Calls default SciPy backend array([1.+0.j]) >>> with fft.skip_backend('scipy'):\n\n# We explicitly skip the SciPy backend ...\n\n\n\n fft.fft([1])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n # leaving no implementation available Traceback (most recent call last): ... BackendNotImplementedError: No selected backends had an implementation ...\n"", 'stemmed comments': ['fix', 'global', 'scipi', '>', 'consid', 'given', 'skip', 'manag', 'known', 'protocol', 'default', 'array', '10j', 'call', 'thi', 'cover', 'object', 'We', 'the', 'exampl', 'explicitli', 'traceback', 'paramet', 'backendnotimplementederror', '}', 'can', 'avail', 'context', 'regist', 'name', 'exit', 'scipyfft', 'within', 'contain', 'recent', 'str', '[', 'backend', '1', 'No', 'fft', ']', 'statement', 'last', '{', 'uarray', 'upon', 'implement', 'local', 'fftskip_backend', 'fftfft', 'scope', 'leav', 'select', 'either', 'import']}"
3,"{'func name': 'zeta', 'comments': 'Riemann or Hurwitz zeta function.\n\nParameters ---------- x : array_like of float Input data, must be real q : array_like of float, optional Input data, must be real.\n\nDefaults to Riemann zeta. out : ndarray, optional Output array for the computed values.\n##### Returns\n* **out **: array_like\n    Values of zeta(x).\n\n* **.. math**: \n\n* **.. [dlmf] NIST, Digital Library of Mathematical Functions,\n    https**: //dlmf.nist.gov/25.11#i\n\n* **Some specific values**: \n\n* **Relation to the `polygamma` function**: \n\n', 'stemmed comments': ['option', 'default', 'ndarray', 'array', 'function', 'dlmf', 'mathemat', 'real', 'output', 'librari', 'return', 'http', 'float', 'paramet', 'digit', 'specif', 'riemann', 'nist', 'some', 'hurwitz', '[', 'must', 'comput', ']', 'polygamma', 'math', 'zeta', 'q', 'data', 'x', 'valu', 'input', 'array_lik', 'relat', '//dlmfnistgov/2511']}"
4,"{'func name': 'ihfft2', 'comments': 'Compute the 2-D inverse FFT of a real spectrum.\n\nParameters ---------- x : array_like The input array s : sequence of ints, optional Shape of the real input to the inverse FFT. axes : sequence of ints, optional The axes over which to compute the inverse fft. Default is the last two axes. norm : {None, ""ortho""}, optional Normalization mode (see `fft`). Default is None. overwrite_x : bool, optional If True, the contents of `x` can be destroyed; the default is False. See :func:`fft` for more details. workers : int, optional Maximum number of workers to use for parallel computation. If negative, the value wraps around from ``os.cpu_count()``. See :func:`~scipy.fft.fft` for more details. plan: object, optional This argument is reserved for passing in a precomputed plan provided by downstream FFT vendors. It is currently not used in SciPy.\n\n.. versionadded:: 1.5.0\n##### Returns\n* **out **: ndarray\n    The result of the inverse real 2-D FFT.\n\n* **ihfftn **: Compute the inverse of the N-D FFT of Hermitian input.\n\n', 'stemmed comments': ['option', 'default', 'scipi', 'array', 'downstream', 'ndarray', 'normal', 'mode', 'func', 'number', 'ND', 'bool', 'thi', 'If', 'real', 'object', '150', 'return', 'destroy', 'the', 'axe', 'two', 'reserv', 'It', 'invers', 'paramet', 'provid', 'around', 'result', '}', 'true', 'none', 'fals', '~scipyfftfft', 'oscpu_count', 'maximum', 'ortho', 'neg', 'vendor', 'content', 'wrap', 'overwrite_x', 'ihfftn', 'fft', 'comput', 'precomput', 'last', 'current', 'sequenc', '2D', 'int', 'shape', '{', 'plan', 'x', 'valu', 'see', 'norm', 'input', 'parallel', 'pass', 'detail', 'versionad', 'spectrum', 'use', 'hermitian', 'array_lik', ';', 'argument', 'worker']}"
5,"{'func name': '_test_func2d', 'comments': '', 'stemmed comments': []}"
6,"{'func name': '_bin_numbers', 'comments': 'Compute the bin number each sample falls into, in each dimension\n\n\n', 'stemmed comments': ['number', 'dimens', 'fall', 'comput', 'bin', 'sampl']}"
7,"{'func name': 'make_lsq_spline', 'comments': 'Compute the (coefficients of) an LSQ B-spline.\n\nThe result is a linear combination\n\n.. math::\n\nS(x) = \\sum_j c_j B_j(x; t)\n\nof the B-spline basis elements, :math:`B_j(x; t)`, which minimizes\n\n.. math::\n\n\\sum_{j} \\left( w_j \\times (S(x_j)\n\n- y_j) \\right)^2\n\nParameters ---------- x : array_like, shape (m,) Abscissas. y : array_like, shape (m, ...) Ordinates. t : array_like, shape (n + k + 1,). Knots. Knots and data points must satisfy Schoenberg-Whitney conditions. k : int, optional B-spline degree. Default is cubic, k=3. w : array_like, shape (n,), optional Weights for spline fitting. Must be positive. If ``None``, then weights are all equal. Default is ``None``. axis : int, optional Interpolation axis. Default is zero. check_finite : bool, optional Whether to check that the input arrays contain only finite numbers. Disabling may give a performance gain, but may result in problems (crashes, non-termination) if the inputs do contain infinities or NaNs. Default is True.\n##### Returns\n* **b **: a BSpline object of the degree `k` with knots `t`.\n\n* **Generate some noisy data**: \n\n* **Here we make the knot vector (k+1)-regular by adding boundary knots**: \n\n* **set of data**: \n\n* **Plot both**: \n\n* ****NaN handling****: If the input arrays contain ``nan`` values, the result is\n\n* **``nan``. A workaround is to use zero weights for not-a-number data points**: \n\n* **BSpline **: base class representing the B-spline objects\n\n* **make_interp_spline **: a similar factory function for interpolating splines\n\n* **LSQUnivariateSpline **: a FITPACK-based spline fitting routine\n\n* **splrep **: a FITPACK-based fitting routine\n\n', 'stemmed comments': ['default', 'function', 'condit', 'number', 'j', 'bspline', 'linear', 'paramet', '\\sum_', 'none', 'point', 'spline', 'minim', 'ad', '\\left', 'n', 'must', 'noisi', 'here', 'weight', 'int', '{', 'element', 'shape', 'basi', '=', 'finit', 'make_interp_splin', 'plot', 'k', 'lsq', 'gain', 'object', 'coeffici', 'abscissa', '}', 'x_j', 'handl', 'w', 'gener', 'crash', 'check_finit', 'whether', '\\time', 'c_j', 'x', 'nontermin', 'vector', 'valu', 'input', 'y_j', 'ordin', 'A', 'option', 'nan', 'array', 'repres', 'If', 'k1', 'cubic', 'check', '^2', 'zero', 'routin', 'comput', 'axi', 'give', 'fitpackbas', 'data', 'satisfi', '\\sum_j', 'make', 'may', 'k=3', 'use', 'base', 'class', ';', 'b', 'similar', 'interpol', 'set', 'degre', '\\right', 'b_j', 'bool', 'perform', 'disabl', 'return', 'the', 'result', 'splrep', 'true', 'lsqunivariatesplin', 'w_j', 'knot', 'factori', 'regular', 'contain', 'equal', 'notanumb', '1', 'math', 'schoenbergwhitney', 'posit', 'workaround', 'boundari', 'infin', 'S', 'fit', 'array_lik', 'combin', 'problem']}"
8,"{'func name': '_make_tuple_bunch', 'comments': 'Create a namedtuple-like class with additional attributes.\n\nThis function creates a subclass of tuple that acts like a namedtuple and that has additional attributes.\n\nThe additional attributes are listed in `extra_field_names`.\n\nThe values assigned to these attributes are not part of the tuple.\n\nThe reason this function exists is to allow functions in SciPy that currently return a tuple or a namedtuple to returned objects that have additional attributes, while maintaining backwards compatibility.\n\nThis should only be used to enhance *existing* functions in SciPy. New functions are free to create objects as return values without having to maintain backwards compatibility with an old tuple or namedtuple return value.\n\nParameters ---------- typename : str The name of the type. field_names : list of str List of names of the values to be stored in the tuple. These names will also be attributes of instances, so the values in the tuple can be accessed by indexing or as attributes.\n\nAt least one name is required.\n\nSee the Notes for additional restrictions. extra_field_names : list of str, optional List of names of values that will be stored as attributes of the object.\n\nSee the notes for additional restrictions.\n##### Returns\n* **cls **: type\n    The new class.\n\n* **and `extra_field_names`**: \n\n* **names `x` and `y`) that will also have the attributes `w` and `beta`**: \n\n* **`result1` acts like a tuple of length 2**: \n\n* **>>> result1[**: ]\n\n* **attributes**: \n\n', 'stemmed comments': ['scipi', 'these', 'access', 'option', '>', 'function', 'exist', 'attribut', 'backward', 'thi', 'object', 'return', 'one', 'subclass', 'the', 'tupl', 'part', 'requir', 'typenam', 'note', 'instanc', 'new', 'old', 'paramet', 'least', '2', 'w', 'namedtupl', 'compat', 'name', 'store', 'list', 'length', 'str', 'restrict', '[', 'type', 'like', 'field_nam', 'reason', 'allow', 'enhanc', 'act', 'also', ']', 'free', 'creat', 'current', 'maintain', 'assign', 'x', 'without', 'valu', 'cl', 'see', 'namedtuplelik', 'extra_field_nam', 'beta', 'addit', 'use', 'class', 'index', 'result1', 'At']}"
9,"{'func name': 'solve_bvp', 'comments': ""Solve a boundary value problem for a system of ODEs.\n\nThis function numerically solves a first order system of ODEs subject to two-point boundary conditions::\n\ndy / dx = f(x, y, p) + S * y / (x\n\n- a), a <= x <= b bc(y(a), y(b), p) = 0\n\nHere x is a 1-D independent variable, y(x) is an N-D vector-valued function and p is a k-D vector of unknown parameters which is to be found along with y(x). For the problem to be determined, there must be n + k boundary conditions, i.e., bc must be an (n + k)-D function.\n\nThe last singular term on the right-hand side of the system is optional. It is defined by an n-by-n matrix S, such that the solution must satisfy S y(a) = 0. This condition will be forced during iterations, so it must not contradict boundary conditions. See [2]_ for the explanation how this term is handled when solving BVPs numerically.\n\nProblems in a complex domain can be solved as well. In this case, y and p are considered to be complex, and f and bc are assumed to be complex-valued functions, but x stays real. Note that f and bc must be complex differentiable (satisfy Cauchy-Riemann equations [4]_), otherwise you should rewrite your problem for real and imaginary parts separately. To solve a problem in a complex domain, pass an initial guess for y with a complex data type (see below).\n\nParameters ---------- fun : callable Right-hand side of the system. The calling signature is ``fun(x, y)``, or ``fun(x, y, p)`` if parameters are present. All arguments are ndarray: ``x`` with shape (m,), ``y`` with shape (n, m), meaning that ``y[:, i]`` corresponds to ``x[i]``, and ``p`` with shape (k,). The return value must be an array with shape (n, m) and with the same layout as ``y``. bc : callable Function evaluating residuals of the boundary conditions. The calling signature is ``bc(ya, yb)``, or ``bc(ya, yb, p)`` if parameters are present. All arguments are ndarray: ``ya`` and ``yb`` with shape (n,), and ``p`` with shape (k,). The return value must be an array with shape (n + k,). x : array_like, shape (m,) Initial mesh. Must be a strictly increasing sequence of real numbers with ``x[0]=a`` and ``x[-1]=b``. y : array_like, shape (n, m) Initial guess for the function values at the mesh nodes, ith column corresponds to ``x[i]``. For problems in a complex domain pass `y` with a complex data type (even if the initial guess is purely real). p : array_like with shape (k,) or None, optional Initial guess for the unknown parameters. If None (default), it is assumed that the problem doesn't depend on any parameters. S : array_like with shape (n, n) or None Matrix defining the singular term. If None (default), the problem is solved without the singular term. fun_jac : callable or None, optional Function computing derivatives of f with respect to y and p. The calling signature is ``fun_jac(x, y)``, or ``fun_jac(x, y, p)`` if parameters are present. The return must contain 1 or 2 elements in the following order:\n\n* df_dy : array_like with shape (n, n, m), where an element (i, j, q) equals to d f_i(x_q, y_q, p) / d (y_q)_j. * df_dp : array_like with shape (n, k, m), where an element (i, j, q) equals to d f_i(x_q, y_q, p) / d p_j.\n\nHere q numbers nodes at which x and y are defined, whereas i and j number vector components. If the problem is solved without unknown parameters, df_dp should not be returned.\n\nIf `fun_jac` is None (default), the derivatives will be estimated by the forward finite differences. bc_jac : callable or None, optional Function computing derivatives of bc with respect to ya, yb, and p. The calling signature is ``bc_jac(ya, yb)``, or ``bc_jac(ya, yb, p)`` if parameters are present. The return must contain 2 or 3 elements in the following order:\n\n* dbc_dya : array_like with shape (n, n), where an element (i, j) equals to d bc_i(ya, yb, p) / d ya_j. * dbc_dyb : array_like with shape (n, n), where an element (i, j) equals to d bc_i(ya, yb, p) / d yb_j. * dbc_dp : array_like with shape (n, k), where an element (i, j) equals to d bc_i(ya, yb, p) / d p_j.\n\nIf the problem is solved without unknown parameters, dbc_dp should not be returned.\n\nIf `bc_jac` is None (default), the derivatives will be estimated by the forward finite differences. tol : float, optional Desired tolerance of the solution. If we define ``r = y'\n\n- f(x, y)``, where y is the found solution, then the solver tries to achieve on each mesh interval ``norm(r / (1 + abs(f)) < tol``, where ``norm`` is estimated in a root mean squared sense (using a numerical quadrature formula). Default is 1e-3. max_nodes : int, optional Maximum allowed number of the mesh nodes. If exceeded, the algorithm terminates. Default is 1000. verbose : {0, 1, 2}, optional Level of algorithm's verbosity:\n\n* 0 (default) : work silently. * 1 : display a termination report. * 2 : display progress during iterations. bc_tol : float, optional Desired absolute tolerance for the boundary condition residuals: `bc` value should satisfy ``abs(bc) < bc_tol`` component-wise. Equals to `tol` by default. Up to 10 iterations are allowed to achieve this tolerance.\n##### Returns\n* **Bunch object with the following fields defined**: \n\n* **sol **: PPoly\n    Found solution for y as `scipy.interpolate.PPoly` instance, a C1\n    continuous cubic spline.\n\n* **p **: ndarray or None, shape (k,)\n    Found parameters. None, if the parameters were not present in the\n    problem.\n\n* **x **: ndarray, shape (m,)\n    Nodes of the final mesh.\n\n* **y **: ndarray, shape (n, m)\n    Solution values at the mesh nodes.\n\n* **yp **: ndarray, shape (n, m)\n    Solution derivatives at the mesh nodes.\n\n* **rms_residuals **: ndarray, shape (m - 1,)\n    RMS values of the relative residuals over each mesh interval (see the\n    description of `tol` parameter).\n\n* **niter **: int\n    Number of completed iterations.\n\n* **status **: int\n    Reason for algorithm termination\n\n* **message **: string\n    Verbal description of the termination reason.\n\n* **success **: bool\n    True if the algorithm converged to the desired accuracy (``status=0``).\n\n* **.. versionadded**: \n\n* **.. [4] `Cauchy-Riemann equations\n        <https**: //en.wikipedia.org/wiki/Cauchy-Riemann_equations>`_ on\n        Wikipedia.\n\n* **In the first example, we solve Bratu's problem**: \n\n* **right-hand side evaluation**: \n\n* **>>> def fun(x, y)**: \n\n* **Implement evaluation of the boundary condition residuals**: \n\n* **>>> def bc(ya, yb)**: \n\n* **Define the initial mesh with 5 nodes**: \n\n* **In the second example, we solve a simple Sturm-Liouville problem**: \n\n* **A = 1 we add a boundary condition**: \n\n* **>>> def fun(x, y, p)**: \n\n* **Implement the boundary conditions**: \n\n* **>>> def bc(ya, yb, p)**: \n\n* **sin(2 * pi * x)**: \n\n* **We see that the found k is approximately correct**: \n\n* **And, finally, plot the solution to see the anticipated sinusoid**: \n\n"", 'stemmed comments': ['default', '>', 'consid', 'function', 'condit', 'contradict', 'rewrit', 'number', 'quadratur', 'final', 'call', 'j', 'string', 'nt', 'bvp', 'variabl', 'defin', 'strictli', 'ith', 'verbos', 'wikipedia', 'ya', 'assum', 'It', 'paramet', 'desir', 'differenti', 'nbyn', '2', 'none', 'for', 'simpl', 'absolut', 'bc', 'spline', 'residu', 'dbc_dp', 'p', 'type', 'must', 'n', 'here', 'wherea', 'achiev', 'subject', '/', 'last', '_j', 'differ', 'rel', 'int', '{', 'element', 'cauchyriemann', 'shape', '1e3', 'verbal', 'In', 'To', '=', 'norm', 'level', 'term', 'finit', 'messag', 'side', 'twopoint', 'accuraci', 'sin', 'argument', 'unknown', 'initi', 'D', 'fun_jac', 'plot', 'mean', 'order', 'k', 'thi', 'and', 'dbc_dyb', 'object', 'status=0', 'Up', 'progress', 'formula', 'note', 'exampl', 'float', 'array_lik', 'first', 'r', 'y', 'handl', '}', 'niter', 'evalu', 'domain', 'yb', '3', 'imaginari', 'callabl', 'even', 'depend', 'work', 'y_q', 'allow', 'display', 'q', 'x', 'guess', 'valu', '0', 'vector', 'righthand', 'bc_i', 'df_di', 'pass', 'implement', 'pi', 'numer', 'compon', '//enwikipediaorg/wiki/cauchyriemann_equ', 'toler', 'fun', 'A', 'p_j', 'mesh', 'descript', 'ode', 'report', 'C1', 'option', 'ND', 'tol', 'ndarray', 'array', 'forc', 'solver', 'We', 'along', 'If', 'real', 'http', 'f_i', 'explan', 'ab', 'squar', 'bunch', 'instanc', 's', 'node', 'exceed', 'determin', '5', 'solut', 'max_nod', 'cubic', 'case', 'componentwis', 'column', 'maximum', 'add', 'signatur', 'silent', 'anticip', '4', 'present', 'interv', '1000', 'sens', 'well', 'increas', 'termin', 'converg', 'sturmliouvil', 'bc_jac', 'reason', 'comput', 'deriv', 'success', 'sinusoid', 'second', 'f', 'data', '10', 'satisfi', 'layout', 'rm', 'without', 'yb_j', 'complet', 'found', 'x_q', 'use', 'complex', 'b', 'kD', 'singular', 'equat', 'rms_residu', 'vectorvalu', 'complexvalu', 'correspond', 'system', 'dbc_dya', 'bool', 'return', 'statu', 'the', 'stay', 'part', 'approxim', 'root', 'forward', 'scipyinterpolateppoli', 'respect', 'ppoli', 'bc_tol', 'independ', 'true', 'dx', 'pure', 'contain', 'def', 'equal', 'df_dp', '[', 'continu', 'all', '1', '=a', 'ie', ']', 'otherwis', 'ya_j', 'dy', 'bratu', 'estim', 'sequenc', 'sol', 'algorithm', 'separ', 'field', '_', 'correct', 'see', 'boundari', 'tri', 'S', 'follow', '=b', 'versionad', 'yp', '<', 'iter', '1D', 'matrix', 'solv', 'problem']}"
10,"{'func name': '_get_cffi_data', 'comments': '', 'stemmed comments': []}"
11,"{'func name': 'old_constraint_to_new', 'comments': 'Converts old-style constraint dictionaries to new-style constraint objects.\n\n\n', 'stemmed comments': ['newstyl', 'dictionari', 'oldstyl', 'constraint', 'convert', 'object']}"
12,"{'func name': '_argus_phi', 'comments': 'Utility function for the argus distribution used in the CDF and norm of the Argus Funktion\n\n\n', 'stemmed comments': ['function', 'norm', 'distribut', 'cdf', 'use', 'argu', 'util', 'funktion']}"
13,"{'func name': 'pchip_interpolate', 'comments': ""Convenience function for pchip interpolation.\n\nxi and yi are arrays of values used to approximate some function f, with ``yi = f(xi)``. The interpolant uses monotonic cubic splines to find the value of new points x and the derivatives there.\n\nSee `scipy.interpolate.PchipInterpolator` for details.\n\nParameters ---------- xi : array_like A sorted list of x-coordinates, of length N. yi :\n\narray_like A 1-D array of real values. `yi`'s length along the interpolation axis must be equal to the length of `xi`. If N-D array, use axis parameter to select correct axis. x : scalar or array_like Of length M. der : int or list, optional Derivatives to extract. The 0th derivative can be included to return the function value. axis : int, optional Axis in the yi array corresponding to the x-coordinate values.\n\nSee Also -------- PchipInterpolator : PCHIP 1-D monotonic cubic interpolator.\n##### Returns\n* **y **: scalar or array_like\n    The result, of length R or length M or M by R,\n\n* **We can interpolate 2D observed data using pchip interpolation**: \n\n"", 'stemmed comments': ['interpol', 'option', 'N', 'ND', 'array', 'We', 'function', 'extract', '0th', 'correspond', 'along', 'scalar', 'If', 'real', 'return', 'M', 'the', 'approxim', 'monoton', 'find', 'scipyinterpolatepchipinterpol', 's', 'result', 'new', 'paramet', 'pchipinterpol', 'cubic', 'pchip', 'point', 'der', 'observ', 'spline', 'xi', 'length', 'list', 'equal', 'must', 'yi', 'axi', 'deriv', 'also', 'R', 'f', 'Of', 'int', '2D', 'data', 'x', 'correct', 'valu', 'conveni', 'see', '=', 'includ', 'detail', 'xcoordin', 'use', 'A', '1D', 'select', 'array_lik', 'sort']}"
14,"{'func name': 'sigs_from_dir', 'comments': '', 'stemmed comments': []}"
15,"{'func name': 'cossin', 'comments': ""Compute the cosine-sine (CS) decomposition of an orthogonal/unitary matrix.\n\nX is an ``(m, m)`` orthogonal/unitary matrix, partitioned as the following where upper left block has the shape of ``(p, q)``::\n\n┌\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n ┐ │ I\n\n0\n\n0 │ 0\n\n0\n\n0 │ ┌\n\n\n\n\n\n\n\n\n\n ┐\n\n ┌\n\n\n\n\n\n\n\n ┐│ 0\n\nC\n\n0 │ 0 -S\n\n0 │┌\n\n\n\n\n\n\n\n ┐* │ X11 │ X12 │\n\n │ U1 │\n\n\n\n││ 0\n\n0\n\n0 │ 0\n\n0 -I ││ V1 │\n\n\n\n│ │ ────┼──── │ = │────┼────││─────────┼─────────││────┼────│ │ X21 │ X22 │\n\n │\n\n\n\n│ U2 ││ 0\n\n0\n\n0 │ I\n\n0\n\n0 ││\n\n\n\n│ V2 │ └\n\n\n\n\n\n\n\n\n\n ┘\n\n └\n\n\n\n\n\n\n\n ┘│ 0\n\nS\n\n0 │ 0\n\nC\n\n0 │└\n\n\n\n\n\n\n\n ┘ │ 0\n\n0\n\nI │ 0\n\n0\n\n0 │ └\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n ┘\n\n``U1``, ``U2``, ``V1``, ``V2`` are square orthogonal/unitary matrices of dimensions ``(p,p)``, ``(m-p,m-p)``, ``(q,q)``, and ``(m-q,m-q)`` respectively, and ``C`` and ``S`` are ``(r, r)`` nonnegative diagonal matrices satisfying ``C^2 + S^2 = I`` where ``r = min(p, m-p, q, m-q)``.\n\nMoreover, the rank of the identity matrices are ``min(p, q)\n\n- r``, ``min(p, m\n\n- q)\n\n- r``, ``min(m\n\n- p, q)\n\n- r``, and ``min(m\n\n- p, m\n\n- q)\n\n- r`` respectively.\n\nX can be supplied either by itself and block specifications p, q or its subblocks in an iterable from which the shapes would be derived. See the examples below.\n\nParameters ---------- X : array_like, iterable complex unitary or real orthogonal matrix to be decomposed, or iterable of subblocks ``X11``, ``X12``, ``X21``, ``X22``, when ``p``, ``q`` are omitted. p : int, optional Number of rows of the upper left block ``X11``, used only when X is given as an array. q : int, optional Number of columns of the upper left block ``X11``, used only when X is given as an array. separate : bool, optional if ``True``, the low level components are returned instead of the matrix factors, i.e. ``(u1,u2)``, ``theta``, ``(v1h,v2h)`` instead of ``u``, ``cs``, ``vh``. swap_sign : bool, optional if ``True``, the ``-S``, ``-I`` block will be the bottom left, otherwise (by default) they will be in the upper right block. compute_u : bool, optional if ``False``, ``u`` won't be computed and an empty array is returned. compute_vh : bool, optional if ``False``, ``vh`` won't be computed and an empty array is returned.\n##### Returns\n* **u **: ndarray\n    When ``compute_u=True``, contains the block diagonal orthogonal/unitary\n    matrix consisting of the blocks ``U1`` (``p`` x ``p``) and ``U2``\n    (``m-p`` x ``m-p``) orthogonal/unitary matrices. If ``separate=True``,\n    this contains the tuple of ``(U1, U2)``.\n\n* **cs **: ndarray\n    The cosine-sine factor with the structure described above.\n     If ``separate=True``, this contains the ``theta`` array containing the\n     angles in radians.\n\n* **vh **: ndarray\n    When ``compute_vh=True`, contains the block diagonal orthogonal/unitary\n    matrix consisting of the blocks ``V1H`` (``q`` x ``q``) and ``V2H``\n    (``m-q`` x ``m-q``) orthogonal/unitary matrices. If ``separate=True``,\n    this contains the tuple of ``(V1H, V2H)``.\n\n* **>>> ue, cs, vdh = cossin((x[**: 2,\n\n* **.. [1] **: Brian D. Sutton. Computing the complete CS decomposition. Numer.\n       Algorithms, 50(1)\n\n"", 'stemmed comments': ['U2', 'default', 'block', 'rank', 'v1h', '>', 'number', '│────┼────││─────────┼─────────││────┼────│', 'unitari', 'nt', 'compute_vh=tru', 'c^2', 'paramet', 'specif', '2', 'swap_sign', 'V2', '└', 'p', 'CS', 'mp', 'moreov', 'v2h', 'x11', 'wo', 'ident', 'int', 'shape', 'instead', '=', 'level', 'compute_u=tru', 'I', '┘│', 'D', 'given', 'left', '││', '┐│', '┐', 'row', 'partit', 'exampl', 'decompos', 'r', 'vdh', 'u1', 'theta', 'brian', 'x21', 'omit', 'min', 'q', 'empti', 'decomposit', 'x', 'cs', '0', 'would', 'numer', 'compon', 'structur', 'either', 'vh', 'x12', 'option', 'array', 'ndarray', 'orthogon', 'compute_u', 'angl', 'If', 'real', 'sutton', 'suppli', 'matric', 'nonneg', 'tupl', 'squar', 'consist', 'when', '┌', 'fals', '│', 'u2', 'upper', 'column', 'comput', 'deriv', 'describ', 'radian', '50', 'ue', 'satisfi', 'factor', 'bottom', 'V1', 'complet', 'C', 'mq', 'orthogonal/unitari', 'use', 'complex', 'low', 'bool', '────┼────', 'right', 'return', 'compute_vh', 'diagon', 'the', 'respect', 'true', 's^2', '│┌', 'separate=tru', 'contain', 'x22', '[', '1', 'ie', 'otherwis', ']', 'U1', 'algorithm', '│└', 'separ', 'see', '┘', 'dimens', 'subblock', 'u', 'cosinesin', 'follow', 'S', 'cossin', 'X', 'matrix', 'iter', 'array_lik']}"
16,"{'func name': '_ldl_construct_tri_factor', 'comments': 'Helper function to construct explicit outer factors of LDL factorization.\n\nIf lower is True the permuted factors are multiplied as L(1)*L(2)*...*L(k). Otherwise, the permuted factors are multiplied as L(k)*...*L(2)*L(1). See LAPACK documentation for more details.\n\nParameters ---------- lu : ndarray The triangular array that is extracted from LAPACK routine call with ones on the diagonals. swap_vec : ndarray The array that defines the row swapping indices. If the kth entry is m then rows k,m are swapped. Notice that the mth entry is not necessarily k to avoid undoing the swapping. pivs : ndarray The array that defines the block diagonal structure returned by _ldl_sanitize_ipiv(). lower : bool, optional The boolean to switch between lower and upper triangular structure.\n##### Returns\n* **lu **: ndarray\n    The square outer factor which satisfies the L * D * L.T = A\n\n* **perm **: ndarray\n    The permutation vector that brings the lu to the triangular form\n\n', 'stemmed comments': ['swap_vec', 'option', 'block', 'ndarray', 'array', 'function', 'extract', 'necessarili', 'D', 'bool', 'k', 'ldl', 'lu', 'call', 'bring', 'If', 'defin', 'return', 'one', 'diagon', 'the', 'row', 'squar', 'perm', 'paramet', 'true', '2', 'entri', '_ldl_sanitize_ipiv', 'outer', 'upper', 'boolean', 'permut', 'indic', 'document', 'lower', '1', 'routin', 'otherwis', 'kth', 'piv', 'mth', 'form', 'explicit', 'construct', 'multipli', 'helper', 'lapack', 'avoid', 'LT', 'satisfi', 'triangular', 'vector', 'factor', 'see', 'swap', '=', 'undo', 'notic', 'detail', 'L', 'A', 'structur', 'switch']}"
17,"{'func name': 'polar', 'comments': 'Compute the polar decomposition.\n\n\n##### Returns\n* **u **: (m, n) ndarray\n    If `a` is square, then `u` is unitary. If m > n, then the columns\n    of `a` are orthonormal, and if m < n, then the rows of `u` are\n    orthonormal.\n\n* **p **: ndarray\n    `p` is Hermitian positive semidefinite. If `a` is nonsingular, `p`\n    is positive definite. The shape of `p` is (n, n) or (m, m), depending\n    on whether `side` is ""right"" or ""left"", respectively.\n\n* **.. [2] N. J. Higham, ""Functions of Matrices**: Theory and Computation"",\n       SIAM, 2008.\n\n* **A non-square example, with m < n**: \n\n* **Another non-square example, with m > n**: \n\n', 'stemmed comments': ['N', '>', 'ndarray', 'function', 'left', 'anoth', 'orthonorm', 'unitari', 'If', 'right', 'return', 'matric', 'row', 'squar', 'the', 'respect', 'exampl', 'polar', 'theori', 'nonsquar', '2', 'higham', 'semidefinit', 'column', 'p', '[', 'n', 'depend', 'whether', 'comput', ']', '2008', 'definit', 'shape', 'posit', 'siam', 'decomposit', 'J', 'u', 'hermitian', '<', 'side', 'A', 'nonsingular']}"
18,"{'func name': 'ordqz', 'comments': ""QZ decomposition for a pair of matrices with reordering.\n\n.. versionadded:: 0.17.0\n\nParameters ---------- A : (N, N) array_like 2-D array to decompose B : (N, N) array_like 2-D array to decompose sort : {callable, 'lhp', 'rhp', 'iuc', 'ouc'}, optional Specifies whether the upper eigenvalues should be sorted. A callable may be passed that, given an ordered pair ``(alpha, beta)`` representing the eigenvalue ``x = (alpha/beta)``, returns a boolean denoting whether the eigenvalue should be sorted to the top-left (True). For the real matrix pairs ``beta`` is real while ``alpha`` can be complex, and for complex matrix pairs both ``alpha`` and ``beta`` can be complex. The callable must be able to accept a NumPy array. Alternatively, string parameters may be used:\n\n- 'lhp'\n\n Left-hand plane (x.real < 0.0)\n\n- 'rhp'\n\n Right-hand plane (x.real > 0.0)\n\n- 'iuc'\n\n Inside the unit circle (x*x.conjugate() < 1.0)\n\n- 'ouc'\n\n Outside the unit circle (x*x.conjugate() > 1.0)\n\nWith the predefined sorting functions, an infinite eigenvalue (i.e., ``alpha != 0`` and ``beta = 0``) is considered to lie in neither the left-hand nor the right-hand plane, but it is considered to lie outside the unit circle. For the eigenvalue ``(alpha, beta) = (0, 0)``, the predefined sorting functions all return `False`. output : str {'real','complex'}, optional Construct the real or complex QZ decomposition for real matrices. Default is 'real'. overwrite_a : bool, optional If True, the contents of A are overwritten. overwrite_b : bool, optional If True, the contents of B are overwritten. check_finite : bool, optional If true checks the elements of `A` and `B` are finite numbers. If false does no checking and passes matrix through to underlying algorithm.\n##### Returns\n* **AA **: (N, N) ndarray\n    Generalized Schur form of A.\n\n* **BB **: (N, N) ndarray\n    Generalized Schur form of B.\n\n* **alpha **: (N,) ndarray\n    alpha = alphar + alphai * 1j. See notes.\n\n* **beta **: (N,) ndarray\n    See notes.\n\n* **Q **: (N, N) ndarray\n    The left Schur vectors.\n\n* **Z **: (N, N) ndarray\n    The right Schur vectors.\n\n"", 'stemmed comments': ['N', '>', 'consid', 'default', 'function', 'number', 'string', 'output', 'paramet', 'for', 'reorder', 'str', 'must', 'ouc', 'abl', 'construct', '{', 'numpi', 'element', 'QZ', '=', 'finit', 'AA', 'altern', 'given', 'xconjug', 'BB', 'left', 'order', 'eigenvalu', 'Z', 'note', '00', 'decompos', '}', 'predefin', 'gener', '!', 'infinit', 'content', 'check_finit', 'callabl', 'whether', 'circl', 'decomposit', 'x', '0', 'vector', 'righthand', 'pass', 'Q', 'beta', 'A', 'overwritten', 'option', 'B', 'array', 'ndarray', 'repres', 'If', 'real', 'alphai', 'matric', 'topleft', 'fals', 'accept', 'unit', 'check', 'upper', 'with', 'rhp', 'plane', 'neither', '2D', 'pair', '0170', '10', '1j', 'lefthand', 'may', 'schur', 'denot', 'overwrite_a', 'use', 'overwrite_b', 'complex', 'sort', 'iuc', 'lie', 'lhp', 'underli', 'bool', 'alpha/beta', 'right', 'return', 'the', 'alpha', 'xreal', 'true', 'outsid', 'boolean', 'specifi', 'ie', 'form', 'insid', 'algorithm', 'see', 'versionad', 'alphar', 'matrix', '<', 'array_lik']}"
19,"{'func name': 'differential_evolution', 'comments': ""Finds the global minimum of a multivariate function.\n\nDifferential Evolution is stochastic in nature (does not use gradient methods) to find the minimum, and can search large areas of candidate space, but often requires larger numbers of function evaluations than conventional gradient-based techniques.\n\nThe algorithm is due to Storn and Price [1]_.\n\nParameters ---------- func : callable The objective function to be minimized. Must be in the form ``f(x, *args)``, where ``x`` is the argument in the form of a 1-D array and ``args`` is a\n\ntuple of any additional fixed parameters needed to completely specify the function. bounds : sequence or `Bounds`, optional Bounds for variables. There are two ways to specify the bounds: 1. Instance of `Bounds` class. 2. ``(min, max)`` pairs for each element in ``x``, defining the finite lower and upper bounds for the optimizing argument of `func`. It is required to have ``len(bounds) == len(x)``. ``len(bounds)`` is used to determine the number of parameters in ``x``. args : tuple, optional Any additional fixed parameters needed to completely specify the objective function. strategy : str, optional The differential evolution strategy to use. Should be one of:\n\n- 'best1bin'\n\n- 'best1exp'\n\n- 'rand1exp'\n\n- 'randtobest1exp'\n\n- 'currenttobest1exp'\n\n- 'best2exp'\n\n- 'rand2exp'\n\n- 'randtobest1bin'\n\n- 'currenttobest1bin'\n\n- 'best2bin'\n\n- 'rand2bin'\n\n- 'rand1bin'\n\nThe default is 'best1bin'. maxiter : int, optional The maximum number of generations over which the entire population is evolved. The maximum number of function evaluations (with no polishing) is: ``(maxiter + 1) * popsize * len(x)`` popsize : int, optional A multiplier for setting the total population size. The population has ``popsize * len(x)`` individuals (unless the initial population is supplied via the `init` keyword). tol : float, optional Relative tolerance for convergence, the solving stops when ``np.std(pop) <= atol + tol * np.abs(np.mean(population_energies))``, where and `atol` and `tol` are the absolute and relative tolerance respectively. mutation : float or tuple(float, float), optional The mutation constant. In the literature this is also known as differential weight, being denoted by F. If specified as a float it should be in the range [0, 2]. If specified as a tuple ``(min, max)`` dithering is employed. Dithering randomly changes the mutation constant on a generation by generation basis. The mutation constant for that generation is taken from ``U[min, max)``. Dithering can help speed convergence significantly. Increasing the mutation constant increases the search radius, but will slow down convergence. recombination : float, optional The recombination constant, should be in the range [0, 1]. In the literature this is also known as the crossover probability, being denoted by CR. Increasing this value allows a larger number of mutants to progress into the next generation, but at the risk of population stability. seed : {int, `~np.random.RandomState`, `~np.random.Generator`}, optional If `seed` is not specified the `~np.random.RandomState` singleton is used. If `seed` is an int, a new ``RandomState`` instance is used, seeded with seed. If `seed` is already a ``RandomState`` or a ``Generator`` instance, then that object is used. Specify `seed` for repeatable minimizations. disp : bool, optional Prints the evaluated `func` at every iteration. callback : callable, `callback(xk, convergence=val)`, optional A function to follow the progress of the minimization. ``xk`` is the current value of ``x0``. ``val`` represents the fractional value of the population convergence.\n\nWhen ``val`` is greater than one the function halts. If callback returns `True`, then the minimization is halted (any polishing is still carried out). polish : bool, optional If True (default), then `scipy.optimize.minimize` with the `L-BFGS-B` method is used to polish the best population member at the end, which can improve the minimization slightly. If a constrained problem is being studied then the `trust-constr` method is used instead. init : str or array-like, optional Specify which type of population initialization is performed. Should be one of:\n\n- 'latinhypercube'\n\n- 'random'\n\n- array specifying the initial population. The array should have shape ``(M, len(x))``, where M is the total population size and len(x) is the number of parameters. `init` is clipped to `bounds` before use.\n\nThe default is 'latinhypercube'. Latin Hypercube sampling tries to maximize coverage of the available parameter space. 'random' initializes the population randomly\n\n- this has the drawback that clustering can occur, preventing the whole of parameter space being covered. Use of an array to specify a population subset could be used, for example, to create a tight bunch of initial guesses in an location where the solution is known to exist, thereby reducing time for convergence. atol : float, optional Absolute tolerance for convergence, the solving stops when ``np.std(pop) <= atol + tol * np.abs(np.mean(population_energies))``, where and `atol` and `tol` are the absolute and relative tolerance respectively. updating : {'immediate', 'deferred'}, optional If ``'immediate'``, the best solution vector is continuously updated within a single generation [4]_. This can lead to faster convergence as trial vectors can take advantage of continuous improvements in the best solution. With ``'deferred'``, the best solution vector is updated once per generation. Only ``'deferred'`` is compatible with parallelization, and the `workers` keyword can over-ride this option.\n\n.. versionadded:: 1.2.0\n\nworkers : int or map-like callable, optional If `workers` is an int the population is subdivided into `workers` sections and evaluated in parallel (uses `multiprocessing.Pool <multiprocessing>`). Supply -1 to use all available CPU cores. Alternatively supply a map-like callable, such as `multiprocessing.Pool.map` for evaluating the population in parallel. This evaluation is carried out as ``workers(func, iterable)``. This option will override the `updating` keyword to ``updating='deferred'`` if ``workers != 1``. Requires that `func` be pickleable.\n\n.. versionadded:: 1.2.0\n\nconstraints : {NonLinearConstraint, LinearConstraint, Bounds} Constraints on the solver, over and above those applied by the `bounds` kwd. Uses the approach by Lampinen [5]_.\n\n.. versionadded:: 1.4.0\n##### Returns\n* **res **: OptimizeResult\n    The optimization result represented as a `OptimizeResult` object.\n    Important attributes are\n\n* **is used to mutate the best member (the 'best' in 'best1bin'), **: math\n\n* **so far**: \n\n* **.. math**: \n\n* **.. versionadded**: \n\n* **>>> def constr_f(x)**: \n\n* **(https**: //en.wikipedia.org/wiki/Test_functions_for_optimization).\n\n* **>>> def ackley(x)**: \n\n* **.. [2] http**: //www1.icsi.berkeley.edu/~storn/code.html\n\n* **.. [3] http**: //en.wikipedia.org/wiki/Differential_evolution\n\n"", 'stemmed comments': ['global', 'fix', 'bound', 'default', 'rand2exp', '>', 'function', 'func', 'npstd', 'strategi', 'number', 'greater', 'nonlinearconstraint', 'iter', 'variabl', 'cover', 'defin', 'currenttobest1bin', 'end', 'search', 'requir', 'constant', 'It', 'mutat', 'paramet', 'differenti', 'risk', '2', 'xk', 'randtobest1bin', 'overrid', 'absolut', 'could', 'studi', 'best1exp', 're', 'lbfgsb', 'seed', 'carri', 'minim', 'lower', 'str', 'type', 'approach', 'must', 'chang', 'dither', 'latin', 'updating=def', 'rel', 'weight', 'randtobest1exp', 'int', 'element', '{', 'basi', 'shape', 'scipyoptimizeminim', 'occur', '//www1icsiberkeleyedu/~storn/codehtml', 'instead', 'In', 'trustconstr', 'total', '=', 'rang', 'finit', 'coverag', 'updat', 'parallel', 'due', 'max', 'init', 'stabil', 'print', 'pickleabl', 'space', 'argument', 'speed', 'initi', 'altern', 'immedi', 'far', 'thi', 'candid', 'cpu', 'object', 'way', 'progress', 'best', 'maxim', 'stop', 'find', 'exampl', 'float', '}', 'evalu', 'gener', 'employ', 'clip', '!', 'drawback', 'npmean', 'tight', 'x0', 'recombin', '3', 'val', 'callabl', 'optim', 'stochast', 'fraction', 'allow', 'entir', 'also', 'constraint', '140', 'lampinen', 'prevent', 'min', 'whole', 'mutant', 'kwd', 'x', 'guess', 'valu', '0', 'vector', 'significantli', 'advantag', 'polish', 'larg', 'addit', 'A', 'rand2bin', 'toler', 'singl', 'F', 'import', 'gradientbas', 'price', 'option', 'tol', 'array', 'multiprocessingpool', 'solver', 'help', 'len', 'exist', 'repres', 'attribut', 'convent', 'there', 'If', 'optimizeresult', 'http', '~nprandomrandomst', 'worker', 'suppli', 'one', 'next', 'ackley', 'method', 'larger', 'tupl', 'bunch', 'when', 'per', 'instanc', '==', 'determin', 'taken', 'subset', '5', 'solut', 'subdivid', 'npab', 'convergence=v', 'avail', 'best2exp', 'slow', '//enwikipediaorg/wiki/test_functions_for_optim', 'multiprocessingpoolmap', 'constr_f', 'compat', 'upper', 'maximum', 'time', 'within', 'evolut', 'area', 'with', '4', 'increas', 'converg', 'randomst', 'member', 'radiu', 'unless', 'callback', 'section', 'maxit', 'f', 'pair', 'should', 'evolv', 'slightli', 'complet', 'size', 'denot', 'cluster', 'best1bin', 'constrain', 'use', 'class', 'gradient', '//enwikipediaorg/wiki/differential_evolut', 'set', 'need', 'randomli', 'known', 'reduc', 'onli', 'bool', 'disp', 'population_energi', 'maplik', 'perform', 'literatur', 'CR', 'return', 'latinhypercub', 'M', 'keyword', 'currenttobest1exp', 'minimum', 'the', 'popul', 'sampl', 'rand1exp', 'atol', 'probabl', 'locat', 'two', 'respect', 'pop', 'new', 'result', 'multivari', 'everi', 'individu', 'true', 'therebi', 'crossov', 'take', 'linearconstraint', 'still', 'improv', 'repeat', 'natur', 'popsiz', 'faster', 'storn', 'specifi', 'solv', '[', 'continu', '1', 'core', 'halt', 'def', '~nprandomgener', 'arg', 'U', 'arraylik', 'defer', ']', 'trial', 'form', '120', 'creat', 'current', 'sequenc', 'multipli', 'math', 'algorithm', '_', 'techniqu', 'alreadi', 'ani', 'rand1bin', 'singleton', 'follow', 'often', 'hypercub', 'tri', 'random', 'versionad', 'multiprocess', '1D', '<', 'via', 'appli', 'lead', 'best2bin', 'problem']}"
20,"{'func name': 'get_distribution_names', 'comments': 'Collect names of statistical distributions and their generators.\n\nParameters ---------- namespace_pairs : sequence A snapshot of (name, value) pairs in the namespace of a module. rv_base_class : class The base class of random variable generator classes in a module.\n##### Returns\n* **distn_names **: list of strings\n    Names of the statistical distributions.\n\n* **distn_gen_names **: list of strings\n    Names of the generators of the statistical distributions.\n    Note that these are not simply the names of the statistical\n    distributions, with a _gen suffix added.\n\n', 'stemmed comments': ['statist', 'string', 'distn_nam', 'variabl', 'return', 'modul', '_gen', 'the', 'rv_base_class', 'note', 'paramet', 'gener', 'name', 'suffix', 'list', 'ad', 'namespac', 'distn_gen_nam', 'pair', 'sequenc', 'valu', 'distribut', 'random', 'namespace_pair', 'A', 'base', 'snapshot', 'class', 'collect', 'simpli']}"
21,"{'func name': 'dual_annealing', 'comments': 'Find the global minimum of a function using Dual Annealing.\n\nParameters ---------- func : callable The objective function to be minimized. Must be in the form ``f(x, *args)``, where ``x`` is the argument in the form of a 1-D array and ``args`` is a\n\ntuple of any additional fixed parameters needed to completely specify the function. bounds : sequence, shape (n, 2) Bounds for variables.\n\n``(min, max)`` pairs for each element in ``x``, defining bounds for the objective function parameter. args : tuple, optional Any additional fixed parameters needed to completely specify the objective function. maxiter : int, optional The maximum number of global search iterations. Default value is 1000. local_search_options : dict, optional Extra keyword arguments to be passed to the local minimizer (`minimize`). Some important options could be: ``method`` for the minimizer method to use and ``args`` for objective function additional arguments. initial_temp : float, optional The initial temperature, use higher values to facilitates a wider search of the energy landscape, allowing dual_annealing to escape local minima that it is trapped in. Default value is 5230. Range is (0.01, 5.e4]. restart_temp_ratio : float, optional During the annealing process, temperature is decreasing, when it reaches ``initial_temp * restart_temp_ratio``, the reannealing process is triggered. Default value of the ratio is 2e-5. Range is (0, 1). visit : float, optional Parameter for visiting distribution. Default value is 2.62. Higher values give the visiting distribution a heavier tail, this makes the algorithm jump to a more distant region. The value range is (0, 3]. accept : float, optional Parameter for acceptance distribution. It is used to control the probability of acceptance. The lower the acceptance parameter, the smaller the probability of acceptance. Default value is -5.0 with a range (-1e4, -5]. maxfun : int, optional Soft limit for the number of objective function calls. If the algorithm is in the middle of a local search, this number will be exceeded, the algorithm will stop just after the local search is done. Default value is 1e7. seed : {int, `~numpy.random.RandomState`, `~numpy.random.Generator`}, optional If `seed` is not specified the `~numpy.random.RandomState` singleton is used. If `seed` is an int, a new ``RandomState`` instance is used, seeded with `seed`. If `seed` is already a ``RandomState`` or ``Generator`` instance, then that instance is used. Specify `seed` for repeatable minimizations. The random numbers generated with this seed only affect the visiting distribution function and new coordinates generation. no_local_search : bool, optional If `no_local_search` is set to True, a traditional Generalized Simulated Annealing will be performed with no local search strategy applied. callback : callable, optional A callback function with signature ``callback(x, f, context)``, which will be called for all minima found. ``x`` and ``f`` are the coordinates and function value of the latest minimum found, and ``context`` has value in [0, 1, 2], with the following meaning:\n\n- 0: minimum detected in the annealing process.\n\n- 1: detection occurred in the local search process.\n\n- 2: detection done in the dual annealing process.\n\nIf the callback implementation returns True, the algorithm will stop. x0 : ndarray, shape(n,), optional Coordinates of a single N-D starting point.\n##### Returns\n* **res **: OptimizeResult\n    The optimization result represented as a `OptimizeResult` object.\n    Important attributes are\n\n* **distribution, with its shape controlled by the parameter **: math\n\n* **.. math**: \n\n* **Where **: math\n\n* **to generate a trial jump distance **: math\n\n* ****: math\n\n* **function, the acceptance probability is computed as follows**: \n\n* **The artificial temperature **: math\n\n* **.. versionadded**: \n\n* **.. [5] Xiang Y, Gubian S, Suomela B, Hoeng J. Generalized\n    Simulated Annealing for Efficient Global Optimization**: the GenSA\n    Package for R. The R Journal, Volume 5/1 (2013).\n\n* **.. [6] Mullen, K. Continuous Global Optimization in R. Journal of\n    Statistical Software, 60(6), 1 - 45, (2014). DOI**: 10.18637/jss.v060.i06\n\n* **(https**: //en.wikipedia.org/wiki/Rastrigin_function)\n\n* **>>> func = lambda x**: np.sum(x*x - 10*np.cos(2*np.pi*x)) + 10*np.size(x)\n\n', 'stemmed comments': ['global', 'fix', 'anneal', 'bound', 'default', 'trap', 'function', 'func', '>', 'strategi', 'number', 'jump', 'statist', 'call', 'process', 'variabl', 'defin', 'search', '1e4', '1018637/jssv060i06', 'It', 'paramet', '2', '45', 'context', 'point', 'could', 'K', 're', '001', 'seed', 'minim', 'lower', 'must', 'n', 'dual', 'soft', 'middl', 'int', '{', 'element', 'shape', 'occur', 'where', 'gubian', 'region', 'volum', 'coordin', 'ratio', '=', 'rang', 'packag', 'max', 'control', 'Y', 'done', 'nppi', 'argument', 'initi', '~numpyrandomrandomst', 'restart_temp_ratio', 'decreas', 'distanc', 'mean', 'suomela', 'xiang', 'object', 'mullen', 'npco', 'stop', 'find', 'float', '}', 'higher', 'trigger', 'gener', 'tradit', 'x0', '3', 'callabl', 'limit', 'optim', '1e7', 'allow', 'minima', 'effici', 'R', 'min', 'latest', 'x', 'valu', 'wider', '0', 'J', 'implement', 'pass', 'journal', 'local', 'landscap', 'addit', 'A', 'singl', 'detect', 'reanneal', 'import', 'visit', 'option', 'ND', 'start', 'array', 'ndarray', 'B', 'softwar', 'attribut', 'repres', 'dual_ann', 'If', 'optimizeresult', 'reach', 'http', 'tupl', 'method', 'simul', 'instanc', 'exceed', '5', 'extra', 'accept', '5/1', 'hoeng', 'maximum', '2013', 'some', 'npsum', 'signatur', '1000', 'smaller', 'randomst', 'heavier', 'initial_temp', 'escap', 'callback', 'comput', '50', 'maxit', 'give', 'tail', 'f', 'pair', '10', '262', 'make', 'complet', 'distribut', 'doi', 'found', 'use', '60', '2014', 'set', 'need', '2e5', '~numpyrandomgener', 'artifici', 'dure', 'bool', 'perform', 'local_search_opt', 'return', 'lambda', 'keyword', 'the', 'minimum', 'probabl', 'result', 'gensa', 'dict', 'energi', 'new', '5e4', 'true', 'repeat', 'temperatur', 'specifi', '[', 'continu', '1', '//enwikipediaorg/wiki/rastrigin_funct', 'affect', 'npsize', 'arg', 'trial', ']', 'form', 'math', 'sequenc', 'facilit', 'algorithm', 'alreadi', 'no_local_search', '6', 'ani', 'singleton', 'follow', 'S', 'appli', '5230', 'random', 'versionad', '1D', 'iter', 'maxfun', 'distant']}"
22,"{'func name': 'ellip_normal', 'comments': 'Ellipsoidal harmonic normalization constants gamma^p_n\n\nThe normalization constant is defined as\n\n.. math::\n\n\\gamma^p_n=8\\int_{0}^{h}dx\\int_{h}^{k}dy\\frac{(y^2-x^2)(E^p_n(y)E^p_n(x))^2},{\\sqrt((k^2-y^2)(y^2-h^2)(h^2-x^2)(k^2-x^2)}\n\nParameters ---------- h2 : float ``h**2`` k2 : float ``k**2``; should be larger than ``h**2`` n : int Degree. p : int Order, can range between [1,2n+1].\n##### Returns\n* **gamma **: float\n    The normalization constant\n\n* **.. versionadded**: \n\n', 'stemmed comments': ['e^p_n', 'degre', 'normal', '^', 'order', 'k', 'dy\\frac', '\\sqrt', 'defin', 'return', 'dx\\int_', 'the', 'larger', '12n1', 'constant', 'k^2y^2', 'float', 'y^2h^2', 'paramet', 'y^2x^2', '}', '2', 'harmon', 'gamma', 'h', 'p', '[', '\\gamma^p_n=8\\int_', '^2', 'n', 'h2', 'ellipsoid', ']', 'k^2x^2', 'k2', 'math', 'h^2x^2', '{', 'int', 'x', '0', 'rang', 'gamma^p_n', 'versionad', ';']}"
23,"{'func name': 'expm_cond', 'comments': 'Relative condition number of the matrix exponential in the Frobenius norm.\n\nParameters ---------- A : 2-D array_like Square input matrix with shape (N, N). check_finite : bool, optional Whether to check that the input matrix contains only finite numbers. Disabling may give a performance gain, but may result in problems (crashes, non-termination) if the inputs do contain infinities or NaNs.\n##### Returns\n* **kappa **: float\n    The relative condition number of the matrix exponential\n    in the Frobenius norm\n\n* **.. versionadded**: \n\n* **expm **: Compute the exponential of a matrix.\n\n* **expm_frechet **: Compute the Frechet derivative of the matrix exponential.\n\n', 'stemmed comments': ['option', 'N', 'nan', 'condit', 'number', 'bool', 'perform', 'gain', 'disabl', 'return', 'the', 'squar', 'result', 'float', 'paramet', 'kappa', 'check', 'crash', 'contain', 'expm_frechet', 'check_finit', 'whether', 'expm', 'comput', 'deriv', 'exponenti', 'give', 'rel', '2D', 'frobeniu', 'shape', 'nontermin', 'norm', 'input', 'may', 'finit', 'infin', 'frechet', 'versionad', 'A', 'matrix', 'array_lik', 'problem']}"
24,"{'func name': '_expm_multiply_interval_core_2', 'comments': 'A helper function, for the case q > s and q % s > 0.\n\n\n', 'stemmed comments': ['>', 'function', '0', '%', 'A', 'q', 'case', 'helper']}"
25,"{'func name': 'splantider', 'comments': 'Compute the spline for the antiderivative (integral) of a given spline.\n\nParameters ---------- tck : tuple of (t, c, k) Spline whose antiderivative to compute n : int, optional Order of antiderivative to evaluate. Default: 1\n##### Returns\n* **tck_ader **: tuple of (t2, c2, k2)\n    Spline of order k2=k+n representing the antiderivative of the input\n    spline.\n\n* **.. versionadded**: \n\n* **although some floating point error accumulates**: \n\n* **Antiderivative can be used to evaluate definite integrals**: \n\n* ****: math\n\n', 'stemmed comments': ['option', 'default', 't2', 'given', 'c', 'repres', 'order', 'k', 'return', 'antideriv', 'tupl', 'whose', 'float', 'paramet', 'tck_ader', 'evalu', 'point', 'k2=kn', 'spline', 'integr', 'c2', '1', 'n', 'error', 'comput', 'definit', 'tck', 'k2', 'int', 'math', 'accumul', 'input', 'versionad', 'use', 'although']}"
26,"{'func name': 'number_digits', 'comments': '', 'stemmed comments': []}"
27,"{'func name': 'get_blas_lapack_symbols', 'comments': '', 'stemmed comments': []}"
28,"{'func name': 'gcrotmk', 'comments': ""Solve a matrix equation using flexible GCROT(m,k) algorithm.\n\nParameters ---------- A : {sparse matrix, dense matrix, LinearOperator} The real or complex N-by-N matrix of the linear system. Alternatively, ``A`` can be a linear operator which can produce ``Ax`` using, e.g., ``scipy.sparse.linalg.LinearOperator``. b : {array, matrix} Right hand side of the linear system. Has shape (N,) or (N,1). x0\n\n: {array, matrix} Starting guess for the solution. tol, atol : float, optional Tolerances for convergence, ``norm(residual) <= max(tol*norm(b), atol)``. The default for ``atol`` is `tol`.\n\n.. warning::\n\nThe default value for `atol` will be changed in a future release. For future compatibility, specify `atol` explicitly. maxiter : int, optional Maximum number of iterations.\n\nIteration will stop after maxiter steps even if the specified tolerance has not been achieved. M : {sparse matrix, dense matrix, LinearOperator}, optional Preconditioner for A.\n\nThe preconditioner should approximate the inverse of A. gcrotmk is a 'flexible' algorithm and the preconditioner can vary from iteration to iteration. Effective preconditioning dramatically improves the rate of convergence, which implies that fewer iterations are needed to reach a given error tolerance. callback : function, optional User-supplied function to call after each iteration.\n\nIt is called as callback(xk), where xk is the current solution vector. m : int, optional Number of inner FGMRES iterations per each outer iteration. Default: 20 k : int, optional Number of vectors to carry between inner FGMRES iterations. According to [2]_, good values are around m. Default: m CU : list of tuples, optional List of tuples ``(c, u)`` which contain the columns of the matrices C and U in the GCROT(m,k) algorithm. For details, see [2]_. The list given and vectors contained in it are modified in-place. If not given, start from empty matrices. The ``c`` elements in the tuples can be ``None``, in which case the vectors are recomputed via ``c = A u`` on start and orthogonalized as described in [3]_. discard_C : bool, optional Discard the C-vectors at the end. Useful if recycling Krylov subspaces for different linear systems. truncate : {'oldest', 'smallest'}, optional Truncation scheme to use. Drop: oldest vectors, or vectors with smallest singular values using the scheme discussed in [1,2]. See [2]_ for detailed comparison. Default: 'oldest'\n##### Returns\n* **x **: array or matrix\n    The solution found.\n\n* **info **: int\n    Provides convergence information\n\n"", 'stemmed comments': ['N', 'default', 'function', 'number', 'call', 'futur', 'end', 'impli', 'linear', 'oper', 'explicitli', 'paramet', 'It', 'nbyn', 'eg', 'xk', 'for', '2', 'm', 'none', 'spars', 'discard_c', 'good', 'discuss', 'modifi', 'vari', 'residu', 'carri', 'ha', 'chang', 'achiev', 'differ', 'int', '{', 'element', 'shape', 'krylov', 'norm', '=', 'max', 'inner', 'side', 'altern', 'given', 'linearoper', 'k', 'inplac', 'recycl', 'scipysparselinalglinearoper', 'smallest', 'stop', 'float', 'invers', 'provid', '}', 'scheme', 'x0', '3', 'oldest', 'via', 'hand', 'even', 'error', 'comparison', 'info', 'empti', 'guess', 'x', 'valu', 'vector', 'detail', 'subspac', 'A', 'toler', 'releas', 'tol', 'option', 'start', 'array', 'orthogon', 'effect', 'rate', 'If', 'real', 'reach', 'truncat', 'matric', 'tupl', 'per', 'CU', 'solut', 'compat', 'case', 'maximum', 'column', 'drop', 'dens', 'Ax', 'converg', 'describ', 'callback', 'maxit', 'warn', 'N1', 'discard', 'fewer', 'produc', 'C', 'inform', 'found', 'use', 'cvector', 'complex', 'b', 'singular', 'equat', 'need', 'c', 'gcrot', 'system', 'bool', 'right', 'return', 'step', 'M', 'gcrotmk', 'the', 'approxim', 'atol', 'flexibl', 'around', 'usersuppli', 'accord', 'precondit', 'precondition', 'dramat', 'improv', 'outer', 'contain', 'list', 'specifi', '[', '12', 'U', ']', 'recomput', '20', 'current', 'algorithm', '_', 'see', 'u', 'matrix', 'iter', '<', 'fgmre', 'solv']}"
29,"{'func name': 'assert_deallocated', 'comments': 'Context manager to check that object is deallocated\n\nThis is useful for checking that an object can be freed directly by reference counting, without requiring gc to break reference cycles. GC is disabled inside the context manager.\n\nThis check is not available on PyPy.\n\nParameters ---------- func : callable Callable to create object to check \\*args : sequence positional arguments to `func` in order to create object to check \\*\\*kwargs : dict keyword arguments to `func` in order to create object to check\n\nExamples -------- >>> class C(object): pass >>> with assert_deallocated(C) as c: ...\n\n\n\n # do something ...\n\n\n\n del c\n\n>>> class C(object): ...\n\n\n\n def __init__(self): ...\n\n\n\n\n\n\n\n self._circular = self # Make circular reference >>> with assert_deallocated(C) as c: #doctest: +IGNORE_EXCEPTION_DETAIL ...\n\n\n\n # do something ...\n\n\n\n del c Traceback (most recent call last): ... ReferenceError: Remaining reference(s) to object\n', 'stemmed comments': ['>', 'gc', 'cycl', 'self', 'manag', 'func', 'c', 'someth', 'order', 'thi', 'call', '\\', 'object', 'disabl', 'remain', 'directli', 'keyword', 'del', 'requir', 'assert_dealloc', 'exampl', 'traceback', 'dict', 'paramet', 'pypi', 'avail', 'context', 'check', 'recent', 'def', 'freed', 'callabl', 'arg', 'circular', 'doctest', 'referenceerror', 'last', 'insid', 'creat', 'sequenc', 'posit', 'without', 'kwarg', 'break', '=', 'dealloc', 'GC', 'make', 'count', 'C', 'pass', 'self_circular', 'ignore_exception_detail', 'use', 'class', 'argument', '__init__', 'refer']}"
30,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
31,"{'func name': 'make_all', 'comments': '', 'stemmed comments': []}"
32,"{'func name': 'geometric_slerp', 'comments': 'Geometric spherical linear interpolation.\n\nThe interpolation occurs along a unit-radius great circle arc in arbitrary dimensional space.\n\nParameters ---------- start : (n_dimensions, ) array-like Single n-dimensional input coordinate in a 1-D array-like object. `n` must be greater than 1. end : (n_dimensions, ) array-like Single n-dimensional input coordinate in a 1-D array-like object. `n` must be greater than 1. t: float or (n_points,) array-like A float or array-like of doubles representing interpolation parameters, with values required in the inclusive interval between 0 and 1. A common approach is to generate the array with ``np.linspace(0, 1, n_pts)`` for linearly spaced points. Ascending, descending, and scrambled orders are permitted. tol: float The absolute tolerance for determining if the start and end coordinates are antipodes.\n##### Returns\n* **result **: (t.size, D)\n    An array of doubles containing the interpolated\n    spherical path and including start and\n    end when 0 and 1 t are used. The\n    interpolated values should correspond to the\n    same sort order provided in the t array. The result\n    may be 1-dimensional if ``t`` is a float.\n\n', 'stemmed comments': ['interpol', 'scrambl', 'tol', 'start', 'array', 'permit', 'D', 'unitradiu', 'greater', 'repres', 'correspond', 'great', 'order', 'along', 'arbitrari', 'object', 'return', 'geometr', 'nplinspac', 'the', 'end', 'n_pt', 'n_point', 'requir', 'linear', 'float', 'determin', 'paramet', 'spheric', 'result', 'provid', 'common', 'descend', 'linearli', 'gener', 'point', 'absolut', 'contain', 'path', 'approach', '1dimension', 'interv', '1', 'n', 'must', 'ascend', 'arraylik', 'circl', 'doubl', 'occur', 'sort', 'An', 'valu', 'coordin', '0', 'ndimension', 'input', 'includ', 'may', 'arc', 'n_dimens', 'dimension', 'inclus', 'tsize', 'A', '1D', 'singl', 'toler', 'space', 'use', 'antipod']}"
33,"{'func name': '_init_nd_shape_and_axes', 'comments': 'Handle shape and axes arguments for N-D transforms.\n\n\n##### Returns\n* **shape **: array\n    The shape of the result. It is a 1-D integer array.\n\n* **axes **: array\n    The shape of the result. It is a 1-D integer array.\n\n', 'stemmed comments': ['ND', 'axe', 'array', 'result', 'It', 'handl', 'integ', '1D', 'return', 'transform', 'the', 'argument', 'shape']}"
34,"{'func name': '_get_wilcoxon_distr', 'comments': 'Distribution of counts of the Wilcoxon ranksum statistic r_plus (sum of ranks of positive differences). Returns an array with the counts/frequencies of all the possible ranks r = 0, ..., n*(n+1)/2\n\n\n', 'stemmed comments': ['/2', 'n1', 'rank', 'array', 'statist', 'ranksum', 'return', 'wilcoxon', 'sum', 'r', 'n', 'differ', 'posit', 'counts/frequ', '0', '=', 'distribut', 'count', 'possibl', 'r_plu']}"
35,"{'func name': '_boolean_index_to_array', 'comments': '', 'stemmed comments': []}"
36,"{'func name': 'idzr_rsvd', 'comments': 'Compute SVD of a complex matrix to a specified rank using random matrix-vector multiplication.\n\nparam m: Matrix row dimension. :type m: int :param n: Matrix column dimension. :type n: int :param matveca: Function to apply the matrix adjoint to a vector, with call signature `y = matveca(x)`, where `x` and `y` are the input and output vectors, respectively. :type matveca: function :param matvec: Function to apply the matrix to a vector, with call signature `y = matvec(x)`, where `x` and `y` are the input and output vectors, respectively. :type matvec: function :param k: Rank of SVD. :type k: int\n\n:return: Left singular vectors. :rtype: :class:`numpy.ndarray` :return: Right singular vectors. :rtype: :class:`numpy.ndarray` :return: Singular values. :rtype: :class:`numpy.ndarray`\n', 'stemmed comments': ['singular', 'rank', 'function', 'left', 'adjoint', 'k', 'call', 'output', 'right', 'return', 'row', 'param', 'respect', 'column', 'signatur', 'matvec', 'specifi', 'type', 'n', 'matveca', 'matrixvector', 'comput', 'multipl', 'int', 'svd', 'x', 'numpyndarray', 'vector', 'valu', '=', 'dimens', 'input', 'class', 'rtype', 'appli', 'random', 'use', 'matrix', 'complex']}"
37,"{'func name': 'kolmogni', 'comments': 'Computes the PPF(or ISF) for the two-sided Kolmogorov-Smirnov distribution.\n\nParameters ---------- n : integer, array_like the number of samples q : float, array_like Probabilities, float between 0 and 1 cdf : bool, optional whether to compute the PPF(default=true) or the ISF.\n##### Returns\n* **ppf **: ndarray\n    PPF (or ISF if cdf is False) at the specified locations\n\n', 'stemmed comments': ['option', 'ndarray', 'number', 'kolmogorovsmirnov', 'bool', 'twosid', 'return', 'sampl', 'probabl', 'locat', 'float', 'paramet', 'cdf', 'fals', 'ppf', 'isf', 'specifi', '1', 'n', 'whether', 'comput', 'q', '0', 'distribut', 'default=tru', 'integ', 'array_lik']}"
38,"{'func name': 'lambertw', 'comments': 'lambertw(z, k=0, tol=1e-8)\n\nLambert W function.\n\nThe Lambert W function `W(z)` is defined as the inverse function of ``w * exp(w)``. In other words, the value of ``W(z)`` is such that ``z = W(z) * exp(W(z))`` for any complex number ``z``.\n\nThe Lambert W function is a multivalued function with infinitely many branches. Each branch gives a separate solution of the equation ``z = w exp(w)``. Here, the branches are indexed by the integer `k`.\n\nParameters ---------- z : array_like Input argument. k : int, optional Branch index. tol : float, optional Evaluation tolerance.\n##### Returns\n* **w **: array\n    `w` will have the same shape as `z`.\n\n* **All branches are supported by `lambertw`**: \n\n* **The Lambert W function has two partially real branches**: the\n\n* **wrightomega **: the Wright Omega function\n\n* **.. [1] https**: //en.wikipedia.org/wiki/Lambert_W_function\n\n* **.. [2] Corless et al, ""On the Lambert W function"", Adv. Comp. Math. 5\n   (1996) 329-359.\n   https**: //cs.uwaterloo.ca/research/tr/1993/03/W.pdf\n\n* **The Lambert W function is the inverse of ``w exp(w)``**: \n\n* **Any branch gives a valid inverse**: \n\n* **tower **: math\n\n* **>>> def tower(z, n)**: \n\n* **...     if n == 0**: \n\n', 'stemmed comments': ['>', 'et', 'function', 'each', 'number', 'partial', 'defin', 'multivalu', 'wright', 'word', 'paramet', '2', 'n', 'adv', 'here', 'comp', 'int', 'shape', '//enwikipediaorg/wiki/lambert_w_funct', 'In', '=', 'integ', 'index', 'argument', 'tol=1e8', 'k', 'float', 'invers', 'z', 'w', 'evalu', 'omega', 'lambertw', 'infinit', '1996', 'On', 'valu', '0', 'input', 'toler', 'option', 'tol', 'array', 'wrightomega', 'lambert', 'W', '329359', 'real', 'http', 'valid', '==', '5', 'solut', 'k=0', 'support', 'give', '//csuwaterlooca/research/tr/1993/03/wpdf', 'complex', 'mani', 'equat', 'return', 'the', 'al', 'two', 'branch', 'def', 'tower', '[', 'exp', 'all', '1', ']', 'math', 'separ', 'ani', 'corless', 'array_lik']}"
39,"{'func name': '_laplacian_dense', 'comments': '', 'stemmed comments': []}"
40,"{'func name': '_linprog_ip', 'comments': 'Minimize a linear objective function subject to linear equality and non-negativity constraints using the interior point method of [4]_. Linear programming is intended to solve problems of the following form\n\nMinimize::\n\nc @ x\n\nSubject to::\n\nA @ x == b x >= 0\n\nParameters ---------- c : 1-D array Coefficients of the linear objective function to be minimized. c0 : float Constant term in objective function due to fixed (and eliminated) variables. (Purely for display.) A : 2-D array 2-D array such that ``A @ x``, gives the values of the equality constraints at ``x``. b : 1-D array 1-D array of values representing the right hand side of each equality constraint (row) in ``A``. callback : callable, optional Callback function to be executed once per iteration. postsolve_args : tuple Data needed by _postsolve to convert the solution to the standard-form problem into the solution to the original problem.\n\nOptions ------- maxiter : int (default = 1000) The maximum number of iterations of the algorithm. tol : float (default = 1e-8) Termination tolerance to be used for all termination criteria; see [4]_ Section 4.5. disp : bool (default = False) Set to ``True`` if indicators of optimization status are to be printed to the console each iteration. alpha0 : float (default = 0.99995) The maximal step size for Mehrota\'s predictor-corrector search direction; see :math:`\\beta_{3}` of [4]_ Table 8.1. beta : float (default = 0.1) The desired reduction of the path parameter :math:`\\mu` (see [6]_) when Mehrota\'s predictor-corrector is not in use (uncommon). sparse : bool (default = False) Set to ``True`` if the problem is to be treated as sparse after presolve. If either ``A_eq`` or ``A_ub`` is a sparse matrix, this option will automatically be set ``True``, and the problem will be treated as sparse even during presolve. If your constraint matrices contain mostly zeros and the problem is not very small (less than about 100 constraints or variables), consider setting ``True`` or providing ``A_eq`` and ``A_ub`` as sparse matrices. lstsq : bool (default = False) Set to ``True`` if the problem is expected to be very poorly conditioned. This should always be left ``False`` unless severe numerical difficulties are encountered. Leave this at the default unless you receive a warning message suggesting otherwise. sym_pos : bool (default = True) Leave ``True`` if the problem is expected to yield a well conditioned symmetric positive definite normal equation matrix (almost always). Leave this at the default unless you receive a warning message suggesting otherwise. cholesky : bool (default = True) Set to ``True`` if the normal equations are to be solved by explicit Cholesky decomposition followed by explicit forward/backward substitution. This is typically faster for problems that are numerically well-behaved. pc : bool (default = True) Leave ``True`` if the predictor-corrector method of Mehrota is to be used. This is almost always (if not always) beneficial. ip : bool (default = False) Set to ``True`` if the improved initial point suggestion due to [4]_ Section 4.3 is desired. Whether this is beneficial or not depends on the problem. permc_spec : str (default = \'MMD_AT_PLUS_A\') (Has effect only with ``sparse = True``, ``lstsq = False``, ``sym_pos = True``, and no SuiteSparse.) A matrix is factorized in each iteration of the algorithm. This option specifies how to permute the columns of the matrix for sparsity preservation. Acceptable values are:\n\n- ``NATURAL``: natural ordering.\n\n- ``MMD_ATA``: minimum degree ordering on the structure of A^T A.\n\n- ``MMD_AT_PLUS_A``: minimum degree ordering on the structure of A^T+A.\n\n- ``COLAMD``: approximate minimum degree column ordering.\n\nThis option can impact the convergence of the interior point algorithm; test different values to determine which performs best for your problem. For more information, refer to ``scipy.sparse.linalg.splu``. unknown_options : dict Optional arguments not used by this particular solver. If `unknown_options` is non-empty a warning is issued listing all unused options.\n##### Returns\n* **x **: 1-D array\n    Solution vector.\n\n* **status **: int\n    An integer representing the exit status of the optimization\n\n* **message **: str\n    A string descriptor of the exit status of the optimization.\n\n* **iteration **: int\n    The number of iterations taken to solve the problem.\n\n* **For dense problems, solvers are tried in the following order**: \n\n* **For sparse problems**: \n\n* **problem in standard form**: \n\n* **Minimize**: \n\n* **Subject to**: \n\n* **Whereas the top level ``linprog`` module expects a problem of form**: \n\n* **.. [4] Andersen, Erling D., and Knud D. Andersen. ""The MOSEK interior point\n       optimizer for linear programming**: an implementation of the\n       homogeneous algorithm."" High performance optimization. Springer US,\n       2000. 197-232.\n\n* **.. [6] Freund, Robert M. ""Primal-Dual Interior-Point Methods for Linear\n       Programming based on Newton\'s Method."" Unpublished Course Notes,\n       March 2004. Available 2/25/2017 at\n       https**: //ocw.mit.edu/courses/sloan-school-of-management/15-084j-nonlinear-programming-spring-2004/lecture-notes/lec14_int_pt_mthd.pdf\n\n* **.. [8] Andersen, Erling D., and Knud D. Andersen. ""Presolving in linear\n       programming."" Mathematical Programming 71.2 (1995)**: 221-245.\n\n* **.. [9] Bertsimas, Dimitris, and J. Tsitsiklis. ""Introduction to linear\n       programming."" Athena Scientific 1 (1997)**: 997.\n\n', 'stemmed comments': ['fix', 'linprog', 'default', '>', 'consid', 'suitespars', 'function', '1995', 'condit', 'number', 'alpha0', 'impact', 'forward/backward', 'string', 'variabl', 'standard', 'introduct', 'nonempti', 'mmd_ata', 'constant', 'search', 'unpublish', 'linear', 'descriptor', 'program', 'paramet', 'desir', '43', '45', '@', 'for', 'spars', 'point', 'suggest', 'permut', 'springer', 'minim', 'str', 'lstsq', 'test', 'ha', 'wherea', 'subject', 'definit', 'differ', 'interior', 'int', '{', 'benefici', 'presolv', 'erl', 'elimin', 'messag', 'postsolve_arg', '=', 'sym_po', 'predictorcorrector', 'term', 'level', 'due', 'integ', 'print', 'side', 'argument', 'cours', 'initi', 'D', 'left', 'intend', 'order', 'thi', 'a^t', 'object', 'coeffici', 'modul', 'a_eq', 'homogen', 'row', 'maxim', 'best', 'note', 'newton', 'difficulti', 'float', '81', 'provid', 'particular', '}', '100', 'leav', 'expect', '//ocwmitedu/courses/sloanschoolofmanagement/15084jnonlinearprogrammingspring2004/lecturenotes/lec14_int_pt_mthdpdf', 'choleski', '3', 'tabl', '221245', 'hand', 'callabl', 'freund', 'even', 'depend', 'constraint', '_postsolv', 'optim', '099995', 'typic', 'whether', 'mmd_at_plus_a', 'unus', 'execut', 'explicit', 'display', 'criteria', 'unknown_opt', 'a_ub', 'x', 'decomposit', 'valu', '0', 'vector', 'treat', 'J', 'implement', 'beta', 'numer', 'A', 'toler', 'structur', 'either', 'receiv', 'refer', 'option', 'tol', 'wellbehav', 'array', 'solver', '\\beta_', 'robert', 'mathemat', 'repres', 'standardform', 'tsitsikli', 'effect', '2004', '8', 'If', 'http', 'reduct', 'nonneg', 'matric', 'method', 'tupl', 'c0', 'per', '==', 's', 'mostli', 'less', 'determin', 'taken', 'knud', 'solut', 'fals', 'avail', 'accept', '1e8', 'primaldu', 'mosek', 'origin', 'maximum', 'column', '01', 'path', 'sparsiti', 'poorli', '4', '1000', 'dens', 'termin', 'zero', 'well', 'converg', 'interiorpoint', 'section', 'unless', 'callback', 'issu', 'give', 'maxit', 'warn', 'scipysparselinalgsplu', '2D', '2000', 'data', '197232', 'An', 'dimitri', 'sever', 'factor', 'US', 'size', 'substitut', 'inform', 'use', 'base', 'b', ';', 'almost', 'scientif', 'set', 'direct', 'equat', 'need', 'degre', 'c', 'normal', 'march', 'a^ta', 'mehrota', 'bool', 'disp', 'perform', 'high', 'small', 'convert', 'uncommon', 'right', 'symmetr', 'return', 'statu', 'step', 'permc_spec', 'the', 'minimum', 'top', 'M', 'approxim', 'consol', 'preserv', 'encount', '997', 'dict', 'andersen', 'true', 'pure', 'improv', '2/25/2017', 'exit', 'natur', 'contain', 'colamd', 'faster', 'equal', 'indic', '\\mu', '[', 'yield', 'specifi', 'list', 'ip', '1', 'otherwis', ']', 'bertsima', 'form', 'pc', 'automat', '712', 'math', 'athena', 'algorithm', 'posit', '9', '_', '1997', 'see', '6', 'alway', 'tri', 'follow', '1D', 'iter', 'matrix', 'solv', 'problem']}"
41,"{'func name': '_linprog_rs', 'comments': 'Solve the following linear programming problem via a two-phase revised simplex algorithm.\n\nminimize:\n\n\n\n c @ x\n\nsubject to:\n\nA @ x == b 0 <= x < oo\n\nParameters ---------- c : 1-D array Coefficients of the linear objective function to be minimized. c0 : float Constant term in objective function due to fixed (and eliminated) variables. (Currently unused.) A : 2-D array 2-D array which, when matrix-multiplied by ``x``, gives the values of the equality constraints at ``x``. b : 1-D array 1-D array of values representing the RHS of each equality constraint (row) in ``A_eq``. x0 : 1-D array, optional Starting values of the independent variables, which will be refined by the optimization algorithm. For the revised simplex method, these must correspond with a basic feasible solution. callback : callable, optional If a callback function is provided, it will be called within each iteration of the algorithm. The callback function must accept a single `scipy.optimize.OptimizeResult` consisting of the following fields:\n\nx : 1-D array Current solution vector. fun : float Current value of the objective function ``c @ x``. success : bool True only when an algorithm has completed successfully, so this is always False as the callback function is called only while the algorithm is still iterating. slack : 1-D array The values of the slack variables. Each slack variable corresponds to an inequality constraint. If the slack is zero, the corresponding constraint is active. con : 1-D array The (nominally zero) residuals of the equality constraints, that is, ``b\n\n- A_eq @ x``. phase : int The phase of the algorithm being executed. status : int For revised simplex, this is always 0 because if a different status is detected, the algorithm terminates. nit : int The number of iterations performed. message : str A string descriptor of the exit status of the optimization. postsolve_args : tuple Data needed by _postsolve to convert the solution to the standard-form problem into the solution to the original problem.\n\nOptions ------- maxiter : int The maximum number of iterations to perform in either phase. tol : float The tolerance which determines when a solution is ""close enough"" to zero in Phase 1 to be considered a basic feasible solution or close enough to positive to serve as an optimal solution. disp : bool Set to ``True`` if indicators of optimization status are to be printed to the console each iteration. maxupdate : int The maximum number of updates performed on the LU factorization. After this many updates is reached, the basis matrix is factorized from scratch. mast : bool Minimize Amortized Solve Time. If enabled, the average time to solve a linear system using the basis factorization is measured. Typically, the average solve time will decrease with each successive solve after initial factorization, as factorization takes much more time than the solve operation (and updates). Eventually, however, the updated factorization becomes sufficiently complex that the average solve time begins to increase. When this is detected, the basis is refactorized from scratch. Enable this option to maximize speed at the risk of nondeterministic behavior. Ignored if ``maxupdate`` is 0. pivot : ""mrc"" or ""bland"" Pivot rule: Minimum Reduced Cost (default) or Bland\'s rule. Choose Bland\'s rule if iteration limit is reached and cycling is suspected. unknown_options : dict Optional arguments not used by this particular solver. If `unknown_options` is non-empty a warning is issued listing all unused options.\n##### Returns\n* **x **: 1-D array\n    Solution vector.\n\n* **status **: int\n    An integer representing the exit status of the optimization\n\n* **message **: str\n    A string descriptor of the exit status of the optimization.\n\n* **iteration **: int\n    The number of iterations taken to solve the problem.\n\n', 'stemmed comments': ['fix', 'default', 'consid', 'function', 'nomin', 'each', 'number', 'string', 'call', 'variabl', 'nonempti', 'constant', 'LU', 'bland', 'linear', 'descriptor', 'program', 'paramet', 'oper', 'activ', 'ignor', 'risk', 'for', '@', 'residu', 'close', 'minim', 'str', 'after', 'must', 'amort', 'subject', 'differ', 'int', 'basi', 'elimin', 'messag', 'postsolve_arg', '=', 'term', 'updat', 'due', 'integ', 'print', 'argument', 'speed', 'initi', 'becom', 'decreas', 'object', 'coeffici', 'a_eq', 'row', 'maxim', 'float', 'provid', 'particular', 'mrc', 'feasibl', 'enabl', 'x0', 'via', 'callabl', 'limit', 'rh', 'constraint', 'optim', '_postsolv', 'unus', 'typic', 'nondeterminist', 'cost', 'execut', 'unknown_opt', 'x', 'valu', '0', 'vector', 'much', 'serv', 'pivot', 'A', 'fun', 'singl', 'detect', 'either', 'toler', 'begin', 'option', 'tol', 'start', 'array', 'cycl', 'solver', 'scratch', 'repres', 'refin', 'standardform', 'If', 'oo', 'nit', 'reach', 'refactor', 'method', 'tupl', 'c0', 'consist', 'when', '==', 's', 'determin', 'taken', 'solut', 'fals', 'choos', 'accept', 'inequ', 'origin', 'maximum', 'measur', 'howev', 'within', 'time', 'termin', 'zero', 'increas', 'suffici', 'rule', 'success', 'callback', 'issu', 'give', 'maxit', 'warn', '2D', 'data', 'An', 'matrixmultipli', 'factor', 'complet', 'revis', 'use', 'behavior', 'complex', 'b', 'con', 'mani', 'set', 'need', 'simplex', 'c', 'reduc', 'correspond', 'eventu', 'system', 'bool', 'disp', 'perform', 'convert', 'return', 'statu', 'twophas', 'the', 'minimum', 'consol', 'scipyoptimizeoptimizeresult', 'dict', 'independ', 'true', 'take', 'averag', 'still', 'exit', 'phase', 'list', 'equal', 'indic', '1', 'current', 'algorithm', 'posit', 'field', 'enough', 'slack', 'suspect', 'alway', 'mast', 'basic', 'maxupd', 'follow', '<', 'iter', '1D', 'matrix', 'solv', 'problem']}"
42,"{'func name': '_linprog_simplex', 'comments': 'Minimize a linear objective function subject to linear equality and non-negativity constraints using the two phase simplex method. Linear programming is intended to solve problems of the following form\n\nMinimize::\n\nc @ x\n\nSubject to::\n\nA @ x == b x >= 0\n\nParameters ---------- c : 1-D array Coefficients of the linear objective function to be minimized. c0 : float Constant term in objective function due to fixed (and eliminated) variables. (Purely for display.) A : 2-D array 2-D array such that ``A @ x``, gives the values of the equality constraints at ``x``. b : 1-D array 1-D array of values representing the right hand side of each equality constraint (row) in ``A``. callback : callable, optional If a callback function is provided, it will be called within each iteration of the algorithm. The callback function must accept a single `scipy.optimize.OptimizeResult` consisting of the following fields:\n\nx : 1-D array Current solution vector fun : float Current value of the objective function success : bool True when an algorithm has completed successfully. slack : 1-D array The values of the slack variables. Each slack variable corresponds to an inequality constraint. If the slack is zero, the corresponding constraint is active. con : 1-D array The (nominally zero) residuals of the equality constraints, that is, ``b\n\n- A_eq @ x`` phase : int The phase of the algorithm being executed. status : int An integer representing the status of the optimization::\n\n0 : Algorithm proceeding nominally 1 : Iteration limit reached 2 : Problem appears to be infeasible 3 : Problem appears to be unbounded 4 : Serious numerical difficulties encountered nit : int The number of iterations performed. message : str A string descriptor of the exit status of the optimization. postsolve_args : tuple Data needed by _postsolve to convert the solution to the standard-form problem into the solution to the original problem.\n\nOptions ------- maxiter : int The maximum number of iterations to perform. disp : bool If True, print exit status message to sys.stdout tol : float The tolerance which determines when a solution is ""close enough"" to zero in Phase 1 to be considered a basic feasible solution or close enough to positive to serve as an optimal solution. bland : bool If True, use Bland\'s anti-cycling rule [3]_ to choose pivots to prevent cycling. If False, choose pivots which should lead to a converged solution more quickly. The latter method is subject to cycling (non-convergence) in rare instances. unknown_options : dict Optional arguments not used by this particular solver. If `unknown_options` is non-empty a warning is issued listing all unused options.\n##### Returns\n* **x **: 1-D array\n    Solution vector.\n\n* **status **: int\n    An integer representing the exit status of the optimization\n\n* **message **: str\n    A string descriptor of the exit status of the optimization.\n\n* **iteration **: int\n    The number of iterations taken to solve the problem.\n\n* **.. [3] Bland, Robert G. New finite pivoting rules for the simplex method.\n       Mathematics of Operations Research (2), 1977**: pp. 103-107.\n\n* **problem in standard form**: \n\n* **Minimize**: \n\n* **Subject to**: \n\n* **Whereas the top level ``linprog`` module expects a problem of form**: \n\n', 'stemmed comments': ['fix', 'linprog', '>', 'consid', 'function', 'nomin', 'each', 'number', 'string', 'call', 'variabl', 'standard', 'nonempti', 'constant', 'bland', 'linear', 'descriptor', 'program', 'paramet', 'oper', 'activ', '2', '@', 'residu', 'close', 'minim', 'str', 'must', 'nonconverg', '1977', 'wherea', 'subject', 'int', 'elimin', 'messag', 'postsolve_arg', '=', 'level', 'term', 'finit', 'due', 'integ', 'print', 'side', 'argument', 'intend', 'unbound', 'rare', 'G', 'object', 'coeffici', 'modul', 'a_eq', 'row', 'difficulti', 'float', 'provid', 'particular', 'expect', 'feasibl', '3', 'hand', 'callabl', 'limit', 'research', 'constraint', 'optim', '_postsolv', 'unus', 'execut', 'display', 'prevent', 'unknown_opt', 'x', 'valu', '0', 'vector', 'serv', 'numer', 'pivot', 'A', 'fun', 'singl', 'toler', 'appear', 'option', 'tol', 'solver', 'array', 'cycl', 'robert', 'mathemat', 'repres', 'standardform', 'If', 'proceed', 'reach', 'nit', 'nonneg', 'method', 'tupl', 'c0', 'consist', '==', 's', 'instanc', 'determin', 'taken', 'solut', '103107', 'fals', 'choos', 'accept', 'inequ', 'origin', 'maximum', 'within', '4', 'zero', 'converg', 'rule', 'success', 'callback', 'issu', 'give', 'maxit', 'warn', '2D', 'data', 'An', 'complet', 'use', 'b', 'con', 'need', 'simplex', 'c', 'correspond', 'bool', 'disp', 'perform', 'convert', 'right', 'return', 'top', 'statu', 'the', 'sysstdout', 'scipyoptimizeoptimizeresult', 'two', 'infeas', 'encount', 'dict', 'new', 'pp', 'true', 'pure', 'exit', 'phase', 'list', 'equal', '[', '1', 'anticycl', 'quickli', ']', 'latter', 'form', 'current', 'algorithm', 'posit', 'field', '_', 'enough', 'slack', 'seriou', 'basic', 'follow', '1D', 'iter', 'lead', 'solv', 'problem']}"
43,"{'func name': '_check_result', 'comments': 'Check the validity of the provided solution.\n\nA valid (optimal) solution satisfies all bounds, all slack variables are negative and all equality constraint residuals are strictly non-zero. Further, the lower-bounds, upper-bounds, slack and residuals contain no nan values.\n\nParameters ---------- x : 1-D array Solution vector to original linear programming problem fun: float optimal objective value for original problem status : int An integer representing the exit status of the optimization::\n\n0 : Optimization terminated successfully 1 : Iteration limit reached 2 : Problem appears to be infeasible 3 : Problem appears to be unbounded 4 : Serious numerical difficulties encountered\n\nslack : 1-D array The (non-negative) slack in the upper bound constraints, that is, ``b_ub\n\n- A_ub @ x`` con : 1-D array The (nominally zero) residuals of the equality constraints, that is, ``b\n\n- A_eq @ x`` bounds : 2D array The bounds on the original variables ``x`` message : str A string descriptor of the exit status of the optimization. tol : float Termination tolerance; see [1]_ Section 4.5.\n##### Returns\n* **status **: int\n    An integer representing the exit status of the optimization\n\n* **message **: str\n    A string descriptor of the exit status of the optimization.\n\n', 'stemmed comments': ['bound', 'nomin', 'string', 'variabl', 'strictli', 'linear', 'descriptor', 'program', 'paramet', '2', '45', '@', 'residu', 'str', 'int', 'messag', 'integ', 'unbound', 'object', 'a_eq', 'nonzero', 'difficulti', 'float', 'provid', 'b_ub', '3', 'limit', 'optim', 'constraint', 'a_ub', 'x', 'valu', 'vector', '0', 'lowerbound', 'numer', 'A', 'fun', 'toler', 'appear', 'nan', 'tol', 'array', 'repres', 'reach', 'nonneg', 'valid', 'solut', 'check', 'origin', 'neg', 'upper', '4', 'termin', 'zero', 'success', 'section', '2D', 'An', 'satisfi', ';', 'b', 'con', 'further', 'return', 'statu', 'the', 'infeas', 'upperbound', 'encount', 'exit', 'contain', 'equal', '[', '1', ']', '_', 'slack', 'see', 'seriou', '1D', 'iter', 'problem']}"
44,"{'func name': 'linprog', 'comments': 'Linear programming: minimize a linear objective function subject to linear equality and inequality constraints.\n\nLinear programming solves problems of the following form:\n\n.. math::\n\n\\min_x \\ & c^T x \\\\ \\mbox{such that} \\ & A_{ub} x \\leq b_{ub},\\\\ & A_{eq} x = b_{eq},\\\\ & l \\leq x \\leq u ,\n\nwhere :math:`x` is a vector of decision variables; :math:`c`, :math:`b_{ub}`, :math:`b_{eq}`, :math:`l`, and :math:`u` are vectors; and :math:`A_{ub}` and :math:`A_{eq}` are matrices.\n\nInformally, that\'s:\n\nminimize::\n\nc @ x\n\nsuch that::\n\nA_ub @ x <= b_ub A_eq @ x == b_eq lb <= x <= ub\n\nNote that by default ``lb = 0`` and ``ub = None`` unless specified with ``bounds``.\n\nParameters ---------- c : 1-D array The coefficients of the linear objective function to be minimized. A_ub : 2-D array, optional The inequality constraint matrix. Each row of ``A_ub`` specifies the coefficients of a linear inequality constraint on ``x``. b_ub : 1-D array, optional The inequality constraint vector. Each element represents an upper bound on the corresponding value of ``A_ub @ x``. A_eq : 2-D array, optional The equality constraint matrix. Each row of ``A_eq`` specifies the coefficients of a linear equality constraint on ``x``. b_eq : 1-D array, optional The equality constraint vector. Each element of ``A_eq @ x`` must equal the corresponding element of ``b_eq``. bounds : sequence, optional A sequence of ``(min, max)`` pairs for each element in ``x``, defining the minimum and maximum values of that decision variable. Use ``None`` to indicate that there is no bound. By default, bounds are ``(0, None)`` (all decision variables are non-negative). If a single tuple ``(min, max)`` is provided, then ``min`` and ``max`` will serve as bounds for all decision variables. method : {\'interior-point\', \'revised simplex\', \'simplex\'}, optional The algorithm used to solve the standard form problem. :ref:`\'interior-point\' <optimize.linprog-interior-point>` (default), :ref:`\'revised simplex\' <optimize.linprog-revised_simplex>`, and :ref:`\'simplex\' <optimize.linprog-simplex>` (legacy) are supported. callback : callable, optional If a callback function is provided, it will be called at least once per iteration of the algorithm. The callback function must accept a single `scipy.optimize.OptimizeResult` consisting of the following fields:\n\nx : 1-D array The current solution vector. fun : float The current value of the objective function ``c @ x``. success : bool ``True`` when the algorithm has completed successfully. slack : 1-D array The (nominally positive) values of the slack, ``b_ub\n\n- A_ub @ x``. con : 1-D array The (nominally zero) residuals of the equality constraints, ``b_eq\n\n- A_eq @ x``. phase : int The phase of the algorithm being executed. status : int An integer representing the status of the algorithm.\n\n``0`` : Optimization proceeding nominally.\n\n``1`` : Iteration limit reached.\n\n``2`` : Problem appears to be infeasible.\n\n``3`` : Problem appears to be unbounded.\n\n``4`` : Numerical difficulties encountered.\n\nnit : int The current iteration number. message : str A string descriptor of the algorithm status.\n\noptions : dict, optional A dictionary of solver options. All methods accept the following options:\n\nmaxiter : int Maximum number of iterations to perform. Default: see method-specific documentation. disp : bool Set to ``True`` to print convergence messages. Default: ``False``. autoscale : bool Set to ``True`` to automatically perform equilibration. Consider using this option if the numerical values in the constraints are separated by several orders of magnitude. Default: ``False``. presolve : bool Set to ``False`` to disable automatic presolve. Default: ``True``. rr : bool Set to ``False`` to disable automatic redundancy removal. Default: ``True``.\n\nFor method-specific options, see :func:`show_options(\'linprog\') <show_options>`.\n\nx0 : 1-D array, optional Guess values of the decision variables, which will be refined by the optimization algorithm. This argument is currently used only by the \'revised simplex\' method, and can only be used if `x0` represents a basic feasible solution.\n##### Returns\n* **res **: OptimizeResult\n    A\n\n* **show_options **: Additional options accepted by the solvers.\n\n* ****: ref\n\n* **.. versionadded**: \n\n* **problem simplifications. Specifically, it checks for**: \n\n* **Several potential improvements can be made here**: additional presolve\n\n* **.. [3] Bland, Robert G. New finite pivoting rules for the simplex method.\n       Mathematics of Operations Research (2), 1977**: pp. 103-107.\n\n* **.. [4] Andersen, Erling D., and Knud D. Andersen. ""The MOSEK interior point\n       optimizer for linear programming**: an implementation of the\n       homogeneous algorithm."" High performance optimization. Springer US,\n       2000. 197-232.\n\n* **.. [5] Andersen, Erling D. ""Finding all linearly dependent rows in\n       large-scale linear programming."" Optimization Methods and Software\n       6.3 (1995)**: 219-227.\n\n* **.. [6] Freund, Robert M. ""Primal-Dual Interior-Point Methods for Linear\n       Programming based on Newton\'s Method."" Unpublished Course Notes,\n       March 2004. Available 2/25/2017 at\n       https**: //ocw.mit.edu/courses/sloan-school-of-management/15-084j-nonlinear-programming-spring-2004/lecture-notes/lec14_int_pt_mthd.pdf\n\n* **.. [7] Fourer, Robert. ""Solving Linear Programs by Interior-Point Methods.""\n       Unpublished Course Notes, August 26, 2005. Available 2/25/2017 at\n       http**: //www.4er.org/CourseNotes/Book%20B/B-III.pdf\n\n* **.. [8] Andersen, Erling D., and Knud D. Andersen. ""Presolving in linear\n       programming."" Mathematical Programming 71.2 (1995)**: 221-245.\n\n* **.. [9] Bertsimas, Dimitris, and J. Tsitsiklis. ""Introduction to linear\n       programming."" Athena Scientific 1 (1997)**: 997.\n\n* **.. [11] Bartels, Richard H. ""A stabilization of the simplex method.""\n        Journal in  Numerische Mathematik 16.5 (1971)**: 414-434.\n\n* **.. [12] Tomlin, J. A. ""On scaling linear programming problems.""\n        Mathematical Programming Study 4 (1975)**: 146-166.\n\n* **Consider the following problem**: \n\n* **.. math**: \n\n* **multiplying both sides by a factor of **: math\n\n* **constraint is really the simple bound **: math\n\n* **Finally, since there are no bounds on **: math\n\n* **specify the bounds **: math\n\n* **into arrays and tuples, the input for this problem is**: \n\n* **>>> print(res)\n     con**: array([], dtype=float64)\n     fun\n\n', 'stemmed comments': ['bound', 'linprog', 'default', '>', 'consid', '1995', 'function', 'nomin', 'each', 'func', 'number', 'string', 'final', 'call', 'iter', 'variabl', 'standard', 'introduct', 'defin', 'lb', 'largescal', 'unpublish', 'bland', 'fourer', 'linear', 'descriptor', 'program', 'paramet', 'oper', 'specif', 'none', '2', 'for', '@', 'simpl', 'point', 'By', 'studi', 'magnitud', 're', 'residu', 'springer', 'bartel', 'minim', 'str', 'made', 'must', '1977', 'subject', 'mathematik', 'interior', 'int', '{', 'element', 'presolv', 'erl', 'messag', '=', 'equilibr', 'finit', 'max', 'integ', 'stabil', 'print', 'side', 'l', 'argument', 'b_', 'cours', 'D', '7', 'unbound', 'order', 'thi', '//www4erorg/coursenotes/book', 'G', 'object', 'coeffici', 'a_eq', 'homogen', 'row', 'eq', 'find', 'note', 'newton', 'difficulti', 'float', '1971', 'provid', '}', 'b_ub', 'rr', '//ocwmitedu/courses/sloanschoolofmanagement/15084jnonlinearprogrammingspring2004/lecturenotes/lec14_int_pt_mthdpdf', 'ub', 'feasibl', '414434', 'scale', 'numerisch', 'x0', '3', 'document', '221245', 'callabl', '\\leq', 'limit', 'research', 'depend', 'constraint', 'optim', '&', 'freund', 'execut', 'On', 'min', 'a_ub', 'x', 'guess', 'valu', 'vector', '0', 'J', 'input', 'implement', 'serv', 'journal', 'numer', 'addit', 'richard', 'pivot', 'A', 'fun', 'singl', 'appear', 'option', 'solver', 'realli', 'array', 'robert', 'mathemat', 'legaci', 'repres', 'refin', 'softwar', '63', 'tsitsikli', 'tomlin', '2004', '8', 'optimizelinproginteriorpoint', 'If', 'proceed', 'reach', 'nit', 'optimizeresult', 'http', 'matric', 'nonneg', 'methodspecif', 'tupl', 'method', 'consist', 'per', '==', 's', 'dictionari', 'least', 'knud', '5', 'solut', '103107', 'fals', 'avail', 'accept', 'primaldu', '219227', 'check', 'inequ', 'mosek', 'upper', 'maximum', 'b_eq', '4', 'support', 'zero', 'converg', '20b/biiipdf', '165', 'interiorpoint', 'rule', 'success', 'unless', 'callback', 'august', 'maxit', '2000', '197232', '2D', 'pair', 'dimitri', 'An', '1975', 'sever', 'factor', 'complet', 'US', 'inform', 'revis', 'optimizelinprogsimplex', 'use', 'base', ';', 'potenti', 'con', 'decis', 'show_opt', 'simplif', 'scientif', 'set', 'ref', 'optimizelinprogrevised_simplex', 'c', 'simplex', 'march', 'correspond', 'redund', 'bool', 'disp', 'autoscal', 'dtype=float64', 'perform', 'high', '\\', 'disabl', 'return', 'statu', 'M', '2005', 'the', 'minimum', 'H', 'scipyoptimizeoptimizeresult', '11', '\\min_x', 'infeas', 'encount', 'dict', 'new', 'pp', 'andersen', 'true', '997', '146166', '26', 'linearli', 'sinc', 'improv', '2/25/2017', 'phase', 'A_', 'equal', 'specifi', 'c^t', 'indic', '[', '1', 'all', '12', ']', 'bertsima', 'form', 'automat', '712', 'math', 'sequenc', 'current', 'athena', 'multipli', 'algorithm', 'posit', 'field', 'separ', '9', 'slack', '1997', 'see', '6', 'basic', 'u', 'follow', '\\\\', 'versionad', 'remov', '<', '\\mbox', '1D', 'matrix', '%', 'solv', 'problem']}"
45,"{'func name': 'log_softmax', 'comments': ""Logarithm of softmax function\n\nlog_softmax(x) = log(softmax(x))\n\nParameters ---------- x : array_like Input array. axis : int or tuple of ints, optional Axis to compute values along. Default is None and softmax will be computed over the entire array `x`.\n##### Returns\n* **s **: ndarray or scalar\n    An array with the same shape as `x`. Exponential of the result will\n    sum to 1 along the specified axis. If `x` is a scalar, a scalar is\n    returned.\n\n* **.. versionadded**: \n\n* **>>> with np.errstate(divide='ignore')**: \n\n"", 'stemmed comments': ['option', 'default', '>', 'array', 'ndarray', 'function', 'along', 'scalar', 'If', 'return', 'tupl', 'sum', 'result', 'paramet', 'none', 'log', 'specifi', '1', 'entir', 'axi', 'comput', 'exponenti', 'nperrstat', 'log_softmax', 'int', 'shape', 'An', 'x', 'softmax', 'valu', 'divide=ignor', '=', 'input', 'versionad', 'logarithm', 'array_lik']}"
46,"{'func name': 'linear_sum_assignment', 'comments': 'Solve the linear sum assignment problem.\n\nThe linear sum assignment problem is also known as minimum weight matching in bipartite graphs. A problem instance is described by a matrix C, where each C[i,j] is the cost of matching vertex i of the first partite set (a ""worker"") and vertex j of the second set (a ""job""). The goal is to find a complete assignment of workers to jobs of minimal cost.\n\nFormally, let X be a boolean matrix where :math:`X[i,j] = 1` iff row i is assigned to column j. Then the optimal assignment has cost\n\n.. math:: \\min \\sum_i \\sum_j C_{i,j} X_{i,j}\n\nwhere, in the case where the matrix X is square, each row is assigned to exactly one column, and each column to exactly one row.\n\nThis function can also solve a generalization of the classic assignment problem where the cost matrix is rectangular. If it has more rows than columns, then not every row needs to be assigned to a column, and vice versa.\n\nParameters ---------- cost_matrix : array The cost matrix of the bipartite graph.\n\nmaximize : bool (default: False) Calculates a maximum weight matching if true.\n##### Returns\n* **row_ind, col_ind **: array\n    An array of row indices and one of corresponding column indices giving\n    the optimal assignment. The cost of the assignment can be computed\n    as ``cost_matrix[row_ind, col_ind].sum()``. The row indices will be\n    sorted; in the case of a square cost matrix they will be equal to\n    ``numpy.arange(cost_matrix.shape[0])``.\n\n* **.. versionadded**: \n\n* **1. https**: //en.wikipedia.org/wiki/Assignment_problem\n\n* **2. DF Crouse. On implementing 2D rectangular assignment algorithms.\n   *IEEE Transactions on Aerospace and Electronic Systems*,\n   52(4)**: 1679-1696, August 2016, https\n\n', 'stemmed comments': ['default', 'function', '//enwikipediaorg/wiki/assignment_problem', 'j', 'electron', 'crous', 'iff', 'sum', 'cost_matrixshap', 'linear', 'paramet', '2', 'versa', 'minim', 'row_ind', 'weight', '{', '=', 'col_ind', '\\sum_i', 'vice', 'thi', 'row', 'maxim', 'find', 'partit', '}', 'first', 'gener', 'let', 'goal', 'optim', 'also', '52', 'cost', 'On', 'assign', 'exactli', '0', 'implement', 'A', '2016', 'array', 'X_', 'graph', 'If', 'http', 'job', 'one', 'squar', '\\min', 'instanc', 'then', 'ieee', 'fals', 'case', 'column', 'maximum', '4', 'formal', 'describ', 'comput', 'transact', 'give', 'second', 'august', '2D', 'An', '\\sum_j', 'complet', 'C', '16791696', 'sort', ';', 'set', 'DF', 'need', 'known', 'numpyarang', 'correspond', 'system', 'bool', 'return', 'minimum', 'the', 'aerospac', 'everi', 'true', 'problem', 'boolean', 'indic', 'equal', 'solv', '[', 'bipartit', '1', 'cost_matrix', ']', 'match', 'math', 'algorithm', 'vertex', 'calcul', 'versionad', 'X', 'matrix', 'classic', 'rectangular', 'worker', 'C_']}"
47,"{'func name': '_logm', 'comments': 'Compute the matrix logarithm.\n\nSee the logm docstring in matfuncs.py for more info.\n\nNotes ----- In this function we look at triangular matrices that are similar to the input matrix. If any diagonal entry of such a triangular matrix is exactly zero then the original matrix is singular. The matrix logarithm does not exist for such matrices, but in such cases we will pretend that the diagonal entries that are zero are actually slightly positive by an ad-hoc amount, in the interest of returning something more useful than NaN. This will cause a warning.\n', 'stemmed comments': ['singular', 'nan', 'function', 'exist', 'someth', 'thi', 'adhoc', 'If', 'caus', 'return', 'matric', 'diagon', 'the', 'pretend', 'note', 'amount', 'entri', 'actual', 'look', 'case', 'origin', 'zero', 'comput', 'matfuncspi', 'warn', 'info', 'slightli', 'posit', 'logm', 'triangular', 'In', 'see', 'exactli', 'input', 'interest', 'logarithm', 'use', 'matrix', 'similar', 'docstr']}"
48,"{'func name': 'sqrtm', 'comments': 'Matrix square root.\n\nParameters ---------- A : (N, N) array_like Matrix whose square root to evaluate disp : bool, optional Print warning if error in the result is estimated large instead of returning estimated error. (Default: True) blocksize : integer, optional If the blocksize is not degenerate with respect to the size of the input array, then use a blocked algorithm. (Default: 64)\n##### Returns\n* **sqrtm **: (N, N) ndarray\n    Value of the sqrt function at `A`\n\n* **errest **: float\n    (if disp == False)\n    Frobenius norm of the estimated error, ||err||_F / ||A||_F\n\n', 'stemmed comments': ['option', 'N', 'default', 'array', 'block', 'ndarray', 'function', '64', 'bool', 'disp', 'If', 'return', 'squar', 'root', 'blocksiz', 'whose', 'result', 'respect', 'float', 'paramet', '==', '||err||_f', 'true', 'fals', 'evalu', 'sqrt', 'sqrtm', 'error', '||a||_f', '/', 'warn', 'estim', 'degener', 'frobeniu', 'algorithm', 'instead', 'valu', 'norm', 'input', 'size', 'larg', 'integ', 'use', 'A', 'matrix', 'print', 'errest', 'array_lik']}"
49,"{'func name': 'load_npz', 'comments': 'Load a sparse matrix from a file using ``.npz`` format.\n\nParameters ---------- file : str or file-like object Either the file name (string) or an open file (file-like object) where the data will be loaded.\n##### Returns\n* **result **: csc_matrix, csr_matrix, bsr_matrix, dia_matrix or coo_matrix\n    A sparse matrix containing the loaded data.\n\n', 'stemmed comments': ['npz', 'string', 'dia_matrix', 'open', 'object', 'return', 'format', 'coo_matrix', 'result', 'file', 'paramet', 'csr_matrix', 'spars', 'name', 'bsr_matrix', 'contain', 'csc_matrix', 'str', 'filelik', 'load', 'data', 'use', 'A', 'matrix', 'either']}"
50,"{'func name': 'max_len_seq', 'comments': ""Maximum length sequence (MLS) generator.\n\nParameters ---------- nbits : int Number of bits to use. Length of the resulting sequence will be ``(2**nbits)\n\n- 1``. Note that generating long sequences (e.g., greater than ``nbits == 16``) can take a long time. state : array_like, optional If array, must be of length ``nbits``, and will be cast to binary (bool) representation. If None, a seed of ones will be used, producing a repeatable representation. If ``state`` is all zeros, an error is raised as this is invalid. Default: None. length : int, optional Number of samples to compute. If None, the entire length ``(2**nbits)\n\n- 1`` is computed. taps : array_like, optional Polynomial taps to use (e.g., ``[7, 6, 1]`` for an 8-bit sequence). If None, taps will be automatically selected (for up to ``nbits == 32``).\n##### Returns\n* **seq **: array\n    Resulting MLS sequence of 0's and 1's.\n\n* **state **: array\n    The final state of the shift register.\n\n* **The algorithm for MLS generation is generically described in**: https\n\n* **option listed for each value of ``nbits`` in**: http\n\n* **.. versionadded**: \n\n* **MLS uses binary convention**: \n\n* **MLS has a white spectrum (except for DC)**: \n\n* **Circular autocorrelation of MLS is an impulse**: \n\n* **Linear autocorrelation of MLS is approximately an impulse**: \n\n"", 'stemmed comments': ['8bit', 'default', 'seq', 'greater', 'number', 'final', 'linear', 'paramet', '2', 'eg', 'none', 'seed', 'white', 'must', 'except', 'represent', 'int', 'spectrum', 'autocorrel', '7', 'rais', 'note', 'tap', 'bit', 'gener', '16', 'invalid', 'cast', 'error', 'entir', 'circular', 'long', 'valu', '0', 'DC', 'option', 'array', 'impuls', 'convent', 'If', 'http', 'one', '==', 's', 'maximum', 'time', 'zero', 'ml', 'comput', 'describ', 'binari', 'produc', 'polynomi', 'use', 'bool', 'return', 'sampl', 'the', 'approxim', 'result', '32', 'take', 'regist', 'repeat', 'length', 'list', '[', '1', 'state', ']', 'shift', 'automat', 'sequenc', 'nbit', 'algorithm', '6', 'versionad', 'select', 'array_lik']}"
51,"{'func name': 'standardize_constraints', 'comments': 'Converts constraints to the form required by the solver.\n\n\n', 'stemmed comments': ['requir', 'solver', 'constraint', 'convert', 'form']}"
52,"{'func name': 'mp_assert_allclose', 'comments': ""Compare lists of mpmath.mpf's or mpmath.mpc's directly so that it can be done to higher precision than double.\n\n\n"", 'stemmed comments': ['mpmathmpf', 'precis', 'mpmathmpc', 'list', 's', 'compar', 'higher', 'done', 'directli', 'doubl']}"
53,"{'func name': '_cho_inv_batch', 'comments': 'Invert the matrices a_i, using a Cholesky factorization of A, where a_i resides in the last two dimensions of a and the other indices describe the index i.\n\nOverwrites the data in a.\n\nParameters ---------- a : array Array of matrices to invert, where the matrices themselves are stored in the last two dimensions. check_finite : bool, optional Whether to check that the input matrices contain only finite numbers. Disabling may give a performance gain, but may result in problems (crashes, non-termination) if the inputs do contain infinities or NaNs.\n##### Returns\n* **x **: array\n    Array of inverses of the matrices ``a_i``.\n\n* **scipy.linalg.cholesky **: Cholesky factorization of a matrix\n\n', 'stemmed comments': ['option', 'nan', 'array', 'i', 'number', 'invert', 'a', 'bool', 'perform', 'gain', 'disabl', 'return', 'matric', 'resid', 'two', 'result', 'scipylinalgcholeski', 'invers', 'paramet', 'choleski', 'check', 'crash', 'contain', 'store', 'indic', 'check_finit', 'whether', 'describ', 'last', 'overwrit', 'give', 'data', 'x', 'nontermin', 'factor', 'dimens', 'input', 'finit', 'may', 'infin', 'use', 'A', 'matrix', 'a_i', 'index', 'problem']}"
54,"{'func name': '_get_output', 'comments': '', 'stemmed comments': []}"
55,"{'func name': 'nnls', 'comments': 'Solve ``argmin_x || Ax - b ||_2`` for ``x>=0``. This is a wrapper for a FORTRAN non-negative least squares solver.\n\nParameters ---------- A : ndarray Matrix ``A`` as shown above. b : ndarray Right-hand side vector. maxiter: int, optional Maximum number of iterations, optional. Default is ``3 * A.shape[1]``.\n##### Returns\n* **x **: ndarray\n    Solution vector.\n\n* **rnorm **: float\n    The residual, ``|| Ax-b ||_2``.\n\n* **lsq_linear **: Linear least squares with bounds on the variables\n\n', 'stemmed comments': ['bound', 'option', 'argmin_x', '>', 'solver', 'ndarray', 'default', 'lsq_linear', 'number', 'thi', 'iter', 'variabl', 'return', 'nonneg', '=0', 'squar', 'the', 'ashap', 'float', 'linear', 'least', 'wrapper', 'paramet', 'solut', '||', 'maximum', 'residu', '3', '[', '1', 'Ax', 'rnorm', ']', 'maxit', 'int', 'fortran', 'x', 'vector', 'shown', 'righthand', 'A', 'matrix', 'side', 'axb', 'b', '||_2', 'solv']}"
56,"{'func name': 'norm', 'comments': ""Norm of a sparse matrix\n\nThis function is able to return one of seven different matrix norms, depending on the value of the ``ord`` parameter.\n\nParameters ---------- x : a sparse matrix Input sparse matrix. ord : {non-zero int, inf, -inf, 'fro'}, optional Order of the norm (see table under ``Notes``). inf means numpy's `inf` object. axis : {int, 2-tuple of ints, None}, optional If `axis` is an integer, it specifies the axis of `x` along which to compute the vector norms.\n\nIf `axis` is a 2-tuple, it specifies the axes that hold 2-D matrices, and the matrix norms of these matrices are computed.\n\nIf `axis` is None then either a vector norm (when `x` is 1-D) or a matrix norm (when `x` is 2-D) is returned.\n##### Returns\n* **n **: float or ndarray\n\n* **https**: //github.com/numpy/numpy/blob/master/numpy/linalg/linalg.py\n\n* **The following norms can be calculated**: \n\n* **The Frobenius norm is given by [1]_**: \n\n"", 'stemmed comments': ['option', 'ndarray', 'given', 'function', 'mean', 'order', 'fro', 'thi', 'along', '//githubcom/numpy/numpy/blob/master/numpy/linalg/linalgpi', 'If', 'object', 'http', 'return', 'one', '2tupl', 'matric', 'the', 'note', 'axe', 'nonzero', 's', 'float', 'paramet', '}', 'none', 'spars', 'specifi', 'tabl', '[', '1', 'n', 'depend', 'seven', 'ord', 'axi', 'inf', 'comput', 'abl', ']', 'differ', 'int', '{', 'numpi', '2D', 'frobeniu', 'x', '_', 'valu', 'vector', 'see', 'norm', 'input', 'calcul', 'follow', 'integ', 'matrix', '1D', 'either', 'hold']}"
57,"{'func name': 'check_derivative', 'comments': 'Check correctness of a function computing derivatives (Jacobian or gradient) by comparison with a finite difference approximation.\n\nParameters ---------- fun : callable Function of which to estimate the derivatives. The argument x passed to this function is ndarray of shape (n,) (never a scalar even if n=1). It must return 1-D array_like of shape (m,) or a scalar. jac : callable Function which computes Jacobian matrix of `fun`. It must work with argument x the same way as `fun`. The return value must be array_like or sparse matrix with an appropriate shape. x0 : array_like of shape (n,) or float Point at which to estimate the derivatives. Float will be converted to 1-D array. bounds : 2-tuple of array_like, optional Lower and upper bounds on independent variables. Defaults to no bounds. Each bound must match the size of `x0` or be a scalar, in the latter case the bound will be the same for all variables. Use it to limit the range of function evaluation. args, kwargs : tuple and dict, optional Additional arguments passed to `fun` and `jac`. Both empty by default. The calling signature is ``fun(x, *args, **kwargs)`` and the same for `jac`.\n##### Returns\n* **accuracy **: float\n    The maximum among all relative errors for elements with absolute values\n    higher than 1 and absolute errors for elements with absolute values\n    less or equal than 1. If `accuracy` is on the order of 1e-6 or lower,\n    then it is likely that your `jac` implementation is correct.\n\n* **approx_derivative **: Compute finite difference approximation of derivative.\n\n* **>>> def f(x, c1, c2)**: \n\n* **>>> def jac(x, c1, c2)**: \n\n', 'stemmed comments': ['bound', 'default', '>', 'function', 'each', 'never', 'call', 'variabl', 'It', 'among', 'paramet', 'jacobian', 'absolut', 'spars', 'point', '1e6', 'lower', 'n', 'must', 'c1', 'rel', 'differ', 'element', 'shape', 'n=1', 'rang', 'finit', 'accuraci', 'argument', 'order', 'approx_deriv', 'way', 'float', 'higher', 'evalu', 'x0', 'callabl', 'limit', 'even', 'work', 'comparison', 'error', 'empti', 'x', 'valu', 'implement', 'pass', 'addit', 'fun', 'option', 'ndarray', 'array', 'scalar', 'If', 'tupl', 'less', 'check', 'case', 'upper', 'maximum', 'signatur', 'c2', 'like', 'comput', 'deriv', 'f', 'size', 'use', 'gradient', 'convert', 'return', '2tupl', 'the', 'approxim', 'dict', 'independ', 'appropri', 'def', 'equal', '1', 'arg', 'match', 'latter', 'estim', 'correct', 'kwarg', 'jac', 'both', '1D', 'matrix', 'array_lik']}"
58,"{'func name': '_vode_banded_jac_wrapper', 'comments': 'Wrap a banded Jacobian function with a function that pads the Jacobian with `ml` rows of zeros.\n\n\n', 'stemmed comments': ['wrap', 'function', 'band', 'zero', 'jacobian', 'ml', 'pad', 'row']}"
59,"{'func name': '_onenormest_core', 'comments': 'Compute a lower bound of the 1-norm of a sparse matrix.\n\nParameters ---------- A : ndarray or other linear operator A linear operator that can produce matrix products. AT : ndarray or other linear operator The transpose of A. t : int, optional A positive parameter controlling the tradeoff between accuracy versus time and memory usage. itmax : int, optional Use at most this many iterations.\n##### Returns\n* **est **: float\n    An underestimate of the 1-norm of the sparse matrix.\n\n* **v **: ndarray, optional\n    The vector such that ||Av||_1 == est*||v||_1.\n    It can be thought of as an input to the linear operator\n    that gives an output with particularly large norm.\n\n* **w **: ndarray, optional\n    The vector Av which has relatively large 1-norm.\n    It can be thought of as an output of the linear operator\n    that is relatively large in norm compared to the input.\n\n* **nmults **: int, optional\n    The number of matrix products that were computed.\n\n* **nresamples **: int, optional\n    The number of times a parallel column was observed,\n    necessitating a re-randomization of the column.\n\n', 'stemmed comments': ['bound', '1norm', 'option', 'tradeoff', 'ndarray', 'nmult', 'particularli', 'number', 'compar', 'transpos', 'output', 'nresampl', 'return', 'the', 'mani', '==', 'linear', 'oper', 'float', 'paramet', 'It', 'necessit', 'Av', '||av||_1', 'w', 'spars', 'observ', 'column', 'underestim', 'time', 'lower', 'v', 'rerandom', 'comput', 'versu', 'give', 'rel', 'int', 'memori', 'An', 'posit', 'est', 'vector', '||v||_1', 'norm', 'produc', 'input', 'parallel', 'product', 'itmax', 'larg', 'control', 'use', 'A', 'matrix', 'iter', 'thought', 'AT', 'accuraci', 'usag']}"
60,"{'func name': 'pade', 'comments': 'Return Pade approximation to a polynomial as the ratio of two polynomials.\n\nParameters ---------- an : (N,) array_like Taylor series coefficients. m : int The order of the returned approximating polynomial `q`. n : int, optional The order of the returned approximating polynomial `p`. By default, the order is ``len(an)-m``.\n##### Returns\n* **p, q **: Polynomial class\n    The Pade approximation of the polynomial defined by `an` is\n    ``p(x)/q(x)``.\n\n', 'stemmed comments': ['option', 'N', 'default', 'len', 'order', 'seri', 'coeffici', 'return', 'defin', 'the', 'approxim', 'two', 'paramet', 'array_lik', 'm', 'By', 'taylor', 'p', 'n', 'pade', 'int', 'x', 'ratio', 'class', 'polynomi', '/q', 'q']}"
61,"{'func name': 'find_peaks_cwt', 'comments': 'Find peaks in a 1-D array with wavelet transformation.\n\nThe general approach is to smooth `vector` by convolving it with `wavelet(width)` for each width in `widths`. Relative maxima which appear at enough length scales, and with sufficiently high SNR, are accepted.\n\nParameters ---------- vector : ndarray 1-D array in which to find the peaks. widths : sequence 1-D array of widths to use for calculating the CWT matrix. In general, this range should cover the expected width of peaks of interest. wavelet : callable, optional Should take two parameters and return a 1-D array to convolve with `vector`. The first parameter determines the number of points of the returned wavelet array, the second parameter is the scale (`width`) of the wavelet. Should be normalized and symmetric. Default is the ricker wavelet. max_distances : ndarray, optional At each row, a ridge line is only connected if the relative max at row[n] is within ``max_distances[n]`` from the relative max at ``row[n+1]``.\n\nDefault value is ``widths/4``. gap_thresh : float, optional If a relative maximum is not found within `max_distances`, there will be a gap. A ridge line is discontinued if there are more than `gap_thresh` points without connecting a new relative maximum. Default is the first value of the widths array i.e. widths[0]. min_length : int, optional Minimum length a ridge line needs to be acceptable. Default is ``cwt.shape[0] / 4``, ie 1/4-th the number of widths. min_snr : float, optional Minimum SNR ratio. Default 1. The signal is the value of the cwt matrix at the shortest length scale (``cwt[0, loc]``), the noise is the `noise_perc`th percentile of datapoints contained within a window of `window_size` around ``cwt[0, loc]``. noise_perc : float, optional When calculating the noise floor, percentile of data points examined below which to consider noise. Calculated using `stats.scoreatpercentile`.\n\nDefault is 10. window_size : int, optional Size of window to use to calculate noise floor. Default is ``cwt.shape[1] / 20``.\n##### Returns\n* **peaks_indices **: ndarray\n    Indices of the locations in the `vector` where peaks were found.\n    The list is sorted.\n\n* **The algorithm is as follows**: 1. Perform a continuous wavelet transform on `vector`, for the supplied\n    `widths`. This is a convolution of `vector` with `wavelet(width)` for\n    each width in `widths`. See `cwt`.\n 2. Identify ""ridge lines"" in the cwt matrix. These are relative maxima\n    at each row, connected across adjacent rows. See identify_ridge_lines\n 3. Filter the ridge_lines using filter_ridge_lines.\n\n* **.. versionadded**: \n\n* **.. [1] Bioinformatics (2006) 22 (17)**: 2059-2065.\n\n', 'stemmed comments': ['default', 'consid', 'number', 'shortest', 'nois', 'cover', '17', 'paramet', 'min_length', '2', 'point', '22', 'approach', 'n', 'discontinu', 'cwtshape', '/', 'ridg', 'rel', 'filter', 'int', 'convolv', '2006', 'In', 'ratio', 'rang', 'max', 'At', 'convolut', 'thi', 'adjac', 'row', 'find', 'bioinformat', 'float', 'first', 'window_s', 'floor', 'gener', 'expect', 'transform', 'scale', '3', 'callabl', 'width', 'widths/4', 'valu', 'vector', '0', 'loc', 'interest', 'smooth', 'A', 'appear', 'option', 'statsscoreatpercentil', 'array', 'ndarray', 'peaks_indic', 'datapoint', 'If', 'suppli', '1/4th', 'gap', 'when', 'determin', 'line', 'window', 'maxima', 'min_snr', 'accept', 'wavelet', 'maximum', 'within', '4', 'ricker', 'suffici', 'second', 'should', 'data', '10', 'without', 'peak', 'identify_ridge_lin', 'size', 'gap_thresh', 'use', 'found', 'max_dist', 'percentil', 'sort', 'snr', 'n1', 'th', 'need', 'these', 'normal', 'high', 'perform', 'symmetr', 'return', 'the', 'minimum', '20592065', 'across', 'locat', 'two', 'noise_perc', 'new', 'around', 'take', 'cwt', 'filter_ridge_lin', 'contain', 'length', 'signal', 'indic', 'list', '[', 'continu', '1', 'examin', 'ridge_lin', 'ie', ']', '20', 'sequenc', 'algorithm', 'enough', 'see', 'calcul', 'follow', 'versionad', 'identifi', '1D', 'matrix', 'connect']}"
62,"{'func name': '_cmpkey', 'comments': '', 'stemmed comments': []}"
63,"{'func name': 'voronoi_plot_2d', 'comments': 'Plot the given Voronoi diagram in 2-D\n\nParameters ---------- vor : scipy.spatial.Voronoi instance Diagram to plot ax : matplotlib.axes.Axes instance, optional Axes to plot on show_points: bool, optional Add the Voronoi points to the plot. show_vertices : bool, optional Add the Voronoi vertices to the plot. line_colors : string, optional Specifies the line color for polygon boundaries line_width : float, optional Specifies the line width for polygon boundaries line_alpha: float, optional Specifies the line alpha for polygon boundaries point_size: float, optional Specifies the size of points\n##### Returns\n* **fig **: matplotlib.figure.Figure instance\n    Figure for the plot\n\n* **Set of point**: \n\n* **Voronoi diagram of the points**: \n\n* **using `voronoi_plot_2d` for visualisation**: \n\n* **using `voronoi_plot_2d` for visualisation with enhancements**: \n\n', 'stemmed comments': ['option', 'set', 'diagram', 'given', 'matplotlibaxesax', 'vertic', 'line_color', 'plot', 'bool', 'string', 'return', 'voronoi', 'show_point', 'alpha', 'axe', 'instanc', 'voronoi_plot_2d', 'float', 'paramet', 'line', 'polygon', 'point_siz', 'matplotlibfigurefigur', 'show_vertic', 'point', 'vor', 'line_width', 'add', 'specifi', 'ax', 'color', 'width', 'fig', 'line_alpha', 'enhanc', '2D', 'visualis', 'boundari', 'figur', 'scipyspatialvoronoi', 'size', 'use']}"
64,"{'func name': 'orthogonal_procrustes', 'comments': 'Compute the matrix solution of the orthogonal Procrustes problem.\n\nGiven matrices A and B of equal shape, find an orthogonal matrix R that most closely maps A to B using the algorithm given in [1]_.\n\nParameters ---------- A : (M, N) array_like Matrix to be mapped. B : (M, N) array_like Target matrix. check_finite : bool, optional Whether to check that the input matrices contain only finite numbers. Disabling may give a performance gain, but may result in problems (crashes, non-termination) if the inputs do contain infinities or NaNs.\n##### Returns\n* **R **: (N, N) ndarray\n    The matrix solution of the orthogonal Procrustes problem.\n    Minimizes the Frobenius norm of ``(A @ R) - B``, subject to\n    ``R.T @ R = I``.\n\n* **scale **: float\n    Sum of the singular values of ``A.T @ B``.\n\n', 'stemmed comments': ['singular', 'option', 'B', 'N', 'nan', 'given', 'ndarray', 'target', 'orthogon', 'number', 'bool', 'AT', 'perform', 'gain', 'disabl', 'return', 'matric', 'map', 'M', 'the', 'find', 'sum', 'result', 'float', 'paramet', 'solut', 'array_lik', '@', 'check', 'crash', 'contain', 'scale', 'equal', 'close', 'minim', '[', 'check_finit', '1', 'whether', 'comput', ']', 'subject', 'R', 'give', 'frobeniu', 'shape', 'algorithm', '_', 'nontermin', 'valu', 'norm', 'input', 'may', 'finit', 'infin', '=', 'I', 'use', 'A', 'matrix', 'RT', 'procrust', 'problem']}"
65,"{'func name': 'procrustes', 'comments': 'Procrustes analysis, a similarity test for two data sets.\n\nEach input matrix is a set of points or vectors (the rows of the matrix). The dimension of the space is the number of columns of each matrix. Given two identically sized matrices, procrustes standardizes both such that:\n\n- :math:`tr(AA^{T}) = 1`.\n\n- Both sets of points are centered around the origin.\n\nProcrustes ([1]_, [2]_) then applies the optimal transform to the second matrix (including scaling/dilation, rotations, and reflections) to minimize :math:`M^{2}=\\sum(data1-data2)^{2}`, or the sum of the squares of the pointwise differences between the two input datasets.\n\nThis function was not designed to handle datasets with different numbers of datapoints (rows).\n\nIf two data sets have different dimensionality (different number of columns), simply add columns of zeros to the smaller of the two.\n\nParameters ---------- data1 : array_like Matrix, n rows represent points in k (columns) space `data1` is the reference data, after it is standardised, the data from `data2` will be transformed to fit the pattern in `data1` (must have >1 unique points). data2 : array_like n rows of data in k space to be fit to `data1`.\n\nMust be the\n\nsame shape ``(numrows, numcols)`` as data1 (must have >1 unique points).\n##### Returns\n* **mtx1 **: array_like\n    A standardized version of `data1`.\n\n* **mtx2 **: array_like\n    The orientation of `data2` that best fits `data1`. Centered, but not\n    necessarily\n\n* **disparity **: float\n\n', 'stemmed comments': ['>', 'necessarili', 'function', 'each', 'number', 'standard', 'dispar', 'sum', 'M^', 'paramet', '2', 'point', 'data1data2', 'minim', 'test', 'n', 'aa^', 'must', 'standardis', 'scaling/dil', 'differ', 'ident', '{', 'mtx1', 'shape', '=', 'includ', 'numcol', 'dimension', 'dataset', 'space', 'T', 'simpli', '=\\sum', 'given', 'k', 'rotat', 'thi', 'row', 'best', 'numrow', 'float', '}', 'handl', 'version', 'transform', 'data2', 'optim', 'center', 'vector', 'input', 'reflect', 'A', 'refer', 'datapoint', 'repres', 'If', 'matric', 'squar', 'uniqu', 'design', 'add', 'column', 'origin', 'zero', 'smaller', 'second', 'data', 'size', 'procrust', 'similar', 'set', '^', 'analysi', 'return', 'the', 'tr', 'two', 'around', 'mtx2', 'pattern', '[', '1', 'pointwis', ']', 'data1', 'math', 'orient', '_', 'dimens', 'appli', 'both', 'matrix', 'fit', 'array_lik']}"
66,"{'func name': '_quadrature_gk15', 'comments': 'Gauss-Kronrod 15 quadrature with error estimate\n\n\n', 'stemmed comments': ['gausskronrod', 'quadratur', 'error', '15', 'estim']}"
67,"{'func name': 'newton_cotes', 'comments': ""Return weights and error coefficient for Newton-Cotes integration.\n\nSuppose we have (N+1) samples of f at the positions x_0, x_1, ..., x_N. Then an N-point Newton-Cotes formula for the integral between x_0 and x_N is:\n\n:math:`\\int_{x_0}^{x_N} f(x)dx = \\Delta x \\sum_{i=0}^{N} a_i f(x_i) + B_N (\\Delta x)^{N+2} f^{N+1} (\\xi)`\n\nwhere :math:`\\xi \\in [x_0,x_N]` and :math:`\\Delta x = \\frac{x_N-x_0},{N}` is the average samples spacing.\n\nIf the samples are equally-spaced and N is even, then the error term is :math:`B_N (\\Delta x)^{N+3} f^{N+2}(\\xi)`.\n\nParameters ---------- rn : int The integer order for equally-spaced data or the relative positions of the samples with the first sample at 0 and the last at N, where N+1 is the length of `rn`. N is the order of the Newton-Cotes integration. equal : int, optional Set to 1 to enforce equally spaced data.\n##### Returns\n* **an **: ndarray\n    1-D array of weights to apply to the function at the provided sample\n    positions.\n\n* **B **: float\n    Error coefficient.\n\n* **Compute the integral of sin(x) in [0, **: math\n\n* **>>> def f(x)**: \n\n* **>>> for N in [2, 4, 6, 8, 10]**: \n\n* **...     print('{**: 2d}  {\n\n"", 'stemmed comments': ['N', '>', 'function', 'npoint', 'x_n', 'paramet', '\\xi', 'suppos', '\\sum_', '2', 'equallyspac', '\\in', 'last', 'rel', 'weight', 'int', '{', 'x_0', '=', 'term', 'integ', 'print', 'space', 'sin', '\\delta', 'order', 'coeffici', 'formula', 'N3', 'float', 'provid', '}', 'first', 'rn', 'N2', 'even', 'error', 'x', '0', 'a_i', 'option', 'B', 'ndarray', 'i=0', 'array', '8', 'If', 'newtoncot', '2d', 'then', '\\int_', 'enforc', '4', 'comput', 'x_1', 'f', 'N1', 'data', '10', 'b_n', 'x_i', 'f^', 'set', '^', '\\frac', 'return', 'sampl', 'the', 'dx', 'integr', 'length', 'def', 'equal', '[', '1', ']', 'math', 'x_nx_0', 'posit', '6', 'appli', '1D', 'averag']}"
68,"{'func name': 'idst', 'comments': ""Return the Inverse Discrete Sine Transform of an arbitrary type sequence.\n\nParameters ---------- x : array_like The input array. type : {1, 2, 3, 4}, optional Type of the DST (see Notes). Default type is 2. n : int, optional Length of the transform. If ``n < x.shape[axis]``, `x` is truncated.\n\nIf ``n > x.shape[axis]``, `x` is zero-padded. The default results in ``n = x.shape[axis]``. axis : int, optional Axis along which the idst is computed; the default is over the last axis (i.e., ``axis=-1``). norm : {None, 'ortho'}, optional Normalization mode (see Notes). Default is None. overwrite_x : bool, optional If True, the contents of `x` can be destroyed; the default is False. workers : int, optional Maximum number of workers to use for parallel computation. If negative, the value wraps around from ``os.cpu_count()``. See :func:`~scipy.fft.fft` for more details.\n##### Returns\n* **idst **: ndarray of real\n    The transformed input array.\n\n* **dst **: Forward DST\n\n"", 'stemmed comments': ['option', 'default', '>', 'array', 'ndarray', 'normal', 'mode', 'func', 'number', 'bool', 'along', 'arbitrari', 'If', 'sine', 'real', 'return', 'truncat', 'destroy', 'the', 'xshape', 'note', 'forward', 'result', 'invers', 'paramet', 'around', '}', 'true', '2', 'none', 'fals', '~scipyfftfft', 'oscpu_count', 'transform', 'idst', 'ortho', 'maximum', 'neg', 'zeropad', 'length', 'content', '3', '4', '[', 'type', '1', 'n', 'overwrite_x', 'wrap', 'axi', ']', 'comput', 'ie', 'last', 'dst', 'sequenc', '{', 'discret', 'int', 'x', 'valu', 'see', '=', 'input', 'axis=1', 'norm', 'parallel', 'detail', 'use', '<', 'array_lik', ';', 'worker']}"
69,"{'func name': '_remove_redundancy', 'comments': 'Eliminates redundant equations from system of equations defined by Ax = b and identifies infeasibilities.\n\nParameters ---------- A : 2-D array An array representing the left-hand side of a system of equations b : 1-D array An array representing the right-hand side of a system of equations\n##### Returns\n* **A **: 2-D array\n    An array representing the left-hand side of a system of equations\n\n* **b **: 1-D array\n    An array representing the right-hand side of a system of equations\n\n* **status**: int\n    An integer indicating the status of the system\n    0\n\n* **message **: str\n    A string descriptor of the exit status of the optimization.\n\n* **.. [2] Andersen, Erling D. ""Finding all linearly dependent rows in\n       large-scale linear programming."" Optimization Methods and Software\n       6.3 (1995)**: 219-227.\n\n', 'stemmed comments': ['equat', 'array', 'D', '1995', 'softwar', 'redund', 'repres', 'system', 'string', '63', 'defin', 'return', 'statu', 'row', 'largescal', 'method', 'find', 'infeas', 'descriptor', 'linear', 'paramet', 'program', 'andersen', '2', 'linearli', '219227', 'exit', 'indic', 'str', '[', 'Ax', 'depend', 'optim', ']', '2D', 'int', 'An', 'erl', 'elimin', '0', 'messag', '=', 'lefthand', 'righthand', 'identifi', 'integ', 'A', '1D', 'side', 'b']}"
70,"{'func name': '_root_scalar_bisect_doc', 'comments': 'Options ------- args : tuple, optional Extra arguments passed to the objective function. xtol : float, optional Tolerance (absolute) for termination. rtol : float, optional Tolerance (relative) for termination. maxiter : int, optional Maximum number of iterations. options: dict, optional Specifies any method-specific options not covered above.\n\n\n', 'stemmed comments': ['option', 'function', 'number', 'object', 'cover', 'methodspecif', 'tupl', 'rtol', 'float', 'dict', 'extra', 'absolut', 'maximum', 'xtol', 'specifi', 'termin', 'arg', 'maxit', 'rel', 'int', 'pass', 'toler', 'iter', 'argument']}"
71,"{'func name': '_root_krylov_doc', 'comments': 'Options ------- nit : int, optional Number of iterations to make. If omitted (default), make as many as required to meet tolerances. disp : bool, optional Print status to stdout on every iteration. maxiter : int, optional Maximum number of iterations to make. If more are needed to meet convergence, `NoConvergence` is raised. ftol : float, optional Relative tolerance for the residual. If omitted, not used. fatol : float, optional Absolute tolerance (in max-norm) for the residual. If omitted, default is 6e-6. xtol : float, optional Relative minimum step size. If omitted, not used. xatol : float, optional Absolute minimum step size, as determined from the Jacobian approximation. If the step size is smaller than this, optimization is terminated as successful. If omitted, not used. tol_norm : function(vector) -> scalar, optional Norm to use in convergence check. Default is the maximum norm. line_search : {None, \'armijo\' (default), \'wolfe\'}, optional Which type of a line search to use to determine the step size in the direction given by the Jacobian approximation. Defaults to \'armijo\'. jac_options : dict, optional Options for the respective Jacobian approximation.\n\nrdiff : float, optional Relative step size to use in numerical differentiation. method : {\'lgmres\', \'gmres\', \'bicgstab\', \'cgs\', \'minres\'} or function Krylov method to use to approximate the Jacobian. Can be a string, or a function implementing the same interface as the iterative solvers in `scipy.sparse.linalg`.\n\nThe default is `scipy.sparse.linalg.lgmres`. inner_M : LinearOperator or InverseJacobian Preconditioner for the inner Krylov iteration. Note that you can use also inverse Jacobians as (adaptive) preconditioners. For example,\n\n>>> jac = BroydenFirst() >>> kjac = KrylovJacobian(inner_M=jac.inverse).\n\nIf the preconditioner has a method named \'update\', it will be called as ``update(x, f)`` after each nonlinear step, with ``x`` giving the current point, and ``f`` the current function value. inner_tol, inner_maxiter, ... Parameters to pass on to the ""inner"" Krylov solver. See `scipy.sparse.linalg.gmres` for details. outer_k : int, optional Size of the subspace kept across LGMRES nonlinear iterations.\n\nSee `scipy.sparse.linalg.lgmres` for details.\n', 'stemmed comments': ['default', '>', 'scipysparselinalglgmr', 'function', 'number', 'string', 'call', 'inner_tol', 'search', 'requir', 'paramet', 'differenti', 'none', 'jacobian', 'line_search', 'for', 'absolut', 'point', 'inner_m', 'tol_norm', 'residu', 'type', 'rel', 'int', '{', 'krylov', 'norm', '=', 'adapt', 'bicgstab', 'updat', 'inner', 'noconverg', 'print', 'armijo', 'given', 'linearoper', 'krylovjacobian', 'rais', 'note', 'exampl', 'float', 'invers', '}', 'lgmre', 'name', '6e6', 'xatol', 'inner_maxit', 'broydenfirst', 'optim', 'maxnorm', 'also', 'jac_opt', 'omit', 'x', 'valu', 'vector', 'implement', 'pass', 'meet', 'detail', 'numer', 'subspac', 'toler', 'option', 'solver', 'scalar', 'If', 'nit', 'method', 'rdiff', 'interfac', 'kept', 'determin', 'wolf', 'line', 'can', 'inner_m=jacinvers', 'ftol', 'check', 'inversejacobian', 'maximum', 'kjac', 'termin', 'converg', 'smaller', 'stdout', 'which', 'success', 'maxit', 'give', 'f', 'scipysparselinalggmr', 'make', 'size', 'use', 'nonlinear', 'mani', 'direct', 'need', 'bool', 'disp', 'statu', 'step', 'minimum', 'the', 'approxim', 'across', 'respect', 'dict', 'scipysparselinalg', 'everi', 'outer_k', 'fatol', 'precondition', 'gmre', 'xtol', 'current', 'minr', 'see', 'jac', 'cg', 'iter']}"
72,"{'func name': 'create_group', 'comments': '', 'stemmed comments': []}"
73,"{'func name': '_create_block_3_diagonal_matrix', 'comments': 'Create a 3-diagonal block matrix as banded.\n\nThe matrix has the following structure:\n\nDB... ADB.. .ADB. ..ADB ...AD\n\nThe blocks A, B and D are 3-by-3 matrices. The D matrices has the form d * I.\n\nParameters ---------- A : ndarray, shape (n, 3, 3) Stack of A blocks. B : ndarray, shape (n, 3, 3) Stack of B blocks. d : ndarray, shape (n + 1,) Values for diagonal blocks.\n##### Returns\n', 'stemmed comments': ['B', 'block', 'AD', 'D', 'ndarray', 'return', 'matric', 'diagon', 'the', '3by3', 'paramet', 'stack', 'DB', '3', '1', 'n', 'band', '3diagon', 'form', 'creat', 'adb', 'shape', 'valu', 'follow', 'I', 'A', 'matrix', 'structur']}"
74,"{'func name': 'rvs_ratio_uniforms', 'comments': 'Generate random samples from a probability density function using the ratio-of-uniforms method.\n\nParameters ---------- pdf : callable A function with signature `pdf(x)` that is proportional to the probability density function of the distribution. umax : float The upper bound of the bounding rectangle in the u-direction. vmin : float The lower bound of the bounding rectangle in the v-direction. vmax : float The upper bound of the bounding rectangle in the v-direction. size : int or tuple of ints, optional Defining number of random variates (default is 1). c : float, optional. Shift parameter of ratio-of-uniforms method, see Notes. Default is 0. random_state : {None, int, `~np.random.RandomState`, `~np.random.Generator`}, optional If `random_state` is `None` the `~np.random.RandomState` singleton is used. If `random_state` is an int, a new ``RandomState`` instance is used, seeded with random_state. If `random_state` is already a ``RandomState`` or ``Generator`` instance, then that object is used. Default is None.\n##### Returns\n* **rvs **: ndarray\n    The random variates distributed according to the probability\n    distribution defined by the pdf.\n\n* **define the set ``A = {(u, v) **: 0 < u <= sqrt(pdf(v/u + c))}``.\n\n* **>>> f = lambda x**: np.exp(-x**2 / 2)\n\n* **distributed (normality is not rejected at 5% significance level)**: \n\n* **>>> rvs = stats.rvs_ratio_uniforms(lambda x**: np.exp(-x), umax=1,\n\n', 'stemmed comments': ['bound', 'default', '>', 'function', 'number', 'defin', 'rectangl', 'paramet', 'none', '2', 'seed', 'sqrt', 'lower', 'umax', '/', 'signific', 'udirect', 'int', '{', 'npexp', 'rv', '=', 'level', 'densiti', 'object', 'note', 'statsrvs_ratio_uniform', 'float', '}', 'ratioofuniform', 'gener', 'callabl', 'x', '0', 'umax=1', 'A', 'option', 'ndarray', 'vdirect', 'If', '~nprandomrandomst', 'method', 'tupl', 'instanc', '5', 'v/u', 'upper', 'signatur', 'vmin', 'randomst', 'f', 'vmax', 'distribut', 'size', 'use', 'variat', 'set', 'c', 'normal', 'return', 'sampl', 'lambda', 'the', 'probabl', 'new', 'accord', 'pdf', 'random_st', '1', '~nprandomgener', 'v', 'reject', 'shift', 'see', 'alreadi', 'singleton', 'u', 'proport', 'random', '<', '%']}"
75,"{'func name': 'savgol_filter', 'comments': ""Apply a Savitzky-Golay filter to an array.\n\nThis is a 1-D filter. If `x`\n\nhas dimension greater than 1, `axis` determines the axis along which the filter is applied.\n\nParameters ---------- x : array_like The data to be filtered. If `x` is not a single or double precision floating point array, it will be converted to type ``numpy.float64`` before filtering. window_length : int The length of the filter window (i.e., the number of coefficients). `window_length` must be a positive odd integer. If `mode` is 'interp', `window_length` must be less than or equal to the size of `x`. polyorder : int The order of the polynomial used to fit the samples. `polyorder` must be less than `window_length`. deriv : int, optional The order of the derivative to compute. This must be a nonnegative integer. The default is 0, which means to filter the data without differentiating. delta : float, optional The spacing of the samples to which the filter will be applied. This is only used if deriv > 0. Default is 1.0. axis : int, optional The axis of the array `x` along which the filter is to be applied. Default is -1. mode : str, optional Must be 'mirror', 'constant', 'nearest', 'wrap' or 'interp'. This determines the type of extension to use for the padded signal to which the filter is applied.\n\nWhen `mode` is 'constant', the padding value is given by `cval`.\n\nSee the Notes for more details on 'mirror', 'constant', 'wrap', and 'nearest'. When the 'interp' mode is selected (the default), no extension is used.\n\nInstead, a degree `polyorder` polynomial is fit to the last `window_length` values of the edges, and this polynomial is used to evaluate the last `window_length // 2` output values. cval : scalar, optional Value to fill past the edges of the input if `mode` is 'constant'. Default is 0.0.\n##### Returns\n* **y **: ndarray, same shape as `x`\n    The filtered data.\n\n* **Details on the `mode` options**: 'mirror'\n\n* **the various `mode` options (assuming `cval` is 0)**: \n\n* **.. versionadded**: \n\n* **`mode='nearest'`**: \n\n"", 'stemmed comments': ['default', '>', 'greater', 'number', 'output', 'constant', 'assum', 'paramet', 'differenti', '2', 'point', 'str', 'wrap', 'type', 'must', 'last', 'filter', 'int', 'shape', 'instead', 'fill', 'numpyfloat64', '//', 'integ', 'space', 'odd', 'given', 'mean', 'order', 'thi', 'coeffici', 'past', 'note', '00', 'savitzkygolay', 'float', 'evalu', 'nearest', 'edg', 'doubl', 'x', 'valu', '0', 'input', 'detail', 'singl', 'pad', 'option', 'array', 'ndarray', 'mode', 'along', 'scalar', 'If', 'nonneg', 'when', 'less', 'determin', 'interp', 'window', 'window_length', 'cval', 'mode=nearest', 'axi', 'deriv', 'comput', 'data', '10', 'without', 'size', 'polynomi', 'use', 'mirror', 'precis', 'degre', 'convert', 'return', 'sampl', 'the', 'variou', 'delta', 'length', 'signal', 'equal', 'polyord', '1', 'ie', 'posit', 'extens', 'see', 'dimens', 'appli', 'versionad', '1D', 'fit', 'select', 'array_lik']}"
76,"{'func name': 'shgo', 'comments': 'Finds the global minimum of a function using SHG optimization.\n\nSHGO stands for ""simplicial homology global optimization"".\n\nParameters ---------- func : callable The objective function to be minimized.\n\nMust be in the form ``f(x, *args)``, where ``x`` is the argument in the form of a 1-D array and ``args`` is a tuple of any additional fixed parameters needed to completely specify the function. bounds : sequence Bounds for variables.\n\n``(min, max)`` pairs for each element in ``x``, defining the lower and upper bounds for the optimizing argument of `func`. It is required to have ``len(bounds) == len(x)``. ``len(bounds)`` is used to determine the number of parameters in ``x``. Use ``None`` for one of min or max when there is no bound in that direction. By default bounds are ``(None, None)``. args : tuple, optional Any additional fixed parameters needed to completely specify the objective function. constraints : dict or sequence of dict, optional Constraints definition. Function(s) ``R**n`` in the form::\n\ng(x) >= 0 applied as g : R^n -> R^m h(x) == 0 applied as h : R^n -> R^p\n\nEach constraint is defined in a dictionary with fields:\n\ntype : str Constraint type: \'eq\' for equality, \'ineq\' for inequality. fun : callable The function defining the constraint. jac : callable, optional The Jacobian of `fun` (only for SLSQP). args : sequence, optional Extra arguments to be passed to the function and Jacobian.\n\nEquality constraint means that the constraint function result is to be zero whereas inequality means that it is to be non-negative. Note that COBYLA only supports inequality constraints.\n\n.. note::\n\nOnly the COBYLA and SLSQP local minimize methods currently support constraint arguments. If the ``constraints`` sequence used in the local optimization problem is not defined in ``minimizer_kwargs`` and a constrained method is used then the global ``constraints`` will be used. (Defining a ``constraints`` sequence in ``minimizer_kwargs`` means that ``constraints`` will not be added so if equality constraints and so forth need to be added then the inequality functions in ``constraints`` need to be added to ``minimizer_kwargs`` too).\n\nn : int, optional Number of sampling points used in the construction of the simplicial complex. Note that this argument is only used for ``sobol`` and other arbitrary `sampling_methods`. iters : int, optional Number of iterations used in the construction of the simplicial complex. callback : callable, optional Called after each iteration, as ``callback(xk)``, where ``xk`` is the current parameter vector. minimizer_kwargs : dict, optional Extra keyword arguments to be passed to the minimizer ``scipy.optimize.minimize`` Some important options could be:\n\n* method : str The minimization method (e.g. ``SLSQP``). * args : tuple Extra arguments passed to the objective function (``func``) and its derivatives (Jacobian, Hessian). * options : dict, optional Note that by default the tolerance is specified as ``{ftol: 1e-12}``\n\noptions : dict, optional A dictionary of solver options. Many of the options specified for the global routine are also passed to the scipy.optimize.minimize routine. The options that are also passed to the local routine are marked with ""(L)"".\n\nStopping criteria, the algorithm will terminate if any of the specified criteria are met. However, the default algorithm does not require any to be specified:\n\n* maxfev : int (L) Maximum number of function evaluations in the feasible domain. (Note only methods that support this option will terminate the routine at precisely exact specified value. Otherwise the criterion will only terminate during a global iteration) * f_min Specify the minimum objective function value, if it is known. * f_tol : float Precision goal for the value of f in the stopping criterion. Note that the global routine will also terminate if a sampling point in the global routine is within this tolerance. * maxiter : int Maximum number of iterations to perform. * maxev : int Maximum number of sampling evaluations to perform (includes searching in infeasible points). * maxtime : float Maximum processing runtime allowed * minhgrd : int Minimum homology group rank differential. The homology group of the objective function is calculated (approximately) during every iteration. The rank of this group has a one-to-one correspondence with the number of locally convex subdomains in the objective function (after adequate sampling points each of these subdomains contain a unique global minimum). If the difference in the hgr is 0 between iterations for ``maxhgrd`` specified iterations the algorithm will terminate.\n\nObjective function knowledge:\n\n* symmetry : bool Specify True if the objective function contains symmetric variables. The search space (and therefore performance) is decreased by O(n!).\n\n* jac : bool or callable, optional Jacobian (gradient) of objective function. Only for CG, BFGS, Newton-CG, L-BFGS-B, TNC, SLSQP, dogleg, trust-ncg. If ``jac`` is a boolean and is True, ``fun`` is assumed to return the gradient along with the objective function. If False, the gradient will be estimated numerically. ``jac`` can also be a callable returning the gradient of the objective. In this case, it must accept the same arguments as ``fun``. (Passed to `scipy.optimize.minmize` automatically)\n\n* hess, hessp : callable, optional Hessian (matrix of second-order derivatives) of objective function or Hessian of objective function times an arbitrary vector p. Only for Newton-CG, dogleg, trust-ncg. Only one of ``hessp`` or ``hess`` needs to be given. If ``hess`` is provided, then ``hessp`` will be ignored. If neither ``hess`` nor ``hessp`` is provided, then the Hessian product will be approximated using finite differences on ``jac``. ``hessp`` must compute the Hessian times an arbitrary vector. (Passed to `scipy.optimize.minmize` automatically)\n\nAlgorithm settings:\n\n* minimize_every_iter : bool If True then promising global sampling points will be passed to a local minimization routine every iteration. If False then only the final minimizer pool will be run. Defaults to False. * local_iter : int Only evaluate a few of the best minimizer pool candidates every iteration. If False all potential points are passed to the local minimization routine. * infty_constraints: bool If True then any sampling points generated which are outside will the feasible domain will be saved and given an objective function value of ``inf``. If False then these points will be discarded. Using this functionality could lead to higher performance with respect to function evaluations before the global minimum is found, specifying False will use less memory at the cost of a slight decrease in performance. Defaults to True.\n\nFeedback:\n\n* disp : bool (L) Set to True to print convergence messages.\n\nsampling_method : str or function, optional Current built in sampling method options are ``sobol`` and ``simplicial``. The default ``simplicial`` uses less memory and provides the theoretical guarantee of convergence to the global minimum in finite time. The ``sobol`` method is faster in terms of sampling point generation at the cost of higher memory resources and the loss of guaranteed convergence. It is more appropriate for most ""easier"" problems where the convergence is relatively fast. User defined sampling functions must accept two arguments of ``n`` sampling points of dimension ``dim`` per call and output an array of sampling points with shape `n x dim`.\n##### Returns\n* **res **: OptimizeResult\n    The optimization result represented as a `OptimizeResult` object.\n    Important attributes are\n\n* **In general, the optimization problems are of the form**: \n\n* **described at https**: //web.maths.unsw.edu.au/~fkuo/sobol/ translated to\n\n* **.. [4] Hoch, W and Schittkowski, K (1981) ""Test examples for nonlinear\n       programming codes"", Lecture Notes in Economics and Mathematical\n       Systems, 187. Springer-Verlag, New York.\n       http**: //www.ai7.uni-bayreuth.de/test_problem_coll.pdf\n\n* **.. [5] Wales, DJ (2015) ""Perspective**: Insight into reaction coordinates and\n       dynamics from the potential energy landscape"",\n       Journal of Chemical Physics, 142(13), 2015.\n\n* **First consider the problem of minimizing the Rosenbrock function, `rosen`**: \n\n* **(https**: //en.wikipedia.org/wiki/Test_functions_for_optimization)\n\n* **>>> def eggholder(x)**: \n\n* **input 30 initial sampling points of the Sobol sequence**: \n\n* **can be called using**: \n\n* **following example from Hock and Schittkowski problem 73 (cattle-feed) [4]_**: \n\n* **The approximate answer given in [4]_ is**: \n\n* **>>> def f(x)**: # (cattle-feed)\n\n* **>>> def g1(x)**: \n\n* **>>> def g2(x)**: \n\n* **>>> def h1(x)**: \n\n* **>>> cons = ({\'type\'**: \'ineq\', \'fun\'\n\n* **...         {\'type\'**: \'eq\', \'fun\'\n\n* **>>> res\n     fun**: 29.894378159142136\n    funl\n\n', 'stemmed comments': ['fix', 'number', 'final', 'minhgrd', 'variabl', 'requir', 'differenti', 'K', 're', 'shgo', 'lower', 'insight', 'construct', 'convex', '{', 'fast', 'criterion', 'simplici', 'lectur', 'print', 'space', 'given', '29894378159142136', 'mean', 'runtim', 'stop', 'find', 'exampl', 'higher', 'gener', '73', '!', 'goal', 'also', 'min', 'valu', 'vector', 'O', 'addit', 'hess', 'solver', 'array', 'attribut', 'http', 'nonneg', 'tupl', 'user', 'wale', '5', 'accept', 'maxfev', 'upper', 'howev', 'time', 'termin', 'converg', 'describ', 'deriv', 'rosen', 'local_it', 'constrain', 'found', 'use', 'complex', 'egghold', 'need', 'slight', 'result', 'infeas', 'physic', 'funl', 'appropri', '[', 'otherwis', 'chemic', 'form', 'matrix', 'rank', 'func', 'assum', 'program', 'ignor', 'eg', 'By', 'pool', 'minim', 'n', 'trustncg', 'differ', 'shape', 'scipyoptimizeminim', 'built', 'In', 'messag', 'includ', 'guarante', 'hessian', 'argument', 'tnc', 'adequ', 'best', 'note', 'theoret', 'provid', 'g1', 'evalu', 'run', 'allow', 'R', 'cost', 'subdomain', 'input', 'pass', 'maxhgrd', 'A', 'import', 'forth', 'stand', 'option', 'len', 'repres', 'If', 'optimizeresult', 'uniqu', 'answer', 'r^p', '//enwikipediaorg/wiki/test_functions_for_optim', 'maximum', 'h', 'some', 'routin', 'comput', 'maxit', 'neither', 'pair', 'discard', '//wwwai7unibayreuthde/test_problem_collpdf', 'complet', 'product', 'save', 'gradient', 'nonlinear', 'con', 'set', 'perform', 'therefor', 'minimum', 'boolean', '30', 'specifi', 'arg', ']', 'estim', 'sequenc', 'dimens', 'calcul', 'econom', 'appli', 'promis', '>', 'consid', 'function', 'process', 'output', 'bfg', 'reaction', 'secondord', 'search', 'translat', 'paramet', 'point', 'g2', 'could', 'maxev', 'lbfgsb', 'str', 'p', 'type', 'test', 'must', 'wherea', 'definit', 'coordin', '=', 'finit', 'knowledg', 'ineq', 'object', 'eq', '}', 'first', 'feasibl', 'h1', 'callabl', 'optim', 'constraint', 'inf', '0', 'met', 'hock', 'journal', 'local', 'numer', 'landscap', 'toler', 'fun', 'minimizer_kwarg', 'mathemat', 'along', 'method', 'per', '==', 'less', 'determin', 'extra', 'g', 'ftol', 'inequ', 'case', 'within', 'f_min', '4', 'support', 'shg', 'CG', 'infty_constraint', 'callback', '142', '1e12', 'mani', 'direct', 'precis', 'known', 'correspond', 'system', 'disp', 'sampl', 'keyword', 'the', 'two', 'new', 'energi', 'true', 'cobyla', 'outsid', 'faster', 'def', 'r^m', 'newtoncg', 'algorithm', 'field', 'jac', 'easier', 'ani', 'global', 'bound', 'default', 'each', 'call', 'minimize_every_it', 'defin', 'DJ', 'springerverlag', 'It', 'none', 'jacobian', 'xk', 'dim', 'ad', 'hoch', 'exact', 'f_tol', 'rel', 'int', 'element', 'scipyoptimizeminm', 'dynam', 'term', 'max', 'group', '1981', 'initi', 'decreas', 'candid', 'float', 'hgr', 'domain', 'symmetri', 'hessp', 'criteria', 'x', 'rosenbrock', 'maxtim', '//webmathsunsweduau/~fkuo/sobol/', 'W', 'resourc', 'one', 'dictionari', 'fals', 'sobol', 'code', 'schittkowski', '187', 'zero', 'cattlefe', 'f', 'sampling_method', 'feedback', 'homolog', 'mark', '2015', 'L', 'potenti', 'onli', '13', 'perspect', 'bool', 'arbitrari', 'symmetr', 'return', 'approxim', 'respect', 'dict', 'everi', 'dogleg', 'contain', 'equal', 'york', 'onetoon', 'automat', 'current', 'memori', '_', 'slsqp', 'r^n', 'follow', 'loss', '1D', 'iter', 'lead', 'problem']}"
77,"{'func name': 'clarkson_woodruff_transform', 'comments': '"" Applies a Clarkson-Woodruff Transform/sketch to the input matrix.\n\nGiven an input_matrix ``A`` of size ``(n, d)``, compute a matrix ``A\'`` of size (sketch_size, d) so that\n\n.. math:: \\|Ax\\| \\approx \\|A\'x\\|\n\nwith high probability via the Clarkson-Woodruff Transform, otherwise known as the CountSketch matrix.\n\nParameters ---------- input_matrix: array_like Input matrix, of shape ``(n, d)``. sketch_size: int Number of rows for the sketch. seed : None or int or `numpy.random.RandomState` instance, optional This parameter defines the ``RandomState`` object to use for drawing random variates. If None (or ``np.random``), the global ``np.random`` state is used. If integer, it is used to seed the local ``RandomState`` instance. Default is None.\n##### Returns\n* **A\' **: array_like\n    Sketch of the input matrix ``A``, of size ``(sketch_size, d)``.\n\n* **.. math**: \n\n* **This implementation takes advantage of sparsity**: computing\n\n* **Given a big dense matrix ``A``**: \n\n* **regression of **: math\n\n* **>>> SA, Sb = SAb[**: ,\n\n', 'stemmed comments': ['global', 'option', 'variat', 'default', '>', 'given', 'known', 'number', 'input_matrix', 'thi', 'high', 'If', 'object', 'defin', 'sketch', 'nprandom', 'return', 'row', 'sab', 'probabl', 'SA', 'instanc', '\\|ax\\|', 'paramet', 'big', 'take', 'none', 'countsketch', 'sketch_siz', '\\approx', 'transform', 'numpyrandomrandomst', 'sparsiti', 'seed', '[', 'dens', 'n', 'state', 'regress', 'randomst', 'x\\|', 'comput', 'otherwis', 'math', 'int', 'clarksonwoodruff', 'shape', 'transform/sketch', 'advantag', 'draw', 'input', '=', 'implement', 'size', 'Sb', 'local', 'appli', 'random', 'use', 'A', 'matrix', 'integ', 'via', 'array_lik', '\\|a']}"
78,"{'func name': '_are_validate_args', 'comments': ""A helper function to validate the arguments supplied to the Riccati equation solvers. Any discrepancy found in the input matrices leads to a ``ValueError`` exception.\n\nEssentially, it performs:\n\n- a check whether the input is free of NaN and Infs\n\n- a pass for the data through ``numpy.atleast_2d()``\n\n- squareness check of the relevant arrays\n\n- shape consistency check of the arrays\n\n- singularity check of the relevant arrays\n\n- symmetricity check of the relevant matrices\n\n- a check whether the regular or the generalized version is asked.\n\nThis function is used by ``solve_continuous_are`` and ``solve_discrete_are``.\n\nParameters ---------- a, b, q, r, e, s : array_like Input data eq_type : str Accepted arguments are 'care' and 'dare'.\n##### Returns\n* **a, b, q, r, e, s **: ndarray\n    Regularized input data\n\n* **m, n **: int\n    shape of the problem\n\n* **r_or_c **: type\n    Data type of the problem, returns float or complex\n\n* **gen_or_not **: bool\n    Type of the equation, True for generalized and False for regular ARE.\n\n"", 'stemmed comments': ['argument', 'nan', 'solver', 'equat', 'array', 'singular', 'function', 'e', 'ndarray', 'bool', 'thi', 'perform', 'relev', 'symmetr', 'eq_typ', 'dare', 'suppli', 'matric', 'return', 'squar', 'consist', 'valid', 'float', 'paramet', 'r_or_c', 'solve_discrete_ar', 'array_lik', 'true', 'r', 'numpyatleast_2d', 'fals', 'version', 'riccati', 'gener', 'accept', 'are', 'check', 'valueerror', 'regular', 'str', 'type', 'n', 'except', 'whether', 'inf', 'free', 'ask', 'care', 'helper', 'solve_continuous_ar', 'data', 'shape', 'int', 'complex', 'input', 'ani', 'pass', 'essenti', 'gen_or_not', 'discrep', 'found', 'use', 'A', 'q', 'b', 'lead', 'problem']}"
79,"{'func name': '_complex2real', 'comments': '', 'stemmed comments': []}"
80,"{'func name': 'spherical_kn', 'comments': 'Modified spherical Bessel function of the second kind or its derivative.\n\nDefined as [1]_,\n\n.. math:: k_n(z) = \\sqrt{\\frac{\\pi},{2z}} K_{n + 1/2}(z),\n\nwhere :math:`K_n` is the modified Bessel function of the second kind.\n\nParameters ---------- n : int, array_like Order of the Bessel function (n >= 0). z : complex or float, array_like Argument of the Bessel function. derivative : bool, optional If True, the value of the derivative (rather than the function itself) is returned.\n##### Returns\n* **kn **: ndarray\n\n* **.. math**: \n\n* **.. versionadded**: \n\n* **.. [1] https**: //dlmf.nist.gov/10.47.E9\n\n* **.. [2] https**: //dlmf.nist.gov/10.51.E5\n\n', 'stemmed comments': ['option', '>', 'ndarray', 'function', 'order', 'bool', 'If', 'http', '\\frac', '\\sqrt', 'defin', 'return', 'float', 'paramet', 'spheric', 'z', '}', 'K_', 'true', '2', '1/2', 'modifi', 'rather', 'bessel', '[', '1', 'n', 'deriv', ']', 'second', 'k_n', 'math', '2z', '{', 'int', 'kn', '_', 'valu', '0', '=', 'complex', '//dlmfnistgov/1051e5', '//dlmfnistgov/1047e9', 'kind', 'versionad', '\\pi', 'array_lik', 'argument']}"
81,"{'func name': 'calculate_solid_angles', 'comments': 'Calculates the solid angles of plane triangles. Implements the method of Van Oosterom and Strackee [VanOosterom]_ with some modifications. Assumes that input points have unit norm.\n\n\n', 'stemmed comments': ['angl', 'method', 'triangl', 'assum', 'van', 'stracke', 'point', 'solid', 'unit', '[', 'vanoosterom', 'plane', ']', 'oosterom', 'modif', '_', 'norm', 'input', 'implement', 'calcul']}"
82,"{'func name': 'siegelslopes', 'comments': ""Computes the Siegel estimator for a set of points (x, y).\n\n`siegelslopes` implements a method for robust linear regression using repeated medians (see [1]_) to fit a line to the points (x, y). The method is robust to outliers with an asymptotic breakdown point of 50%.\n\nParameters ---------- y : array_like Dependent variable. x : array_like or None, optional Independent variable. If None, use ``arange(len(y))`` instead. method : {'hierarchical', 'separate'} If 'hierarchical', estimate the intercept using the estimated slope ``medslope`` (default option). If 'separate', estimate the intercept independent of the estimated slope. See Notes for details.\n##### Returns\n* **medslope **: float\n    Estimate of the slope of the regression line.\n\n* **medintercept **: float\n    Estimate of the intercept of the regression line.\n\n* **theilslopes **: a similar technique without repeated medians\n\n* **The other approach estimates the intercept separately as follows**: for\n\n* **>>> y[11**: 15] += 10  # add outliers\n\n* **>>> y[-5**: ] -= 7\n\n* **least-squares fit with `linregress`**: \n\n"", 'stemmed comments': ['medintercept', 'option', 'set', 'default', 'medslop', '>', 'outlier', 'len', '7', 'asymptot', 'If', 'variabl', 'return', 'robust', 'method', 'the', 'median', 'hierarch', 'note', 'siegel', '11', 'linear', 'float', 'theilslop', 'paramet', 'line', 'independ', '5', '}', 'none', 'leastsquar', 'siegelslop', 'point', 'repeat', 'add', 'linregress', 'approach', 'breakdown', '[', '1', 'regress', 'depend', '15', 'comput', ']', '50', 'estim', '{', '10', 'separ', 'x', '_', 'arang', 'instead', 'without', 'see', 'techniqu', '=', 'implement', 'follow', 'slope', 'detail', 'use', 'fit', 'array_lik', 'intercept', '%', 'similar']}"
83,"{'func name': 'assert_func_equal', 'comments': '', 'stemmed comments': []}"
84,"{'func name': 'assert_no_overwrite', 'comments': 'Test that a call does not overwrite its input arguments\n\n\n', 'stemmed comments': ['test', 'input', 'call', 'overwrit', 'argument']}"
85,"{'func name': '_get_mem_available', 'comments': 'Get information about memory available, not counting swap.\n\n\n', 'stemmed comments': ['swap', 'count', 'inform', 'avail', 'get', 'memori']}"
86,"{'func name': 'non_reentrant', 'comments': 'Decorate a function with a threading lock and prevent reentrant calls.\n\n\n', 'stemmed comments': ['decor', 'reentrant', 'lock', 'function', 'call', 'prevent', 'thread']}"
87,"{'func name': 'in_dir', 'comments': 'Change directory to given directory for duration of ``with`` block\n\nUseful when you want to use `in_tempdir` for the final test, but you are still debugging. For example, you may want to do this in the end:\n\n>>> with in_tempdir() as tmpdir: ...\n\n\n\n # do something complicated which might break ...\n\n\n\n pass\n\nBut, indeed, the complicated thing does break, and meanwhile, the ``in_tempdir`` context manager wiped out the directory with the temporary files that you wanted for debugging. So, while debugging, you replace with something like:\n\n>>> with in_dir() as tmpdir: # Use working directory by default ...\n\n\n\n # do something complicated which might break ...\n\n\n\n pass\n\nYou can then look at the temporary file outputs to debug what is happening, fix, and finally replace ``in_dir`` with ``in_tempdir`` again.\n', 'stemmed comments': ['meanwhil', 'fix', 'default', 'block', '>', 'given', 'manag', 'someth', 'complic', 'final', 'tmpdir', 'temporari', 'replac', 'output', 'thing', 'end', 'want', 'in_tempdir', 'durat', 'exampl', 'happen', 'file', 'for', 'context', 'look', 'still', 'directori', 'wipe', 'test', 'like', 'work', 'chang', 'you', 'but', 'So', 'might', 'in_dir', 'debug', 'break', 'may', 'pass', 'inde', 'use']}"
88,"{'func name': '_minimize_dogleg', 'comments': 'Minimization of scalar function of one or more variables using the dog-leg trust-region algorithm.\n\nOptions ------- initial_trust_radius : float Initial trust-region radius. max_trust_radius : float Maximum value of the trust-region radius. No steps that are longer than this value will be proposed. eta : float Trust region related acceptance stringency for proposed steps. gtol : float Gradient norm must be less than `gtol` before successful termination.\n', 'stemmed comments': ['option', 'initi', 'initial_trust_radiu', 'function', 'gtol', 'scalar', 'eta', 'variabl', 'one', 'step', 'propos', 'float', 'less', 'longer', 'stringenc', 'accept', 'maximum', 'dogleg', 'minim', 'must', 'termin', 'No', 'radiu', 'trustregion', 'success', 'max_trust_radiu', 'algorithm', 'region', 'valu', 'norm', 'trust', 'use', 'gradient', 'relat']}"
89,"{'func name': 'singular_leading_submatrix', 'comments': 'Compute term that makes the leading ``k`` by ``k`` submatrix from ``A`` singular.\n\nParameters ---------- A : ndarray Symmetric matrix that is not positive definite. U : ndarray Upper triangular matrix resulting of an incomplete Cholesky decomposition of matrix ``A``. k : int Positive integer such that the leading k by k submatrix from `A` is the first non-positive definite leading submatrix.\n##### Returns\n* **delta **: float\n    Amount that should be added to the element (k, k) of the\n    leading k by k submatrix of ``A`` to make it singular.\n\n* **v **: ndarray\n    A vector such that ``v.T B v = 0``. Where B is the matrix A after\n    ``delta`` is added to its element (k, k).\n\n', 'stemmed comments': ['singular', 'B', 'ndarray', 'k', 'symmetr', 'return', 'amount', 'result', 'float', 'paramet', 'first', 'choleski', 'delta', 'upper', 'ad', 'incomplet', 'nonposit', 'v', 'U', 'comput', 'definit', 'vT', 'int', 'element', 'submatrix', 'posit', 'decomposit', 'where', 'triangular', 'vector', '0', 'make', '=', 'term', 'integ', 'A', 'matrix', 'lead']}"
90,"{'func name': '_minimize_trust_krylov', 'comments': 'Minimization of a scalar function of one or more variables using a nearly exact trust-region algorithm that only requires matrix vector products with the hessian matrix.\n\n.. versionadded:: 1.0.0\n\nOptions ------- inexact : bool, optional Accuracy to solve subproblems. If True requires less nonlinear iterations, but more vector products.\n', 'stemmed comments': ['option', 'function', 'nearli', 'bool', 'scalar', 'If', 'variabl', 'one', 'requir', 'less', 'true', '100', 'inexact', 'minim', 'exact', 'trustregion', 'algorithm', 'vector', 'product', 'versionad', 'use', 'hessian', 'matrix', 'iter', 'accuraci', 'nonlinear', 'subproblem', 'solv']}"
91,"{'func name': '_minimize_trust_ncg', 'comments': 'Minimization of scalar function of one or more variables using the Newton conjugate gradient trust-region algorithm.\n\nOptions ------- initial_trust_radius : float Initial trust-region radius. max_trust_radius : float Maximum value of the trust-region radius. No steps that are longer than this value will be proposed. eta : float Trust region related acceptance stringency for proposed steps. gtol : float Gradient norm must be less than `gtol` before successful termination.\n', 'stemmed comments': ['option', 'initi', 'initial_trust_radiu', 'function', 'gtol', 'scalar', 'eta', 'variabl', 'one', 'step', 'propos', 'newton', 'float', 'less', 'longer', 'stringenc', 'accept', 'conjug', 'maximum', 'minim', 'must', 'termin', 'No', 'radiu', 'trustregion', 'success', 'max_trust_radiu', 'algorithm', 'region', 'valu', 'norm', 'trust', 'use', 'gradient', 'relat']}"
92,"{'func name': '_minimize_trust_region', 'comments': 'Minimization of scalar function of one or more variables using a trust-region algorithm.\n\nOptions for the trust-region algorithm are: initial_trust_radius : float Initial trust radius. max_trust_radius : float Never propose steps that are longer than this value. eta : float Trust region related acceptance stringency for proposed steps. gtol : float Gradient norm must be less than `gtol` before successful termination. maxiter : int Maximum number of iterations to perform. disp : bool If True, print convergence message. inexact : bool Accuracy to solve subproblems. If True requires less nonlinear iterations, but more vector products. Only effective for method trust-krylov.\n\nThis function is called by the `minimize` function. It is not supposed to be called directly.\n', 'stemmed comments': ['option', 'initi', 'initial_trust_radiu', 'function', 'onli', 'gtol', 'never', 'number', 'bool', 'disp', 'effect', 'thi', 'perform', 'scalar', 'eta', 'variabl', 'If', 'call', 'one', 'step', 'propos', 'method', 'directli', 'requir', 'accuraci', 'float', 'less', 'It', 'suppos', 'true', 'longer', 'stringenc', 'accept', 'trustkrylov', 'maximum', 'inexact', 'minim', 'solv', 'must', 'termin', 'converg', 'radiu', 'trustregion', 'success', 'maxit', 'max_trust_radiu', 'int', 'algorithm', 'region', 'valu', 'vector', 'messag', 'norm', 'product', 'trust', 'use', 'print', 'iter', 'gradient', 'nonlinear', 'subproblem', 'relat']}"
93,"{'func name': 'get_tests', 'comments': 'Return the requested collection of test cases, as an array of dicts with subset-specific keys\n\nAllowed values of collection: \'original\': The original benchmarking functions. Real-valued functions of real-valued inputs on an interval with a zero. f1, .., f3 are continuous and infinitely differentiable f4 has a single discontinuity at the root f5 has a root at 1 replacing a 1st order pole f6 is randomly positive on one side of the root, randomly negative on the other \'aps\': The test problems in the TOMS ""Algorithm 748: Enclosing Zeros of Continuous Functions"" paper by Alefeld, Potra and Shi. Real-valued functions of real-valued inputs on an interval with a zero. Suitable for methods which start with an enclosing interval, and derivatives up to 2nd order. \'complex\': Some complex-valued functions of complex-valued inputs. No enclosing bracket is provided. Suitable for methods which use one or more starting values, and derivatives up to 2nd order.\n\nThe dictionary keys will be a subset of [""f"", ""fprime"", ""fprime2"", ""args"", ""bracket"", ""a"", b"", ""smoothness"", ""x0"", ""x1"", ""root"", ""ID""]\n', 'stemmed comments': ['key', 'start', 'array', 'fprime', 'function', 'randomli', 'complexvalu', 'shi', 'order', 'ap', 'f4', 'replac', 'return', 'side', 'realvalu', 'one', 'the', 'f6', 'method', 'tom', 'b', 'root', '2nd', 'dictionari', 'dict', 'f3', 'provid', 'subset', 'differenti', 'fprime2', 'case', 'origin', 'pole', 'infinit', 'neg', 'some', 'enclos', 'x0', 'interv', 'test', 'continu', '1', 'alefeld', 'zero', 'subsetspecif', 'f1', 'discontinu', '748', 'allow', 'No', 'arg', 'benchmark', 'request', 'deriv', '1st', ']', 'f', 'paper', 'algorithm', 'posit', 'valu', 'input', 'bracket', 'f5', 'potra', 'suitabl', 'smooth', '[', 'x1', 'use', 'ID', 'singl', 'complex', 'collect', 'problem']}"
94,"{'func name': 'tukeylambda_kurtosis', 'comments': 'Kurtosis of the Tukey Lambda distribution.\n\nParameters ---------- lam : array_like The lambda values at which to compute the variance.\n##### Returns\n* **v **: ndarray\n    The variance.  For lam < -0.25, the variance is not defined, so\n    np.nan is returned.  For lam = 0.25, np.inf is returned.\n\n', 'stemmed comments': ['varianc', 'ndarray', 'kurtosi', 'tukey', 'defin', 'return', 'lambda', 'npnan', 'the', 'paramet', 'lam', 'for', '025', 'v', 'comput', 'npinf', 'valu', '=', 'distribut', '<', 'array_lik']}"
95,"{'func name': 'upfirdn', 'comments': 'Upsample, FIR filter, and downsample.\n\nParameters ---------- h : array_like 1-D FIR (finite-impulse response) filter coefficients. x : array_like Input signal array. up : int, optional Upsampling rate. Default is 1. down : int, optional Downsampling rate. Default is 1. axis : int, optional The axis of the input data array along which to apply the linear filter. The filter is applied to each subarray along this axis. Default is -1. mode : str, optional The signal extension mode to use. The set ``{""constant"", ""symmetric"", ""reflect"", ""edge"", ""wrap""}`` correspond to modes provided by `numpy.pad`. ``""smooth""`` implements a smooth extension by extending based on the slope of the last 2 points at each end of the array. ``""antireflect""`` and ``""antisymmetric""`` are anti-symmetric versions of ``""reflect""`` and ``""symmetric""``. The mode `""line""` extends the signal based on a linear trend defined by the first and last points along the ``axis``.\n\n.. versionadded:: 1.4.0 cval : float, optional The constant value to use when ``mode == ""constant""``.\n\n.. versionadded:: 1.4.0\n##### Returns\n* **y **: ndarray\n    The output signal array. Dimensions will be the same as `x` except\n    for along `axis`, which will change size according to the `h`,\n    `up`,  and `down` parameters.\n\n* **.. versionadded**: \n\n* **Simple operations**: \n\n* **Apply a single filter to multiple signals**: \n\n* **Apply along the last dimension of ``x``**: \n\n* **Apply along the 0th dimension of ``x``**: \n\n', 'stemmed comments': ['default', 'output', 'defin', 'end', 'respons', 'constant', 'linear', 'oper', 'paramet', '2', 'simpl', 'point', 'antisymmetr', 'downsampl', 'str', 'wrap', 'except', 'chang', 'last', 'filter', 'int', '{', 'fir', 'extend', 'slope', '0th', 'coeffici', 'float', 'provid', '}', 'first', 'version', 'antireflect', 'finiteimpuls', '140', 'edg', 'x', 'valu', 'input', 'implement', 'reflect', 'smooth', 'singl', 'option', 'array', 'ndarray', 'mode', 'rate', 'along', '==', 'line', 'cval', 'h', 'upsampl', 'axi', 'data', 'size', 'use', 'base', 'set', 'correspond', 'symmetr', 'return', 'the', 'accord', 'trend', 'signal', '1', 'subarray', 'multipl', 'extens', 'dimens', 'numpypad', 'appli', 'versionad', '1D', 'array_lik']}"
96,"{'func name': 'rng_integers', 'comments': 'Return random integers from low (inclusive) to high (exclusive), or if endpoint=True, low (inclusive) to high (inclusive). Replaces `RandomState.randint` (with endpoint=False) and `RandomState.random_integers` (with endpoint=True).\n\nReturn random integers from the ""discrete uniform"" distribution of the specified dtype. If high is None (the default), then results are from 0 to low.\n\nParameters ---------- gen: {None, np.random.RandomState, np.random.Generator} Random number generator. If None, then the np.random.RandomState singleton is used. low: int or array-like of ints Lowest (signed) integers to be drawn from the distribution (unless high=None, in which case this parameter is 0 and this value is used for high). high: int or array-like of ints If provided, one above the largest (signed) integer to be drawn from the distribution (see above for behavior if high=None). If array-like, must contain integer values. size: None Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned. dtype: {str, dtype}, optional Desired dtype of the result. All dtypes are determined by their name, i.e., \'int64\', \'int\', etc, so byteorder is not available and a specific precision may have different C types depending on the platform. The default value is np.int_. endpoint: bool, optional If True, sample from the interval [low, high] instead of the default [low, high) Defaults to False.\n##### Returns\n* **out**: int or ndarray of ints\n    size-shaped array of random integers from the appropriate distribution,\n    or a single such random int if size not provided.\n\n', 'stemmed comments': ['default', 'drawn', 'number', 'output', 'paramet', 'desir', 'specif', 'none', 'eg', 'exclus', 'str', 'type', 'must', 'n', 'etc', 'differ', 'int', '{', 'shape', 'instead', 'integ', 'high=non', 'dtype', 'given', 'k', 'provid', 'endpoint=fals', '}', 'gener', 'name', 'depend', 'lowest', 'valu', '0', 'randomstaterandom_integ', 'singl', 'platform', 'option', 'ndarray', 'array', 'If', 'endpoint', 'one', 'uniform', 'largest', 'determin', 'fals', 'avail', 'case', 'interv', 'int64', 'nprandomrandomst', 'unless', 'byteord', 'distribut', 'may', 'size', 'C', 'use', 'behavior', 'low', 'randomstaterandint', 'precis', 'bool', 'high', 'replac', 'return', 'sampl', 'the', 'gen', 'result', 'true', 'appropri', 'contain', 'sizeshap', 'specifi', 'npint_', '[', 'all', 'arraylik', 'ie', ']', 'discret', 'sign', 'see', 'singleton', 'random', 'inclus', 'endpoint=tru', 'nprandomgener']}"
97,"{'func name': 'validate_graph', 'comments': 'Routine for validation and conversion of csgraph inputs\n\n\n', 'stemmed comments': ['valid', 'input', 'csgraph', 'routin', 'convers']}"
98,"{'func name': '_generate_wilcoxon_exact_table_fast', 'comments': 'Same functionality as _generate_wilcoxon_exact_table, but about 20% faster, but harder to follow.\n\n\n', 'stemmed comments': ['faster', 'function', '_generate_wilcoxon_exact_t', 'follow', 'harder', '20', 'same', '%']}"
99,"{'func name': 'add_newdoc', 'comments': '', 'stemmed comments': []}"
100,"{'func name': 'test_weka', 'comments': '', 'stemmed comments': []}"
101,"{'func name': 'svds', 'comments': 'Compute the largest or smallest k singular values/vectors for a sparse matrix. The order of the singular values is not guaranteed.\n\nParameters ---------- A : {sparse matrix, LinearOperator} Array to compute the SVD on, of shape (M, N) k : int, optional Number of singular values and vectors to compute. Must be 1 <= k < min(A.shape). ncv : int, optional The number of Lanczos vectors generated ncv must be greater than k+1 and smaller than n; it is recommended that ncv > 2*k Default: ``min(n, max(2*k + 1, 20))`` tol : float, optional Tolerance for singular values. Zero (default) means machine precision. which : str, [\'LM\' | \'SM\'], optional Which `k` singular values to find:\n\n- \'LM\' : largest singular values\n\n- \'SM\' : smallest singular values\n\n.. versionadded:: 0.12.0 v0 : ndarray, optional Starting vector for iteration, of length min(A.shape). Should be an (approximate) left singular vector if N > M and a right singular vector otherwise. Default: random\n\n.. versionadded:: 0.12.0 maxiter : int, optional Maximum number of iterations.\n\n.. versionadded:: 0.12.0 return_singular_vectors : bool or str, optional\n\n- True: return singular vectors (True) in addition to singular values.\n\n.. versionadded:: 0.12.0\n\n- ""u"": only return the u matrix, without computing vh (if N > M).\n\n- ""vh"": only return the vh matrix, without computing u (if N <= M).\n\n.. versionadded:: 0.16.0 solver : str, optional Eigenvalue solver to use. Should be \'arpack\' or \'lobpcg\'. Default: \'arpack\'\n##### Returns\n* **u **: ndarray, shape=(M, k)\n    Unitary matrix having left singular vectors as columns.\n    If `return_singular_vectors` is ""vh"", this variable is not computed,\n    and None is returned instead.\n\n* **s **: ndarray, shape=(k,)\n    The singular values.\n\n* **vt **: ndarray, shape=(k, N)\n    Unitary matrix having right singular vectors as rows.\n    If `return_singular_vectors` is ""u"", this variable is not computed,\n    and None is returned instead.\n\n', 'stemmed comments': ['v0', 'N', '>', 'default', 'greater', 'number', 'lobpcg', '0120', 'unitari', 'variabl', 'shape=', 'paramet', '2', 'none', 'spars', 'str', 'must', 'n', 'LM', 'int', '{', 'shape', 'svd', 'instead', '=', 'guarante', 'max', 'left', 'mean', 'order', 'k', 'linearoper', 'eigenvalu', 'smallest', 'row', 'find', 'float', '}', 'gener', '0160', 'min', 'values/vector', 'valu', 'vector', 'addit', 'A', 'toler', 'vh', 'option', 'tol', 'start', 'array', 'ndarray', 'solver', 'vt', 'lanczo', 'return_singular_vector', 'recommend', 'If', 'k1', 'ashap', 'largest', 'arpack', '|', 'maximum', 'column', 'zero', 'smaller', 'SM', 'comput', 'which', 'maxit', 'should', 'ncv', 'without', 'use', ';', 'singular', 'precis', 'bool', 'right', 'return', 'M', 'the', 'approxim', 'true', 'machin', 'length', '[', '1', 'otherwis', ']', '20', 'u', 'versionad', 'random', 'matrix', 'iter', '<']}"
102,"{'func name': 'load_name_map', 'comments': '', 'stemmed comments': []}"
103,"{'func name': 'check_arguments', 'comments': 'Helper function for checking arguments common to all solvers.\n\n\n', 'stemmed comments': ['solver', 'function', 'common', 'helper', 'check', 'argument']}"
104,"{'func name': 'isspmatrix', 'comments': 'Is x of a sparse matrix type?\n\nParameters ---------- x object to check for being a sparse matrix\n##### Returns\n', 'stemmed comments': ['x', 'type', '?', 'paramet', 'Is', 'object', 'spars', 'matrix', 'return', 'check']}"
105,"{'func name': 'matrix_balance', 'comments': 'Compute a diagonal similarity transformation for row/column balancing.\n\nThe balancing tries to equalize the row and column 1-norms by applying a similarity transformation such that the magnitude variation of the matrix entries is reflected to the scaling matrices.\n\nMoreover, if enabled, the matrix is first permuted to isolate the upper triangular parts of the matrix and, again if scaling is also enabled, only the remaining subblocks are subjected to scaling.\n\nThe balanced matrix satisfies the following equality\n\n.. math::\n\nB = T^{-1} A T\n\nThe scaling coefficients are approximated to the nearest power of 2 to avoid round-off errors.\n\nParameters ---------- A : (n, n) array_like Square data matrix for the balancing. permute : bool, optional The selector to define whether permutation of A is also performed prior to scaling. scale : bool, optional The selector to turn on and off the scaling. If False, the matrix will not be scaled. separate : bool, optional This switches from returning a full matrix of the transformation to a tuple of two separate 1-D permutation and scaling arrays. overwrite_a : bool, optional This is passed to xGEBAL directly. Essentially, overwrites the result to the data. It might increase the space efficiency. See LAPACK manual for details. This is False by default.\n##### Returns\n* **B **: (n, n) ndarray\n    Balanced matrix\n\n* **T **: (n, n) ndarray\n    A possibly permuted diagonal matrix whose nonzero entries are\n    integer powers of 2 to avoid numerical truncation errors.\n\n* **scale, perm **: (n,) ndarray\n    If ``separate`` keyword is set to True then instead of the array\n    ``T`` above, the scaling and the permutation vectors are given\n    separately as a tuple without allocating the full array ``T``.\n\n* **.. versionadded**: \n\n* **.. [1] **: B.N. Parlett and C. Reinsch, ""Balancing a Matrix for\n   Calculation of Eigenvalues and Eigenvectors"", Numerische Mathematik,\n   Vol.13(4), 1969, DOI\n\n* **.. [2] **: R. James, J. Langou, B.R. Lowery, ""On matrix balancing and\n   eigenvector computation"", 2014, Available online\n\n* **.. [3] **: D.S. Watkins. A case where balancing is harmful.\n   Electron. Trans. Numer. Anal, Vol.23, 2006.\n\n', 'stemmed comments': ['1norm', 'default', 'eigenvector', 'electron', 'defin', 'turn', 'perm', 'It', 'paramet', '2', 'magnitud', 'permut', 'balanc', 'parlett', 'n', 'moreov', 'subject', 'anal', 'reinsch', 'mathematik', '{', '2006', 'triangular', 'instead', 'onlin', '1969', '=', 'BN', 'integ', 'jame', 'space', 'T', 'given', 'DS', 'thi', 'roundoff', 'eigenvalu', 'coeffici', 'directli', 'row', 'nonzero', '}', 'first', 'entri', 'transform', 'enabl', 'nearest', 'scale', 'numerisch', '3', 'error', 'whether', 'effici', 'also', 'R', 'On', 'J', 'vector', 'pass', 'reflect', 'possibl', 'detail', 'numer', 'A', 'option', 'B', 'array', 'ndarray', 'If', 'BR', 'truncat', 'matric', 'tupl', 'squar', 'T^', 'fals', 'avail', 'case', 'column', 'upper', '4', 'increas', 'alloc', 'comput', 'data', 'satisfi', 'without', 'manual', 'full', 'C', 'doi', 'overwrite_a', '2014', 'similar', 'switch', 'variat', 'set', 'bool', 'selector', 'perform', 'return', 'remain', 'keyword', 'diagon', 'the', 'isol', 'part', 'approxim', 'two', 'result', 'row/column', 'xgebal', 'whose', 'true', 'power', 'vol13', 'equal', '[', '1', 'loweri', 'vol23', ']', 'langou', 'overwrit', 'math', 'lapack', 'avoid', 'prior', 'might', 'separ', 'tran', 'see', 'subblock', 'harm', 'tri', 'follow', 'essenti', 'calcul', 'appli', 'versionad', 'watkin', 'matrix', '1D', 'array_lik']}"
106,"{'func name': 'ifft2', 'comments': '2-D discrete inverse Fourier transform of real or complex sequence.\n\nReturn inverse 2-D discrete Fourier transform of arbitrary type sequence x.\n\nSee `ifft` for more information.\n\nSee also -------- fft2, ifft\n\nExamples -------- >>> from scipy.fftpack import fft2, ifft2 >>> y = np.mgrid[:5, :5][0] >>> y array([[0, 0, 0, 0, 0], [1, 1, 1, 1, 1], [2, 2, 2, 2, 2], [3, 3, 3, 3, 3], [4, 4, 4, 4, 4]]) >>> np.allclose(y, fft2(ifft2(y))) True\n', 'stemmed comments': ['>', 'array', 'arbitrari', 'real', 'return', 'fourier', 'npallclos', 'exampl', 'invers', '5', 'fft2', 'true', '2', 'scipyfftpack', 'transform', 'npmgrid', '3', '4', '[', 'type', '1', 'ifft2', 'also', ']', 'sequenc', '2D', 'discret', 'x', '0', 'see', '=', 'ifft', 'inform', 'complex', 'import']}"
107,"{'func name': 'r2r_fftpack', 'comments': 'FFT of a real sequence, returning fftpack half complex format\n\n\n', 'stemmed comments': ['fftpack', 'half', 'fft', 'real', 'return', 'complex', 'sequenc', 'format']}"
108,"{'func name': 'solve_bdf_system', 'comments': 'Solve the algebraic system resulting from BDF method.\n\n\n', 'stemmed comments': ['algebra', 'solv', 'result', 'system', 'method', 'bdf']}"
109,"{'func name': 'get_blas_funcs', 'comments': ""Return available BLAS function objects from names.\n\nArrays are used to determine the optimal prefix of BLAS routines.\n\nParameters ---------- names : str or sequence of str Name(s) of BLAS functions without type prefix.\n\narrays : sequence of ndarrays, optional Arrays can be given to determine optimal prefix of BLAS routines. If not given, double-precision routines will be used, otherwise the most generic type in arrays will be used.\n\ndtype : str or dtype, optional Data-type specifier. Not used if `arrays` is non-empty.\n\nilp64 : {True, False, 'preferred'}, optional Whether to return ILP64 routine variant. Choosing 'preferred' returns ILP64 routine if available, and otherwise the 32-bit routine. Default: False\n##### Returns\n* **funcs **: list\n    List containing the found function(s).\n\n"", 'stemmed comments': ['option', 'doubleprecis', 'default', 'array', 'ndarray', 'function', 'given', 'dtype', 'func', 'If', 'object', 'return', 'nonempti', 'prefix', 'determin', 'paramet', 'true', 'not', 'fals', '}', 'variant', 'avail', 'choos', 'gener', 'name', 'contain', 'datatyp', 'ilp64', 'prefer', 'specifi', 'str', 'list', 'type', 'optim', 'whether', 'routin', 'otherwis', 'sequenc', '{', '32bit', 'without', 'bla', 'found', 'use']}"
110,"{'func name': 'qspline1d_eval', 'comments': 'Evaluate a quadratic spline at the new set of points.\n\nParameters ---------- cj : ndarray Quadratic spline coefficients newx : ndarray New set of points. dx : float, optional Old sample-spacing, the default value is 1.0. x0 : int, optional Old origin, the default value is 0.\n##### Returns\n* **res **: ndarray\n    Evaluated a quadratic spline points.\n\n* **qspline1d **: Compute quadratic spline coefficients for rank-1 array.\n\n* **represent spline coefficients were at equally-spaced points of**: \n\n* **a quadratic spline**: \n\n', 'stemmed comments': ['option', 'set', 'default', 'ndarray', 'array', 'repres', 'newx', 'coeffici', 'return', 'qspline1d', 'quadrat', 'float', 'new', 'paramet', 'old', 'dx', 'rank1', 'samplespac', 'evalu', 'point', 'origin', 'spline', 're', 'equallyspac', 'x0', 'cj', 'comput', 'int', '10', 'valu', '0']}"
111,"{'func name': 'isspmatrix_bsr', 'comments': 'Is x of a bsr_matrix type?\n\nParameters ---------- x object to check for being a bsr matrix\n##### Returns\n', 'stemmed comments': ['x', 'type', '?', 'paramet', 'Is', 'object', 'matrix', 'return', 'check', 'bsr', 'bsr_matrix']}"
112,"{'func name': 'bvls', 'comments': '', 'stemmed comments': []}"
113,"{'func name': 'to_numpy_code', 'comments': ""Convert various order codings to NumPy format.\n\nParameters ---------- code : str The code to convert. It is converted to lower case before parsing. Legal values are: 'little', 'big', 'l', 'b', 'le', 'be', '<', '>', 'native', '=', 'swapped', 's'.\n##### Returns\n* **out_code **: {'<', '>'}\n    Here '<' is the numpy dtype code for little endian,\n    and '>' is the code for big endian.\n\n"", 'stemmed comments': ['>', 'dtype', 'order', 'le', 'convert', 'return', 'be', 'littl', 'the', 'format', 's', 'It', 'endian', 'paramet', 'variou', 'big', '}', 'code', 'nativ', 'case', 'str', 'lower', 'here', '{', 'numpi', 'valu', 'legal', 'swap', '=', 'pars', 'out_cod', '<', 'b', 'l']}"
114,"{'func name': 'initial_constraints_as_canonical', 'comments': 'Convert initial values of the constraints to the canonical format.\n\nThe purpose to avoid one additional call to the constraints at the initial point. It takes saved values in `PreparedConstraint`, modififies and concatenates them to the the canonical constraint format.\n', 'stemmed comments': ['initi', 'call', 'convert', 'one', 'the', 'format', 'It', 'take', 'point', 'canon', 'purpos', 'modififi', 'preparedconstraint', 'constraint', 'concaten', 'avoid', 'valu', 'save', 'addit']}"
115,"{'func name': '_minimize_cobyla', 'comments': 'Minimize a scalar function of one or more variables using the Constrained Optimization BY Linear Approximation (COBYLA) algorithm.\n\nOptions ------- rhobeg : float Reasonable initial changes to the variables. tol : float Final accuracy in the optimization (not precisely guaranteed). This is a lower bound on the size of the trust region. disp : bool Set to True to print convergence messages. If False, `verbosity` is ignored as set to 0. maxiter : int Maximum number of function evaluations. catol : float Tolerance (absolute) for constraint violations\n', 'stemmed comments': ['bound', 'option', 'initi', 'tol', 'precis', 'set', 'function', 'violat', 'number', 'final', 'disp', 'thi', 'bool', 'scalar', 'If', 'variabl', 'catol', 'one', 'verbos', 'approxim', 'linear', 'float', 'ignor', 'true', 'fals', 'absolut', 'evalu', 'cobyla', 'maximum', 'rhobeg', 'minim', 'lower', 'BY', 'optim', 'converg', 'chang', 'reason', 'constraint', 'maxit', 'int', 'algorithm', 'region', '0', 'messag', 'guarante', 'size', 'constrain', 'trust', 'use', 'toler', 'print', 'accuraci']}"
116,"{'func name': 'find', 'comments': ""Return list of physical_constant keys containing a given string.\n\nParameters ---------- sub : str, unicode Sub-string to search keys for. By default, return all keys. disp : bool If True, print the keys that are found and return None. Otherwise, return the list of keys without printing anything.\n##### Returns\n* **keys **: list or None\n    If `disp` is False, the list of keys is returned.\n    Otherwise, None is returned.\n\n* **Get the constant called 'Boltzmann constant in Hz/K'**: \n\n* **Find constants with 'radius' in the key**: \n\n"", 'stemmed comments': ['key', 'default', 'given', 'string', 'disp', 'bool', 'call', 'If', 'return', 'search', 'constant', 'find', 'hz/k', 'paramet', 'true', 'none', 'fals', 'By', 'get', 'contain', 'substr', 'list', 'sub', 'str', 'physical_const', 'boltzmann', 'otherwis', 'radiu', 'anyth', 'without', 'unicod', 'found', 'print']}"
117,"{'func name': 'check_rvs_broadcast', 'comments': '', 'stemmed comments': []}"
118,"{'func name': 'with_attributes', 'comments': '', 'stemmed comments': []}"
119,"{'func name': 'electrocardiogram', 'comments': ""Load an electrocardiogram as an example for a 1-D signal.\n\nThe returned signal is a 5 minute long electrocardiogram (ECG), a medical recording of the heart's electrical activity, sampled at 360 Hz.\n##### Returns\n* **ecg **: ndarray\n    The electrocardiogram in millivolt (mV) sampled at 360 Hz.\n\n* **The provided signal is an excerpt (19**: 35 to 24\n\n* **.. _record 208**: https\n\n* **.. versionadded**: \n\n* **.. [1] Moody GB, Mark RG. The impact of the MIT-BIH Arrhythmia Database.\n       IEEE Eng in Med and Biol 20(3)**: 45-50 (May-June 2001).\n       (PMID\n\n* **.. [2] Goldberger AL, Amaral LAN, Glass L, Hausdorff JM, Ivanov PCh,\n       Mark RG, Mietus JE, Moody GB, Peng C-K, Stanley HE. PhysioBank,\n       PhysioToolkit, and PhysioNet**: Components of a New Research Resource\n       for Complex Physiologic Signals. Circulation 101(23)\n\n* **At several points large artifacts disturb the recording, e.g.**: \n\n"", 'stemmed comments': ['101', 'physionet', 'impact', 'glass', 'activ', '2', 'eg', 'CK', '2001', 'point', 'AL', 'HE', 'Hz', '19', '4550', '208', 'goldberg', 'arrhythmia', 'At', 'ivanov', 'mV', 'mayjun', 'minut', 'exampl', 'provid', 'ecg', 'amar', 'med', '24', 'mitbih', '3', 'physiotoolkit', 'research', 'eng', 'long', 'larg', 'physiolog', 'compon', 'circul', 'JE', 'lan', 'pch', 'ndarray', 'hausdorff', '35', 'resourc', 'http', 's', '5', 'ieee', 'artifact', 'GB', 'record', 'excerpt', 'electr', 'pmid', 'sever', 'mark', 'biol', 'medic', 'L', 'complex', 'disturb', '23', 'databas', 'physiobank', 'return', 'sampl', 'the', 'new', 'heart', 'peng', 'JM', '360', 'signal', '[', 'mietu', '1', 'stanley', ']', 'load', 'moodi', '20', 'millivolt', 'electrocardiogram', 'versionad', '1D', '_record', 'RG']}"
120,"{'func name': '_sparse_num_jac', 'comments': '', 'stemmed comments': []}"
121,"{'func name': 'scale_for_robust_loss_function', 'comments': 'Scale Jacobian and residuals for a robust loss function.\n\nArrays are modified in place.\n', 'stemmed comments': ['scale', 'residu', 'array', 'function', 'jacobian', 'loss', 'place', 'robust', 'modifi']}"
122,"{'func name': 'set_cxx_flags_clib_hook', 'comments': '', 'stemmed comments': []}"
123,"{'func name': '_process_slice', 'comments': '', 'stemmed comments': []}"
124,"{'func name': 'linkcode_resolve', 'comments': 'Determine the URL corresponding to Python object\n\n\n', 'stemmed comments': ['determin', 'url', 'correspond', 'object', 'python']}"
125,"{'func name': 'check_fpu_mode', 'comments': 'Check FPU mode was not changed during the test.\n\n\n', 'stemmed comments': ['mode', 'test', 'chang', 'fpu', 'check']}"
126,"{'func name': 'nu2lambda', 'comments': 'Convert optical frequency to wavelength.\n\nParameters ---------- nu : array_like Optical frequency to be converted.\n##### Returns\n* **lambda **: float or array of floats\n    Equivalent wavelength(s).\n\n', 'stemmed comments': ['optic', 'frequenc', 'array', 'float', 'paramet', 'return', 'convert', 'nu', 'wavelength', 'lambda', 'array_lik', 'equival']}"
127,"{'func name': 'rand', 'comments': 'Generate a sparse matrix of the given shape and density with uniformly distributed values.\n\nParameters ---------- m, n : int shape of the matrix density : real, optional density of the generated matrix: density equal to one means a full matrix, density of 0 means a matrix with no non-zero items. format : str, optional sparse matrix format. dtype : dtype, optional type of the returned matrix values. random_state : {numpy.random.RandomState, int, np.random.Generator}, optional Random number generator or random seed. If not given, the singleton numpy.random will be used.\n##### Returns\n* **res **: sparse matrix\n\n* **scipy.sparse.random **: Similar function that allows a user-specified random\n    data source.\n\n', 'stemmed comments': ['option', 'given', 'dtype', 'function', 'number', 'mean', 'If', 'real', 'return', 'one', 'format', 'nonzero', 'paramet', 'item', '}', 'uniformli', 'spars', 'gener', 're', 'numpyrandomrandomst', 'seed', 'equal', 'str', 'random_st', 'type', 'n', 'sourc', 'allow', 'int', '{', 'data', 'shape', 'valu', '0', 'userspecifi', 'distribut', 'full', 'singleton', 'random', 'use', 'scipysparserandom', 'matrix', 'numpyrandom', 'nprandomgener', 'similar', 'densiti']}"
128,"{'func name': 'chi2_contingency', 'comments': 'Chi-square test of independence of variables in a contingency table.\n\nThis function computes the chi-square statistic and p-value for the hypothesis test of independence of the observed frequencies in the contingency table [1]_ `observed`.\n\nThe expected frequencies are computed based on the marginal sums under the assumption of independence; see `scipy.stats.contingency.expected_freq`.\n\nThe number of degrees of freedom is (expressed using numpy functions and attributes)::\n\ndof = observed.size\n\n- sum(observed.shape) + observed.ndim\n\n- 1\n\n Parameters ---------- observed : array_like The contingency table. The table contains the observed frequencies (i.e. number of occurrences) in each category.\n\nIn the two-dimensional case, the table is often described as an ""R x C table"". correction : bool, optional If True, *and* the degrees of freedom is 1, apply Yates\' correction for continuity.\n\nThe effect of the correction is to adjust each observed value by 0.5 towards the corresponding expected value. lambda_ : float or str, optional. By default, the statistic computed in this test is Pearson\'s chi-squared statistic [2]_.\n\n`lambda_` allows a statistic from the Cressie-Read power divergence family [3]_ to be used instead.\n\nSee `power_divergence` for details.\n##### Returns\n* **chi2 **: float\n    The test statistic.\n\n* **p **: float\n    The p-value of the test\n\n* **dof **: int\n    Degrees of freedom\n\n* **expected **: ndarray, same shape as `observed`\n    The expected frequencies, based on the marginal sums of the table.\n\n* **required, one could use stats.chisquare.  That is, if one calls**: \n\n* **then the following is true**: \n\n* **.. [1] ""Contingency table"",\n       https**: //en.wikipedia.org/wiki/Contingency_table\n\n* **.. [2] ""Pearson\'s chi-squared test"",\n       https**: //en.wikipedia.org/wiki/Pearson%27s_chi-squared_test\n\n* **A two-way example (2 x 3)**: \n\n* **A four-way example (2 x 2 x 2 x 2)**: \n\n', 'stemmed comments': ['assumpt', 'default', 'function', 'power_diverg', 'statist', 'number', 'call', 'variabl', 'requir', 'sum', 'frequenc', 'paramet', 'observedndim', '2', 'By', 'observ', 'could', 'categori', 'str', 'p', 'test', 'cressieread', 'int', 'numpi', 'shape', 'instead', 'In', 'chi2', '=', 'statschisquar', '05', 'twodimension', 'thi', 'dof', 'exampl', 'float', 'expect', '27s_chisquared_test', 'tabl', 'freedom', '3', 'allow', 'R', 'x', 'valu', 'observedshap', 'detail', 'observeds', 'A', 'option', 'ndarray', 'lambda_', 'attribut', 'fourway', 'effect', 'hypothesi', 'If', 'http', 'diverg', 'one', 's', 'toward', 'case', 'express', 'comput', 'describ', 'occurr', 'yate', 'pearson', 'C', 'use', 'base', ';', 'degre', 'pvalu', 'correspond', 'bool', 'return', 'famili', '//enwikipediaorg/wiki/pearson', 'the', 'independ', 'chisquar', 'true', 'twoway', 'power', 'conting', 'that', 'contain', 'adjust', 'scipystatscontingencyexpected_freq', '[', 'continu', '1', 'ie', ']', 'margin', 'correct', '_', 'see', 'follow', 'often', 'appli', '//enwikipediaorg/wiki/contingency_t', 'array_lik', '%']}"
129,"{'func name': 'dump_datasets', 'comments': '', 'stemmed comments': []}"
130,"{'func name': 'isspmatrix_coo', 'comments': 'Is x of coo_matrix type?\n\nParameters ---------- x object to check for being a coo matrix\n##### Returns\n', 'stemmed comments': ['x', 'type', '?', 'paramet', 'coo', 'Is', 'object', 'matrix', 'return', 'check', 'coo_matrix']}"
131,"{'func name': 'isspmatrix_csc', 'comments': 'Is x of csc_matrix type?\n\nParameters ---------- x object to check for being a csc matrix\n##### Returns\n', 'stemmed comments': ['csc_matrix', 'x', 'type', '?', 'paramet', 'csc', 'Is', 'object', 'matrix', 'return', 'check']}"
132,"{'func name': 'isspmatrix_csr', 'comments': 'Is x of csr_matrix type?\n\nParameters ---------- x object to check for being a csr matrix\n##### Returns\n', 'stemmed comments': ['x', 'csr', 'type', '?', 'paramet', 'csr_matrix', 'Is', 'object', 'matrix', 'return', 'check']}"
133,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
134,"{'func name': '_find_missing_index', 'comments': '', 'stemmed comments': []}"
135,"{'func name': 'run_test', 'comments': '', 'stemmed comments': []}"
136,"{'func name': 'cho_solve_banded', 'comments': 'Solve the linear equations ``A x = b``, given the Cholesky factorization of the banded Hermitian ``A``.\n\nParameters ---------- (cb, lower) : tuple, (ndarray, bool) `cb` is the Cholesky factorization of A, as given by cholesky_banded. `lower` must be the same value that was given to cholesky_banded. b : array_like Right-hand side overwrite_b : bool, optional If True, the function will overwrite the values in `b`. check_finite : bool, optional Whether to check that the input matrices contain only finite numbers. Disabling may give a performance gain, but may result in problems (crashes, non-termination) if the inputs do contain infinities or NaNs.\n##### Returns\n* **x **: array\n    The solution to the system A x = b\n\n* **cholesky_banded **: Cholesky factorization of a banded matrix\n\n* **.. versionadded**: \n\n* **>>> A = np.diag(Ab[0,2**: ], k=2) + np.diag(Ab[1,1\n\n* **>>> A = A + A.conj().T + np.diag(Ab[2, **: ])\n\n', 'stemmed comments': ['option', 'nan', 'equat', 'ndarray', 'given', 'function', 'array', '>', 'npdiag', 'number', 'T', 'system', 'bool', 'perform', 'gain', 'If', 'cb', 'disabl', 'return', 'matric', 'aconj', 'tupl', 'the', '11', 'linear', 'result', 'k=2', 'paramet', 'true', 'cholesky_band', 'solut', '2', '02', 'choleski', 'check', 'crash', 'contain', 'lower', '[', 'check_finit', 'must', 'band', 'whether', ']', 'overwrit', 'give', 'x', 'valu', 'nontermin', 'factor', '=', 'righthand', 'input', 'finit', 'may', 'infin', 'Ab', 'versionad', 'A', 'hermitian', 'side', 'overwrite_b', 'array_lik', 'b', 'matrix', 'solv', 'problem']}"
137,"{'func name': 'lu', 'comments': 'Compute pivoted LU decomposition of a matrix.\n\nThe decomposition is::\n\nA = P L U\n\nwhere P is a permutation matrix, L lower triangular with unit diagonal elements, and U upper triangular.\n\nParameters ---------- a : (M, N) array_like Array to decompose permute_l : bool, optional Perform the multiplication P*L (Default: do not permute) overwrite_a : bool, optional Whether to overwrite data in a (may improve performance) check_finite : bool, optional Whether to check that the input matrix contains only finite numbers. Disabling may give a performance gain, but may result in problems (crashes, non-termination) if the inputs do contain infinities or NaNs.\n##### Returns\n* **p **: (M, M) ndarray\n    Permutation matrix\n\n* **l **: (M, K) ndarray\n    Lower triangular or trapezoidal matrix with unit diagonal.\n    K = min(M, N)\n\n* **u **: (K, N) ndarray\n    Upper triangular or trapezoidal matrix\n\n* **pl **: (M, K) ndarray\n    Permuted L matrix.\n    K = min(M, N)\n\n', 'stemmed comments': ['option', 'N', 'default', 'array', 'nan', 'ndarray', 'number', 'bool', 'perform', 'gain', 'disabl', 'return', 'M', 'diagon', 'the', 'LU', 'result', 'decompos', 'paramet', 'unit', 'improv', 'check', 'crash', 'upper', 'K', 'permut', 'contain', 'trapezoid', 'permute_l', 'lower', 'p', 'check_finit', 'whether', 'U', 'comput', 'P', 'multipl', 'overwrit', 'give', 'pl', 'min', 'element', 'data', 'decomposit', 'triangular', 'nontermin', '=', 'input', 'may', 'finit', 'infin', 'u', 'overwrite_a', 'L', 'pivot', 'A', 'matrix', 'array_lik', 'l', 'problem']}"
138,"{'func name': 'rq', 'comments': ""Compute RQ decomposition of a matrix.\n\nCalculate the decomposition ``A = R Q`` where Q is unitary/orthogonal and R upper triangular.\n\nParameters ---------- a : (M, N) array_like Matrix to be decomposed overwrite_a : bool, optional Whether data in a is overwritten (may improve performance) lwork : int, optional Work array size, lwork >= a.shape[1]. If None or -1, an optimal size is computed. mode : {'full', 'r', 'economic'}, optional Determines what information is to be returned: either both Q and R ('full', default), only R ('r') or both Q and R but computed in economy-size ('economic', see Notes). check_finite : bool, optional Whether to check that the input matrix contains only finite numbers. Disabling may give a performance gain, but may result in problems (crashes, non-termination) if the inputs do contain infinities or NaNs.\n##### Returns\n* **R **: float or complex ndarray\n    Of shape (M, N) or (M, K) for ``mode='economic'``. ``K = min(M, N)``.\n\n* **Q **: float or complex ndarray\n    Of shape (N, N) or (K, N) for ``mode='economic'``. Not returned\n    if ``mode='r'``.\n\n"", 'stemmed comments': ['N', '>', 'default', 'number', 'paramet', 'none', 'K', 'lwork', 'int', '{', 'shape', 'triangular', '=', 'finit', 'Of', 'economys', 'gain', 'note', 'float', 'decompos', '}', 'r', 'crash', 'mode=', 'check_finit', 'work', 'optim', 'whether', 'R', 'min', 'decomposit', 'nontermin', 'input', 'Q', 'A', 'either', 'overwritten', 'option', 'nan', 'array', 'ndarray', 'mode', 'If', 'ashap', 'determin', 'not', 'check', 'upper', 'comput', 'give', 'data', 'mode=econom', 'may', 'full', 'size', 'inform', 'overwrite_a', 'complex', 'bool', 'perform', 'return', 'disabl', 'M', 'result', 'improv', 'contain', '[', '1', 'RQ', ']', 'unitary/orthogon', 'see', 'infin', 'calcul', 'econom', 'matrix', 'array_lik', 'problem']}"
139,"{'func name': 'rsf2csf', 'comments': 'Convert real Schur form to complex Schur form.\n\nConvert a quasi-diagonal real-valued Schur form to the upper-triangular complex-valued Schur form.\n\nParameters ---------- T : (M, M) array_like Real Schur form of the original array Z : (M, M) array_like Schur transformation matrix check_finite : bool, optional Whether to check that the input arrays contain only finite numbers. Disabling may give a performance gain, but may result in problems (crashes, non-termination) if the inputs do contain infinities or NaNs.\n##### Returns\n* **T **: (M, M) ndarray\n    Complex Schur form of the original array\n\n* **Z **: (M, M) ndarray\n    Schur transformation matrix corresponding to the complex form\n\n* **schur **: Schur decomposition of an array\n\n', 'stemmed comments': ['quasidiagon', 'option', 'nan', 'array', 'ndarray', 'complexvalu', 'number', 'correspond', 'bool', 'perform', 'gain', 'convert', 'real', 'disabl', 'return', 'realvalu', 'M', 'Z', 'result', 'paramet', 'uppertriangular', 'transform', 'check', 'crash', 'origin', 'contain', 'check_finit', 'whether', 'form', 'give', 'decomposit', 'nontermin', 'complex', 'input', 'schur', 'finit', 'may', 'infin', 'matrix', 'array_lik', 'T', 'problem']}"
140,"{'func name': 'subspace_angles', 'comments': 'Compute the subspace angles between two matrices.\n\nParameters ---------- A : (M, N) array_like The first input array. B : (M, K) array_like The second input array.\n##### Returns\n* **angles **: ndarray, shape (min(N, K),)\n    The subspace angles between the column spaces of `A` and `B` in\n    descending order.\n\n* **.. versionadded**: \n\n* **.. [1] Knyazev A, Argentati M (2002) Principal Angles between Subspaces\n       in an A-Based Scalar Product**: Algorithms and Perturbation\n       Estimates. SIAM J. Sci. Comput. 23\n\n* **the suspace angle to be **: math\n\n* **>>> np.rad2deg(subspace_angles(H[**: ,\n\n* **And the subspace angle of a matrix to itself should be zero**: \n\n* **>>> subspace_angles(H[**: ,\n\n* **The angles between non-orthogonal subspaces are in between these extremes**: \n\n* **>>> np.rad2deg(subspace_angles(x[**: ,\n\n', 'stemmed comments': ['23', 'N', 'B', 'array', 'ndarray', '>', 'sci', 'princip', 'nprad2deg', 'angl', 'order', 'and', 'scalar', 'return', 'M', 'matric', 'the', 'H', 'two', 'paramet', 'extrem', 'first', 'argentati', 'descend', 'subspace_angl', 'knyazev', 'K', 'column', '[', '1', 'zero', '2002', 'comput', ']', 'second', 'estim', 'math', 'min', 'shape', 'algorithm', 'space', 'siam', 'suspac', 'nonorthogon', 'J', 'x', 'input', 'perturb', 'product', 'versionad', 'subspac', 'A', 'abas', 'matrix', 'array_lik']}"
141,"{'func name': 'cdf2rdf', 'comments': 'Converts complex eigenvalues ``w`` and eigenvectors ``v`` to real eigenvalues in a block diagonal form ``wr`` and the associated real eigenvectors ``vr``, such that\n\nvr @ wr = X @ vr\n\ncontinues to hold, where ``X`` is the original array for which ``w`` and ``v`` are the eigenvalues and eigenvectors.\n\n.. versionadded:: 1.1.0\n\nParameters ---------- w : (..., M) array_like Complex or real eigenvalues, an array or stack of arrays\n\nConjugate pairs must not be interleaved, else the wrong result will be produced. So ``[1+1j, 1, 1-1j]`` will give a correct result, but ``[1+1j, 2+1j, 1-1j, 2-1j]`` will not.\n\nv : (..., M, M) array_like Complex or real eigenvectors, a square array or stack of square arrays.\n##### Returns\n* **wr **: (..., M, M) ndarray\n    Real diagonal block form of eigenvalues\n\n* **vr **: (..., M, M) ndarray\n    Real eigenvectors associated with ``wr``\n\n* **eig **: Eigenvalues and right eigenvectors for non-symmetric arrays\n\n* **rsf2csf **: Convert real Schur form to complex Schur form\n\n* **.. versionadded**: \n\n', 'stemmed comments': ['block', 'array', 'els', 'ndarray', 'eigenvector', 'interleav', 'eig', 'nonsymmetr', 'convert', 'real', 'eigenvalu', 'wr', 'return', 'M', 'right', 'diagon', '11j', 'squar', 'result', 'paramet', 'vr', 'stack', 'array_lik', '@', '21j', 'w', 'conjug', 'origin', 'associ', 'continu', '[', '1', 'must', 'v', '110', 'wrong', ']', 'form', 'give', 'rsf2csf', 'pair', 'So', 'correct', '=', 'produc', 'schur', 'versionad', 'X', 'complex', 'hold']}"
142,"{'func name': 'dispatch_on', 'comments': 'Factory of decorators turning a function into a generic function dispatching on the given arguments.\n\n\n', 'stemmed comments': ['decor', 'given', 'function', 'dispatch', 'gener', 'argument', 'factori', 'turn']}"
143,"{'func name': 'matvec', 'comments': '', 'stemmed comments': []}"
144,"{'func name': 'deprecate_cython_api', 'comments': 'Deprecate an exported cdef function in a public Cython API module.\n\nOnly functions can be deprecated; typedefs etc. cannot.\n\nParameters ---------- module : module Public Cython API module (e.g. scipy.linalg.cython_blas). routine_name : str Name of the routine to deprecate. May also be a fused-type routine (in which case its all specializations are deprecated). new_name : str New name to include in the deprecation warning message message : str Additional text in the deprecation warning message\n\nExamples -------- Usually, this function would be used in the top-level of the module ``.pyx`` file:\n\n>>> from scipy._lib.deprecation import deprecate_cython_api >>> import scipy.linalg.cython_blas as mod >>> deprecate_cython_api(mod, ""dgemm"", ""dgemm_new"", ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmessage=""Deprecated in Scipy 1.5.0"") >>> del deprecate_cython_api, mod\n\nAfter this, Cython modules that use the deprecated function emit a deprecation warning when they are imported.\n', 'stemmed comments': ['scipi', 'pyx', '>', 'onli', 'function', 'scipy_libdeprec', 'emit', 'fusedtyp', 'public', 'cython', 'routine_nam', 'mod', '150', 'modul', 'del', 'new_nam', 'deprec', 'dgemm_new', 'exampl', 'new', 'paramet', 'file', 'eg', 'scipylinalgcython_bla', 'name', 'case', 'cdef', 'dgemm', 'str', 'after', 'text', 'routin', 'also', 'export', 'typedef', 'etc', 'api', 'warn', 'toplevel', 'messag', 'may', 'special', 'includ', 'would', 'deprecate_cython_api', 'message=', 'addit', 'use', ';', 'import', 'usual']}"
145,"{'func name': 'isspmatrix_dia', 'comments': 'Is x of dia_matrix type?\n\nParameters ---------- x object to check for being a dia matrix\n##### Returns\n', 'stemmed comments': ['x', 'type', '?', 'paramet', 'dia_matrix', 'return', 'Is', 'object', 'matrix', 'dia', 'check']}"
146,"{'func name': 'cdist', 'comments': ""Compute distance between each pair of the two collections of inputs.\n\nSee Notes for common calling conventions.\n\nParameters ---------- XA : ndarray An :math:`m_A` by :math:`n` array of :math:`m_A` original observations in an :math:`n`-dimensional space. Inputs are converted to float type. XB : ndarray An :math:`m_B` by :math:`n` array of :math:`m_B` original observations in an :math:`n`-dimensional space. Inputs are converted to float type. metric : str or callable, optional The distance metric to use.\n\nIf a string, the distance function can be 'braycurtis', 'canberra', 'chebyshev', 'cityblock', 'correlation', 'cosine', 'dice', 'euclidean', 'hamming', 'jaccard', 'jensenshannon', 'kulsinski', 'mahalanobis', 'matching', 'minkowski', 'rogerstanimoto', 'russellrao', 'seuclidean', 'sokalmichener', 'sokalsneath', 'sqeuclidean', 'wminkowski', 'yule'. *args : tuple. Deprecated. Additional arguments should be passed as keyword arguments **kwargs : dict, optional Extra arguments to `metric`: refer to each metric documentation for a list of all possible arguments.\n\nSome possible arguments:\n\np : scalar The p-norm to apply for Minkowski, weighted and unweighted. Default: 2.\n\nw : ndarray The weight vector for metrics that support weights (e.g., Minkowski).\n\nV : ndarray The variance vector for standardized Euclidean. Default: var(vstack([XA, XB]), axis=0, ddof=1)\n\nVI : ndarray The inverse of the covariance matrix for Mahalanobis. Default: inv(cov(vstack([XA, XB].T))).T\n\nout : ndarray The output array If not None, the distance matrix Y is stored in this array. Note: metric independent, it will become a regular keyword arg in a future scipy version\n##### Returns\n* **Y **: ndarray\n    A\n\n"", 'stemmed comments': ['m_a', 'default', 'varianc', 'function', 'string', 'call', 'output', 'standard', 'futur', 'dice', 'sokalmichen', 'chebyshev', 'deprec', 'wminkowski', 'paramet', '2', 'eg', 'canberra', 'minkowski', 'rogerstanimoto', 'none', 'observ', 'str', 'p', 'type', 'n', 'vstack', 'ham', 'weight', 'jensenshannon', 'dimension', 'sokalsneath', 'Y', 'space', 'T', 'argument', 'becom', 'distanc', 'yule', 'note', 'cityblock', 'float', 'invers', 'version', 'w', 'russellrao', 'pnorm', 'correl', 'kulsinski', 'document', 'unweight', 'callabl', 'jaccard', 'vector', 'input', 'pass', 'possibl', 'addit', 'A', 'covari', 'collect', 'refer', 'option', 'scipi', 'ndarray', 'array', 'convent', 'scalar', 'If', 'tupl', 'extra', 'sqeuclidean', 'axis=0', 'origin', 'some', 'store', 'support', 'comput', 'XA', 'euclidean', 'pair', 'XB', 'An', 'ddof=1', 'use', 'inv', 'convert', 'return', 'keyword', 'the', 'metric', 'seuclidean', 'two', 'V', 'dict', 'independ', 'cov', 'common', 'braycurti', 'VI', 'regular', 'list', 'mahalanobi', '[', 'arg', 'm_b', 'match', ']', 'var', 'math', 'kwarg', 'see', 'cosin', 'appli', 'matrix']}"
147,"{'func name': 'unindent_string', 'comments': '', 'stemmed comments': []}"
148,"{'func name': 'doc_replace', 'comments': 'Decorator to take the docstring from obj, with oldval replaced by newval\n\nEquivalent to ``func.__doc__ = obj.__doc__.replace(oldval, newval)``\n\nParameters ---------- obj: object The object to take the docstring from. oldval: string The string to replace from the original docstring. newval: string The string to replace ``oldval`` with.\n', 'stemmed comments': ['decor', 'newval', 'oldval', '=', 'paramet', 'take', 'string', 'func__doc__', 'replac', 'object', 'origin', 'obj', 'equival', 'obj__doc__replac', 'the', 'docstr']}"
149,"{'func name': 'dogbox', 'comments': '', 'stemmed comments': []}"
150,"{'func name': 'setup', 'comments': '', 'stemmed comments': []}"
151,"{'func name': 'isspmatrix_dok', 'comments': 'Is x of dok_matrix type?\n\nParameters ---------- x object to check for being a dok matrix\n##### Returns\n', 'stemmed comments': ['x', 'type', '?', 'paramet', 'Is', 'object', 'matrix', 'return', 'check', 'dok', 'dok_matrix']}"
152,"{'func name': 'download_wheels', 'comments': 'Download release wheels.\n\nThe release wheels for the given SciPy version are downloaded into the given directory.\n\nParameters ---------- version : str The release version. For instance, ""1.5.0"". wheelhouse : str Directory in which to download the wheels.\n', 'stemmed comments': ['wheelhous', 'scipi', 'releas', 'given', 'directori', 'str', 'instanc', 'paramet', 'wheel', 'for', 'download', 'version', '150', 'the']}"
153,"{'func name': 'equality_constrained_sqp', 'comments': 'Solve nonlinear equality-constrained problem using trust-region SQP.\n\nSolve optimization problem:\n\nminimize fun(x) subject to: constr(x) = 0\n\nusing Byrd-Omojokun Trust-Region SQP method described in [1]_. Several implementation details are based on [2]_ and [3]_, p. 549.\n\nReferences ---------- .. [1] Lalee, Marucha, Jorge Nocedal, and Todd Plantenga. ""On the implementation of an algorithm for large-scale equality constrained optimization."" SIAM Journal on Optimization 8.3 (1998): 682-706. .. [2] Byrd, Richard H., Mary E. Hribar, and Jorge Nocedal. ""An interior point algorithm for large-scale nonlinear programming."" SIAM Journal on Optimization 9.4 (1999): 877-900. .. [3] Nocedal, Jorge, and Stephen J. Wright. ""Numerical optimization"" Second Edition (2006).\n', 'stemmed comments': ['sqp', '877900', 'constr', 'marucha', '2006', 'byrd', 'method', 'largescal', 'wright', 'equalityconstrain', 'H', '549', 'program', 'stephen', '2', 'plantenga', 'mari', 'point', 'byrdomojokun', '682706', 'lale', 'refer', 'noced', 'minim', '3', '[', 'p', '1', 'equal', '83', 'optim', 'E', 'describ', 'trustregion', 'subject', ']', 'jorg', 'On', 'second', '1998', 'interior', 'edit', 'algorithm', 'hribar', 'siam', 'x', '_', 'sever', '0', 'todd', 'An', '=', 'J', '1999', 'implement', 'journal', 'detail', '94', 'constrain', 'richard', 'use', 'numer', 'fun', 'base', 'nonlinear', 'solv', 'problem']}"
154,"{'func name': 'function', 'comments': '', 'stemmed comments': []}"
155,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
156,"{'func name': '_masked_coo', 'comments': '', 'stemmed comments': []}"
157,"{'func name': 'get_module', 'comments': '', 'stemmed comments': []}"
158,"{'func name': 'direct_shift', 'comments': '', 'stemmed comments': []}"
159,"{'func name': 'gammatone', 'comments': ""Gammatone filter design.\n\nThis function computes the coefficients of an FIR or IIR gammatone digital filter [1]_.\n\nParameters ---------- freq : float Center frequency of the filter (expressed in the same units as `fs`). ftype : {'fir', 'iir'} The type of filter the function generates. If 'fir', the function will generate an Nth order FIR gammatone filter. If 'iir', the function will generate an 8th order digital IIR filter, modeled as as 4th order gammatone filter. order : int, optional The order of the filter. Only used when ``ftype='fir'``. Default is 4 to model the human auditory system. Must be between 0 and 24. numtaps : int, optional Length of the filter. Only used when ``ftype='fir'``. Default is ``fs*0.015`` if `fs` is greater than 1000, 15 if `fs` is less than or equal to 1000. fs : float, optional The sampling frequency of the signal. `freq` must be between 0 and ``fs/2``. Default is 2.\n##### Returns\n* **b, a **: ndarray, ndarray\n    Numerator (``b``) and denominator (``a``) polynomials of the filter.\n\n"", 'stemmed comments': ['option', 'default', 'ndarray', '4th', 'function', 'onli', 'greater', 'system', 'order', 'thi', 'ftype=fir', 'If', 'coeffici', 'sampl', 'model', 'return', 'the', 'design', 'ftype', 'frequenc', 'nth', '8th', 'float', 'less', 'paramet', 'gammaton', 'digit', '}', '2', 'gener', 'unit', 'numtap', 'fs', 'denomin', '24', 'length', 'signal', 'equal', '4', '1000', '[', 'type', '1', 'auditori', 'must', 'express', 'freq', '15', 'comput', ']', 'center', 'filter', 'int', '{', 'fir', '_', '0', '0015', 'polynomi', 'numer', 'iir', 'use', 'b', 'human', 'fs/2']}"
160,"{'func name': 'generic_filter', 'comments': 'Calculate a multidimensional filter using the given function.\n\nAt each element the provided function is called. The input values within the filter footprint at that element are passed to the function as a 1-D array of double values.\n\nParameters ---------- %(input)s function : {callable, scipy.LowLevelCallable} Function to apply at each element. %(size_foot)s %(output)s %(mode_reflect)s %(cval)s %(origin_multiple)s %(extra_arguments)s %(extra_keywords)s\n\nNotes ----- This function also accepts low-level callback functions with one of the following signatures and wrapped in `scipy.LowLevelCallable`:\n\n.. code:: c\n\nint callback(double *buffer, npy_intp filter_size, double *return_value, void *user_data) int callback(double *buffer, intptr_t filter_size, double *return_value, void *user_data)\n\nThe calling function iterates over the elements of the input and output arrays, calling the callback function at each element. The elements within the footprint of the filter at the current element are passed through the ``buffer`` parameter, and the number of elements within the footprint through ``filter_size``. The calculated value is returned in ``return_value``. ``user_data`` is the data pointer provided to `scipy.LowLevelCallable` as-is.\n\nThe callback function must return an integer error status that is zero if something went wrong and one otherwise. If an error occurs, you should normally set the python error status with an informative message before returning, otherwise a default error message is set by the calling function.\n\nIn addition, some other low-level function pointer specifications are accepted, but these are for backward compatibility only and should not be used in new code.\n', 'stemmed comments': ['default', 'function', 'size_foot', 'number', 'call', 'npy_intp', 'output', 'paramet', 'void', 'specif', 'wrap', 'must', 'filter', 'int', '{', 'element', 'occur', 'messag', 'scipylowlevelcal', 'In', 'integ', 'At', 'given', 'multidimension', 'someth', 'backward', 'thi', 'note', 'filter_s', 'provid', 'lowlevel', '}', 'buffer', 'origin_multipl', 'callabl', 'error', 'also', 'doubl', 'extra_keyword', 'valu', 'input', 'pass', 'footprint', 'addit', 'return_valu', 'python', 'array', 'If', 'one', 'asi', 'accept', 'cval', 'code', 'compat', 'within', 'signatur', 'zero', 'callback', 'data', 'inform', 'went', 'use', 'extra_argu', 'pointer', 'set', 'c', 'normal', 'return', 'statu', 'the', 'new', 'wrong', 'otherwis', 'current', 'mode_reflect', 'calcul', 'follow', 'appli', '1D', 'iter', 'intptr_t', '%', 'user_data']}"
161,"{'func name': 'minimum_phase', 'comments': 'Convert a linear-phase FIR filter to minimum phase\n\nParameters ---------- h : array Linear-phase FIR filter coefficients. method : {\'hilbert\', \'homomorphic\'} The method to use:\n\n\'homomorphic\' (default) This method [4]_ [5]_ works best with filters with an odd number of taps, and the resulting minimum phase filter will have a magnitude response that approximates the square root of the the original filter\'s magnitude response.\n\n\'hilbert\' This method [1]_ is designed to be used with equiripple filters (e.g., from `remez`) with unity or zero gain regions.\n\nn_fft : int The number of points to use for the FFT. Should be at least a few times larger than the signal length (see Notes).\n##### Returns\n* **h_minimum **: array\n    The minimum-phase version of the filter, with length\n    ``(length(h) + 1) // 2``.\n\n* **``n_stop`` and FFT length ``n_fft`` as**: \n\n* **length to be the next power of 2 that satisfies ``epsilon=0.01`` as**: \n\n* **For more information, see**: http\n\n* **Create an optimal linear-phase filter, then convert it to minimum phase**: \n\n* **Convert it to minimum phase**: \n\n* **Compare the three filters**: \n\n* **...                            (\'-\', \'-\', \'--\'), (\'k\', \'r\', \'c\'))**: \n\n* **>>> for ax in axs**: \n\n* **...     ax.fill_between(freq[1**: 3], *ax.get_ylim(), color=\'#ffeeaa\', zorder=1)\n\n* **>>> for ax, ylim in zip(axs[1**: ], ([0, 1.1], [-150, 10], [-60, 60]))\n\n* **.. [1] N. Damera-Venkata and B. L. Evans, ""Optimal design of real and\n       complex minimum phase digital FIR filters,"" Acoustics, Speech,\n       and Signal Processing, 1999. Proceedings., 1999 IEEE International\n       Conference on, Phoenix, AZ, 1999, pp. 1145-1148 vol.3.\n       doi**: 10.1109/ICASSP.1999.756179\n\n* **.. [3] T. Saramaki, ""Finite Impulse Response Filter Design,"" in\n       Handbook for Digital Signal Processing, chapter 4,\n       New York**: Wiley-Interscience, 1993.\n\n* **.. [4] J. S. Lim, Advanced Topics in Signal Processing.\n       Englewood Cliffs, N.J.**: Prentice Hall, 1988.\n\n* **.. [5] A. V. Oppenheim, R. W. Schafer, and J. R. Buck,\n       ""Discrete-Time Signal Processing,"" 2nd edition.\n       Upper Saddle River, N.J.**: Prentice Hall, 1999.\n\n', 'stemmed comments': ['default', '>', 'ffeeaa', 'N', 'saddl', 'number', 'compar', 'process', 'axfill_between', '150', 'river', 'respons', '2nd', 'paramet', 'eg', '2', 'for', 'point', 'ylim', 'magnitud', 'ax', 'axget_ylim', 'intern', 'freq', 'filter', 'saramaki', 'int', '{', 'edit', 'fir', 'region', 'advanc', 'finit', 'schafer', '//', 'handbook', 'odd', 'T', 'phoenix', 'remez', 'k', 'thi', 'gain', '11451148', 'coeffici', 'best', 'linearphas', 'tap', 'note', 'topic', 'digit', '}', 'color=', 'r', 'n_fft', 'version', 'confer', 'hall', 'speech', 'chapter', '3', 'work', 'optim', 'buck', 'R', 'epsilon=001', 'J', '0', '1999', 'lim', 'A', 'B', 'array', 'W', 'impuls', 'zorder=1', 'proceed', 'http', 'real', 'next', 'method', 'squar', 'larger', 'design', 'vol3', 'n_stop', 'prentic', 's', 'AZ', 'least', '5', 'hilbert', 'ieee', 'minimumphas', 'h_minimum', 'origin', 'h', 'upper', 'time', 'uniti', '4', 'equirippl', 'zero', 'englewood', 'wileyintersci', 'fft', 'dameravenkata', 'zip', 'should', '10', 'satisfi', 'inform', 'doi', 'L', 'use', 'three', '60', 'complex', 'discretetim', 'evan', 'c', 'cliff', 'acoust', 'convert', 'return', 'the', 'minimum', 'homomorph', 'approxim', 'root', '11', 'result', 'V', 'new', 'pp', '1988', 'power', 'phase', '1993', 'signal', 'length', 'york', 'oppenheim', '[', '1', ']', 'creat', '_', 'see', 'NJ', '101109/icassp1999756179', 'S']}"
162,"{'func name': 'splantider', 'comments': 'Compute the spline for the antiderivative (integral) of a given spline.\n\nParameters ---------- tck : BSpline instance or a tuple of (t, c, k) Spline whose antiderivative to compute n : int, optional Order of antiderivative to evaluate. Default: 1\n##### Returns\n* **.. versionadded**: \n\n* **although some floating point error accumulates**: \n\n* **Antiderivative can be used to evaluate definite integrals**: \n\n* ****: math\n\n', 'stemmed comments': ['option', 'default', 'given', 'c', 'order', 'k', 'return', 'antideriv', 'tupl', 'bspline', 'instanc', 'whose', 'float', 'paramet', 'evalu', 'point', 'spline', 'integr', '1', 'n', 'error', 'comput', 'definit', 'tck', 'math', 'int', 'accumul', 'versionad', 'use', 'although']}"
163,"{'func name': 'get_flinalg_funcs', 'comments': 'Return optimal available _flinalg function objects with names. Arrays are used to determine optimal prefix.\n\n\n', 'stemmed comments': ['prefix', '_flinalg', 'array', 'function', 'determin', 'optim', 'avail', 'object', 'use', 'return', 'name']}"
164,"{'func name': 'fourier_shift', 'comments': 'Multidimensional Fourier shift filter.\n\nThe array is multiplied with the Fourier transform of a shift operation.\n\nParameters ---------- input : array_like The input array. shift : float or sequence The size of the box used for filtering. If a float, `shift` is the same for all axes. If a sequence, `shift` has to contain one value for each axis. n : int, optional If `n` is negative (default), then the input is assumed to be the result of a complex fft. If `n` is larger than or equal to zero, the input is assumed to be the result of a real fft, and `n` gives the length of the array before transformation along the real transform direction. axis : int, optional The axis of the real transform. output : ndarray, optional If given, the result of shifting the input is placed in this array. None is returned in this case.\n##### Returns\n* **fourier_shift **: ndarray\n    The shifted input.\n\n', 'stemmed comments': ['option', 'default', 'direct', 'array', 'box', 'multidimension', 'ndarray', 'given', 'along', 'If', 'real', 'output', 'place', 'return', 'one', 'the', 'fourier', 'larger', 'axe', 'assum', 'result', 'oper', 'float', 'paramet', 'fourier_shift', 'none', 'transform', 'case', 'neg', 'contain', 'length', 'equal', 'n', 'zero', 'fft', 'axi', 'shift', 'give', 'filter', 'sequenc', 'multipli', 'int', 'valu', 'complex', 'input', 'size', 'use', 'array_lik']}"
165,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
166,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
167,"{'func name': 'gen_data', 'comments': '', 'stemmed comments': []}"
168,"{'func name': 'generate_test_vecs', 'comments': 'test label with different structuring element neighborhoods\n\n\n', 'stemmed comments': ['neighborhood', 'test', 'label', 'structur', 'differ', 'element']}"
169,"{'func name': 'write_autogen_blurb', 'comments': '', 'stemmed comments': []}"
170,"{'func name': 'get_issues', 'comments': '', 'stemmed comments': []}"
171,"{'func name': 'hb_write', 'comments': 'Write HB-format file.\n\nParameters ---------- path_or_open_file : path-like or file-like If a file-like object, it is used as-is. Otherwise, it is opened before writing. m : sparse-matrix the sparse matrix to write hb_info : HBInfo contains the meta-data for write\n##### Returns\n* **features are**: - assembled, non-symmetric, real matrices\n    - integer for pointer/indices\n    - exponential format for float values, and int format\n\n* **We can read and write a harwell-boeing format file**: \n\n', 'stemmed comments': ['featur', 'We', 'sparsematrix', 'hbinfo', 'path_or_open_fil', 'nonsymmetr', 'If', 'object', 'open', 'real', 'return', 'matric', 'format', 'float', 'file', 'paramet', 'read', 'asi', 'spars', 'hb_info', 'metadata', 'contain', 'pathlik', 'pointer/indic', 'filelik', 'otherwis', 'exponenti', 'int', 'hbformat', 'valu', 'write', 'integ', 'use', 'matrix', 'harwellbo', 'assembl']}"
172,"{'func name': '_good_shape', 'comments': 'Ensure that shape argument is valid for scipy.fftpack\n\nscipy.fftpack does not support len(shape) < x.ndim when axes is not given.\n', 'stemmed comments': ['valid', 'axe', 'given', 'support', 'len', 'scipyfftpack', 'ensur', '<', 'xndim', 'argument', 'shape']}"
173,"{'func name': 'get_workers', 'comments': 'Returns the default number of workers within the current context\n\nExamples -------- >>> from scipy import fft >>> fft.get_workers() 1 >>> with fft.set_workers(4): ...\n\n\n\n fft.get_workers() 4\n', 'stemmed comments': ['within', 'scipi', 'default', '>', '4', 'exampl', 'fftget_work', '1', 'number', 'fftset_work', 'fft', 'context', 'return', 'current', 'import', 'worker']}"
174,"{'func name': 'leaders', 'comments': ""Return the root nodes in a hierarchical clustering.\n\n\n##### Returns\n* **L **: ndarray\n    The leader linkage node id's stored as a k-element 1-D array,\n    where ``k`` is the number of flat clusters found in ``T``.\n    ``L[j]=i`` is the linkage cluster node id that is the\n    leader of flat cluster with id M[j]. If ``i < n``, ``i``\n    corresponds to an original observation, otherwise it\n    corresponds to a non-singleton cluster.\n\n* **M **: ndarray\n    The leader linkage node id's stored as a k-element 1-D array, where\n    ``k`` is the number of flat clusters found in ``T``. This allows the\n    set of flat cluster ids to be any arbitrary set of ``k`` integers.\n    For example\n\n* **fcluster**: for the creation of flat cluster assignments.\n\n* **to a dataset ``X`` - and a flat cluster assignment array ``T``**: \n\n* **in the dendrogram that are the leaders of each flat cluster**: \n\n* **the flat clusters in ``T``**: \n\n"", 'stemmed comments': ['set', 'ndarray', 'array', 'fcluster', 'number', 'correspond', 'k', 'thi', 'j', 'arbitrari', 'leader', 'If', 'return', '=i', 'M', 'the', 'root', 'hierarch', 'id', 's', 'node', 'exampl', 'for', 'linkag', 'dendrogram', 'observ', 'origin', 'store', 'kelement', 'nonsingleton', '[', 'n', 'flat', 'allow', 'otherwis', ']', 'assign', 'cluster', 'L', 'found', 'integ', '1D', '<', 'creation', 'dataset', 'T', 'X']}"
175,"{'func name': 'readsav', 'comments': 'Read an IDL .sav file.\n\nParameters ---------- file_name : str Name of the IDL save file. idict : dict, optional Dictionary in which to insert .sav file variables. python_dict : bool, optional By default, the object return is not a Python dictionary, but a case-insensitive dictionary with item, attribute, and call access to variables. To get a standard Python dictionary, set this option to True. uncompressed_file_name : str, optional This option only has an effect for .sav files written with the /compress option. If a file name is specified, compressed .sav files are uncompressed to this file. Otherwise, readsav will use the `tempfile` module to determine a temporary filename automatically, and will remove the temporary file upon successfully reading it in. verbose : bool, optional Whether to print out information about the save file, including the records read, and available variables.\n##### Returns\n* **idl_dict **: AttrDict or dict\n    If `python_dict` is set to False (default), this function returns a\n    case-insensitive dictionary with item, attribute, and call access\n    to variables. If `python_dict` is set to True, this function\n    returns a Python dictionary with all variable names in lowercase.\n    If `idict` was specified, then variables are written to the\n    dictionary specified, and the updated dictionary is returned.\n\n', 'stemmed comments': ['option', 'default', 'access', 'set', 'function', 'attribut', 'bool', 'effect', 'call', 'thi', 'If', 'variabl', 'idl', 'object', 'return', 'standard', 'modul', 'temporari', 'verbos', 'file_nam', 'idict', 'dictionari', 'read', 'file', 'paramet', 'dict', 'caseinsensit', 'item', 'true', 'compress', 'written', 'uncompress', 'determin', 'avail', 'fals', 'By', 'get', 'uncompressed_file_nam', 'name', 'idl_dict', 'specifi', 'str', 'insert', 'record', 'whether', 'filenam', 'otherwis', 'success', 'automat', 'python_dict', 'readsav', 'To', 'upon', '/compress', 'save', 'tempfil', 'inform', 'includ', 'lowercas', 'updat', 'sav', 'use', 'remov', 'print', 'python', 'attrdict']}"
176,"{'func name': 'aslinearoperator', 'comments': ""Return A as a LinearOperator.\n\n'A' may be any of the following types:\n\n- ndarray\n\n- matrix\n\n- sparse matrix (e.g. csr_matrix, lil_matrix, etc.)\n\n- LinearOperator\n\n- An object with .shape and .matvec attributes\n\nSee the LinearOperator documentation for additional information.\n\nNotes ----- If 'A' has no .dtype attribute, the data type is determined by calling :func:`LinearOperator.matvec()`\n\n- set the .dtype attribute to prevent this call upon the linear operator creation.\n\nExamples -------- >>> from scipy.sparse.linalg import aslinearoperator >>> M = np.array([[1,2,3],[4,5,6]], dtype=np.int32) >>> aslinearoperator(M) <2x3 MatrixLinearOperator with dtype=int32>\n"", 'stemmed comments': ['set', '>', 'ndarray', 'dtype', '456', 'func', 'attribut', 'linearoper', 'call', 'linearoperatormatvec', 'dtype=npint32', 'If', 'object', 'return', 'M', 'note', 'linear', 'oper', 'determin', 'exampl', 'scipysparselinalg', 'eg', 'csr_matrix', 'spars', 'lil_matrix', 'matvec', 'document', '[', 'type', 'dtype=int32', ']', 'etc', '2x3', 'prevent', 'data', 'shape', 'An', 'matrixlinearoper', 'nparray', 'see', '=', 'may', 'upon', 'inform', 'follow', 'aslinearoper', '123', 'addit', 'A', 'matrix', 'creation', '<', 'import']}"
177,"{'func name': '_estimate_gradients_2d_global', 'comments': '', 'stemmed comments': []}"
178,"{'func name': 'interpn', 'comments': 'Multidimensional interpolation on regular grids.\n\nParameters ---------- points : tuple of ndarray of float, with shapes (m1, ), ..., (mn, ) The points defining the regular grid in n dimensions.\n\nvalues : array_like, shape (m1, ..., mn, ...) The data on the regular grid in n dimensions.\n\nxi : ndarray of shape (..., ndim) The coordinates to sample the gridded data at\n\nmethod : str, optional The method of interpolation to perform. Supported are ""linear"" and ""nearest"", and ""splinef2d"". ""splinef2d"" is only supported for 2-dimensional data.\n\nbounds_error : bool, optional If True, when interpolated values are requested outside of the domain of the input data, a ValueError is raised. If False, then `fill_value` is used.\n\nfill_value : number, optional If provided, the value to use for points outside of the interpolation domain. If None, values outside the domain are extrapolated.\n\nExtrapolation is not supported by method ""splinef2d"".\n##### Returns\n* **values_x **: ndarray, shape xi.shape[\n\n* **.. versionadded**: \n\n* **Evaluate a simple example function on the points of a regular 3-D grid**: \n\n* **>>> def value_func_3d(x, y, z)**: \n\n* **NearestNDInterpolator **: Nearest neighbor interpolation on unstructured\n                        data in N dimensions\n\n* **LinearNDInterpolator **: Piecewise linear interpolant on unstructured data\n                       in N dimensions\n\n* **RegularGridInterpolator **: Linear and nearest-neighbor Interpolation on a\n                          regular grid in arbitrary dimensions\n\n* **RectBivariateSpline **: Bivariate spline approximation over a rectangular mesh\n\n', 'stemmed comments': ['N', '>', 'function', 'number', 'unstructur', 'defin', 'linear', 'paramet', 'bounds_error', 'none', 'simpl', 'point', 'spline', 'str', 'n', 'request', 'shape', 'nearestneighbor', 'coordin', 'rectbivariatesplin', 'xishap', 'neighbor', 'multidimension', 'rais', 'm1', 'mn', 'float', 'exampl', 'provid', 'z', 'evalu', 'domain', 'valueerror', 'nearest', 'xi', 'ndim', 'x', 'valu', 'input', 'regulargridinterpol', 'linearndinterpol', 'extrapol', 'mesh', 'option', 'ndarray', 'If', 'tupl', 'method', 'fals', 'support', 'data', 'splinef2d', 'use', 'interpol', 'nearestndinterpol', 'fill_valu', 'values_x', 'bool', 'bivari', 'perform', 'arbitrari', '3D', 'return', 'sampl', 'the', 'approxim', 'true', 'outsid', 'regular', 'def', '[', 'piecewis', 'dimens', 'versionad', 'value_func_3d', 'array_lik', 'grid', 'rectangular', '2dimension']}"
179,"{'func name': 'rotate', 'comments': 'Rotate an array.\n\nThe array is rotated in the plane defined by the two axes given by the `axes` parameter using spline interpolation of the requested order.\n\nParameters ---------- %(input)s angle : float The rotation angle in degrees. axes : tuple of 2 ints, optional The two axes that define the plane of rotation. Default is the first two axes. reshape : bool, optional If `reshape` is true, the output shape is adapted so that the input array is contained completely in the output. Default is True. %(output)s order : int, optional The order of the spline interpolation, default is 3. The order has to be in the range 0-5. %(mode_constant)s %(cval)s %(prefilter)s\n##### Returns\n* **rotate **: ndarray\n    The rotated input.\n\n', 'stemmed comments': ['interpol', 'option', 'default', 'array', 'given', 'degre', 'ndarray', 'order', 'angl', 'rotat', 'bool', 'If', 'output', 'defin', 'return', 'reshap', 'the', 'tupl', 'axe', 'two', 'float', 'prefilt', 'paramet', 'true', 'first', '2', 'cval', 'spline', 'contain', '3', 'plane', 'request', 'int', 'shape', 'input', 'adapt', 'complet', 'rang', 'use', '05', 'mode_const', '%']}"
180,"{'func name': 'estimate_rank', 'comments': 'Estimate matrix rank to a specified relative precision using randomized methods.\n\nThe matrix `A` can be given as either a :class:`numpy.ndarray` or a :class:`scipy.sparse.linalg.LinearOperator`, with different algorithms used for each case. If `A` is of type :class:`numpy.ndarray`, then the output rank is typically about 8 higher than the actual numerical rank.\n\n..\n\nThis function automatically detects the form of the input parameters and passes them to the appropriate backend. For details, see :func:`backend.idd_estrank`, :func:`backend.idd_findrank`, :func:`backend.idz_estrank`, and :func:`backend.idz_findrank`.\n\nParameters ---------- A : :class:`numpy.ndarray` or :class:`scipy.sparse.linalg.LinearOperator` Matrix whose rank is to be estimated, given as either a :class:`numpy.ndarray` or a :class:`scipy.sparse.linalg.LinearOperator` with the `rmatvec` method (to apply the matrix adjoint). eps : float Relative error for numerical rank definition.\n##### Returns\n', 'stemmed comments': ['precis', 'rank', 'given', 'function', 'func', 'adjoint', 'backendidz_findrank', 'thi', '8', 'If', 'output', 'scipysparselinalglinearoper', 'return', 'the', 'method', 'whose', 'float', 'paramet', 'ep', 'backendidz_estrank', 'rmatvec', 'higher', 'for', 'actual', 'either', 'case', 'appropri', 'specifi', 'type', 'backend', 'error', 'typic', 'backendidd_estrank', 'definit', 'form', 'rel', 'differ', 'estim', 'automat', 'algorithm', 'numpyndarray', 'see', 'backendidd_findrank', 'input', 'pass', 'detail', 'numer', 'appli', 'random', 'use', 'A', 'matrix', 'detect', 'class']}"
181,"{'func name': 'qmr', 'comments': ""Use Quasi-Minimal Residual iteration to solve ``Ax = b``.\n\nParameters ---------- A : {sparse matrix, dense matrix, LinearOperator} The real-valued N-by-N matrix of the linear system. Alternatively, ``A`` can be a linear operator which can produce ``Ax`` and ``A^T x`` using, e.g., ``scipy.sparse.linalg.LinearOperator``. b : {array, matrix} Right hand side of the linear system. Has shape (N,) or (N,1).\n##### Returns\n* **x **: {array, matrix}\n    The converged solution.\n\n* **info **: integer\n    Provides convergence information\n\n* **x0  **: {array, matrix}\n    Starting guess for the solution.\n\n* **tol, atol **: float, optional\n    Tolerances for convergence, ``norm(residual) <= max(tol*norm(b), atol)``.\n    The default for ``atol`` is ``'legacy'``, which emulates\n    a different legacy behavior.\n    .. warning\n\n* **maxiter **: integer\n    Maximum number of iterations.  Iteration will stop after maxiter\n    steps even if the specified tolerance has not been achieved.\n\n* **M1 **: {sparse matrix, dense matrix, LinearOperator}\n    Left preconditioner for A.\n\n* **M2 **: {sparse matrix, dense matrix, LinearOperator}\n    Right preconditioner for A. Used together with the left\n    preconditioner M1.  The matrix M1*A*M2 should have better\n    conditioned than A alone.\n\n* **callback **: function\n    User-supplied function to call after each iteration.  It is called\n    as callback(xk), where xk is the current solution vector.\n\n"", 'stemmed comments': ['togeth', 'N', 'default', 'function', 'condit', 'number', 'emul', 'call', 'quasiminim', 'linear', 'oper', 'It', 'paramet', 'nbyn', 'eg', 'xk', 'spars', 'residu', 'ha', 'achiev', 'differ', '{', 'shape', '=', 'norm', 'max', 'integ', 'side', 'M2', 'altern', 'left', 'linearoper', 'a^t', 'scipysparselinalglinearoper', 'stop', 'float', 'provid', '}', 'x0', 'hand', 'even', 'M1', 'info', 'x', 'guess', 'vector', 'A', 'toler', 'tol', 'option', 'start', 'array', 'legaci', 'solut', 'maximum', 'dens', 'Ax', 'converg', 'callback', 'maxit', 'warn', 'N1', 'produc', 'inform', 'use', 'behavior', 'b', 'system', 'right', 'return', 'realvalu', 'step', 'the', 'atol', 'usersuppli', 'precondition', 'specifi', 'better', 'current', 'alon', 'matrix', 'iter', '<', 'solv']}"
182,"{'func name': 'solve_ivp', 'comments': 'Solve an initial value problem for a system of ODEs.\n\nThis function numerically integrates a system of ordinary differential equations given an initial value::\n\ndy / dt = f(t, y) y(t0) = y0\n\nHere t is a 1-D independent variable (time), y(t) is an N-D vector-valued function (state), and an N-D vector-valued function f(t, y) determines the differential equations. The goal is to find y(t) approximately satisfying the differential equations, given an initial value y(t0)=y0.\n\nSome of the solvers support integration in the complex domain, but note that for stiff ODE solvers, the right-hand side must be complex-differentiable (satisfy Cauchy-Riemann equations [11]_). To solve a problem in the complex domain, pass y0 with a complex data type. Another option always available is to rewrite your problem for real and imaginary parts separately.\n\nParameters ---------- fun : callable Right-hand side of the system. The calling signature is ``fun(t, y)``. Here `t` is a scalar, and there are two options for the ndarray `y`: It can either have shape (n,); then `fun` must return array_like with shape (n,). Alternatively, it can have shape (n, k); then `fun` must return an array_like with shape (n, k), i.e., each column corresponds to a single column in `y`. The choice between the two options is determined by `vectorized` argument (see below). The vectorized implementation allows a faster approximation of the Jacobian by finite differences (required for stiff solvers). t_span : 2-tuple of floats Interval of integration (t0, tf). The solver starts with t=t0 and integrates until it reaches t=tf. y0 : array_like, shape (n,) Initial state. For problems in the complex domain, pass `y0` with a complex data type (even if the initial value is purely real). method : string or `OdeSolver`, optional Integration method to use:\n\n* \'RK45\' (default): Explicit Runge-Kutta method of order 5(4) [1]_. The error is controlled assuming accuracy of the fourth-order method, but steps are taken using the fifth-order accurate formula (local extrapolation is done). A quartic interpolation polynomial is used for the dense output [2]_. Can be applied in the complex domain. * \'RK23\': Explicit Runge-Kutta method of order 3(2) [3]_. The error is controlled assuming accuracy of the second-order method, but steps are taken using the third-order accurate formula (local extrapolation is done). A cubic Hermite polynomial is used for the dense output. Can be applied in the complex domain. * \'DOP853\': Explicit Runge-Kutta method of order 8 [13]_. Python implementation of the ""DOP853"" algorithm originally written in Fortran [14]_. A 7-th order interpolation polynomial accurate to 7-th order is used for the dense output. Can be applied in the complex domain. * \'Radau\': Implicit Runge-Kutta method of the Radau IIA family of order 5 [4]_. The error is controlled with a third-order accurate embedded formula. A cubic polynomial which satisfies the collocation conditions is used for the dense output. * \'BDF\': Implicit multi-step variable-order (1 to 5) method based on a backward differentiation formula for the derivative approximation [5]_. The implementation follows the one described in [6]_. A quasi-constant step scheme is used and accuracy is enhanced using the NDF modification. Can be applied in the complex domain. * \'LSODA\': Adams/BDF method with automatic stiffness detection and switching [7]_, [8]_. This is a wrapper of the Fortran solver from ODEPACK.\n\nExplicit Runge-Kutta methods (\'RK23\', \'RK45\', \'DOP853\') should be used for non-stiff problems and implicit methods (\'Radau\', \'BDF\') for stiff problems [9]_. Among Runge-Kutta methods, \'DOP853\' is recommended for solving with high precision (low values of `rtol` and `atol`).\n\nIf not sure, first try to run \'RK45\'. If it makes unusually many iterations, diverges, or fails, your problem is likely to be stiff and you should use \'Radau\' or \'BDF\'. \'LSODA\' can also be a good universal choice, but it might be somewhat less convenient to work with as it wraps old Fortran code.\n\nYou can also pass an arbitrary class derived from `OdeSolver` which implements the solver. t_eval : array_like or None, optional Times at which to store the computed solution, must be sorted and lie within `t_span`. If None (default), use points selected by the solver. dense_output : bool, optional Whether to compute a continuous solution. Default is False. events : callable, or list of callables, optional Events to track. If None (default), no events will be tracked. Each event occurs at the zeros of a continuous function of time and state. Each function must have the signature ``event(t, y)`` and return a float. The solver will find an accurate value of `t` at which ``event(t, y(t)) = 0`` using a root-finding algorithm. By default, all zeros will be found. The solver looks for a sign change over each step, so if multiple zero crossings occur within one step, events may be missed. Additionally each `event` function might have the following attributes:\n\nterminal: bool, optional Whether to terminate integration if this event occurs. Implicitly False if not assigned. direction: float, optional Direction of a zero crossing. If `direction` is positive, `event` will only trigger when going from negative to positive, and vice versa if `direction` is negative. If 0, then either direction will trigger event. Implicitly 0 if not assigned.\n\nYou can assign attributes like ``event.terminal = True`` to any function in Python. vectorized : bool, optional Whether `fun` is implemented in a vectorized fashion. Default is False. args : tuple, optional Additional arguments to pass to the user-defined functions.\n\nIf given, the additional arguments are passed to all user-defined functions. So if, for example, `fun` has the signature ``fun(t, y, a, b, c)``, then `jac` (if given) and any event functions must have the same signature, and `args` must be a tuple of length 3. options Options passed to a chosen solver. All options available for already implemented solvers are listed below. first_step : float or None, optional Initial step size. Default is `None` which means that the algorithm should choose. max_step : float, optional Maximum allowed step size. Default is np.inf, i.e., the step size is not bounded and determined solely by the solver. rtol, atol : float or array_like, optional Relative and absolute tolerances. The solver keeps the local error estimates less than ``atol + rtol * abs(y)``. Here `rtol` controls a relative accuracy (number of correct digits). But if a component of `y` is approximately below `atol`, the error only needs to fall within the same `atol` threshold, and the number of correct digits is not guaranteed. If components of y have different scales, it might be beneficial to set different `atol` values for different components by passing array_like with shape (n,) for `atol`. Default values are 1e-3 for `rtol` and 1e-6 for `atol`. jac : array_like, sparse_matrix, callable or None, optional Jacobian matrix of the right-hand side of the system with respect to y, required by the \'Radau\', \'BDF\' and \'LSODA\' method. The Jacobian matrix has shape (n, n) and its element (i, j) is equal to ``d f_i / d y_j``.\n\nThere are three ways to define the Jacobian:\n\n* If array_like or sparse_matrix, the Jacobian is assumed to be constant. Not supported by \'LSODA\'. * If callable, the Jacobian is assumed to depend on both t and y; it will be called as ``jac(t, y)``, as necessary. For \'Radau\' and \'BDF\' methods, the return value might be a sparse matrix. * If None (default), the Jacobian will be approximated by finite differences.\n\nIt is generally recommended to provide the Jacobian rather than relying on a finite-difference approximation. jac_sparsity : array_like, sparse matrix or None, optional Defines a sparsity structure of the Jacobian matrix for a finite- difference approximation. Its shape must be (n, n). This argument is ignored if `jac` is not `None`. If the Jacobian has only few non-zero elements in *each* row, providing the sparsity structure will greatly speed up the computations [10]_. A zero entry means that a corresponding element in the Jacobian is always zero. If None (default), the Jacobian is assumed to be dense. Not supported by \'LSODA\', see `lband` and `uband` instead. lband, uband : int or None, optional Parameters defining the bandwidth of the Jacobian for the \'LSODA\' method, i.e., ``jac[i, j] != 0 only for i\n\n- lband <= j <= i + uband``. Default is None. Setting these requires your jac routine to return the Jacobian in the packed format: the returned array must have ``n`` columns and ``uband + lband + 1`` rows in which Jacobian diagonals are written. Specifically ``jac_packed[uband + i\n\n- j , j] = jac[i, j]``. The same format is used in `scipy.linalg.solve_banded` (check for an illustration).\n\nThese parameters can be also used with ``jac=None`` to reduce the number of Jacobian elements estimated by finite differences. min_step : float, optional The minimum allowed step size for \'LSODA\' method. By default `min_step` is zero.\n##### Returns\n* **Bunch object with the following fields defined**: \n\n* **t **: ndarray, shape (n_points,)\n    Time points.\n\n* **y **: ndarray, shape (n, n_points)\n    Values of the solution at `t`.\n\n* **sol **: `OdeSolution` or None\n    Found solution as `OdeSolution` instance; None if `dense_output` was\n    set to False.\n\n* **t_events **: list of ndarray or None\n    Contains for each event type a list of arrays at which an event of\n    that type event was detected. None if `events` was None.\n\n* **y_events **: list of ndarray or None\n    For each value of `t_events`, the corresponding value of the solution.\n    None if `events` was None.\n\n* **nfev **: int\n    Number of evaluations of the right-hand side.\n\n* **njev **: int\n    Number of evaluations of the Jacobian.\n\n* **nlu **: int\n    Number of LU decompositions.\n\n* **status **: int\n    Reason for algorithm termination\n\n* **message **: string\n    Human-readable description of the termination reason.\n\n* **success **: bool\n    True if the solver reached the interval end or a termination event\n    occurred (``status >= 0``).\n\n* **.. [4] E. Hairer, G. Wanner, ""Solving Ordinary Differential Equations II**: Stiff and Differential-Algebraic Problems"", Sec. IV.8.\n\n* **.. [5] `Backward Differentiation Formula\n        <https**: //en.wikipedia.org/wiki/Backward_differentiation_formula>`_\n        on Wikipedia.\n\n* **.. [9] `Stiff equation <https**: //en.wikipedia.org/wiki/Stiff_equation>`_ on\n       Wikipedia.\n\n* **.. [11] `Cauchy-Riemann equations\n         <https**: //en.wikipedia.org/wiki/Cauchy-Riemann_equations>`_ on\n         Wikipedia.\n\n* **.. [12] `Lotka-Volterra equations\n        <https**: //en.wikipedia.org/wiki/Lotka%E2%80%93Volterra_equations>`_\n        on Wikipedia.\n\n* **.. [13] E. Hairer, S. P. Norsett G. Wanner, ""Solving Ordinary Differential\n        Equations I**: Nonstiff Problems"", Sec. II.\n\n* **.. [14] `Page with original Fortran code of DOP853\n        <http**: //www.unige.ch/~hairer/software.html>`_.\n\n* **>>> def exponential_decay(t, y)**: return -0.5 * y\n\n* **>>> def upward_cannon(t, y)**: return [y[1], -0.5]\n\n* **>>> def hit_ground(t, y)**: return y[0]\n\n* **>>> def apex(t, y)**: return y[1]\n\n* **>>> def lotkavolterra(t, z, a, b, c, d)**: \n\n', 'stemmed comments': ['condit', 'number', 'variabl', 'humanread', 'end', 'requir', 'wrapper', 'differenti', '2', 'absolut', 'spars', 'wrap', 'but', '/', 'occur', 'npinf', '1e3', 'instead', 'page', 'vice', 'side', 'accuraci', 'odesolv', 'bandwidth', 'altern', 'given', 'mean', 'order', 'threshold', 'miss', 'find', 'nonzero', 't_span', 'exampl', 'digit', 'z', 'sure', 'scheme', 'gener', '!', 'goal', 'error', 'also', 'cross', 'So', 'valu', 'vector', 'righthand', 'addit', 'extrapol', 'detect', 'ode', 'solver', 'ndarray', 'array', 'attribut', 'thirdord', 'there', 'http', 'max_step', 'f_i', 'tupl', '5', 'solut', 'cubic', 'variableord', 'neg', 'time', 'rather', 'interv', 'termin', 'describ', 'deriv', 'satisfi', 'polynomi', 'odesolut', 'found', 'use', 'base', 'sparse_matrix', 'complex', 'class', 'interpol', 'uband', 'need', 'reduc', '2tupl', '11', 'length', 'list', '[', 'continu', '12', '9', 'conveni', 'alreadi', 'hermit', '6', 'tri', 'norsett', 'matrix', '<', 'array_lik', 'bdf', 'solv', 'necessari', 'rewrit', 'illustr', '=y0', 'assum', 'ignor', 'iv8', 'written', 'good', 'By', 'look', 'n', 'differ', 'shape', 'To', 'messag', 'guarante', 'control', 'I', 'done', 'argument', 'k', 'thi', 'format', 'y_event', 'note', 'provid', 'entri', 'trigger', 'fifthord', 'evalu', 'run', 'fall', 'allow', 'E', 'P', '//wwwunigech/~hairer/softwarehtml', 'pass', 'complexdifferenti', 'A', 'structur', 'either', 'descript', 'choic', 'option', 'start', '//enwikipediaorg/wiki/stiff_equ', 'recommend', 'If', 'real', 'reach', 'ab', 'bunch', 'instanc', 'greatli', 'not', 'sole', 'univers', 'maximum', 'some', 'signatur', 't_event', 'dens', 'like', 'routin', 'comput', 'data', '10', 'make', 'event', 'keep', 'set', 't=t0', 'lie', 'high', 'wanner', 'quasiconst', 'diagon', 'minimum', 'fashion', 'dt', 'pure', 'fail', 'rungekutta', 'go', 'all', 'arg', ']', 'dy', 'estim', 'eventtermin', '//enwikipediaorg/wiki/lotka', 'posit', 'separ', 'see', 'appli', 'embed', 'odepack', 'select', '%', '>', 'function', '7th', 'scipylinalgsolve_band', 'string', 'output', 'secondord', 'constant', 'LU', 'nonstiff', 'paramet', 'for', 'point', 'rk45', '1e6', 'type', 'must', 'II', 'here', 'you', 'it', 'finitediffer', 'benefici', '=', 'finit', 'unusu', 'lband', 'speed', 'backward', '7', 'object', 'formula', 'row', 'radau', 'first', 'ndf', '14', 'ordinari', 'callabl', 'even', 'work', 'nfev', 'dense_output', 'explicit', 'assign', '0', 'local', 'numer', 'toler', 'fun', 'singl', 'python', 'fortran', 'implicit', 'accur', 'rk23', 'upward_cannon', 'scalar', 'diverg', 'nlu', 'method', 't0', 'n_point', 'jac_spars', 'less', 'determin', 'old', 't=tf', 'avail', 'tf', 'check', 'somewhat', 'column', 'origin', 'within', 'colloc', '4', 'apex', 'support', 'hairer', 'reason', 'enhanc', 'may', 'exponential_decay', 'three', 'mani', 't_eval', 'switch', 'rootfind', 'precis', 'stiff', 'direct', 'these', 'vectorvalu', 'correspond', 'quartic', 'system', 'anoth', 'famili', 'the', 'reli', 'two', 'independ', 'first_step', 'true', 'adams/bdf', 'faster', 'def', 'state', 'pack', 'ie', 'sol', 'might', 'algorithm', 'field', 'correct', 'jac', 'bound', 'default', 'each', 'call', 'j', 'defin', 'wikipedia', 'It', 'among', 'specif', 'none', 'jacobian', 'versa', 'chang', 'implicitli', 'rel', 'int', 'element', 'cauchyriemann', 'y0', '05', 'differentialalgebra', 'njev', 'initi', 'G', '80', 'way', '//enwikipediaorg/wiki/backward_differentiation_formula', 'dop853', 'rtol', 'float', 'domain', 'scale', '3', 'imaginari', 'depend', 'whether', 'modif', 'decomposit', 'implement', 'lotkavolterra', 'compon', 'y_j', '//enwikipediaorg/wiki/cauchyriemann_equ', 'jac=non', '93volterra_equ', 'multistep', 'ND', 'sec', '8', 'one', 'iia', 'min_step', 'taken', 'can', 'fals', 'choos', 'code', 'sparsiti', 'store', 'zero', 'userdefin', 'success', 'track', 'f', 'size', 'low', 'b', ';', 'sort', 'equat', '13', 'c', 'E2', 'bool', 'arbitrari', 'return', 'step', 'statu', 'part', 'approxim', 'atol', 'fourthord', 'respect', 'chosen', 'hit_ground', 'integr', 'contain', 'equal', 'jac_pack', '1', 'multipl', 'automat', '_', 'sign', 'alway', 'follow', 'S', '1D', 'iter', 'lsoda', 'problem']}"
183,"{'func name': 'my_kde_bandwidth', 'comments': ""We use Scott's Rule, multiplied by a constant factor.\n\n\n"", 'stemmed comments': ['constant', 'We', 's', 'factor', 'rule', 'use', 'scott', 'multipli']}"
184,"{'func name': 'my_kde_bandwidth', 'comments': ""We use Scott's Rule, multiplied by a constant factor.\n\n\n"", 'stemmed comments': ['constant', 'We', 's', 'factor', 'rule', 'use', 'scott', 'multipli']}"
185,"{'func name': 'measure', 'comments': 'Measurement model, return two coupled measurements.\n\n\n', 'stemmed comments': ['two', 'return', 'coupl', 'model', 'measur']}"
186,"{'func name': 'distance_matrix', 'comments': 'Compute the distance matrix.\n\n\n##### Returns\n* **result **: (M, N) ndarray\n    Matrix containing the distance from every vector in `x` to every vector\n    in `y`.\n\n', 'stemmed comments': ['contain', 'N', 'x', 'ndarray', 'result', 'vector', 'distanc', 'everi', 'comput', 'matrix', 'return', 'M']}"
187,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
188,"{'func name': '_check_work_float', 'comments': 'Convert LAPACK-returned work array size float to integer, carefully for single-precision types.\n\n\n', 'stemmed comments': ['array', 'float', 'singleprecis', 'type', 'work', 'size', 'integ', 'convert', 'care', 'lapackreturn']}"
189,"{'func name': '_minimize_lbfgsb', 'comments': ""Minimize a scalar function of one or more variables using the L-BFGS-B algorithm.\n\nOptions ------- disp : None or int If `disp is None` (the default), then the supplied version of `iprint` is used. If `disp is not None`, then it overrides the supplied version of `iprint` with the behaviour you outlined. maxcor : int The maximum number of variable metric corrections used to define the limited memory matrix. (The limited memory BFGS method does not store the full hessian but uses this many terms in an approximation to it.) ftol : float The iteration stops when ``(f^k\n\n- f^{k+1})/max{|f^k|,|f^{k+1}|,1} <= ftol``. gtol : float The iteration will stop when ``max{|proj g_i | i = 1, ..., n} <= gtol`` where ``pg_i`` is the i-th component of the projected gradient. eps : float or ndarray If `jac is None` the absolute step size used for numerical approximation of the jacobian via forward differences. maxfun : int Maximum number of function evaluations. maxiter : int Maximum number of iterations. iprint : int, optional Controls the frequency of output. ``iprint < 0`` means no output; ``iprint = 0``\n\n\n\nprint only one line at the last iteration; ``0 < iprint < 99`` print also f and ``|proj g|`` every iprint iterations; ``iprint = 99``\n\n print details of every iteration except n-vectors; ``iprint = 100``\n\nprint also the changes of active set and final x; ``iprint > 100``\n\nprint details of every iteration including x and g. callback : callable, optional Called after each iteration, as ``callback(xk)``, where ``xk`` is the current parameter vector. maxls : int, optional Maximum number of line search steps (per iteration). Default is 20. finite_diff_rel_step : None or array_like, optional If `jac in ['2-point', '3-point', 'cs']` the relative step size to use for numerical approximation of the jacobian. The absolute step size is computed as ``h = rel_step * sign(x0) * max(1, abs(x0))``, possibly adjusted to fit into the bounds. For ``method='3-point'`` the sign of `h` is ignored. If None (default) then step is selected automatically.\n\nNotes ----- The option `ftol` is exposed via the `scipy.optimize.minimize` interface, but calling `scipy.optimize.fmin_l_bfgs_b` directly exposes `factr`. The relationship between the two is ``ftol = factr * numpy.finfo(float).eps``. I.e., `factr` multiplies the default machine floating-point precision to arrive at `ftol`.\n"", 'stemmed comments': ['bound', 'default', '>', 'function', 'number', 'scipyoptimizefmin_l_bfgs_b', 'final', 'call', 'variabl', 'output', 'bfg', 'defin', 'ith', '99', 'numpyfinfo', 'search', 'frequenc', 'nvector', 'paramet', 'ignor', 'activ', 'none', 'jacobian', 'xk', 'overrid', 'for', 'absolut', 'maxl', '3point', 'lbfgsb', 'minim', 'n', '|proj', 'except', 'chang', '/max', 'last', 'rel', 'differ', 'int', '{', 'scipyoptimizeminim', 'expos', '=', 'includ', 'term', 'max', 'control', 'hessian', 'print', '2point', 'mean', 'directli', 'stop', 'note', 'f^k', 'float', 'finite_diff_rel_step', 'behaviour', '}', 'array_lik', '100', 'floatingpoint', 'version', 'evalu', 'g_i', 'factr', 'x0', 'limit', 'callabl', 'Ie', '|1', 'also', 'x', 'cs', '0', 'vector', 'possibl', 'detail', 'numer', 'compon', 'iprint', 'option', 'ndarray', 'gtol', 'scalar', 'If', '|f^', 'suppli', 'one', 'ab', 'method', 'k1', 'per', 'interfac', 'line', 'g', 'ftol', '|', '|f^k|', 'maximum', 'h', 'store', 'pg_i', 'comput', 'callback', 'maxit', 'f', 'relationship', 'rel_step', 'full', 'size', 'use', 'f^', 'select', 'gradient', ';', 'mani', 'set', 'precis', 'disp', 'maxcor', 'step', 'the', 'metric', 'approxim', 'forward', 'two', 'arriv', 'ep', 'everi', 'machin', 'g|', 'adjust', '[', '1', 'outlin', 'project', ']', 'automat', '20', 'current', 'multipli', 'memori', 'algorithm', 'correct', 'sign', 'jac', 'fit', 'method=', 'matrix', 'iter', 'via', '<', 'maxfun']}"
190,"{'func name': 'least_squares', 'comments': 'Solve a nonlinear least-squares problem with bounds on the variables.\n\nGiven the residuals f(x) (an m-D real function of n real variables) and the loss function rho(s) (a scalar function), `least_squares` finds a local minimum of the cost function F(x)::\n\nminimize F(x) = 0.5 * sum(rho(f_i(x)**2), i = 0, ..., m\n\n- 1) subject to lb <= x <= ub\n\nThe purpose of the loss function rho(s) is to reduce the influence of outliers on the solution.\n\nParameters ---------- fun : callable Function which computes the vector of residuals, with the signature ``fun(x, *args, **kwargs)``, i.e., the minimization proceeds with respect to its first argument. The argument ``x`` passed to this function is an ndarray of shape (n,) (never a scalar, even for n=1). It must allocate and return a 1-D array_like of shape (m,) or a scalar. If the argument ``x`` is complex or the function ``fun`` returns complex residuals, it must be wrapped in a real function of real arguments, as shown at the end of the Examples section. x0 : array_like with shape (n,) or float Initial guess on independent variables. If float, it will be treated as a 1-D array with one element. jac : {\'2-point\', \'3-point\', \'cs\', callable}, optional Method of computing the Jacobian matrix (an m-by-n matrix, where element (i, j) is the partial derivative of f[i] with respect to x[j]). The keywords select a finite difference scheme for numerical estimation. The scheme \'3-point\' is more accurate, but requires twice as many operations as \'2-point\' (default). The scheme \'cs\' uses complex steps, and while potentially the most accurate, it is applicable only when `fun` correctly handles complex inputs and can be analytically continued to the complex plane. Method \'lm\' always uses the \'2-point\' scheme. If callable, it is used as ``jac(x, *args, **kwargs)`` and should return a good approximation (or the exact value) for the Jacobian as an array_like (np.atleast_2d is applied), a sparse matrix (csr_matrix preferred for performance) or a `scipy.sparse.linalg.LinearOperator`. bounds : 2-tuple of array_like, optional Lower and upper bounds on independent variables. Defaults to no bounds. Each array must match the size of `x0` or be a scalar, in the latter case a bound will be the same for all variables. Use ``np.inf`` with an appropriate sign to disable bounds on all or some variables. method : {\'trf\', \'dogbox\', \'lm\'}, optional Algorithm to perform minimization.\n\n* \'trf\' : Trust Region Reflective algorithm, particularly suitable for large sparse problems with bounds. Generally robust method. * \'dogbox\' : dogleg algorithm with rectangular trust regions, typical use case is small problems with bounds. Not recommended for problems with rank-deficient Jacobian. * \'lm\' : Levenberg-Marquardt algorithm as implemented in MINPACK. Doesn\'t handle bounds and sparse Jacobians. Usually the most efficient method for small unconstrained problems.\n\nDefault is \'trf\'. See Notes for more information. ftol : float or None, optional Tolerance for termination by the change of the cost function. Default is 1e-8. The optimization process is stopped when ``dF < ftol * F``, and there was an adequate agreement between a local quadratic model and the true model in the last step. If None, the termination by this condition is disabled. xtol : float or None, optional Tolerance for termination by the change of the independent variables. Default is 1e-8. The exact condition depends on the `method` used:\n\n* For \'trf\' and \'dogbox\' : ``norm(dx) < xtol * (xtol + norm(x))``. * For \'lm\' : ``Delta < xtol * norm(xs)``, where ``Delta`` is a trust-region radius and ``xs`` is the value of ``x`` scaled according to `x_scale` parameter (see below).\n\nIf None, the termination by this condition is disabled. gtol : float or None, optional Tolerance for termination by the norm of the gradient. Default is 1e-8. The exact condition depends on a `method` used:\n\n* For \'trf\' : ``norm(g_scaled, ord=np.inf) < gtol``, where ``g_scaled`` is the value of the gradient scaled to account for the presence of the bounds [STIR]_. * For \'dogbox\' : ``norm(g_free, ord=np.inf) < gtol``, where ``g_free`` is the gradient with respect to the variables which are not in the optimal state on the boundary. * For \'lm\' : the maximum absolute value of the cosine of angles between columns of the Jacobian and the residual vector is less than `gtol`, or the residual vector is zero.\n\nIf None, the termination by this condition is disabled. x_scale : array_like or \'jac\', optional Characteristic scale of each variable. Setting `x_scale` is equivalent to reformulating the problem in scaled variables ``xs = x / x_scale``. An alternative view is that the size of a trust region along jth dimension is proportional to ``x_scale[j]``. Improved convergence may be achieved by setting `x_scale` such that a step of a given size along any of the scaled variables has a similar effect on the cost function. If set to \'jac\', the scale is iteratively updated using the inverse norms of the columns of the Jacobian matrix (as described in [JJMore]_). loss : str or callable, optional Determines the loss function. The following keyword values are allowed:\n\n* \'linear\' (default) : ``rho(z) = z``. Gives a standard least-squares problem. * \'soft_l1\' : ``rho(z) = 2 * ((1 + z)**0.5\n\n- 1)``. The smooth approximation of l1 (absolute value) loss. Usually a good choice for robust least squares. * \'huber\' : ``rho(z) = z if z <= 1 else 2*z**0.5\n\n- 1``. Works similarly to \'soft_l1\'. * \'cauchy\' : ``rho(z) = ln(1 + z)``. Severely weakens outliers influence, but may cause difficulties in optimization process. * \'arctan\' : ``rho(z) = arctan(z)``. Limits a maximum loss on a single residual, has properties similar to \'cauchy\'.\n\nIf callable, it must take a 1-D ndarray ``z=f**2`` and return an array_like with shape (3, m) where row 0 contains function values, row 1 contains first derivatives and row 2 contains second derivatives. Method \'lm\' supports only \'linear\' loss. f_scale : float, optional Value of soft margin between inlier and outlier residuals, default is 1.0. The loss function is evaluated as follows ``rho_(f**2) = C**2 * rho(f**2 / C**2)``, where ``C`` is `f_scale`, and ``rho`` is determined by `loss` parameter. This parameter has no effect with ``loss=\'linear\'``, but for other `loss` values it is of crucial importance. max_nfev : None or int, optional Maximum number of function evaluations before the termination. If None (default), the value is chosen automatically:\n\n* For \'trf\' and \'dogbox\' : 100 * n. * For \'lm\' :\n\n100 * n if `jac` is callable and 100 * n * (n + 1) otherwise (because \'lm\' counts function calls in Jacobian estimation).\n\ndiff_step : None or array_like, optional Determines the relative step size for the finite difference approximation of the Jacobian. The actual step is computed as ``x * diff_step``. If None (default), then `diff_step` is taken to be a conventional ""optimal"" power of machine epsilon for the finite difference scheme used [NR]_. tr_solver : {None, \'exact\', \'lsmr\'}, optional Method for solving trust-region subproblems, relevant only for \'trf\' and \'dogbox\' methods.\n\n* \'exact\' is suitable for not very large problems with dense Jacobian matrices. The computational complexity per iteration is comparable to a singular value decomposition of the Jacobian matrix. * \'lsmr\' is suitable for problems with sparse and large Jacobian matrices. It uses the iterative procedure `scipy.sparse.linalg.lsmr` for finding a solution of a linear least-squares problem and only requires matrix-vector product evaluations.\n\nIf None (default), the solver is chosen based on the type of Jacobian returned on the first iteration. tr_options : dict, optional Keyword options passed to trust-region solver.\n\n* ``tr_solver=\'exact\'``: `tr_options` are ignored. * ``tr_solver=\'lsmr\'``: options for `scipy.sparse.linalg.lsmr`. Additionally,\n\n``method=\'trf\'`` supports\n\n\'regularize\' option (bool, default is True), which adds a regularization term to the normal equation, which improves convergence if the Jacobian is rank-deficient [Byrd]_ (eq. 3.4).\n\njac_sparsity : {None, array_like, sparse matrix}, optional Defines the sparsity structure of the Jacobian matrix for finite difference estimation, its shape must be (m, n). If the Jacobian has only few non-zero elements in *each* row, providing the sparsity structure will greatly speed up the computations [Curtis]_. A zero entry means that a corresponding element in the Jacobian is identically zero. If provided, forces the use of \'lsmr\' trust-region solver. If None (default), then dense differencing will be used. Has no effect for \'lm\' method. verbose : {0, 1, 2}, optional Level of algorithm\'s verbosity:\n\n* 0 (default) : work silently. * 1 : display a termination report. * 2 : display progress during iterations (not supported by \'lm\' method).\n\nargs, kwargs : tuple and dict, optional Additional arguments passed to `fun` and `jac`. Both empty by default. The calling signature is ``fun(x, *args, **kwargs)`` and the same for `jac`.\n##### Returns\n* **`OptimizeResult` with the following fields defined**: \n\n* **x **: ndarray, shape (n,)\n    Solution found.\n\n* **cost **: float\n    Value of the cost function at the solution.\n\n* **fun **: ndarray, shape (m,)\n    Vector of residuals at the solution.\n\n* **jac **: ndarray, sparse matrix or LinearOperator, shape (m, n)\n    Modified Jacobian matrix at the solution, in the sense that J^T J\n    is a Gauss-Newton approximation of the Hessian of the cost function.\n    The type is the same as the one used by the algorithm.\n\n* **grad **: ndarray, shape (m,)\n    Gradient of the cost function at the solution.\n\n* **optimality **: float\n    First-order optimality measure. In unconstrained problems, it is always\n    the uniform norm of the gradient. In constrained problems, it is the\n    quantity which was compared with `gtol` during iterations.\n\n* **active_mask **: ndarray of int, shape (n,)\n    Each component shows whether a corresponding constraint is active\n    (that is, whether a variable is at the bound)\n\n* **nfev **: int\n    Number of function evaluations done. Methods \'trf\' and \'dogbox\' do not\n    count function calls for numerical Jacobian approximation, as opposed\n    to \'lm\' method.\n\n* **njev **: int or None\n    Number of Jacobian evaluations done. If numerical Jacobian\n    approximation is used in \'lm\' method, it is set to None.\n\n* **status **: int\n    The reason for algorithm termination\n\n* **message **: str\n    Verbal description of the termination reason.\n\n* **success **: bool\n    True if one of the convergence criteria is satisfied (`status` > 0).\n\n* **leastsq **: A legacy wrapper for the MINPACK implementation of the\n          Levenberg-Marquadt algorithm.\n\n* **curve_fit **: Least-squares minimization applied to a curve-fitting problem.\n\n* **.. versionadded**: \n\n* **.. [JJMore] J. J. More, ""The Levenberg-Marquardt Algorithm**: Implementation\n            and Theory,"" Numerical Analysis, ed. G. A. Watson, Lecture\n            Notes in Mathematics 630, Springer Verlag, pp. 105-116, 1977.\n\n* **.. [BA] B. Triggs et. al., ""Bundle Adjustment - A Modern Synthesis"",\n        Proceedings of the International Workshop on Vision Algorithms**: Theory and Practice, pp. 298-372, 1999.\n\n* **>>> def fun_rosenbrock(x)**: \n\n* **We also provide the analytic Jacobian**: \n\n* **>>> def jac_rosenbrock(x)**: \n\n* **Putting this all together, we see that the new solution lies on the bound**: \n\n* **variables**: \n\n* **>>> def fun_broyden(x)**: \n\n* **...     f[1**: ] -= x[\n\n* **...     f[**: -1] -= 2 * x[1\n\n* **>>> def sparsity_broyden(n)**: \n\n* **outliers, define the model parameters, and generate data**: \n\n* **>>> def gen_data(t, a, b, c, noise=0, n_outliers=0, random_state=0)**: \n\n* **>>> def fun(x, t, y)**: \n\n* **Compute a standard least-squares solution**: \n\n* **following function**: \n\n* **>>> def f(z)**: \n\n* **by simply handling the real and imaginary parts as independent variables**: \n\n* **>>> def f_wrap(x)**: \n\n* **variables we optimize a 2m-D real function of 2n real variables**: \n\n', 'stemmed comments': ['least_squar', 'togeth', 'proce', 'condit', 'number', '2n', 'nt', 'variabl', 'huber', 'robust', 'verbos', 'end', 'requir', 'sum', 'linear', 'oper', 'epsilon', 'wrapper', 'view', 'theori', '2', 'absolut', 'spars', 'residu', 'scipysparselinalglsmr', 'wrap', 'lower', 'minpack', 'presenc', 'influenc', '/', '{', 'npinf', 'region', '2md', 'norm', 'lectur', 'npatleast_2d', '2point', 'altern', 'given', 'mean', 'linearoper', 'stop', 'find', 'rankdefici', 'nonzero', 'exampl', 'invers', 'z', 'analyt', 'verlag', 'scheme', 'gener', 'procedur', 'also', 'valu', 'vector', '1999', 'reflect', 'larg', 'suitabl', 'addit', 'jjmore', 'solver', 'We', 'ndarray', 'array', 'els', 'z=f', 'angl', 'f_i', 'tupl', 'solut', 'leastsquar', 'upper', 'silent', 'applic', 'termin', 'converg', 'plane', 'describ', 'deriv', 'An', 'mD', 'satisfi', 'shown', 'xs', 'C', 'constrain', 'found', 'use', 'base', 'complex', 'reduc', 'synthesi', 'disabl', '2tupl', 'al', '298372', 'improv', 'appropri', 'machin', 'similarli', 'fun_rosenbrock', 'adjust', '[', 'continu', 'watson', 'otherwis', 'match', 'jac_rosenbrock', 'kwarg', 'proport', 'versionad', 'inlier', '<', 'matrix', 'array_lik', 'crucial', 'solv', 'loss=linear', 'model', 'ln', 'dogbox', 'ignor', 'reformul', 'activ', 'method=trf', 'good', 'modifi', 'bundl', 'minim', 'n', '1977', 'subject', 'last', 'g_scale', 'differ', 'soft', 'curvefit', 'shape', 'tr_option', 'In', 'messag', 'curve_fit', 'gaussnewton', 'hessian', 'done', 'argument', 'simpli', 'thi', 'adequ', 'byrd', 'note', 'provid', 'cauchi', '100', 'entri', 'evalu', 'max_nfev', 'effici', 'allow', 'cost', 'input', 'pass', 'A', 'structur', 'import', 'descript', 'choic', 'option', 'soft_l1', 'legaci', 'effect', 'recommend', 'If', 'real', 'optimizeresult', 'proceed', 'matric', 'uniform', 'greatli', 'not', 'f_scale', 'g_free', 'maximum', 'add', 'signatur', 'prefer', 'dens', 'sens', 'n_outliers=0', 'comput', 'second', 'data', '10', 'sever', 'weaken', 'product', 'gradient', 'nonlinear', 'subproblem', 'singular', 'set', 'normal', 'outlier', 'lie', 'perform', 'properti', 'minimum', 'levenbergmarquardt', 'accord', 'actual', 'arg', 'oppos', ']', 'estim', 'see', 'dimens', 'appli', 'diff_step', 'select', '34', 'curti', '>', 'et', 'function', 'compar', 'partial', 'process', 'put', 'standard', 'paramet', 'lsmr', 'csr_matrix', 'for', 'differenc', '3point', 'str', 'type', 'must', 'ha', 'matrixvector', 'twice', 'ident', 'trigg', 'verbal', 'BA', '=', 'finit', 'updat', 'practic', 'speed', 'x_scale', 'more', 'leastsq', 'quadrat', 'row', 'eq', 'dF', '}', 'first', 'ub', 'x0', 'callabl', 'jth', 'even', 'work', 'optim', 'constraint', 'nfev', 'typic', 'display', 'guess', 'J', '0', 'doe', 'treat', 'local', 'numer', 'tr_solver=exact', 'trust', 'toler', 'fun', 'singl', 'F', 'report', 'quantiti', 'B', 'accur', 'mathemat', 'tr_solver=lsmr', 'along', 'scalar', 'method', 'per', 'jac_spars', 's', 'less', 'determin', 'least', 'ftol', '1e8', 'case', 'column', 'measur', 'random_state=0', '630', 'support', 'reason', 'levenbergmarquadt', 'may', '105116', 'tr_solver', 'mani', 'correspond', 'ed', 'small', 'modern', 'keyword', 'arctan', 'the', 'new', 'pp', 'independ', 'ord=npinf', 'true', 'power', 'noise=0', 'regular', 'xtol', 'def', 'state', 'fun_broyden', 'ie', 'latter', 'algorithm', 'field', 'account', 'jac', 'boundari', 'count', 'firstord', 'equival', 'rho', 'bound', 'rho_', 'default', 'characterist', 'correctli', 'never', 'each', 'call', 'j', 'defin', 'lb', 'It', 'workshop', 'sparsity_broyden', 'none', 'jacobian', 'springer', 'l1', 'intern', 'exact', 'chang', 'achiev', 'rel', 'int', 'element', 'n=1', 'level', 'term', '05', 'njev', 'initi', 'particularli', 'unconstrain', 'G', 'scipysparselinalglinearoper', 'caus', 'progress', 'difficulti', 'float', 'grad', 'handl', 'scale', '3', 'imaginari', 'purpos', 'limit', 'depend', 'whether', 'stir', 'criteria', 'empti', 'x', 'decomposit', 'cs', 'implement', 'smooth', 'compon', 'trf', 'forc', 'active_mask', 'gtol', 'convent', 'one', 'squar', 'taken', 'NR', 'vision', 'sparsiti', 'j^t', 'zero', 'gen_data', 'alloc', 'section', 'radiu', 'success', 'give', 'f', 'f_wrap', 'size', 'inform', 'b', 'potenti', 'similar', 'usual', 'show', 'equat', 'c', 'bool', 'analysi', 'lm', 'relev', 'return', 'step', 'statu', 'part', 'approxim', 'respect', 'dict', 'chosen', 'take', 'dx', 'delta', 'dogleg', 'contain', '1', 'trustregion', 'margin', 'automat', '_', 'sign', 'alway', 'cosin', 'agreement', 'follow', 'loss', 'both', '1D', 'iter', 'mbyn', 'rectangular', 'problem']}"
191,"{'func name': 'lgmres', 'comments': 'Solve a matrix equation using the LGMRES algorithm.\n\nThe LGMRES algorithm [1]_ [2]_ is designed to avoid some problems in the convergence in restarted GMRES, and often converges in fewer iterations.\n\nParameters ---------- A : {sparse matrix, dense matrix, LinearOperator} The real or complex N-by-N matrix of the linear system. Alternatively, ``A`` can be a linear operator which can produce ``Ax`` using, e.g., ``scipy.sparse.linalg.LinearOperator``. b : {array, matrix} Right hand side of the linear system. Has shape (N,) or (N,1). x0\n\n: {array, matrix} Starting guess for the solution. tol, atol : float, optional Tolerances for convergence, ``norm(residual) <= max(tol*norm(b), atol)``. The default for ``atol`` is `tol`.\n\n.. warning::\n\nThe default value for `atol` will be changed in a future release. For future compatibility, specify `atol` explicitly. maxiter : int, optional Maximum number of iterations.\n\nIteration will stop after maxiter steps even if the specified tolerance has not been achieved. M : {sparse matrix, dense matrix, LinearOperator}, optional Preconditioner for A.\n\nThe preconditioner should approximate the inverse of A.\n\nEffective preconditioning dramatically improves the rate of convergence, which implies that fewer iterations are needed to reach a given error tolerance. callback : function, optional User-supplied function to call after each iteration.\n\nIt is called as callback(xk), where xk is the current solution vector. inner_m : int, optional Number of inner GMRES iterations per each outer iteration. outer_k : int, optional Number of vectors to carry between inner GMRES iterations. According to [1]_, good values are in the range of 1...3. However, note that if you want to use the additional vectors to accelerate solving multiple similar problems, larger values may be beneficial. outer_v : list of tuples, optional List containing tuples ``(v, Av)`` of vectors and corresponding matrix-vector products, used to augment the Krylov subspace, and carried between inner GMRES iterations. The element ``Av`` can be `None` if the matrix-vector product should be re-evaluated. This parameter is modified in-place by `lgmres`, and can be used to pass ""guess"" vectors in and out of the algorithm when solving similar problems. store_outer_Av : bool, optional Whether LGMRES should store also A*v in addition to vectors `v` in the `outer_v` list. Default is True. prepend_outer_v : bool, optional Whether to put outer_v augmentation vectors before Krylov iterates. In standard LGMRES, prepend_outer_v=False.\n##### Returns\n* **x **: array or matrix\n    The converged solution.\n\n* **info **: int\n    Provides convergence information\n\n', 'stemmed comments': ['N', 'default', 'function', 'number', 'call', 'augment', 'put', 'standard', 'futur', 'impli', 'linear', 'oper', 'explicitli', 'paramet', 'It', 'nbyn', '2', 'eg', 'for', 'xk', 'none', 'spars', 'good', 'modifi', 'inner_m', 'residu', 'carri', 'ha', 'chang', 'matrixvector', 'prepend_outer_v=fals', 'restart', 'achiev', 'int', '{', 'benefici', 'shape', 'element', 'krylov', 'store_outer_av', 'In', 'norm', '=', 'rang', 'max', 'inner', 'side', 'altern', 'given', 'linearoper', 'thi', 'inplac', 'scipysparselinalglinearoper', 'acceler', 'want', 'stop', 'reevalu', 'note', 'float', 'invers', 'provid', 'lgmre', '}', 'x0', '3', 'hand', 'prepend_outer_v', 'even', 'error', 'whether', 'also', 'info', 'guess', 'x', 'valu', 'vector', 'pass', 'addit', 'subspac', 'A', 'toler', 'outer_v', 'releas', 'tol', 'option', 'start', 'array', 'effect', 'rate', 'real', 'reach', 'tupl', 'larger', 'design', 'per', 'solut', 'compat', 'maximum', 'howev', 'store', 'dens', 'Ax', 'converg', 'callback', 'maxit', 'warn', 'N1', 'fewer', 'produc', 'may', 'product', 'inform', 'use', 'complex', 'b', 'similar', 'equat', 'need', 'correspond', 'system', 'bool', 'right', 'return', 'step', 'M', 'the', 'approxim', 'atol', 'Av', 'true', 'usersuppli', 'outer_k', 'precondit', 'accord', 'precondition', 'dramat', 'improv', 'outer', 'gmre', 'contain', 'list', 'specifi', '[', '1', 'v', ']', 'multipl', 'current', 'avoid', 'algorithm', '_', 'often', 'matrix', 'iter', '<', 'solv', 'problem']}"
192,"{'func name': 'isspmatrix_lil', 'comments': 'Is x of lil_matrix type?\n\nParameters ---------- x object to check for being a lil matrix\n##### Returns\n', 'stemmed comments': ['lil_matrix', 'x', 'lil', 'type', '?', 'paramet', 'Is', 'object', 'matrix', 'return', 'check']}"
193,"{'func name': 'random', 'comments': '', 'stemmed comments': []}"
194,"{'func name': '_nonmonotone_line_search_cheng', 'comments': 'Nonmonotone line search from [1]\n\nParameters ---------- f : callable Function returning a tuple ``(f, F)`` where ``f`` is the value of a merit function and ``F`` the residual. x_k : ndarray Initial position. d : ndarray Search direction. f_k : float Initial merit function value. C, Q : float Control parameters. On the first iteration, give values Q=1.0, C=f_k eta : float Allowed merit function increase, see [1]_ nu, gamma, tau_min, tau_max : float, optional Search parameters, see [1]_\n##### Returns\n* **alpha **: float\n    Step length\n\n* **xp **: ndarray\n    Next position\n\n* **fp **: float\n    Merit function value at next position\n\n* **Fp **: ndarray\n    Residual at next position\n\n* **C **: float\n    New value for the control parameter C\n\n* **Q **: float\n    New value for the control parameter Q\n\n', 'stemmed comments': ['option', 'initi', 'direct', 'ndarray', 'merit', 'function', 'Fp', 'eta', 'return', 'step', 'next', 'tupl', 'search', 'q=10', 'alpha', 'nonmonoton', 'float', 'new', 'paramet', 'line', 'f_k', 'first', 'gamma', 'c=f_k', 'nu', 'tau_max', 'residu', 'length', 'F', '[', '1', 'callabl', 'increas', 'allow', 'fp', ']', 'give', 'On', 'f', 'posit', '_', 'valu', 'see', 'C', 'Q', 'tau_min', 'xp', 'control', 'iter', 'x_k']}"
195,"{'func name': 'spsolve_triangular', 'comments': 'Solve the equation `A x = b` for `x`, assuming A is a triangular matrix.\n\nParameters ---------- A : (M, M) sparse matrix A sparse square triangular matrix. Should be in CSR format. b : (M,) or (M, N) array_like Right-hand side matrix in `A x = b` lower : bool, optional Whether `A` is a lower or upper triangular matrix. Default is lower triangular matrix. overwrite_A : bool, optional Allow changing `A`. The indices of `A` are going to be sorted and zero entries are going to be removed. Enabling gives a performance gain. Default is False. overwrite_b : bool, optional Allow overwriting data in `b`. Enabling gives a performance gain. Default is False. If `overwrite_b` is True, it should be ensured that `b` has an appropriate dtype to be able to store the result. unit_diagonal : bool, optional If True, diagonal elements of `a` are assumed to be 1 and will not be referenced.\n\n.. versionadded:: 1.4.0\n##### Returns\n* **x **: (M,) or (M, N) ndarray\n    Solution to the system `A x = b`. Shape of return matches shape of `b`.\n\n', 'stemmed comments': ['option', 'N', 'equat', 'csr', 'default', 'dtype', 'unit_diagon', 'ndarray', 'system', 'bool', 'perform', 'gain', 'If', 'return', 'M', 'diagon', 'the', 'format', 'squar', 'assum', 'result', 'paramet', 'true', 'solut', 'fals', 'entri', 'spars', 'enabl', 'upper', 'appropri', 'go', 'store', 'indic', 'lower', '1', 'zero', 'whether', 'chang', 'allow', '140', 'match', 'give', 'overwrit', 'abl', 'should', 'sort', 'data', 'element', 'shape', 'x', 'triangular', 'referenc', '=', 'righthand', 'overwrite_a', 'versionad', 'remov', 'A', 'matrix', 'side', 'overwrite_b', 'array_lik', 'b', 'ensur', 'solv']}"
196,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
197,"{'func name': 'lobpcg', 'comments': 'Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG)\n\nLOBPCG is a preconditioned eigensolver for large symmetric positive definite (SPD) generalized eigenproblems.\n\nParameters ---------- A : {sparse matrix, dense matrix, LinearOperator} The symmetric linear operator of the problem, usually a sparse matrix.\n\nOften called the ""stiffness matrix"". X : ndarray, float32 or float64 Initial approximation to the ``k`` eigenvectors (non-sparse). If `A` has ``shape=(n,n)`` then `X` should have shape ``shape=(n,k)``. B : {dense matrix, sparse matrix, LinearOperator}, optional The right hand side operator in a generalized eigenproblem. By default, ``B = Identity``.\n\nOften called the ""mass matrix"". M : {dense matrix, sparse matrix, LinearOperator}, optional Preconditioner to `A`; by default ``M = Identity``. `M` should approximate the inverse of `A`. Y : ndarray, float32 or float64, optional n-by-sizeY matrix of constraints (non-sparse), sizeY < n The iterations will be performed in the B-orthogonal complement of the column-space of Y. Y must be full rank. tol : scalar, optional Solver tolerance (stopping criterion). The default is ``tol=n*sqrt(eps)``. maxiter : int, optional Maximum number of iterations.\n\nThe default is ``maxiter = 20``. largest : bool, optional When True, solve for the largest eigenvalues, otherwise the smallest. verbosityLevel : int, optional Controls solver output.\n\nThe default is ``verbosityLevel=0``. retLambdaHistory : bool, optional Whether to return eigenvalue history.\n\nDefault is False. retResidualNormsHistory : bool, optional Whether to return history of residual norms.\n\nDefault is False.\n##### Returns\n* **w **: ndarray\n    Array of ``k`` eigenvalues\n\n* **v **: ndarray\n    An array of ``k`` eigenvectors.  `v` has the same shape as `X`.\n\n* **lambdas **: list of ndarray, optional\n    The eigenvalue history, if `retLambdaHistory` is True.\n\n* **rnorms **: list of ndarray, optional\n    The history of residual norms, if `retResidualNormsHistory` is True.\n\n* **https**: //arxiv.org/abs/0705.2626\n\n* **The convergence speed depends basically on two factors**: \n\n* **.. [1] A. V. Knyazev (2001),\n       Toward the Optimal Preconditioned Eigensolver**: Locally Optimal\n       Block Preconditioned Conjugate Gradient Method.\n       SIAM Journal on Scientific Computing 23, no. 2,\n       pp. 517-541. http\n\n* **.. [2] A. V. Knyazev, I. Lashuk, M. E. Argentati, and E. Ovchinnikov\n       (2007), Block Locally Optimal Preconditioned Eigenvalue Xolvers\n       (BLOPEX) in hypre and PETSc. https**: //arxiv.org/abs/0705.2626\n\n* **.. [3] A. V. Knyazev\'s C and MATLAB implementations**: https\n\n* **Constraints**: \n\n* **Preconditioner in the inverse of A in this example**: \n\n* **The preconditiner must be defined by a function**: \n\n* **>>> def precond( x )**: \n\n* **The preconditioner function is passed to lobpcg as a `LinearOperator`**: \n\n* **Let us now solve the eigenvalue problem for the matrix A**: \n\n', 'stemmed comments': ['default', 'block', 'rank', '>', 'function', 'eigenvector', 'number', 'lobpcg', 'call', 'output', 'defin', 'shape=', 'linear', 'oper', 'paramet', '2', 'spars', '2001', 'By', 'residu', 'sqrt', 'nbysizey', 'n', 'must', 'rnorm', 'blopex', 'definit', 'ident', 'int', '{', 'shape', '=', 'criterion', 'norm', 'control', 'I', 'Y', 'side', 'speed', 'initi', 'linearoper', 'k', 'retlambdahistori', 'eigenvalu', 'verbositylevel', 'smallest', 'spd', 'stop', 'lashuk', 'exampl', 'invers', '}', 'eigenproblem', 'w', 'gener', 'nonspars', 'let', 'histori', '3', 'hand', 'depend', 'optim', 'constraint', 'whether', 'E', 'borthogon', 'x', 'implement', 'pass', 'larg', 'local', 'journal', 'A', 'toler', 'knyazev', 'option', 'B', 'tol', 'ndarray', 'solver', 'array', '//arxivorg/abs/07052626', 'scalar', 'If', 'http', 'petsc', 'method', 'eigensolv', 'when', 'xolver', 's', 'largest', 'fals', 'argentati', 'toward', 'matlab', 'complement', 'maximum', 'dens', 'mass', 'precond', 'converg', 'comput', 'sizey', 'us', 'maxit', 'ovchinnikov', 'An', 'siam', 'factor', 'full', 'C', '517541', ';', 'gradient', 'usual', 'scientif', '23', 'stiff', 'bool', 'perform', 'symmetr', 'right', 'return', 'lambda', 'M', 'the', 'approxim', 'two', 'V', 'pp', 'ep', 'true', 'precondit', 'retresidualnormshistori', 'precondition', 'conjug', 'float64', 'tol=n', 'float32', 'list', 'def', '[', '1', 'v', 'otherwis', ']', '2007', '20', 'posit', 'verbositylevel=0', 'basic', 'often', 'columnspac', 'X', 'matrix', 'iter', '<', 'preconditin', 'hypr', 'solv', 'problem']}"
198,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
199,"{'func name': 'lsmr', 'comments': 'Iterative solver for least-squares problems.\n\nlsmr solves the system of linear equations ``Ax = b``. If the system is inconsistent, it solves the least-squares problem ``min ||b\n\n- Ax||_2``. A is a rectangular matrix of dimension m-by-n, where all cases are allowed: m = n, m > n, or m < n. B is a vector of length m. The matrix A may be dense or sparse (usually sparse).\n\nParameters ---------- A : {matrix, sparse matrix, ndarray, LinearOperator} Matrix A in the linear system. Alternatively, ``A`` can be a linear operator which can produce ``Ax`` and ``A^H x`` using, e.g., ``scipy.sparse.linalg.LinearOperator``. b : array_like, shape (m,) Vector b in the linear system. damp : float Damping factor for regularized least-squares. `lsmr` solves the regularized least-squares problem::\n\nmin ||(b)\n\n- (\n\nA\n\n )x|| ||(0)\n\n (damp*I) ||_2\n\nwhere damp is a scalar.\n\nIf damp is None or 0, the system is solved without regularization. atol, btol : float, optional Stopping tolerances. `lsmr` continues iterations until a certain backward error estimate is smaller than some quantity depending on atol and btol.\n\nLet ``r = b\n\n- Ax`` be the residual vector for the current approximate solution ``x``. If ``Ax = b`` seems to be consistent, ``lsmr`` terminates when ``norm(r) <= atol * norm(A) * norm(x) + btol * norm(b)``. Otherwise, lsmr terminates when ``norm(A^H r) <= atol * norm(A) * norm(r)``.\n\nIf both tolerances are 1.0e-6 (say), the final ``norm(r)`` should be accurate to about 6 digits. (The final x will usually have fewer correct digits, depending on ``cond(A)`` and the size of LAMBDA.)\n\nIf `atol` or `btol` is None, a default value of 1.0e-6 will be used. Ideally, they should be estimates of the relative error in the entries of A and B respectively.\n\nFor example, if the entries of `A` have 7 correct digits, set atol = 1e-7. This prevents the algorithm from doing unnecessary work beyond the uncertainty of the input data. conlim : float, optional `lsmr` terminates if an estimate of ``cond(A)`` exceeds `conlim`.\n\nFor compatible systems ``Ax = b``, conlim could be as large as 1.0e+12 (say).\n\nFor least-squares problems, `conlim` should be less than 1.0e+8. If `conlim` is None, the default value is 1e+8.\n\nMaximum precision can be obtained by setting ``atol = btol = conlim = 0``, but the number of iterations may then be excessive. maxiter : int, optional `lsmr` terminates if the number of iterations reaches `maxiter`.\n\nThe default is ``maxiter = min(m, n)``.\n\nFor ill-conditioned systems, a larger value of `maxiter` may be needed. show : bool, optional Print iterations logs if ``show=True``. x0 : array_like, shape (n,), optional Initial guess of x, if None zeros are used.\n\n.. versionadded:: 1.0.0\n##### Returns\n* **x **: ndarray of float\n    Least-square solution returned.\n\n* **istop **: int\n    istop gives the reason for stopping\n\n* **itn **: int\n    Number of iterations used.\n\n* **normr **: float\n    ``norm(b-Ax)``\n\n* **normar **: float\n    ``norm(A^H (b - Ax))``\n\n* **norma **: float\n    ``norm(A)``\n\n* **conda **: float\n    Condition number of A.\n\n* **normx **: float\n    ``norm(x)``\n\n* **.. versionadded**: \n\n* **.. [1] D. C.-L. Fong and M. A. Saunders,\n       ""LSMR**: An iterative algorithm for sparse least-squares problems"",\n       SIAM J. Sci. Comput., vol. 33, pp. 2950-2971, 2011.\n       https\n\n* **.. [2] LSMR Software, https**: //web.stanford.edu/group/SOL/software/lsmr/\n\n* **>>> x, istop, itn, normr = lsmr(A, b)[**: 4]\n\n* **The next example has a non-trivial solution**: \n\n* **solution for the equation**: \n\n', 'stemmed comments': ['default', '>', '2011', 'sci', 'unnecessari', 'condit', 'number', 'final', 'show=tru', 'linear', 'oper', 'conlim', 'paramet', 'lsmr', 'eg', 'none', 'for', 'm', '2', 'spars', 'could', 'residu', 'istop', 'n', '10e12', '10e8', 'rel', 'int', '{', 'shape', 'CL', '=', 'norm', 'itn', 'uncertainti', 'normar', 'I', 'print', 'saunder', 'initi', 'D', 'altern', 'backward', '7', 'linearoper', 'thi', 'scipysparselinalglinearoper', 'stop', 'fong', 'exampl', 'float', 'digit', '}', 'say', 'r', '100', 'entri', 'let', '||', 'log', 'btol', 'x0', 'work', 'depend', 'error', '1e7', 'allow', 'norma', 'prevent', 'min', 'x', 'guess', 'valu', 'vector', '0', 'J', 'input', 'inconsist', 'larg', 'ideal', 'A', 'toler', '33', 'quantiti', 'option', 'solver', 'B', 'ndarray', 'accur', 'softwar', 'conda', 'cond', 'scalar', 'If', 'http', 'reach', 'x||', 'next', 'larger', 'consist', 'less', 'excess', 'rectangular', 'solut', 'leastsquar', '1e8', 'normx', 'case', 'compat', 'maximum', '4', 'nontrivi', 'dens', 'Ax', 'termin', 'smaller', 'zero', 'reason', 'comput', 'obtain', 'bax', 'a^h', 'maxit', 'give', 'data', 'An', 'siam', 'without', 'factor', 'fewer', 'produc', 'may', 'size', 'vol', 'use', 'b', 'exce', '//webstanfordedu/group/sol/software/lsmr/', 'usual', 'set', 'equat', 'precis', 'need', 'show', '10e6', 'system', 'bool', 'return', 'lambda', 'M', 'the', 'approxim', 'atol', 'respect', '29502971', 'pp', 'beyond', '||b', 'regular', 'length', 'ax||_2', 'continu', '[', '1', 'illcondit', 'certain', 'otherwis', ']', 'damp', 'seem', 'normr', 'estim', 'current', 'algorithm', 'correct', '6', 'dimens', 'versionad', 'matrix', 'iter', '<', 'array_lik', 'mbyn', '||_2', 'solv', 'problem']}"
200,"{'func name': 'lsq_linear', 'comments': 'Solve a linear least-squares problem with bounds on the variables.\n\nGiven a m-by-n design matrix A and a target vector b with m elements, `lsq_linear` solves the following optimization problem::\n\nminimize 0.5 * ||A x\n\n- b||**2 subject to lb <= x <= ub\n\nThis optimization problem is convex, hence a found minimum (if iterations have converged) is guaranteed to be global.\n\nParameters ---------- A : array_like, sparse matrix of LinearOperator, shape (m, n) Design matrix. Can be `scipy.sparse.linalg.LinearOperator`. b : array_like, shape (m,) Target vector. bounds : 2-tuple of array_like, optional Lower and upper bounds on independent variables. Defaults to no bounds. Each array must have shape (n,) or be a scalar, in the latter case a bound will be the same for all variables. Use ``np.inf`` with an appropriate sign to disable bounds on all or some variables. method : \'trf\' or \'bvls\', optional Method to perform minimization.\n\n* \'trf\' : Trust Region Reflective algorithm adapted for a linear least-squares problem. This is an interior-point-like method and the required number of iterations is weakly correlated with the number of variables. * \'bvls\' : Bounded-variable least-squares algorithm. This is an active set method, which requires the number of iterations comparable to the number of variables. Can\'t be used when `A` is sparse or LinearOperator.\n\nDefault is \'trf\'. tol : float, optional Tolerance parameter. The algorithm terminates if a relative change of the cost function is less than `tol` on the last iteration. Additionally, the first-order optimality measure is considered:\n\n* ``method=\'trf\'`` terminates if the uniform norm of the gradient, scaled to account for the presence of the bounds, is less than `tol`. * ``method=\'bvls\'`` terminates if Karush-Kuhn-Tucker conditions are satisfied within `tol` tolerance.\n\nlsq_solver : {None, \'exact\', \'lsmr\'}, optional Method of solving unbounded least-squares problems throughout iterations:\n\n* \'exact\' : Use dense QR or SVD decomposition approach. Can\'t be used when `A` is sparse or LinearOperator. * \'lsmr\' : Use `scipy.sparse.linalg.lsmr` iterative procedure which requires only matrix-vector product evaluations. Can\'t be used with ``method=\'bvls\'``.\n\nIf None (default), the solver is chosen based on type of `A`. lsmr_tol : None, float or \'auto\', optional Tolerance parameters \'atol\' and \'btol\' for `scipy.sparse.linalg.lsmr` If None (default), it is set to ``1e-2 * tol``. If \'auto\', the tolerance will be adjusted based on the optimality of the current iterate, which can speed up the optimization process, but is not always reliable. max_iter : None or int, optional Maximum number of iterations before termination. If None (default), it is set to 100 for ``method=\'trf\'`` or to the number of variables for ``method=\'bvls\'`` (not counting iterations for \'bvls\' initialization). verbose : {0, 1, 2}, optional Level of algorithm\'s verbosity:\n\n* 0 : work silently (default). * 1 : display a termination report. * 2 : display progress during iterations.\n##### Returns\n* **OptimizeResult with the following fields defined**: \n\n* **x **: ndarray, shape (n,)\n    Solution found.\n\n* **cost **: float\n    Value of the cost function at the solution.\n\n* **fun **: ndarray, shape (m,)\n    Vector of residuals at the solution.\n\n* **optimality **: float\n    First-order optimality measure. The exact meaning depends on `method`,\n    refer to the description of `tol` parameter.\n\n* **active_mask **: ndarray of int, shape (n,)\n    Each component shows whether a corresponding constraint is active\n    (that is, whether a variable is at the bound)\n\n* **nit **: int\n    Number of iterations. Zero if the unconstrained solution is optimal.\n\n* **status **: int\n    Reason for algorithm termination\n\n* **message **: str\n    Verbal description of the termination reason.\n\n* **success **: bool\n    True if one of the convergence criteria is satisfied (`status` > 0).\n\n* **nnls **: Linear least squares with non-negativity constraint.\n\n* **least_squares **: Nonlinear least squares with bounds on the variables.\n\n* **.. [BVLS] P. B. Start and R. L. Parker, ""Bounded-Variable Least-Squares**: an Algorithm and Applications"", Computational Statistics, 10,\n          129-141, 1995.\n\n', 'stemmed comments': ['bound', 'global', 'default', '>', 'consid', 'least_squar', 'function', 'target', 'each', 'condit', 'number', 'statist', '1995', 'compar', 'nt', 'process', 'variabl', 'defin', 'lb', 'verbos', 'requir', 'linear', 'nnl', 'paramet', 'lsmr', 'activ', '2', 'none', 'spars', 'method=trf', 'scipysparselinalglsmr', 'residu', 'weakli', 'approach', 'minim', 'lower', 'str', 'type', 'n', 'must', 'exact', 'presenc', 'chang', 'matrixvector', 'subject', 'last', 'rel', 'convex', 'int', '{', 'element', 'shape', 'npinf', 'svd', 'region', 'verbal', 'auto', 'messag', '=', 'norm', 'adapt', 'guarante', 'level', '05', 'speed', 'initi', 'given', 'lsq_linear', 'parker', 'mean', 'linearoper', 'unbound', 'thi', 'unconstrain', 'scipysparselinalglinearoper', 'progress', 'float', '}', '100', 'method=bvl', 'evalu', 'ub', 'procedur', 'scale', 'correl', 'Ca', 'btol', '1e2', 'work', 'depend', 'optim', 'whether', 'constraint', 'throughout', 'cost', 'P', 'R', 'display', 'criteria', 'x', 'decomposit', 'valu', 'vector', 'reliabl', '0', 'reflect', 'addit', 'trust', 'trf', 'A', 'toler', 'fun', 'compon', 'descript', 'report', 'refer', 'option', 'tol', 'solver', 'array', 'ndarray', 'B', 'active_mask', 'start', 'scalar', 'If', 'optimizeresult', 'nit', 'one', 'nonneg', 'uniform', 'method', 'squar', 'design', 's', 'bvl', 'less', 'least', 'b||', 'can', 'solut', 'leastsquar', 'case', 'upper', 'measur', 'maximum', 'within', 'silent', 'interiorpointlik', 'applic', 'dens', 'termin', 'zero', 'converg', 'reason', 'success', 'comput', '10', 'satisfi', '||a', 'boundedvari', 'product', 'henc', 'found', 'use', 'L', 'base', 'b', 'gradient', 'nonlinear', 'max_it', 'set', 'show', 'correspond', 'bool', 'perform', 'disabl', 'return', 'statu', '2tupl', 'minimum', 'the', 'atol', 'independ', 'chosen', 'true', 'appropri', 'karushkuhntuck', 'adjust', '[', '1', 'lsq_solver', 'lsmr_tol', ']', 'latter', 'current', 'QR', 'algorithm', 'field', 'sign', 'account', 'alway', 'count', 'follow', 'firstord', 'matrix', 'iter', '<', 'array_lik', '129141', 'mbyn', 'solv', 'problem']}"
201,"{'func name': 'extract_lsq_problems', 'comments': 'Extract all least squares problems in this file for benchmarking.\n\n\n##### Returns\n', 'stemmed comments': ['extract', 'file', 'least', 'benchmark', 'return', 'squar', 'problem']}"
202,"{'func name': 'lsqr', 'comments': 'Find the least-squares solution to a large, sparse, linear system of equations.\n\nThe function solves ``Ax = b``\n\nor\n\n``min ||Ax\n\n- b||^2`` or ``min ||Ax\n\n- b||^2 + d^2 ||x||^2``.\n\nThe matrix A may be square or rectangular (over-determined or under-determined), and may have any rank.\n\n::\n\n1. Unsymmetric equations --\n\n\n\nsolve\n\nA*x = b\n\n2. Linear least squares\n\n--\n\n\n\nsolve\n\nA*x = b in the least-squares sense\n\n3. Damped least squares\n\n--\n\n\n\nsolve\n\n(\n\n A\n\n\n\n)*x = ( b ) ( damp*I )\n\n\n\n ( 0 ) in the least-squares sense\n\nParameters ---------- A : {sparse matrix, ndarray, LinearOperator} Representation of an m-by-n matrix. Alternatively, ``A`` can be a linear operator which can produce ``Ax`` and ``A^T x`` using, e.g., ``scipy.sparse.linalg.LinearOperator``. b : array_like, shape (m,) Right-hand side vector ``b``. damp : float Damping coefficient. atol, btol : float, optional Stopping tolerances. If both are 1.0e-9 (say), the final residual norm should be accurate to about 9 digits.\n\n(The final x will usually have fewer correct digits, depending on cond(A) and the size of damp.) conlim : float, optional Another stopping tolerance.\n\nlsqr terminates if an estimate of ``cond(A)`` exceeds `conlim`.\n\nFor compatible systems ``Ax = b``, `conlim` could be as large as 1.0e+12 (say).\n\nFor least-squares problems, conlim should be less than 1.0e+8. Maximum precision can be obtained by setting ``atol = btol = conlim = zero``, but the number of iterations may then be excessive. iter_lim : int, optional Explicit limitation on number of iterations (for safety). show : bool, optional Display an iteration log. calc_var : bool, optional Whether to estimate diagonals of ``(A\'A + damp^2*I)^{-1}``. x0 : array_like, shape (n,), optional Initial guess of x, if None zeros are used.\n\n.. versionadded:: 1.0.0\n##### Returns\n* **x **: ndarray of float\n    The final solution.\n\n* **istop **: int\n    Gives the reason for termination.\n    1 means x is an approximate solution to Ax = b.\n    2 means x approximately solves the least-squares problem.\n\n* **itn **: int\n    Iteration number upon termination.\n\n* **r1norm **: float\n    ``norm(r)``, where ``r = b - Ax``.\n\n* **r2norm **: float\n    ``sqrt( norm(r)^2  +  damp^2 * norm(x)^2 )``.  Equal to `r1norm` if\n    ``damp == 0``.\n\n* **anorm **: float\n    Estimate of Frobenius norm of ``Abar = [[A]; [damp*I]]``.\n\n* **acond **: float\n    Estimate of ``cond(Abar)``.\n\n* **arnorm **: float\n    Estimate of ``norm(A\'*r - damp^2*x)``.\n\n* **xnorm **: float\n    ``norm(x)``\n\n* **var **: ndarray of float\n    If ``calc_var`` is True, estimates all diagonals of\n    ``(A\'A)^{-1}`` (if ``damp == 0``) or more generally ``(A\'A +\n    damp^2*I)^{-1}``.  This is well defined if A has full column\n    rank or ``damp > 0``.  (Not sure what var means if ``rank(A)\n    < n`` and ``damp = 0.``)\n\n* **one could proceed as follows**: 1. Compute a residual vector ``r0 = b - A*x0``.\n  2. Use LSQR to solve the system  ``A*dx = r0``.\n  3. Add the correction dx to obtain a final solution ``x = x0 + dx``.\n\n* **.. [1] C. C. Paige and M. A. Saunders (1982a).\n       ""LSQR**: An algorithm for sparse linear equations and\n       sparse least squares"", ACM TOMS 8(1), 43-71.\n\n* **.. [2] C. C. Paige and M. A. Saunders (1982b).\n       ""Algorithm 583.  LSQR**: Sparse linear equations and least\n       squares problems"", ACM TOMS 8(2), 195-209.\n\n* **>>> x, istop, itn, normr = lsqr(A, b)[**: 4]\n\n* **The next example has a non-trivial solution**: \n\n* **>>> x, istop, itn, r1norm = lsqr(A, b)[**: 4]\n\n* **solution for the equation**: \n\n', 'stemmed comments': ['calc_var', 'rank', '>', 'function', 'acond', '||x||^2', 'number', 'final', 'defin', 'linear', 'oper', 'conlim', 'paramet', '2', 'eg', 'for', 'none', 'spars', 'could', 'residu', 'sqrt', '4371', 'istop', 'n', 'represent', '||ax', '10e12', '10e8', 'int', '{', '583', 'shape', 'r0', '=', 'norm', 'itn', 'I', 'saunder', 'side', '10e9', 'initi', 'd^2', 'altern', 'mean', 'linearoper', 'a^t', 'thi', 'scipysparselinalglinearoper', 'coeffici', 'underdetermin', 'stop', 'find', 'exampl', 'float', 'digit', '}', 'say', 'damp^2', '100', 'r', 'r1norm', 'sure', 'paig', 'gener', 'b||^2', 'log', 'btol', '3', 'x0', 'limit', 'depend', 'whether', 'abar', '195209', 'explicit', 'display', 'min', 'xnorm', 'x', 'guess', '0', 'vector', 'righthand', 'iter_lim', 'larg', 'anorm', 'A', 'toler', 'option', 'ndarray', 'accur', 'cond', '8', 'If', 'proceed', 'one', 'next', 'squar', 'tom', '==', 'less', 'excess', 'least', 'solut', 'not', 'leastsquar', 'compat', 'add', 'maximum', 'column', '4', 'nontrivi', '^2', 'sens', 'Ax', 'termin', 'zero', 'well', 'acm', 'reason', 'comput', 'obtain', 'give', 'r2norm', 'frobeniu', 'An', 'fewer', 'produc', 'may', 'full', 'size', 'C', 'use', 'b', 'exce', ';', 'usual', 'precis', 'equat', 'set', 'show', '^', 'system', 'anoth', 'bool', 'overdetermin', 'return', 'unsymmetr', 'M', 'diagon', 'the', 'approxim', 'atol', '1982a', 'arnorm', 'true', 'dx', 'lsqr', 'safeti', 'equal', '1982b', '[', '1', ']', 'damp', 'var', 'normr', 'estim', 'algorithm', '9', 'correct', 'upon', 'follow', 'versionad', 'matrix', 'iter', '<', 'array_lik', 'mbyn', 'rectangular', 'solv', 'problem']}"
203,"{'func name': 'cont2discrete', 'comments': 'Transform a continuous to a discrete state-space system.\n\nParameters ---------- system : a tuple describing the system or an instance of `lti` The following gives the number of elements in the tuple and the interpretation:\n\n* 1: (instance of `lti`) * 2: (num, den) * 3: (zeros, poles, gain) * 4: (A, B, C, D)\n\ndt : float The discretization time step. method : str, optional Which method to use:\n\n* gbt: generalized bilinear transformation * bilinear: Tustin\'s approximation (""gbt"" with alpha=0.5) * euler: Euler (or forward differencing) method (""gbt"" with alpha=0) * backward_diff: Backwards differencing (""gbt"" with alpha=1.0) * zoh: zero-order hold (default) * foh: first-order hold (*versionadded: 1.3.0*) * impulse: equivalent impulse response (*versionadded: 1.3.0*)\n\nalpha : float within [0, 1], optional The generalized bilinear transformation weighting parameter, which should only be specified with method=""gbt"", and is ignored otherwise\n##### Returns\n* **sysd **: tuple containing the discrete system\n    Based on the input type, the output will be of the form\n    * (num, den, dt)   for transfer function input\n    * (zeros, poles, gain, dt)   for zeros-poles-gain input\n    * (A, B, C, D, dt) for state-space system input\n\n* **.. [1] https**: //en.wikipedia.org/wiki/Discretization#Discretization_of_linear_state_space_models\n\n* **.. [2] http**: //techteach.no/publications/discretetime_signals_systems/discrete.pdf\n\n* **.. [3] G. Zhang, X. Chen, and T. Chen, Digital redesign via the generalized\n    bilinear transformation, Int. J. Control, vol. 82, no. 4, pp. 741-754,\n    2009.\n    (https**: //www.mypolyuweb.hk/~magzhang/Research/ZCC09_IJC.pdf)\n\n* **.. [4] G. F. Franklin, J. D. Powell, and M. L. Workman, Digital control\n    of dynamic systems, 3rd ed. Menlo Park, Calif**: Addison-Wesley,\n    pp. 204-206, 1998.\n\n', 'stemmed comments': ['alpha=10', 'default', 'function', 'number', 'sysd', 'output', 'workman', 'respons', 'chen', 'transfer', 'paramet', 'ignor', '2', 'differenc', 'str', 'type', '//techteachno/publications/discretetime_signals_systems/discretepdf', 'gbt', '130', 'weight', 'franklin', 'int', 'element', 'dynam', 'menlo', 'control', 'T', 'D', 'zhang', 'zerospolesgain', 'alpha=0', 'backward', 'gain', 'G', 'alpha=05', 'float', 'park', 'digit', 'powel', 'gener', 'transform', 'pole', 'statespac', '3', 'redesign', 'J', '0', 'input', 'A', 'F', 'option', 'B', 'impuls', 'http', 'bilinear', 'tupl', 'method', 'instanc', 's', '2009', '3rd', 'addisonwesley', 'time', 'within', '4', '741754', 'zero', 'zeroord', 'which', 'describ', 'give', '//enwikipediaorg/wiki/discret', '1998', 'euler', '82', 'C', 'vol', 'L', 'use', 'base', 'hold', 'discretization_of_linear_state_space_model', '//wwwmypolyuwebhk/~magzhang/research/zcc09_ijcpdf', 'system', 'ed', 'den', '204206', 'foh', 'return', 'step', 'M', 'the', 'approxim', 'forward', 'alpha', 'pp', 'dt', 'num', 'lti', 'contain', 'specifi', 'continu', '[', '1', 'tustin', 'zoh', 'otherwis', ']', 'form', 'backward_diff', 'discret', 'calif', 'interpret', 'follow', 'firstord', 'versionad', 'method=', 'X', 'via', 'equival']}"
204,"{'func name': 'dbode', 'comments': 'Calculate Bode magnitude and phase data of a discrete-time system.\n\nParameters ---------- system : an instance of the LTI class or a tuple describing the system. The following gives the number of elements in the tuple and the interpretation:\n\n* 1 (instance of `dlti`) * 2 (num, den, dt) * 3 (zeros, poles, gain, dt) * 4 (A, B, C, D, dt)\n\nw : array_like, optional Array of frequencies (in radians/sample). Magnitude and phase data is calculated for every value in this array. If not given a reasonable set will be calculated. n : int, optional Number of frequency points to compute if `w` is not given. The `n` frequencies are logarithmically spaced in an interval chosen to include the influence of the poles and zeros of the system.\n##### Returns\n* **w **: 1D ndarray\n    Frequency array [rad/time_unit]\n\n* **mag **: 1D ndarray\n    Magnitude array [dB]\n\n* **phase **: 1D ndarray\n    Phase array [deg]\n\n* **.. versionadded**: \n\n* **Transfer function**: H(z) = 1 / (z^2 + 2z + 3)\n\n* **Equivalent**: sys.bode()\n\n', 'stemmed comments': ['discretetim', 'option', 'dlti', 'B', 'D', 'array', 'given', 'set', 'ndarray', 'function', 'number', 'sysbod', 'system', 'gain', 'den', 'If', 'return', 'mag', 'tupl', 'the', 'frequenc', 'instanc', 'H', 'transfer', 'paramet', 'chosen', 'everi', 'array_lik', 'radians/sampl', '2', 'dt', 'dB', 'z', 'w', 'point', 'num', 'pole', 'magnitud', 'phase', 'lti', '3', '4', 'interv', '[', '1', 'n', 'zero', 'deg', 'rad/time_unit', 'reason', 'influenc', 'describ', 'comput', ']', '/', 'give', '2z', 'int', 'element', 'data', 'space', 'interpret', 'valu', '=', 'includ', 'calcul', 'follow', 'C', 'versionad', 'logarithm', 'A', '1D', 'class', 'equival', 'bode', 'z^2']}"
205,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
206,"{'func name': 'khatri_rao', 'comments': 'Khatri-rao product\n\nA column-wise Kronecker product of two matrices\n\nParameters ---------- a:\n\n(n, k) array_like Input array b:\n\n(m, k) array_like Input array\n##### Returns\n* **c**: (n*m, k) ndarray\n    Khatri-rao product of `a` and `b`.\n\n* **The mathematical definition of the Khatri-Rao product is**: \n\n* **.. math**: \n\n* **which is the Kronecker product of every column of A and B, e.g.**: \n\n* **kron **: Kronecker product\n\n', 'stemmed comments': ['B', 'array', 'ndarray', 'c', 'mathemat', 'k', 'return', 'matric', 'the', 'khatrirao', 'two', 'paramet', 'everi', 'eg', 'column', 'kron', 'columnwis', 'n', 'definit', 'math', 'kroneck', 'input', 'product', 'A', 'array_lik', 'b']}"
207,"{'func name': '_ell', 'comments': 'A helper function for expm_2009.\n\nParameters ---------- A : linear operator A linear operator whose norm of power we care about. m : int The power of the linear operator\n##### Returns\n* **value **: int\n    A value related to a bound.\n\n', 'stemmed comments': ['bound', 'whose', 'function', 'linear', 'oper', 'paramet', 'norm', 'valu', 'return', 'power', 'A', 'care', 'the', 'expm_2009', 'helper', 'relat', 'int']}"
208,"{'func name': 'watershed_ift', 'comments': 'Apply watershed from markers using image foresting transform algorithm.\n\nParameters ---------- input : array_like Input. markers : array_like Markers are points within each watershed that form the beginning of the process. Negative markers are considered background markers which are processed after the other markers. structure : structure element, optional A structuring element defining the connectivity of the object can be provided. If None, an element is generated with a squared connectivity equal to one. output : ndarray, optional An output array can optionally be provided. The same shape as input.\n##### Returns\n* **watershed_ift **: ndarray\n    Output.  Same shape as `input`.\n\n* **.. [1] A.X. Falcao, J. Stolfi and R. de Alencar Lotufo, ""The image\n       foresting transform**: theory, algorithms, and applications"",\n       Pattern Analysis and Machine Intelligence, vol. 26, pp. 19-29, 2004.\n\n', 'stemmed comments': ['option', 'consid', 'ndarray', 'background', 'array', 'analysi', '2004', 'watersh', 'forest', 'process', 'object', 'If', 'output', 'defin', 'return', 'one', 'lotufo', '1929', 'the', 'squar', 'marker', 'paramet', 'provid', 'theori', 'pp', 'none', 'imag', '26', 'gener', 'point', 'transform', 'pattern', 'neg', 'alencar', 'machin', 'within', 'equal', 'applic', '[', '1', 'watershed_ift', ']', 'falcao', 'intellig', 'form', 'AX', 'R', 'element', 'shape', 'algorithm', 'An', 'J', 'input', 'stolfi', 'de', 'vol', 'appli', 'use', 'A', 'structur', 'begin', 'array_lik', 'same', 'connect']}"
209,"{'func name': 'mgc_plot', 'comments': 'Plot sim and MGC-plot\n\n\n', 'stemmed comments': ['plot', 'mgcplot', 'sim']}"
210,"{'func name': 'mgc_plot', 'comments': 'Plot sim and MGC-plot\n\n\n', 'stemmed comments': ['plot', 'mgcplot', 'sim']}"
211,"{'func name': 'mgc_plot', 'comments': 'Plot sim and MGC-plot\n\n\n', 'stemmed comments': ['plot', 'mgcplot', 'sim']}"
212,"{'func name': 'mgc_plot', 'comments': 'Plot sim and MGC-plot\n\n\n', 'stemmed comments': ['plot', 'mgcplot', 'sim']}"
213,"{'func name': '_minimize_trustregion_constr', 'comments': ""Minimize a scalar function subject to constraints.\n\nParameters ---------- gtol : float, optional Tolerance for termination by the norm of the Lagrangian gradient. The algorithm will terminate when both the infinity norm (i.e., max abs value) of the Lagrangian gradient and the constraint violation are smaller than ``gtol``. Default is 1e-8. xtol : float, optional Tolerance for termination by the change of the independent variable. The algorithm will terminate when ``tr_radius < xtol``, where ``tr_radius`` is the radius of the trust region used in the algorithm. Default is 1e-8. barrier_tol : float, optional Threshold on the barrier parameter for the algorithm termination. When inequality constraints are present, the algorithm will terminate only when the barrier parameter is less than `barrier_tol`. Default is 1e-8. sparse_jacobian : {bool, None}, optional Determines how to represent Jacobians of the constraints. If bool, then Jacobians of all the constraints will be converted to the corresponding format. If None (default), then Jacobians won't be converted, but the algorithm can proceed only if they all have the same format. initial_tr_radius: float, optional Initial trust radius. The trust radius gives the maximum distance between solution points in consecutive iterations. It reflects the trust the algorithm puts in the local approximation of the optimization problem. For an accurate local approximation the trust-region should be large and for an\n\napproximation valid only close to the current point it should be a small one. The trust radius is automatically updated throughout the optimization process, with ``initial_tr_radius`` being its initial value. Default is 1 (recommended in [1]_, p. 19). initial_constr_penalty : float, optional Initial constraints penalty parameter. The penalty parameter is used for balancing the requirements of decreasing the objective function and satisfying the constraints. It is used for defining the merit function: ``merit_function(x) = fun(x) + constr_penalty * constr_norm_l2(x)``, where ``constr_norm_l2(x)`` is the l2 norm of a vector containing all the constraints. The merit function is used for accepting or rejecting trial points and ``constr_penalty`` weights the two conflicting goals of reducing objective function and constraints. The penalty is automatically updated throughout the optimization\n\nprocess, with ``initial_constr_penalty`` being its\n\ninitial value. Default is 1 (recommended in [1]_, p 19). initial_barrier_parameter, initial_barrier_tolerance: float, optional Initial barrier parameter and initial tolerance for the barrier subproblem. Both are used only when inequality constraints are present. For dealing with optimization problems ``min_x f(x)`` subject to inequality constraints ``c(x) <= 0`` the algorithm introduces slack variables, solving the problem ``min_(x,s) f(x) + barrier_parameter*sum(ln(s))`` subject to the equality constraints\n\n``c(x) + s = 0`` instead of the original problem. This subproblem is solved for decreasing values of ``barrier_parameter`` and with decreasing tolerances for the termination, starting with ``initial_barrier_parameter`` for the barrier parameter and ``initial_barrier_tolerance`` for the barrier tolerance. Default is 0.1 for both values (recommended in [1]_ p. 19). Also note that ``barrier_parameter`` and ``barrier_tolerance`` are updated with the same prefactor. factorization_method : string or None, optional Method to factorize the Jacobian of the constraints. Use None (default) for the auto selection or one of:\n\n- 'NormalEquation' (requires scikit-sparse)\n\n- 'AugmentedSystem'\n\n- 'QRFactorization'\n\n- 'SVDFactorization'\n\nThe methods 'NormalEquation' and 'AugmentedSystem' can be used only with sparse constraints. The projections required by the algorithm will be computed using, respectively, the the normal equation\n\nand the augmented system approaches explained in [1]_. 'NormalEquation' computes the Cholesky factorization of ``A A.T`` and 'AugmentedSystem' performs the LU factorization of an augmented system. They usually provide similar results. 'AugmentedSystem' is used by default for sparse matrices.\n\nThe methods 'QRFactorization' and 'SVDFactorization' can be used only with dense constraints. They compute the required projections using, respectively, QR and SVD factorizations. The 'SVDFactorization' method can cope with Jacobian matrices with deficient row rank and will be used whenever other factorization methods fail (which may imply the conversion of sparse matrices to a dense format when required). By default, 'QRFactorization' is used for dense matrices. finite_diff_rel_step : None or array_like, optional Relative step size for the finite difference approximation. maxiter : int, optional Maximum number of algorithm iterations. Default is 1000. verbose : {0, 1, 2}, optional Level of algorithm's verbosity:\n\n* 0 (default) : work silently. * 1 : display a termination report. * 2 : display progress during iterations. * 3 : display progress during iterations (more complete report).\n\ndisp : bool, optional If True (default), then `verbose` will be set to 1 if it was 0.\n##### Returns\n* **`OptimizeResult` with the fields documented below. Note the following**: 1. All values corresponding to the constraints are ordered as they\n       were passed to the solver. And values corresponding to `bounds`\n       constraints are put *after* other constraints.\n    2. All numbers of function, Jacobian or Hessian evaluations correspond\n       to numbers of actual Python function calls. It means, for example,\n       that if a Jacobian is estimated by finite differences, then the\n       number of Jacobian evaluations will be zero and the number of\n       function evaluations will be incremented by all calls during the\n       finite difference estimation.\n\n* **x **: ndarray, shape (n,)\n    Solution found.\n\n* **optimality **: float\n    Infinity norm of the Lagrangian gradient at the solution.\n\n* **constr_violation **: float\n    Maximum constraint violation at the solution.\n\n* **fun **: float\n    Objective function at the solution.\n\n* **grad **: ndarray, shape (n,)\n    Gradient of the objective function at the solution.\n\n* **lagrangian_grad **: ndarray, shape (n,)\n    Gradient of the Lagrangian function at the solution.\n\n* **nit **: int\n    Total number of iterations.\n\n* **nfev **: integer\n    Number of the objective function evaluations.\n\n* **njev **: integer\n    Number of the objective function gradient evaluations.\n\n* **nhev **: integer\n    Number of the objective function Hessian evaluations.\n\n* **cg_niter **: int\n    Total number of the conjugate gradient method iterations.\n\n* **method **: {'equality_constrained_sqp', 'tr_interior_point'}\n    Optimization method used.\n\n* **constr **: list of ndarray\n    List of constraint values at the solution.\n\n* **jac **: list of {ndarray, sparse matrix}\n    List of the Jacobian matrices of the constraints at the solution.\n\n* **v **: list of ndarray\n    List of the Lagrange multipliers for the constraints at the solution.\n    For an inequality constraint a positive multiplier means that the upper\n    bound is active, a negative multiplier means that the lower bound is\n    active and if a multiplier is zero it means the constraint is not\n    active.\n\n* **constr_nfev **: list of int\n    Number of constraint evaluations for each of the constraints.\n\n* **constr_njev **: list of int\n    Number of Jacobian matrix evaluations for each of the constraints.\n\n* **constr_nhev **: list of int\n    Number of Hessian evaluations for each of the constraints.\n\n* **tr_radius **: float\n    Radius of the trust region at the last iteration.\n\n* **constr_penalty **: float\n    Penalty parameter at the last iteration, see `initial_constr_penalty`.\n\n* **barrier_tolerance **: float\n    Tolerance for the barrier subproblem at the last iteration.\n    Only for problems with inequality constraints.\n\n* **barrier_parameter **: float\n    Barrier parameter at the last iteration. Only for problems\n    with inequality constraints.\n\n* **execution_time **: float\n    Total execution time.\n\n* **message **: str\n    Termination message.\n\n* **status **: {0, 1, 2, 3}\n    Termination status\n\n* **cg_stop_cond **: int\n    Reason for CG subproblem termination at the last iteration\n\n"", 'stemmed comments': ['bound', 'default', 'rank', 'function', 'constr_nhev', 'number', 'initial_tr_radiu', 'string', 'call', 'augment', 'nt', 'process', 'variabl', 'put', 'merit_funct', 'defin', 'ln', 'verbos', 'impli', 'requir', 'sum', 'LU', 'It', 'paramet', 'activ', 'none', 'jacobian', 'for', 'lagrangian', '2', 'spars', 'point', 'By', 'augmentedsystem', 'balanc', 'approach', 'close', 'minim', 'lower', 'p', 'constr_norm_l2', 'str', 'n', 'tr_radiu', 'cg_stop_cond', 'chang', 'subject', 'wo', 'rel', 'weight', 'normalequ', 'differ', '{', 'consecut', 'int', '19', 'shape', 'svd', 'region', 'instead', 'auto', 'messag', 'norm', '=', 'level', 'finit', 'total', 'updat', 'lagrangian_grad', 'min_', 'max', 'integ', 'constr_viol', 'hessian', 'njev', 'initi', 'violat', 'decreas', 'distanc', 'mean', 'order', 'barrier', 'thi', 'threshold', 'factorization_method', 'and', 'barrier_toler', 'object', 'constr', 'progress', 'constr_penalti', 'format', 'row', 'note', 'defici', 'exampl', 'float', 'finite_diff_rel_step', 'provid', 'grad', '}', 'array_lik', 'constr_nfev', 'evalu', 'choleski', 'cope', '3', 'goal', 'document', 'work', 'constraint', 'optim', 'nfev', 'nhev', 'also', 'throughout', 'execut', 'display', 'l2', 'x', 'valu', 'vector', '0', 'pass', 'reflect', 'larg', 'local', 'trust', 'toler', 'fun', 'A', 'python', 'min_x', 'report', 'option', 'solver', 'start', 'accur', 'merit', 'ndarray', 'gtol', 'repres', 'initial_barrier_toler', 'recommend', 'scalar', 'If', 'proceed', 'optimizeresult', 'nit', 'one', 'matric', 'ab', 'method', 'increment', 'svdfactor', 'when', 'valid', 'whenev', 's', 'less', 'determin', 'cg_niter', 'solut', 'accept', '1e8', 'convers', 'inequ', 'qrfactor', 'maximum', 'origin', 'upper', 'neg', 'silent', '01', 'execution_tim', 'time', 'present', '1000', 'dens', 'termin', 'zero', 'smaller', 'lagrang', 'reason', 'CG', 'radiu', 'comput', 'they', 'give', 'maxit', 'deal', 'f', 'satisfi', 'factor', 'complet', 'may', 'size', 'found', 'use', 'gradient', 'subproblem', 'sparse_jacobian', 'initial_barrier_paramet', 'usual', 'similar', 'set', 'equat', 'onli', 'reduc', 'c', 'normal', 'correspond', 'system', 'bool', 'disp', 'perform', 'small', 'convert', 'initial_constr_penalti', 'return', 'step', 'statu', 'the', 'barrier_tol', 'approxim', 'two', 'respect', 'result', 'independ', 'true', 'actual', 'fail', 'introduc', 'conjug', 'equality_constrained_sqp', 'scikitspars', 'contain', 'xtol', 'explain', 'equal', 'list', 'conflict', '[', '1', 'all', 'last', 'v', 'constr_njev', 'penalti', 'reject', 'ie', 'trustregion', ']', 'trial', 'project', 'automat', 'barrier_paramet', 'current', 'estim', 'QR', 'multipli', 'algorithm', 'prefactor', 'field', 'posit', '_', 'slack', 'see', 'jac', 'infin', 'follow', 'tr_interior_point', 'both', '<', 'iter', 'select', 'AT', 'matrix', 'solv', 'problem']}"
214,"{'func name': 'fixed_point', 'comments': 'Find a fixed point of the function.\n\nGiven a function of one or more variables and a starting point, find a fixed point of the function: i.e., where ``func(x0) == x0``.\n\nParameters ---------- func : function Function to evaluate. x0 : array_like Fixed point of function. args : tuple, optional Extra arguments to `func`. xtol : float, optional Convergence tolerance, defaults to 1e-08. maxiter : int, optional Maximum number of iterations, defaults to 500. method : {""del2"", ""iteration""}, optional Method of finding the fixed-point, defaults to ""del2"", which uses Steffensen\'s Method with Aitken\'s ``Del^2`` convergence acceleration [1]_. The ""iteration"" method simply iterates the function until convergence is detected, without attempting to accelerate the convergence.\n\nReferences ---------- .. [1] Burden, Faires, ""Numerical Analysis"", 5th edition, pg. 80\n\nExamples -------- >>> from scipy import optimize >>> def func(x, c1, c2): ...\n\n\n\nreturn np.sqrt(c1/(x+c2)) >>> c1 = np.array([10,12.]) >>> c2 = np.array([3, 5.]) >>> optimize.fixed_point(func, [1.2, 1.3], args=(c1,c2)) array([ 1.4920333 ,\n\n1.37228132])\n', 'stemmed comments': ['fix', 'default', '>', 'function', 'func', '5th', 'number', 'variabl', 'fair', 'paramet', 'point', 'c1', 'int', '{', 'edit', 'xc2', '=', '137228132', 'argument', 'simpli', 'given', '80', 'acceler', 'find', '1e08', 'exampl', 'float', '}', 'evalu', 'x0', '3', 'optim', 'x', 'numer', 'toler', 'detect', 'import', 'refer', 'option', 'fixedpoint', 'start', 'scipi', 'array', '1012', 'c1/', 'one', 'tupl', 'method', '==', 's', 'pg', '5', 'args=', 'extra', '14920333', 'maximum', 'del2', 'c2', 'converg', 'maxit', 'without', 'nparray', '500', 'use', '13', 'npsqrt', 'steffensen', 'analysi', 'del^2', 'return', 'optimizefixed_point', 'the', 'aitken', 'attempt', 'xtol', 'def', '[', '1', 'burden', '12', 'arg', 'ie', ']', '_', 'iter', 'array_lik']}"
215,"{'func name': 'minres', 'comments': 'Use MINimum RESidual iteration to solve Ax=b\n\nMINRES minimizes norm(A*x\n\n- b) for a real symmetric matrix A.\n\nUnlike the Conjugate Gradient method, A can be indefinite or singular.\n\nIf shift != 0 then the method solves (A\n\n- shift*I)x = b\n\nParameters ---------- A : {sparse matrix, dense matrix, LinearOperator} The real symmetric N-by-N matrix of the linear system Alternatively, ``A`` can be a linear operator which can produce ``Ax`` using, e.g., ``scipy.sparse.linalg.LinearOperator``. b : {array, matrix} Right hand side of the linear system. Has shape (N,) or (N,1).\n##### Returns\n* **x **: {array, matrix}\n    The converged solution.\n\n* **info **: integer\n    Provides convergence information\n\n* **x0  **: {array, matrix}\n    Starting guess for the solution.\n\n* **tol **: float\n    Tolerance to achieve. The algorithm terminates when the relative\n    residual is below `tol`.\n\n* **maxiter **: integer\n    Maximum number of iterations.  Iteration will stop after maxiter\n    steps even if the specified tolerance has not been achieved.\n\n* **M **: {sparse matrix, dense matrix, LinearOperator}\n    Preconditioner for A.  The preconditioner should approximate the\n    inverse of A.  Effective preconditioning dramatically improves the\n    rate of convergence, which implies that fewer iterations are needed\n    to reach a given error tolerance.\n\n* **callback **: function\n    User-supplied function to call after each iteration.  It is called\n    as callback(xk), where xk is the current solution vector.\n\n* **Solution of sparse indefinite systems of linear equations,\n    C. C. Paige and M. A. Saunders (1975),\n    SIAM J. Numer. Anal. 12(4), pp. 617-629.\n    https**: //web.stanford.edu/group/SOL/software/minres/\n\n* **This file is a translation of the following MATLAB implementation**: https\n\n', 'stemmed comments': ['N', 'function', 'number', 'call', 'impli', 'translat', 'linear', 'oper', 'It', 'paramet', 'nbyn', 'eg', 'xk', 'spars', 'residu', 'minim', 'ha', 'achiev', 'anal', 'rel', '{', 'shape', 'norm', '=', 'ax=b', 'I', 'integ', 'saunder', 'side', 'altern', 'given', 'linearoper', 'thi', 'scipysparselinalglinearoper', 'stop', 'float', 'invers', 'provid', 'file', '}', 'paig', '!', 'x0', 'hand', '617629', 'even', 'error', 'info', 'x', 'guess', 'J', '0', 'vector', 'implement', 'numer', 'A', 'toler', 'tol', 'start', 'array', 'effect', 'rate', 'If', 'real', 'reach', 'http', 'method', 'solut', 'matlab', '//webstanfordedu/group/sol/software/minres/', 'maximum', '4', 'dens', 'Ax', 'termin', 'converg', 'callback', 'maxit', 'N1', '1975', 'siam', 'fewer', 'produc', 'inform', 'C', 'use', 'b', 'gradient', 'singular', 'equat', 'need', 'system', 'unlik', 'symmetr', 'right', 'return', 'step', 'M', 'minimum', 'the', 'approxim', 'pp', 'indefinit', 'usersuppli', 'precondit', 'precondition', 'dramat', 'conjug', 'improv', 'specifi', '12', 'shift', 'current', 'minr', 'algorithm', 'follow', 'matrix', 'iter', 'solv']}"
216,"{'func name': 'whosmat', 'comments': 'List variables inside a MATLAB file.\n\nParameters ---------- %(file_arg)s %(append_arg)s %(load_args)s %(struct_arg)s\n##### Returns\n* **variables **: list of tuples\n    A list of tuples, where each tuple holds the matrix name (a string),\n    its shape (tuple of ints), and its data class (a string).\n    Possible data classes are\n\n* **.. versionadded**: \n\n', 'stemmed comments': ['string', 'variabl', 'return', 'tupl', 'file', 'paramet', 'file_arg', 'matlab', 'name', 'append_arg', 'list', 'struct_arg', 'load_arg', 'insid', 'int', 'data', 'shape', 'possibl', 'versionad', 'A', 'matrix', 'class', 'hold', '%']}"
217,"{'func name': 'arr_to_2d', 'comments': ""Make ``arr`` exactly two dimensional\n\nIf `arr` has more than 2 dimensions, raise a ValueError\n\nParameters ---------- arr : array oned_as : {'row', 'column'}, optional Whether to reshape 1-D vectors as row vectors or column vectors. See documentation for ``matdims`` for more detail\n##### Returns\n* **arr2d **: array\n   2-D version of the array\n\n"", 'stemmed comments': ['option', 'array', 'If', 'return', 'reshap', 'row', 'rais', 'two', 'paramet', '}', '2', 'version', 'arr2d', 'column', 'valueerror', 'arr', 'document', 'oned_a', 'whether', '2D', '{', 'exactli', 'vector', 'see', 'make', 'dimens', 'detail', 'dimension', '1D', 'matdim']}"
218,"{'func name': '_convert_codecs', 'comments': ""Convert codec template mapping to byte order\n\nSet codecs not on this system to None\n\nParameters ---------- template : mapping key, value are respectively codec name, and root name for codec (without byte order suffix) byte_order : {'<', '>'} code for little or big endian\n##### Returns\n* **codecs **: dict\n   key, value are name, codec (as in .encode(codec))\n\n"", 'stemmed comments': ['key', 'set', '>', 'system', 'order', 'convert', 'return', 'map', 'littl', 'root', 'respect', 'endian', 'dict', 'paramet', 'big', '}', 'none', 'codec', 'code', 'name', 'byte_ord', 'suffix', 'encod', '{', 'without', 'valu', 'byte', 'templat', '<']}"
219,"{'func name': 'to_writeable', 'comments': 'Convert input object ``source`` to something we can write\n\nParameters ---------- source : object\n##### Returns\n* **arr **: None or ndarray or EmptyStructMarker\n    If `source` cannot be converted to something we can write to a matfile,\n    return None.  If `source` is equivalent to an empty dictionary, return\n    ``EmptyStructMarker``.  Otherwise return `source` converted to an\n    ndarray with contents for writing to matfile.\n\n', 'stemmed comments': ['ndarray', 'someth', 'If', 'object', 'convert', 'return', 'dictionari', 'paramet', 'none', 'arr', 'content', 'sourc', 'emptystructmark', 'otherwis', 'empti', 'write', 'input', 'matfil', 'equival']}"
220,"{'func name': 'arr_to_chars', 'comments': 'Convert string array to char array\n\n\n', 'stemmed comments': ['array', 'convert', 'string', 'char']}"
221,"{'func name': '_datacopied', 'comments': 'Strict check for `arr` not sharing any data with `original`, under the assumption that arr = asarray(original)\n\n\n', 'stemmed comments': ['assumpt', 'strict', '=', 'asarray', 'check', 'share', 'origin', 'data', 'arr']}"
222,"{'func name': '_is_fromfile_compatible', 'comments': ""Check whether `stream` is compatible with numpy.fromfile.\n\nPassing a gzipped file object to ``fromfile/fromstring`` doesn't work with Python 3.\n"", 'stemmed comments': ['stream', '3', 'file', 'fromfile/fromstr', 'work', 'pass', 'whether', 'gzip', 'nt', 'numpyfromfil', 'object', 'check', 'compat', 'python']}"
223,"{'func name': '__ua_function__', 'comments': '', 'stemmed comments': []}"
224,"{'func name': '_quad_est', 'comments': '', 'stemmed comments': []}"
225,"{'func name': 'circstd', 'comments': ""Compute the circular standard deviation for samples assumed to be in the range [low to high].\n\nParameters ---------- samples : array_like Input array. high : float or int, optional High boundary for circular standard deviation range. Default is ``2*pi``. low : float or int, optional Low boundary for circular standard deviation range.\n\nDefault is 0. axis : int, optional Axis along which standard deviations are computed.\n\nThe default is to compute the standard deviation of the flattened array. nan_policy : {'propagate', 'raise', 'omit'}, optional Defines how to handle when input contains nan. 'propagate' returns nan, 'raise' throws an error, 'omit' performs the calculations ignoring nan values. Default is 'propagate'.\n##### Returns\n* **circstd **: float\n    Circular standard deviation.\n\n"", 'stemmed comments': ['option', 'default', 'nan', 'array', 'throw', 'along', 'high', 'perform', 'standard', 'defin', 'sampl', 'low', 'return', 'the', 'rais', 'propag', 'assum', 'float', 'paramet', 'ignor', '}', '2', 'handl', 'contain', '[', 'error', 'flatten', 'circular', 'comput', ']', 'axi', 'int', '{', 'omit', 'circstd', 'valu', '0', 'boundari', 'rang', 'input', 'pi', 'deviat', 'calcul', 'nan_polici', 'array_lik']}"
226,"{'func name': 'distance_transform_edt', 'comments': 'Exact Euclidean distance transform.\n\nIn addition to the distance transform, the feature transform can be calculated. In this case the index of the closest background element is returned along the first axis of the result.\n\nParameters ---------- input : array_like Input data to transform. Can be any type but will be converted into binary: 1 wherever input equates to True, 0 elsewhere. sampling : float or int, or sequence of same, optional Spacing of elements along each dimension. If a sequence, must be of length equal to the input rank; if a single number, this is used for all axes. If not specified, a grid spacing of unity is implied. return_distances : bool, optional Whether to return distance matrix. At least one of return_distances/return_indices must be True. Default is True. return_indices : bool, optional Whether to return indices matrix. Default is False. distances : ndarray, optional Used for output of distance array, must be of type float64. indices : ndarray, optional Used for output of indices, must be of type int32.\n##### Returns\n* **distance_transform_edt **: ndarray or list of ndarrays\n    Either distance matrix, index matrix, or a list of the two,\n    depending on `return_x` flags and `distance` and `indices`\n    input parameters.\n\n* **distance**: \n\n* **With a sampling of 2 units along x, 1 along y**: \n\n* **Asking for indices as well**: \n\n* **With arrays provided for inplace outputs**: \n\n', 'stemmed comments': ['featur', 'default', 'rank', 'background', 'number', 'output', 'impli', 'paramet', '2', 'type', 'must', 'exact', 'ask', 'int', 'element', 'return_dist', 'In', 'wherev', 'space', 'index', 'At', 'distanc', 'inplac', 'float', 'provid', 'first', 'transform', 'depend', 'whether', 'return_x', 'x', '0', 'input', 'addit', 'singl', 'either', 'option', 'ndarray', 'array', 'along', 'If', 'one', 'axe', 'least', 'can', 'return_distances/return_indic', 'fals', 'elsewher', 'unit', 'case', 'with', 'closest', 'uniti', 'well', 'axi', 'euclidean', 'data', 'return_indic', 'binari', 'distance_transform_edt', 'use', ';', 'equat', 'bool', 'convert', 'return', 'sampl', 'flag', 'int32', 'two', 'result', 'true', 'float64', 'length', 'list', 'equal', 'specifi', 'indic', '1', 'sequenc', 'dimens', 'calcul', 'matrix', 'array_lik', 'grid']}"
227,"{'func name': 'zpkfreqz', 'comments': 'Frequency response of a filter in zpk format, using mpmath.\n\nThis is the same calculation as scipy.signal.freqz, but the input is in zpk format, the calculation is performed using mpath, and the results are returned in lists instead of NumPy arrays.\n', 'stemmed comments': ['array', 'mpath', 'thi', 'perform', 'return', 'format', 'respons', 'frequenc', 'mpmath', 'result', 'list', 'scipysignalfreqz', 'filter', 'numpi', 'instead', 'input', 'zpk', 'calcul', 'use']}"
228,"{'func name': 'brunnermunzel', 'comments': ""Computes the Brunner-Munzel test on samples x and y\n\nMissing values in `x` and/or `y` are discarded.\n\nParameters ---------- x, y : array_like Array of samples, should be one-dimensional. alternative :\n\n'less', 'two-sided', or 'greater', optional Whether to get the p-value for the one-sided hypothesis ('less' or 'greater') or for the two-sided hypothesis ('two-sided'). Defaults value is 'two-sided' . distribution: 't' or 'normal', optional Whether to get the p-value by t-distribution or by standard normal distribution. Defaults value is 't' .\n##### Returns\n* **statistic **: float\n    The Brunner-Munzer W statistic.\n\n* **pvalue **: float\n    p-value assuming an t distribution. One-sided or\n    two-sided, depending on the choice of `alternative` and `distribution`.\n\n* **mannwhitneyu **: Mann-Whitney rank test on two samples.\n\n"", 'stemmed comments': ['option', 'default', 't', 'array', 'altern', 'rank', 'normal', 'greater', 'pvalu', 'statist', 'W', 'mannwhitneyu', 'twosid', 'hypothesi', 'standard', 'miss', 'return', 'sampl', 'the', 'brunnermunz', 'brunnermunzel', 'assum', 'two', 'less', 'float', 'paramet', 'onesid', 'tdistribut', 'get', 'and/or', 'test', 'onedimension', 'depend', 'whether', 'comput', 'x', 'discard', 'valu', 'distribut', 'mannwhitney', 'array_lik', 'choic']}"
229,"{'func name': 'rsh', 'comments': ""Evaluates Rosenblatt's shifted histogram estimators for each data point.\n\nRosenblatt's estimator is a centered finite-difference approximation to the derivative of the empirical cumulative distribution function.\n\nParameters ---------- data : sequence Input data, should be 1-D. Masked values are ignored. points : sequence or None, optional Sequence of points where to evaluate Rosenblatt shifted histogram. If None, use the data.\n"", 'stemmed comments': ['option', 'empir', 'function', 'If', 'cumul', 'approxim', 's', 'paramet', 'ignor', 'mask', 'none', 'evalu', 'point', 'rosenblatt', 'histogram', 'deriv', 'shift', 'center', 'estim', 'sequenc', 'finitediffer', 'data', 'valu', 'distribut', 'input', 'use', '1D']}"
230,"{'func name': 'griddata', 'comments': ""Interpolate unstructured D-D data.\n\nParameters ---------- points : 2-D ndarray of floats with shape (n, D), or length D tuple of 1-D ndarrays with shape (n,). Data point coordinates. values : ndarray of float or complex, shape (n,) Data values. xi : 2-D ndarray of floats with shape (m, D), or length D tuple of ndarrays broadcastable to the same shape. Points at which to interpolate data. method : {'linear', 'nearest', 'cubic'}, optional Method of interpolation. One of\n\n``nearest`` return the value at the data point closest to the point of interpolation. See `NearestNDInterpolator` for more details.\n\n``linear`` tessellate the input point set to N-D simplices, and interpolate linearly on each simplex. See `LinearNDInterpolator` for more details.\n\n``cubic`` (1-D) return the value determined from a cubic spline.\n\n``cubic`` (2-D) return the value determined from a piecewise cubic, continuously differentiable (C1), and approximately curvature-minimizing polynomial surface. See `CloughTocher2DInterpolator` for more details. fill_value : float, optional Value used to fill in for requested points outside of the convex hull of the input points. If not provided, then the default is ``nan``. This option has no effect for the 'nearest' method. rescale : bool, optional Rescale points to unit cube before performing interpolation. This is useful if some of the input dimensions have incommensurable units and differ by many orders of magnitude.\n\n.. versionadded:: 0.14.0\n##### Returns\n* **.. versionadded**: \n\n* **>>> def func(x, y)**: \n\n* **>>> grid_x, grid_y = np.mgrid[0**: 1\n\n* **but we only know its values at 1000 data points**: \n\n* **>>> values = func(points[**: ,0], points[\n\n* **interpolation methods**: \n\n* **cubic interpolant gives the best results**: \n\n* **>>> plt.plot(points[**: ,0], points[\n\n"", 'stemmed comments': ['simplic', 'default', '>', 'func', 'unstructur', 'incommensur', 'linear', 'paramet', 'differenti', 'cloughtocher2dinterpol', 'point', 'spline', 'magnitud', 'n', 'request', 'know', 'differ', 'convex', '{', 'surfac', 'shape', 'grid_i', 'coordin', 'fill', '=', 'D', 'curvatureminim', 'order', 'thi', 'grid_x', 'broadcast', 'best', 'cube', 'DD', 'float', 'provid', '}', 'nearest', 'xi', 'npmgrid', 'hull', 'x', 'valu', '0', 'input', 'pltplot', 'linearndinterpol', 'detail', 'C1', 'option', 'ND', 'nan', 'ndarray', 'effect', 'If', 'one', 'tupl', 'method', 'determin', 'cubic', 'unit', 'closest', '1000', 'give', '2D', 'data', 'rescal', 'polynomi', 'use', 'complex', 'mani', 'interpol', 'set', 'tessel', 'simplex', 'nearestndinterpol', 'fill_valu', 'bool', 'perform', '0140', 'return', 'approxim', 'result', 'linearli', 'outsid', 'length', 'def', 'continu', '[', '1', ']', 'piecewis', 'see', 'dimens', 'versionad', '1D']}"
231,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
232,"{'func name': '_nonlin_wrapper', 'comments': 'Construct a solver wrapper with given name and Jacobian approx.\n\nIt inspects the keyword arguments of ``jac.__init__``, and allows to use the same arguments in the wrapper function, in addition to the keyword arguments of `nonlin_solve`\n', 'stemmed comments': ['solver', 'approx', 'given', 'jac__init__', 'It', 'function', 'wrapper', 'keyword', 'jacobian', 'inspect', 'allow', 'addit', 'use', 'nonlin_solv', 'construct', 'name', 'argument']}"
233,"{'func name': 'odeint', 'comments': ""Integrate a system of ordinary differential equations.\n\n.. note:: For new code, use `scipy.integrate.solve_ivp` to solve a differential equation.\n\nSolve a system of ordinary differential equations using lsoda from the FORTRAN library odepack.\n\nSolves the initial value problem for stiff or non-stiff systems of first order ode-s::\n\ndy/dt = func(y, t, ...)\n\n[or func(t, y, ...)]\n\nwhere y can be a vector.\n\n.. note:: By default, the required order of the first two arguments of `func` are in the opposite order of the arguments in the system definition function used by the `scipy.integrate.ode` class and the function `scipy.integrate.solve_ivp`. To use a function with the signature ``func(t, y, ...)``, the argument `tfirst` must be set to ``True``.\n\nParameters ---------- func : callable(y, t, ...) or callable(t, y, ...) Computes the derivative of y at t. If the signature is ``callable(t, y, ...)``, then the argument `tfirst` must be set ``True``. y0 : array Initial condition on y (can be a vector). t : array A sequence of time points for which to solve for y. The initial value point should be the first element of this sequence. This sequence must be monotonically increasing or monotonically decreasing; repeated values are allowed. args : tuple, optional Extra arguments to pass to function. Dfun : callable(y, t, ...) or callable(t, y, ...) Gradient (Jacobian) of `func`. If the signature is ``callable(t, y, ...)``, then the argument `tfirst` must be set ``True``. col_deriv : bool, optional True if `Dfun` defines derivatives down columns (faster), otherwise `Dfun` should define derivatives across rows. full_output : bool, optional True if to return a dictionary of optional outputs as the second output printmessg : bool, optional Whether to print the convergence message tfirst: bool, optional If True, the first two arguments of `func` (and `Dfun`, if given) must ``t, y`` instead of the default ``y, t``.\n\n.. versionadded:: 1.1.0\n##### Returns\n* **y **: array, shape (len(t), len(y0))\n    Array containing the value of y for each desired time in t,\n    with the initial value `y0` in the first row.\n\n* **infodict **: dict, only returned if full_output == True\n    Dictionary containing additional output information\n    =======  ============================================================\n    key      meaning\n    =======  ============================================================\n    'hu'     vector of step sizes successfully used for each time step\n    'tcur'   vector with the value of t reached for each time step\n             (will always be at least as large as the input times)\n    'tolsf'  vector of tolerance scale factors, greater than 1.0,\n             computed when a request for too much accuracy was detected\n    'tsw'    value of t at the time of the last method switch\n             (given for each time step)\n    'nst'    cumulative number of time steps\n    'nfe'    cumulative number of function evaluations for each time step\n    'nje'    cumulative number of jacobian evaluations for each time step\n    'nqu'    a vector of method orders for each successful step\n    'imxer'  index of the component of largest magnitude in the\n             weighted local error vector (e / ewt) on an error return, -1\n             otherwise\n    'lenrw'  the length of the double work array required\n    'leniw'  the length of integer work array required\n    'mused'  a vector of method indicators for each successful time step\n\n* **ml, mu **: int, optional\n    If either of these are not None or non-negative, then the\n    Jacobian is assumed to be banded. These give the number of\n    lower and upper non-zero diagonals in this banded matrix.\n    For the banded case, `Dfun` should return a matrix whose\n    rows contain the non-zero bands (starting with the lowest diagonal).\n    Thus, the return matrix `jac` from `Dfun` should have shape\n    ``(ml + mu + 1, len(y0))`` when ``ml >=0`` or ``mu >=0``.\n    The data in `jac` must be stored such that ``jac[i - j + mu, j]``\n    holds the derivative of the `i`th equation with respect to the `j`th\n    state variable.  If `col_deriv` is True, the transpose of this\n    `jac` must be returned.\n\n* **rtol, atol **: float, optional\n    The input parameters `rtol` and `atol` determine the error\n    control performed by the solver.  The solver will control the\n    vector, e, of estimated local errors in y, according to an\n    inequality of the form ``max-norm of (e / ewt) <= 1``,\n    where ewt is a vector of positive error weights computed as\n    ``ewt = rtol * abs(y) + atol``.\n    rtol and atol can be either vectors the same length as y or scalars.\n    Defaults to 1.49012e-8.\n\n* **tcrit **: ndarray, optional\n    Vector of critical points (e.g., singularities) where integration\n    care should be taken.\n\n* **h0 **: float, (0\n\n* **hmax **: float, (0\n\n* **hmin **: float, (0\n\n* **ixpr **: bool, optional\n    Whether to generate extra printing at method switches.\n\n* **mxstep **: int, (0\n\n* **mxhnil **: int, (0\n\n* **mxordn **: int, (0\n\n* **mxords **: int, (0\n\n* **solve_ivp **: solve an initial value problem for a system of ODEs\n\n* **ode **: a more object-oriented integrator based on VODE\n\n* **quad **: for finding the area under a curve\n\n* **pendulum acted on by gravity with friction can be written**: \n\n* **velocity ``omega(t) = theta'(t)``, we obtain the system**: \n\n* **in Python as**: \n\n* **>>> def pend(y, t, b, c)**: \n\n* **We assume the constants are `b` = 0.25 and `c` = 5.0**: \n\n* **0 <= `t` <= 10.  So our array of times is**: \n\n* **>>> plt.plot(t, sol[**: , 1], 'g', label='omega(t)')\n\n"", 'stemmed comments': ['default', '>', 'dfun', 'function', 'func', 'condit', 'greater', 'number', 'j', 'leniw', 'output', 'thu', 'variabl', 'defin', 'constant', 'requir', 'assum', 'nonstiff', 'paramet', 'desir', 'differenti', '149012e8', 'none', 'jacobian', 'for', 'eg', 'written', 'pendulum', 'point', 'By', 'magnitud', 'nst', 'nqu', 'hmin', 'lower', 'must', 'request', 'definit', '/', 'last', 'weight', 'int', 'element', 'shape', 'mu', 'instead', 'To', 'messag', '=', 'y0', 'control', 'integ', 'print', 'vode', 'accuraci', 'index', 'argument', 'initi', 'given', 'decreas', 'nje', 'mean', 'order', 'thi', 'librari', 'scipyintegrateod', 'row', 'find', 'note', 'nonzero', 'rtol', 'float', 'first', 'curv', 'h0', 'evalu', 'gener', 'omega', 'col_deriv', 'objectori', 'printmessg', 'scale', 'lenrw', 'ordinari', 'callabl', 'work', 'theta', 'error', 'whether', 'allow', 'maxnorm', 'lowest', 'mxhnil', 'So', 'doubl', 'scipyintegratesolve_ivp', 'tsw', 'valu', 'vector', '0', 'friction', 'input', 'pltplot', 'pass', 'much', 'larg', 'local', 'ixpr', 'addit', 'compon', 'A', 'toler', 'detect', 'either', 'pend', 'python', 'ode', 'fortran', 'key', 'option', 'solver', 'start', 'array', '=======', 'ndarray', 'e', 'len', 'quad', 'We', 'infodict', 'scalar', 'If', 'transpos', 'reach', 'mxordn', 'nonneg', 'ab', 'tupl', 'method', '=0', 'tfirst', '==', 'dictionari', 'largest', 'determin', 'least', 'taken', 'extra', 'g', 'mxstep', 'code', 'inequ', 'case', 'column', 'hu', 'upper', 'signatur', 'time', 'store', 'area', 'tolsf', 'increas', 'converg', 'band', 'label=omega', 'ml', 'comput', 'deriv', 'success', 'critic', 'obtain', 'give', 'second', '50', 'data', 'tcur', '10', 'veloc', 'mxord', 'factor', 'inform', 'dy/dt', 'size', 'use', 'base', 'class', 'gradient', ';', 'hold', 'b', 'switch', 'singular', 'graviti', 'set', 'equat', 'stiff', 't', 'these', 'th', 'c', 'system', 'bool', 'perform', 'tcrit', 'return', 'step', 'cumul', 'the', 'diagon', 'monoton', 'atol', 'across', 'two', 'whose', 'respect', 'new', 'dict', 'true', 'accord', '025', 'muse', 'repeat', 'integr', 'contain', 'length', 'faster', 'indic', 'def', '[', '1', 'state', '110', 'arg', 'opposit', 'otherwis', ']', 'act', 'form', 'care', 'estim', 'sequenc', 'sol', 'ewt', 'posit', 'nfe', 'solve_ivp', '============================================================', 'alway', 'jac', 'hmax', 'versionad', 'odepack', 'matrix', '<', 'imxer', 'full_output', 'lsoda', 'solv', 'problem']}"
234,"{'func name': '_report_error', 'comments': 'Interprets the return code of the odr routine.\n\nParameters ---------- info : int The return code of the odr routine.\n##### Returns\n* **problems **: list(str)\n    A list of messages about why the odr() routine stopped.\n\n', 'stemmed comments': ['stop', 'list', 'interpret', 'str', 'messag', 'info', 'paramet', 'routin', 'A', 'code', 'return', 'the', 'int', 'odr', 'problem']}"
235,"{'func name': 'test_version', 'comments': 'Assert that expected OpenBLAS version is actually available via SciPy\n\n\n', 'stemmed comments': ['scipi', 'openbla', 'avail', 'version', 'actual', 'expect', 'via', 'assert']}"
236,"{'func name': 'plot_point', 'comments': '', 'stemmed comments': []}"
237,"{'func name': 'eggholder', 'comments': '', 'stemmed comments': []}"
238,"{'func name': 'random_spatial', 'comments': '', 'stemmed comments': []}"
239,"{'func name': 'klee_minty', 'comments': '', 'stemmed comments': []}"
240,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
241,"{'func name': 'sh_legendre', 'comments': 'Shifted Legendre polynomial.\n\nDefined as :math:`P^*_n(x) = P_n(2x\n\n- 1)` for :math:`P_n` the nth Legendre polynomial.\n\nParameters ---------- n : int Degree of the polynomial. monic : bool, optional If `True`, scale the leading coefficient to be 1. Default is `False`.\n##### Returns\n* **P **: orthopoly1d\n    Shifted Legendre polynomial.\n\n* **The polynomials **: math\n\n', 'stemmed comments': ['option', 'default', 'degre', 'legendr', 'bool', 'If', 'defin', 'coeffici', 'return', 'the', 'orthopoly1d', 'nth', 'paramet', 'true', 'fals', 'p_n', 'scale', '1', 'n', 'shift', 'P', 'math', 'int', 'x', 'monic', '_n', '=', 'polynomi', '2x', 'P^', 'lead']}"
242,"{'func name': 'write_release_and_log', 'comments': '', 'stemmed comments': []}"
243,"{'func name': 'barycentric_interpolate', 'comments': 'Convenience function for polynomial interpolation.\n\nConstructs a polynomial that passes through a given set of points, then evaluates the polynomial. For reasons of numerical stability, this function does not compute the coefficients of the polynomial.\n\nThis function uses a ""barycentric interpolation"" method that treats the problem as a special case of rational function interpolation. This algorithm is quite stable, numerically, but even in a world of exact computation, unless the `x` coordinates are chosen very carefully\n\n- Chebyshev zeros (e.g., cos(i*pi/n)) are a good choice\n\n- polynomial interpolation itself is a very ill-conditioned process due to the Runge phenomenon.\n\nParameters ---------- xi : array_like 1-D array of x coordinates of the points the polynomial should pass through yi : array_like The y coordinates of the points the polynomial should pass through. x : scalar or array_like Points to evaluate the interpolator at. axis : int, optional Axis in the yi array corresponding to the x-coordinate values.\n##### Returns\n* **y **: scalar or array_like\n    Interpolated values. Shape is determined by replacing\n    the interpolation axis in the original array with the shape of x.\n\n* **BarycentricInterpolator **: Bary centric interpolator\n\n* **We can interpolate 2D observed data using barycentric interpolation**: \n\n', 'stemmed comments': ['interpol', 'rung', 'set', 'world', 'array', 'given', 'function', 'pi/n', 'option', 'We', 'correspond', 'quit', 'thi', 'process', 'choic', 'scalar', 'replac', 'coeffici', 'return', 'chebyshev', 'method', 'the', 'barycentr', 'determin', 'paramet', 'chosen', 'barycentricinterpol', 'eg', 'for', 'evalu', 'point', 'good', 'observ', 'case', 'origin', 'xi', 'phenomenon', 'even', 'exact', 'zero', 'illcondit', 'yi', 'reason', 'comput', 'unless', 'axi', 'bari', 'care', 'construct', 'int', '2D', 'data', 'stabl', 'algorithm', 'shape', 'x', 'valu', 'conveni', 'ration', 'treat', 'coordin', 'special', 'pass', 'polynomi', 'numer', 'stabil', 'co', 'use', 'due', '1D', 'xcoordin', 'centric', 'array_lik', 'problem']}"
244,"{'func name': 'process_tex', 'comments': 'Fix autosummary LaTeX bug in Sphinx < 1.7.3 (cf https://github.com/sphinx-doc/sphinx/issues/4790)\n\n\n', 'stemmed comments': ['fix', 'cf', '//githubcom/sphinxdoc/sphinx/issues/4790', '173', 'autosummari', 'sphinx', 'bug', 'http', '<', 'latex']}"
245,"{'func name': 'projections', 'comments': 'Return three linear operators related with a given matrix A.\n\nParameters ---------- A : sparse matrix (or ndarray), shape (m, n) Matrix ``A`` used in the projection. method : string, optional Method used for compute the given linear operators. Should be one of:\n\n- \'NormalEquation\': The operators will be computed using the so-called normal equation approach explained in [1]_. In order to do so the Cholesky factorization of ``(A A.T)`` is computed. Exclusive for sparse matrices.\n\n- \'AugmentedSystem\': The operators will be computed using the so-called augmented system approach explained in [1]_. Exclusive for sparse matrices.\n\n- \'QRFactorization\': Compute projections using QR factorization. Exclusive for dense matrices.\n\n- \'SVDFactorization\': Compute projections using SVD factorization. Exclusive for dense matrices.\n\north_tol : float, optional Tolerance for iterative refinements. max_refin : int, optional Maximum number of iterative refinements. tol : float, optional Tolerance for singular values.\n##### Returns\n* **Z **: LinearOperator, shape (n, n)\n    Null-space operator. For a given vector ``x``,\n    the null space operator is equivalent to apply\n    a projection matrix ``P = I - A.T inv(A A.T) A``\n    to the vector. It can be shown that this is\n    equivalent to project ``x`` into the null space\n    of A.\n\n* **LS **: LinearOperator, shape (m, n)\n    Least-squares operator. For a given vector ``x``,\n    the least-squares operator is equivalent to apply a\n    pseudoinverse matrix ``pinv(A.T) = inv(A A.T) A``\n    to the vector. It can be shown that this vector\n    ``pinv(A.T) x`` is the least_square solution to\n    ``A.T y = x``.\n\n* **Y **: LinearOperator, shape (n, m)\n    Row-space operator. For a given vector ``x``,\n    the row-space operator is equivalent to apply a\n    projection matrix ``Q = A.T inv(A A.T)``\n    to the vector.  It can be shown that this\n    vector ``y = Q x``  the minimum norm solution\n    of ``A y = x``.\n\n* **.. [1] Gould, Nicholas IM, Mary E. Hribar, and Jorge Nocedal.\n    ""On the solution of equality constrained quadratic\n    programming problems arising in optimization.""\n    SIAM Journal on Scientific Computing 23.4 (2001)**: 1376-1395.\n\n', 'stemmed comments': ['least_squar', 'number', 'string', 'rowspac', 'augment', 'linear', 'oper', 'It', 'paramet', 'program', 'for', 'spars', '2001', 'exclus', 'augmentedsystem', 'approach', 'noced', 'orth_tol', 'n', 'normalequ', 'int', 'gould', 'shape', 'svd', 'In', '=', 'norm', 'I', 'Y', 'space', 'relat', 'null', 'given', 'order', 'linearoper', 'quadrat', 'Z', 'float', 'nichola', 'choleski', 'socal', 'LS', 'optim', 'E', 'P', 'jorg', 'On', 'x', 'valu', 'vector', 'pseudoinvers', 'Q', 'journal', 'A', 'toler', 'option', 'tol', 'ndarray', 'refin', '13761395', 'one', 'matric', 'method', 'svdfactor', 'IM', 'solut', 'leastsquar', 'mari', 'qrfactor', 'maximum', 'dens', 'comput', 'should', 'siam', 'nullspac', 'factor', 'shown', '234', 'constrain', 'use', 'three', 'scientif', 'singular', 'equat', 'normal', 'system', 'inv', 'return', 'the', 'minimum', 'max_refin', 'explain', 'equal', '[', '1', 'project', ']', 'pinv', 'aris', 'QR', 'hribar', '_', 'appli', 'matrix', 'iter', 'AT', 'equival', 'problem']}"
246,"{'func name': 'shift', 'comments': 'Shift periodic sequence x by a: y(u) = x(u+a).\n\nIf x_j and y_j are Fourier coefficients of periodic functions x and y, respectively, then::\n\ny_j = exp(j*a*2*pi/period*sqrt(-1)) * x_f\n\nParameters ---------- x : array_like The array to take the pseudo-derivative from. a : float Defines the parameters of the sinh/sinh pseudo-differential period : float, optional The period of the sequences x and y. Default period is ``2*pi``.\n', 'stemmed comments': ['period', 'option', 'default', 'array', 'function', 'j', 'If', 'coeffici', 'defin', 'the', 'fourier', 'respect', 'float', 'paramet', 'take', 'x_j', '2', 'sinh/sinh', 'sqrt', 'exp', '1', 'ua', 'pi/period', 'shift', 'sequenc', 'pseudoderiv', 'x', '=', 'u', 'pi', 'y_j', 'x_f', 'array_lik', 'pseudodifferenti']}"
247,"{'func name': 'projected_cg', 'comments': 'Solve EQP problem with projected CG method.\n\nSolve equality-constrained quadratic programming problem ``min 1/2 x.T H x + x.t c``\n\nsubject to ``A x + b = 0`` and, possibly, to trust region constraints ``||x|| < trust_radius`` and box constraints ``lb <= x <= ub``.\n\nParameters ---------- H : LinearOperator (or sparse matrix or ndarray), shape (n, n) Operator for computing ``H v``. c : array_like, shape (n,) Gradient of the quadratic objective function. Z : LinearOperator (or sparse matrix or ndarray), shape (n, n) Operator for projecting ``x`` into the null space of A. Y : LinearOperator,\n\nsparse matrix, ndarray, shape (n, m) Operator that, for a given a vector ``b``, compute smallest norm solution of ``A x + b = 0``. b : array_like, shape (m,) Right-hand side of the constraint equation. trust_radius : float, optional Trust radius to be considered. By default, uses ``trust_radius=inf``, which means no trust radius at all. lb : array_like, shape (n,), optional Lower bounds to each one of the components of ``x``. If ``lb[i] = -Inf`` the lower bound for the i-th component is just ignored (default). ub : array_like, shape (n, ), optional Upper bounds to each one of the components of ``x``. If ``ub[i] = Inf`` the upper bound for the i-th component is just ignored (default). tol : float, optional Tolerance used to interrupt the algorithm. max_iter : int, optional Maximum algorithm iterations. Where ``max_inter <= n-m``. By default, uses ``max_iter = n-m``. max_infeasible_iter : int, optional Maximum infeasible (regarding box constraints) iterations the algorithm is allowed to take. By default, uses ``max_infeasible_iter = n-m``. return_all : bool, optional When ``true``, return the list of all vectors through the iterations.\n##### Returns\n* **x **: array_like, shape (n,)\n    Solution of the EQP problem.\n\n* **info **: Dict\n    Dictionary containing the following\n\n* **.. [1] Gould, Nicholas IM, Mary E. Hribar, and Jorge Nocedal.\n       ""On the solution of equality constrained quadratic\n        programming problems arising in optimization.""\n        SIAM Journal on Scientific Computing 23.4 (2001)**: 1376-1395.\n\n', 'stemmed comments': ['bound', 'default', 'box', 'consid', 'function', 'iter', 'lb', 'ith', 'oper', 'program', 'paramet', 'ignor', 'spars', '2001', 'By', 'regard', 'noced', 'lower', 'n', 'subject', 'int', 'gould', 'shape', 'where', 'region', '=', 'norm', 'Y', 'side', 'space', 'trust_radius=inf', 'null', 'given', 'mean', 'linearoper', 'object', 'smallest', 'quadrat', 'Z', 'float', 'nichola', 'ub', 'max_infeasible_it', 'eqp', 'constraint', 'optim', 'allow', 'E', 'inf', 'jorg', 'On', 'min', 'info', 'x', '0', 'vector', 'righthand', 'possibl', 'journal', 'compon', 'trust', 'A', 'toler', 'option', 'tol', 'ndarray', '13761395', 'If', 'one', 'method', 'equalityconstrain', 'when', 'dictionari', 'IM', 'solut', 'max_int', 'mari', 'upper', 'maximum', 'xt', 'return_al', 'CG', 'comput', 'radiu', 'trust_radiu', 'siam', '234', 'constrain', 'use', 'xT', 'gradient', 'b', 'scientif', 'max_it', 'equat', 'c', 'bool', 'return', 'H', 'infeas', 'interrupt', 'dict', 'take', 'true', '1/2', '||x||', 'contain', 'list', 'equal', '[', '1', 'v', 'project', ']', 'nm', 'aris', 'algorithm', 'hribar', 'follow', '<', 'matrix', 'array_lik', 'solv', 'problem']}"
248,"{'func name': 'nquad', 'comments': ""Integration over multiple variables.\n\nWraps `quad` to enable integration over multiple variables. Various options allow improved integration of discontinuous functions, as well as the use of weighted integration, and generally finer control of the integration process.\n\nParameters ---------- func : {callable, scipy.LowLevelCallable} The function to be integrated. Has arguments of ``x0, ... xn``, ``t0, ... tm``, where integration is carried out over ``x0, ... xn``, which must be floats.\n\nWhere ```t0, ... tm``` are extra arguments passed in args. Function signature should be ``func(x0, x1, ..., xn, t0, t1, ..., tm)``. Integration is carried out in order.\n\nThat is, integration over ``x0`` is the innermost integral, and ``xn`` is the outermost.\n\nIf the user desires improved integration performance, then `f` may be a `scipy.LowLevelCallable` with one of the signatures::\n\ndouble func(int n, double *xx) double func(int n, double *xx, void *user_data)\n\nwhere ``n`` is the number of variables and args.\n\nThe ``xx`` array contains the coordinates and extra arguments. ``user_data`` is the data contained in the `scipy.LowLevelCallable`. ranges : iterable object Each element of ranges may be either a sequence\n\nof 2 numbers, or else a callable that returns such a sequence. ``ranges[0]`` corresponds to integration over x0, and so on. If an element of ranges is a callable, then it will be called with all of the integration arguments available, as well as any parametric arguments. e.g., if ``func = f(x0, x1, x2, t0, t1)``, then ``ranges[0]`` may be defined as either ``(a, b)`` or else as ``(a, b) = range0(x1, x2, t0, t1)``. args : iterable object, optional Additional arguments ``t0, ..., tn``, required by `func`, `ranges`, and ``opts``. opts : iterable object or dict, optional Options to be passed to `quad`. May be empty, a dict, or a sequence of dicts or functions that return a dict. If empty, the default options from scipy.integrate.quad are used. If a dict, the same options are used for all levels of integraion. If a sequence, then each element of the sequence corresponds to a particular integration. e.g., opts[0] corresponds to integration over x0, and so on. If a callable, the signature must be the same as for ``ranges``. The available options together with their default values are:\n\n- epsabs = 1.49e-08\n\n- epsrel = 1.49e-08\n\n- limit\n\n= 50\n\n- points = None\n\n- weight = None\n\n- wvar\n\n = None\n\n- wopts\n\n= None\n\nFor more information on these options, see `quad` and `quad_explain`.\n\nfull_output : bool, optional Partial implementation of ``full_output`` from scipy.integrate.quad. The number of integrand function evaluations ``neval`` can be obtained by setting ``full_output=True`` when calling nquad.\n##### Returns\n* **result **: float\n    The result of the integration.\n\n* **abserr **: float\n    The maximum of the estimates of the absolute error in the various\n    integration results.\n\n* **out_dict **: dict, optional\n    A dict containing additional information on the integration.\n\n* **quad **: 1-D numerical integration\n\n* **dblquad, tplquad **: double and triple integrals\n\n* **fixed_quad **: fixed-order Gaussian quadrature\n\n* **quadrature **: adaptive Gaussian quadrature\n\n* **>>> func = lambda x0,x1,x2,x3 **: x0**2 + x1*x2 - x3**3 + np.sin(x0) + (\n\n* **>>> def opts0(*args, **kwargs)**: \n\n* **...     return {'points'**: [0.2*args[2] + 0.5 + 0.25*args[0]]}\n\n* **(1.5267454070738633, 2.9437360001402324e-14, {'neval'**: 388962})\n\n* **>>> def func2(x0, x1, x2, x3, t0, t1)**: \n\n* **>>> def lim0(x1, x2, x3, t0, t1)**: \n\n* **>>> def lim1(x2, x3, t0, t1)**: \n\n* **>>> def lim2(x3, t0, t1)**: \n\n* **>>> def lim3(t0, t1)**: \n\n* **>>> def opts0(x1, x2, x3, t0, t1)**: \n\n* **...     return {'points' **: [t0 - t1*x1]}\n\n* **>>> def opts1(x2, x3, t0, t1)**: \n\n* **>>> def opts2(x3, t0, t1)**: \n\n* **>>> def opts3(t0, t1)**: \n\n"", 'stemmed comments': ['togeth', 'default', '>', 'function', 'finer', 'func', 'each', 'number', 'npsin', 'quadratur', 'call', '149e08', 'partial', 'process', 'variabl', 'defin', 'full_output=tru', 'requir', 'epsrel', 'paramet', 'desir', 'fixed_quad', 'void', '2', 'eg', 'none', 'for', 'absolut', 'point', 'tripl', 'abserr', 'carri', 'wrap', 'integraion', 'must', 'n', 'opts0', 'discontinu', 'ha', 'weight', 'int', '{', 'element', 'where', 'outermost', 'xx', 'opts2', 'coordin', 'scipylowlevelcal', '=', 'rang', 'opt', 'level', 'adapt', 'control', 't1', 'scipyintegratequad', '05', 'wvar', 'argument', 'quad_explain', 'order', 'object', 'float', 'particular', '}', 'gener', 'evalu', 'lim0', 'enabl', 'x0', '3', 'callabl', 'limit', 'error', 'allow', 'doubl', 'empti', 'valu', '0', 'implement', 'pass', 'x1', 'numer', 'addit', 'A', 'either', 'epsab', 'gaussian', 'option', 'quad', 'array', 'els', 'If', 'one', 't0', 'lim1', 'user', 'fixedord', 'opts3', 'x2', 'extra', 'avail', '02', 'x3', 'maximum', 'signatur', 'tplquad', 'well', 'tm', 'obtain', '50', '29437360001402324e14', 'xn', 'f', 'func2', 'data', 'lim3', '388962', 'may', 'lim2', 'inform', 'integrand', 'use', 'tn', 'b', 'range0', 'dblquad', 'wopt', 'set', 'correspond', 'bool', 'perform', 'return', 'parametr', 'lambda', 'the', 'neval', 'result', 'dict', 'variou', 'nquad', '025', 'improv', 'that', 'out_dict', '15267454070738633', 'integr', 'contain', 'def', '[', 'arg', ']', 'opts1', 'multipl', 'innermost', 'estim', 'sequenc', 'kwarg', 'see', '1D', 'iter', 'full_output', 'user_data']}"
249,"{'func name': 'predict_factor', 'comments': 'Predict by which factor to increase/decrease the step size.\n\nThe algorithm is described in [1]_.\n\nParameters ---------- h_abs, h_abs_old : float Current and previous values of the step size, `h_abs_old` can be None (see Notes). error_norm, error_norm_old : float Current and previous values of the error norm, `error_norm_old` can be None (see Notes).\n##### Returns\n* **factor **: float\n    Predicted factor.\n\n* **.. [1] E. Hairer, S. P. Norsett G. Wanner, ""Solving Ordinary Differential\n       Equations II**: Stiff and Differential-Algebraic Problems"", Sec. IV.8.\n\n', 'stemmed comments': ['equat', 'stiff', 'sec', 'G', 'error_norm_old', 'wanner', 'return', 'step', 'the', 'h_abs_old', 'note', 'float', 'paramet', 'iv8', 'differenti', 'none', 'h_ab', 'ordinari', '[', '1', 'error', 'hairer', 'II', 'previou', 'E', 'describ', ']', 'increase/decreas', 'P', 'error_norm', 'current', 'algorithm', '_', 'valu', 'factor', 'see', 'norm', 'size', 'S', 'predict', 'norsett', 'differentialalgebra', 'solv', 'problem']}"
250,"{'func name': 'idst', 'comments': ""Return the Inverse Discrete Sine Transform of an arbitrary type sequence.\n\nParameters ---------- x : array_like The input array. type : {1, 2, 3, 4}, optional Type of the DST (see Notes). Default type is 2. n : int, optional Length of the transform.\n\nIf ``n < x.shape[axis]``, `x` is truncated. If ``n > x.shape[axis]``, `x` is zero-padded. The default results in ``n = x.shape[axis]``. axis : int, optional Axis along which the idst is computed; the default is over the last axis (i.e., ``axis=-1``). norm : {None, 'ortho'}, optional Normalization mode (see Notes). Default is None. overwrite_x : bool, optional If True, the contents of `x` can be destroyed; the default is False.\n##### Returns\n* **idst **: ndarray of real\n    The transformed input array.\n\n* **dst **: Forward DST\n\n* **.. versionadded**: \n\n"", 'stemmed comments': ['option', 'default', '>', 'array', 'ndarray', 'normal', 'mode', 'bool', 'along', 'arbitrari', 'If', 'sine', 'real', 'return', 'truncat', 'destroy', 'the', 'xshape', 'note', 'forward', 'result', 'invers', 'paramet', '}', 'true', '2', 'none', 'fals', 'transform', 'idst', 'ortho', 'zeropad', 'length', 'content', '3', '4', '[', 'type', '1', 'n', 'overwrite_x', 'axi', ']', 'comput', 'ie', 'last', 'dst', 'sequenc', '{', 'discret', 'int', 'x', 'see', '=', 'input', 'axis=1', 'norm', 'versionad', '<', 'array_lik', ';']}"
251,"{'func name': '_r2rn', 'comments': 'Forward or backward nd DCT/DST\n\nParameters ---------- forward: bool Transform direction (determines type and normalisation) transform: {pypocketfft.dct, pypocketfft.dst} The transform to perform\n', 'stemmed comments': ['forward', 'direct', 'normalis', 'pypocketfftdct', 'determin', 'paramet', 'backward', 'type', 'dct/dst', 'bool', '}', 'perform', 'nd', 'the', 'pypocketfftdst', '{', 'transform']}"
252,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
253,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
254,"{'func name': 'rk_step', 'comments': 'Perform a single Runge-Kutta step.\n\nThis function computes a prediction of an explicit Runge-Kutta method and also estimates the error of a less accurate method.\n\nNotation for Butcher tableau is as in [1]_.\n\nParameters ---------- fun : callable Right-hand side of the system. t : float Current time. y : ndarray, shape (n,) Current state. f : ndarray, shape (n,) Current value of the derivative, i.e., ``fun(x, y)``. h : float Step to use. A : ndarray, shape (n_stages, n_stages) Coefficients for combining previous RK stages to compute the next stage. For explicit methods the coefficients at and above the main diagonal are zeros. B : ndarray, shape (n_stages,) Coefficients for combining RK stages for computing the final prediction. C : ndarray, shape (n_stages,) Coefficients for incrementing time for consecutive RK stages. The value for the first stage is always zero. K : ndarray, shape (n_stages + 1, n) Storage array for putting RK stages here. Stages are stored in rows. The last row is a linear combination of the previous rows with coefficients\n##### Returns\n* **y_new **: ndarray, shape (n,)\n    Solution at t + h computed with a higher accuracy.\n\n* **f_new **: ndarray, shape (n,)\n    Derivative ``fun(t + h, y_new)``.\n\n* **.. [1] E. Hairer, S. P. Norsett G. Wanner, ""Solving Ordinary Differential\n       Equations I**: Nonstiff Problems"", Sec. II.4.\n\n', 'stemmed comments': ['function', 'final', 'put', 'linear', 'nonstiff', 'paramet', 'differenti', 'for', 'K', 'butcher', 'n', 'RK', 'last', 'consecut', 'shape', 'y_new', 'stage', 'main', 'I', 'side', 'accuraci', 'notat', 'tableau', 'thi', 'G', 'coeffici', 'row', 'float', 'first', 'higher', 'ordinari', 'callabl', 'error', 'E', 'also', 'P', 'explicit', 'x', 'valu', 'righthand', 'storag', 'A', 'fun', 'singl', 'n_stage', 'B', 'accur', 'ndarray', 'array', 'sec', 'next', 'increment', 'method', 'less', 'solut', 'h', 'time', 'store', 'zero', 'hairer', 'previou', 'comput', 'deriv', 'ii4', 'f', 'C', 'predict', 'use', 'f_new', 'equat', 'system', 'perform', 'wanner', 'return', 'step', 'diagon', 'the', 'rungekutta', '[', '1', 'state', 'ie', ']', 'estim', 'current', '_', 'alway', 'S', 'norsett', 'combin', 'solv', 'problem']}"
255,"{'func name': 'drop_bad_flags', 'comments': 'Drop flags that are problematic for compiling old scipy versions\n\n\n', 'stemmed comments': ['scipi', 'old', 'compil', 'version', 'problemat', 'drop', 'flag']}"
256,"{'func name': 'run_mypy', 'comments': '', 'stemmed comments': []}"
257,"{'func name': 'wrap_mangling_directive', 'comments': '', 'stemmed comments': []}"
258,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
259,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
260,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
261,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
262,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
263,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
264,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
265,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
266,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
267,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
268,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
269,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
270,"{'func name': 'setup_package', 'comments': '', 'stemmed comments': []}"
271,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
272,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
273,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
274,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
275,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
276,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
277,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
278,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
279,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
280,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
281,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
282,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
283,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
284,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
285,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
286,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
287,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
288,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
289,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
290,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
291,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
292,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
293,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
294,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
295,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
296,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
297,"{'func name': 'decimate', 'comments': ""Downsample the signal after applying an anti-aliasing filter.\n\nBy default, an order 8 Chebyshev type I filter is used. A 30 point FIR filter with Hamming window is used if `ftype` is 'fir'.\n\nParameters ---------- x : array_like The signal to be downsampled, as an N-dimensional array. q : int The downsampling factor. When using IIR downsampling, it is recommended to call `decimate` multiple times for downsampling factors higher than 13. n : int, optional The order of the filter (1 less than the length for 'fir'). Defaults to 8 for 'iir' and 20 times the downsampling factor for 'fir'. ftype : str {'iir', 'fir'} or ``dlti`` instance, optional If 'iir' or 'fir', specifies the type of lowpass filter. If an instance of an `dlti` object, uses that object to filter before downsampling. axis : int, optional The axis along which to decimate. zero_phase : bool, optional Prevent phase shift by filtering with `filtfilt` instead of `lfilter` when using an IIR filter, and shifting the outputs back by the filter's group delay when using an FIR filter. The default value of ``True`` is recommended, since a phase shift is generally not desired.\n\n.. versionadded:: 0.18.0\n##### Returns\n* **y **: ndarray\n    The down-sampled signal.\n\n* **resample **: Resample up or down using the FFT method.\n\n* **resample_poly **: Resample using polyphase filtering and an FIR filter.\n\n"", 'stemmed comments': ['default', 'call', 'output', 'chebyshev', 'lowpass', 'paramet', 'desir', 'point', 'By', 'resampl', 'polyphas', 'downsampl', 'str', 'type', 'n', 'ham', 'filter', 'int', '{', 'fir', 'instead', 'group', 'I', 'order', 'object', 'ftype', '}', 'array_lik', 'resample_poli', 'higher', 'gener', 'antialias', 'prevent', 'x', 'valu', 'iir', 'A', 'delay', 'option', 'dlti', 'lfilter', 'array', 'ndarray', 'decim', 'along', '8', 'recommend', 'If', 'method', 'when', 'instanc', 's', 'less', 'window', 'time', 'zero_phas', 'fft', 'axi', 'factor', 'ndimension', 'use', 'filtfilt', '13', 'bool', 'return', 'the', 'true', 'sinc', 'phase', '30', 'signal', 'length', 'specifi', 'back', '1', 'shift', 'multipl', '20', 'appli', 'versionad', 'q', '0180']}"
298,"{'func name': '_eval_con_normals', 'comments': '', 'stemmed comments': []}"
299,"{'func name': 'random_sparse_csc', 'comments': '', 'stemmed comments': []}"
300,"{'func name': '_precond', 'comments': '', 'stemmed comments': []}"
301,"{'func name': '_create_sparse_poisson2d', 'comments': '', 'stemmed comments': []}"
302,"{'func name': 'poisson2d', 'comments': 'Return a sparse matrix for the 2D Poisson problem with standard 5-point finite difference stencil on a square N-by-N grid.\n\n\n', 'stemmed comments': ['squar', '5point', 'finit', 'nbyn', 'stencil', 'spars', 'matrix', 'return', 'standard', 'differ', 'grid', '2D', 'poisson', 'problem']}"
303,"{'func name': '_deprecated', 'comments': '', 'stemmed comments': []}"
304,"{'func name': 'generate_spherical_points', 'comments': '', 'stemmed comments': []}"
305,"{'func name': 'convolution_matrix', 'comments': 'Construct a convolution matrix.\n\nConstructs the Toeplitz matrix representing one-dimensional convolution [1]_.\n\nSee the notes below for details.\n\nParameters ---------- a : (m,) array_like The 1-D array to convolve. n : int The number of columns in the resulting matrix.\n\nIt gives the length of the input to be convolved with `a`.\n\nThis is analogous to the length of `v` in ``numpy.convolve(a, v)``. mode : str This is analogous to `mode` in ``numpy.convolve(v, a, mode)``. It must be one of (\'full\', \'valid\', \'same\'). See below for how `mode` determines the shape of the result.\n##### Returns\n* **A **: (k, n) ndarray\n    The convolution matrix whose row count `k` depends on `mode`\n\n* **toeplitz **: Toeplitz matrix\n\n* **The code**: \n\n* **In the default \'full\' mode, the entries of `A` are given by**: \n\n* **``[x, y, z]``.  The convolution matrix has the form**: \n\n* **In \'valid\' mode, the entries of `A` are given by**: \n\n* **row.  For input ``[x, y, z]``, this array looks like**: \n\n* **In the \'same\' mode, the entries of `A` are given by**: \n\n* **For input ``[x, y, z]``, this array looks like**: \n\n* **.. versionadded**: \n\n* **.. [1] ""Convolution"", https**: //en.wikipedia.org/wiki/Convolution\n\n', 'stemmed comments': ['default', 'array', 'ndarray', 'given', 'mode', 'repres', 'number', 'analog', 'convolut', 'k', 'thi', 'http', 'return', 'one', 'the', 'row', 'note', 'valid', 'whose', 'result', 'It', 'determin', 'paramet', '//enwikipediaorg/wiki/convolut', 'z', 'for', 'entri', 'code', 'look', 'column', 'length', 'str', '[', '1', 'n', 'must', 'onedimension', 'depend', 'toeplitz', 'v', 'like', ']', 'form', 'give', 'construct', 'int', 'convolv', 'shape', 'numpyconvolv', '_', 'x', 'In', 'see', 'input', 'full', 'count', 'detail', 'versionad', 'A', 'matrix', '1D', 'array_lik', 'same']}"
306,"{'func name': '_median_bias', 'comments': 'Returns the bias of the median of a set of periodograms relative to the mean.\n\nSee arXiv:gr-qc/0509116 Appendix B for details.\n\nParameters ---------- n : int Numbers of periodograms being averaged.\n##### Returns\n* **bias **: float\n    Calculated bias.\n\n', 'stemmed comments': ['set', 'B', 'number', 'mean', 'return', 'median', 'float', 'periodogram', 'paramet', 'arxiv', 'bia', 'grqc/0509116', 'n', 'rel', 'int', 'appendix', 'see', 'calcul', 'detail', 'averag']}"
307,"{'func name': 'multigammaln', 'comments': 'Returns the log of multivariate gamma, also sometimes called the generalized gamma.\n\nParameters ---------- a : ndarray The multivariate gamma is computed for each item of `a`. d : int The dimension of the space of integration.\n##### Returns\n* **res **: ndarray\n    The values of the log multivariate gamma at the given points `a`.\n\n* **.. math**: \n\n* **with the condition **: math\n\n* **scalar**: the integrand only is multivariate, the argument is not (the\n\n', 'stemmed comments': ['ndarray', 'given', 'condit', 'call', 'scalar', 'return', 'the', 'paramet', 'multivari', 'item', 'gamma', 'gener', 'point', 're', 'integr', 'log', 'also', 'comput', 'math', 'int', 'valu', 'dimens', 'sometim', 'integrand', 'space', 'argument']}"
308,"{'func name': 'count_blocks', 'comments': 'For a given blocksize=(r,c) count the number of occupied blocks in a sparse matrix A\n\n\n', 'stemmed comments': ['block', 'given', 'c', 'number', 'count', 'r', 'for', 'occupi', 'spars', 'matrix', 'A', 'blocksize=']}"
309,"{'func name': 'asmatrix', 'comments': '', 'stemmed comments': []}"
310,"{'func name': 'rankdata', 'comments': 'Assign ranks to data, dealing with ties appropriately.\n\nBy default (``axis=None``), the data array is first flattened, and a flat array of ranks is returned. Separately reshape the rank array to the shape of the data array if desired (see Examples).\n\nRanks begin at 1.\n\nThe `method` argument controls how ranks are assigned to equal values.\n\nSee [1]_ for further discussion of ranking methods.\n\nParameters ---------- a : array_like The array of values to be ranked. method : {\'average\', \'min\', \'max\', \'dense\', \'ordinal\'}, optional The method used to assign ranks to tied elements. The following methods are available (default is \'average\'):\n\n* \'average\': The average of the ranks that would have been assigned to all the tied values is assigned to each value. * \'min\': The minimum of the ranks that would have been assigned to all the tied values is assigned to each value.\n\n(This is also referred to as ""competition"" ranking.) * \'max\': The maximum of the ranks that would have been assigned to all the tied values is assigned to each value. * \'dense\': Like \'min\', but the rank of the next highest element is assigned the rank immediately after those assigned to the tied elements. * \'ordinal\': All values are given a distinct rank, corresponding to the order that the values occur in `a`. axis : {None, int}, optional Axis along which to perform the ranking. If ``None``, the data array is first flattened.\n##### Returns\n* **ranks **: ndarray\n     An array of size equal to the size of `a`, containing rank\n     scores.\n\n* **.. [1] ""Ranking"", https**: //en.wikipedia.org/wiki/Ranking\n\n', 'stemmed comments': ['option', 'default', 'rank', 'array', 'given', 'ndarray', 'immedi', 'correspond', 'order', 'thi', 'tie', 'along', 'perform', 'If', 'http', 'return', 'reshap', 'next', 'the', 'method', 'minimum', 'exampl', 'paramet', 'axis=non', 'desir', '}', 'first', 'none', 'avail', 'By', 'discuss', 'maximum', 'appropri', 'contain', 'equal', '[', 'dens', '1', 'like', 'all', 'flat', 'score', 'flatten', 'distinct', 'also', ']', 'axi', 'deal', 'int', '{', 'data', 'shape', 'min', 'assign', 'separ', 'element', '_', 'valu', 'occur', 'An', 'see', 'highest', '//enwikipediaorg/wiki/rank', 'competit', 'size', 'follow', 'would', 'control', 'max', 'ordin', 'use', 'averag', 'begin', 'array_lik', 'argument', 'refer']}"
311,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
312,"{'func name': 'test_suppress_long_failed', 'comments': '', 'stemmed comments': []}"
313,"{'func name': 'combine_dict', 'comments': 'Combine Numpy distutils style library configuration dictionaries.\n\nParameters ---------- *dicts Dictionaries of keys. List-valued keys will be concatenated. Otherwise, duplicate keys with different values result to an error. The input arguments are not modified. **kw Keyword arguments are treated as an additional dictionary (the first one, i.e., prepended).\n##### Returns\n', 'stemmed comments': ['key', 'style', 'librari', 'return', 'one', 'keyword', 'the', 'distutil', 'dictionari', 'result', 'dict', 'paramet', 'first', 'configur', 'modifi', 'error', 'kw', 'otherwis', 'ie', 'differ', 'concaten', 'numpi', 'duplic', 'valu', 'treat', 'input', 'prepend', 'listvalu', 'addit', 'argument', 'combin']}"
314,"{'func name': 'myTakeStep2', 'comments': 'redo RandomDisplacement in function form without the attribute stepsize to make sure everything still works ok\n\n\n', 'stemmed comments': ['everyth', 'without', 'redo', 'function', 'attribut', 'make', 'work', 'sure', 'randomdisplac', 'form', 'still', 'stepsiz', 'ok']}"
315,"{'func name': 'test_assert_deallocated_circular2', 'comments': '', 'stemmed comments': []}"
316,"{'func name': 'test_good_bounds', 'comments': '', 'stemmed comments': []}"
317,"{'func name': 'test_absolute_step', 'comments': '', 'stemmed comments': []}"
318,"{'func name': 'test_legacy_version', 'comments': '', 'stemmed comments': []}"
319,"{'func name': 'test_points', 'comments': '', 'stemmed comments': []}"
320,"{'func name': '_assert_success', 'comments': '', 'stemmed comments': []}"
321,"{'func name': 'run_test', 'comments': '', 'stemmed comments': []}"
322,"{'func name': 'x0_10', 'comments': '', 'stemmed comments': []}"
323,"{'func name': 'test__mem_available', 'comments': '', 'stemmed comments': []}"
324,"{'func name': 'test_reentering', 'comments': '', 'stemmed comments': []}"
325,"{'func name': 'test_rng_integers', 'comments': '', 'stemmed comments': []}"
326,"{'func name': 'test_real_eigs_real_k_subset', 'comments': '', 'stemmed comments': []}"
327,"{'func name': 'test_backend_plan', 'comments': '', 'stemmed comments': []}"
328,"{'func name': 'test_banded_ode_solvers', 'comments': '', 'stemmed comments': []}"
329,"{'func name': 'cases_64bit', 'comments': '', 'stemmed comments': []}"
330,"{'func name': 'test_auto_rcond', 'comments': '', 'stemmed comments': []}"
331,"{'func name': 'direct_irdft', 'comments': '', 'stemmed comments': []}"
332,"{'func name': 'test_swapped_byte_order_real', 'comments': '', 'stemmed comments': []}"
333,"{'func name': 'test_pseudo_huber', 'comments': '', 'stemmed comments': []}"
334,"{'func name': 'test_trsm', 'comments': '', 'stemmed comments': []}"
335,"{'func name': 'test_inv_boxcox1p_underflow', 'comments': '', 'stemmed comments': []}"
336,"{'func name': 'make_lsq_full_matrix', 'comments': 'Make the least-square spline, full matrices.\n\n\n', 'stemmed comments': ['make', 'full', 'leastsquar', 'matric', 'spline']}"
337,"{'func name': 'test_verbose', 'comments': '', 'stemmed comments': []}"
338,"{'func name': 'test_to_numpy', 'comments': '', 'stemmed comments': []}"
339,"{'func name': 'test_geometric_transform', 'comments': '', 'stemmed comments': []}"
340,"{'func name': 'test_initial_constraints_as_canonical_empty', 'comments': '', 'stemmed comments': []}"
341,"{'func name': 'test_threadsafety', 'comments': '', 'stemmed comments': []}"
342,"{'func name': 'test_nonfinite', 'comments': '', 'stemmed comments': []}"
343,"{'func name': 'test_vector_constraints', 'comments': '', 'stemmed comments': []}"
344,"{'func name': 'test_exact_values', 'comments': '', 'stemmed comments': []}"
345,"{'func name': 'test_electrocardiogram', 'comments': '', 'stemmed comments': []}"
346,"{'func name': 'test_fully_connected_graph', 'comments': '', 'stemmed comments': []}"
347,"{'func name': 'test_nu_to_lambda', 'comments': '', 'stemmed comments': []}"
348,"{'func name': 'test_bounds_repr', 'comments': '', 'stemmed comments': []}"
349,"{'func name': '_sprandn', 'comments': '', 'stemmed comments': []}"
350,"{'func name': 'test_chi2_contingency_bad_args', 'comments': '', 'stemmed comments': []}"
351,"{'func name': 'test_methods_with_lists', 'comments': '', 'stemmed comments': []}"
352,"{'func name': 'test_multiple_edges', 'comments': '', 'stemmed comments': []}"
353,"{'func name': 'test_csc_empty_slices', 'comments': '', 'stemmed comments': []}"
354,"{'func name': 'test_csr_bool_indexing', 'comments': '', 'stemmed comments': []}"
355,"{'func name': 'test_brentq_full_output', 'comments': '', 'stemmed comments': []}"
356,"{'func name': 'test_cython_api', 'comments': '', 'stemmed comments': []}"
357,"{'func name': '_test_factory', 'comments': 'Boost test\n\n\n', 'stemmed comments': ['test', 'boost']}"
358,"{'func name': 'test_uint64_max', 'comments': '', 'stemmed comments': []}"
359,"{'func name': 'test_cossin_separate', 'comments': '', 'stemmed comments': []}"
360,"{'func name': 'test_ldl_type_size_combinations', 'comments': '', 'stemmed comments': []}"
361,"{'func name': 'test_verify_cases', 'comments': '', 'stemmed comments': []}"
362,"{'func name': 'check_form_qTu', 'comments': '', 'stemmed comments': []}"
363,"{'func name': 'test_subspace_angles', 'comments': '', 'stemmed comments': []}"
364,"{'func name': 'test_cython_api_deprecation', 'comments': '', 'stemmed comments': []}"
365,"{'func name': 'test_IdentityVectorFunction', 'comments': '', 'stemmed comments': []}"
366,"{'func name': 'test_nonfinite', 'comments': '', 'stemmed comments': []}"
367,"{'func name': 'test_methods_with_lists', 'comments': '', 'stemmed comments': []}"
368,"{'func name': 'test_betabinom_bernoulli', 'comments': '', 'stemmed comments': []}"
369,"{'func name': 'test__validate_vector', 'comments': '', 'stemmed comments': []}"
370,"{'func name': 'test_rvs_no_size_warning', 'comments': '', 'stemmed comments': []}"
371,"{'func name': 'test_inherit_docstring_from', 'comments': '', 'stemmed comments': []}"
372,"{'func name': 'test_ellip_harm_invalid_p', 'comments': '', 'stemmed comments': []}"
373,"{'func name': 'less_than_or_close', 'comments': '', 'stemmed comments': []}"
374,"{'func name': 'matrixmultiply', 'comments': '', 'stemmed comments': []}"
375,"{'func name': 'test_fft_function', 'comments': '', 'stemmed comments': []}"
376,"{'func name': 'test_sos_consistency', 'comments': '', 'stemmed comments': []}"
377,"{'func name': 'test_size_footprint_both_set', 'comments': '', 'stemmed comments': []}"
378,"{'func name': 'test_kaiserord', 'comments': '', 'stemmed comments': []}"
379,"{'func name': 'test_expon_fit', 'comments': 'gh-6167\n\n\n', 'stemmed comments': ['gh6167']}"
380,"{'func name': 'test_bisplev_integer_overflow', 'comments': '', 'stemmed comments': []}"
381,"{'func name': '_numdiff_2d', 'comments': '', 'stemmed comments': []}"
382,"{'func name': 'test_disconnected_graph', 'comments': '', 'stemmed comments': []}"
383,"{'func name': 'test_fortran_eof_multidimensional', 'comments': '', 'stemmed comments': []}"
384,"{'func name': 'do_solve', 'comments': '', 'stemmed comments': []}"
385,"{'func name': 'test_sparse_formats', 'comments': '', 'stemmed comments': []}"
386,"{'func name': 'assert_csc_almost_equal', 'comments': '', 'stemmed comments': []}"
387,"{'func name': '_assert_n_smooth', 'comments': '', 'stemmed comments': []}"
388,"{'func name': 'test_Heap', 'comments': '', 'stemmed comments': []}"
389,"{'func name': 'test_invalid_pointer', 'comments': '', 'stemmed comments': []}"
390,"{'func name': 'test_modules_importable', 'comments': '', 'stemmed comments': []}"
391,"{'func name': 'test_repeated_t_values', 'comments': 'Regression test for gh-8217.\n\n\n', 'stemmed comments': ['test', 'regress', 'gh8217']}"
392,"{'func name': 'test_transpose_noconjugate', 'comments': '', 'stemmed comments': []}"
393,"{'func name': 'data_file', 'comments': '', 'stemmed comments': []}"
394,"{'func name': '_ppoly4d_eval', 'comments': 'Straightforward evaluation of 4-D piecewise polynomial\n\n\n', 'stemmed comments': ['4D', 'polynomi', 'evalu', 'piecewis', 'straightforward']}"
395,"{'func name': '_debug_print', 'comments': '', 'stemmed comments': []}"
396,"{'func name': 'test_x0_working', 'comments': '', 'stemmed comments': []}"
397,"{'func name': 'test_integration_zero_rhs', 'comments': '', 'stemmed comments': []}"
398,"{'func name': 'test_seed', 'comments': '', 'stemmed comments': []}"
399,"{'func name': 'test_kdtree_complex_data', 'comments': '', 'stemmed comments': []}"
400,"{'func name': 'test_lambertw_ufunc_loop_selection', 'comments': '', 'stemmed comments': []}"
401,"{'func name': 'test_ptsvx_NAG', 'comments': '', 'stemmed comments': []}"
402,"{'func name': 'test_2', 'comments': '', 'stemmed comments': []}"
403,"{'func name': 'test_setulb_floatround', 'comments': 'test if setulb() violates bounds\n\nchecks for violation due to floating point rounding error\n', 'stemmed comments': ['bound', 'float', 'test', 'violat', 'round', 'error', 'due', 'point', 'check', 'setulb']}"
404,"{'func name': 'test_small_tolerances_for_lm', 'comments': '', 'stemmed comments': []}"
405,"{'func name': 'do_solve', 'comments': '', 'stemmed comments': []}"
406,"{'func name': 'test_constant_cost_matrix', 'comments': '', 'stemmed comments': []}"
407,"{'func name': 'assert_fp_equal', 'comments': 'Assert two arrays are equal, up to some floating-point rounding error\n\n\n', 'stemmed comments': ['equal', 'array', 'two', 'round', 'error', 'floatingpoint', 'assert']}"
408,"{'func name': 'test_unknown_solver', 'comments': '', 'stemmed comments': []}"
409,"{'func name': 'setup_bug_8278', 'comments': '', 'stemmed comments': []}"
410,"{'func name': 'test_diagonal_data_types', 'comments': 'Check lobpcg for diagonal matrices for all matrix types.\n\n\n', 'stemmed comments': ['type', 'lobpcg', 'matrix', 'check', 'matric', 'diagon']}"
411,"{'func name': 'test_log_softmax_scalar', 'comments': '', 'stemmed comments': []}"
412,"{'func name': 'test_branch_cut', 'comments': '', 'stemmed comments': []}"
413,"{'func name': 'test_softmax_multi_axes', 'comments': '', 'stemmed comments': []}"
414,"{'func name': 'lsmrtest', 'comments': 'Verbose testing of lsmr\n\n\n', 'stemmed comments': ['test', 'lsmr', 'verbos']}"
415,"{'func name': 'test_linear_operators', 'comments': '', 'stemmed comments': []}"
416,"{'func name': 'test_initialization', 'comments': '', 'stemmed comments': []}"
417,"{'func name': '_assert_poles_close', 'comments': 'Check each pole in P1 is close to a pole in P2 with a 1e-8 relative tolerance or 1e-8 absolute tolerance (useful for zero poles). These tolerances are very strict but the systems tested are known to accept these poles so we should not be far from what is requested.\n\n\n', 'stemmed comments': ['these', 'known', 'far', 'P1', 'system', 'P2', 'strict', 'accept', 'absolut', '1e8', 'check', 'pole', 'close', 'test', 'zero', 'request', 'rel', 'use', 'toler']}"
418,"{'func name': 'test_large_random_graph_with_one_edge_incident_to_each_vertex', 'comments': '', 'stemmed comments': []}"
419,"{'func name': '_relative_error', 'comments': '', 'stemmed comments': []}"
420,"{'func name': 'test_onenorm_matrix_power_nnm', 'comments': '', 'stemmed comments': []}"
421,"{'func name': 'test_implemented_error', 'comments': '', 'stemmed comments': []}"
422,"{'func name': 'test_stat_funcs_2d', 'comments': '', 'stemmed comments': []}"
423,"{'func name': 'test_bug_11886', 'comments': '', 'stemmed comments': []}"
424,"{'func name': 'pressure_network_fun_and_grad', 'comments': '', 'stemmed comments': []}"
425,"{'func name': 'test_minres_precond_exact_x0', 'comments': '', 'stemmed comments': []}"
426,"{'func name': 'test_jottings', 'comments': '', 'stemmed comments': []}"
427,"{'func name': 'test_chars_strings', 'comments': '', 'stemmed comments': []}"
428,"{'func name': 'test_simplify_cells', 'comments': '', 'stemmed comments': []}"
429,"{'func name': 'test_zero_byte_string', 'comments': '', 'stemmed comments': []}"
430,"{'func name': 'test_matdims', 'comments': '', 'stemmed comments': []}"
431,"{'func name': 'test_gh11389', 'comments': '', 'stemmed comments': []}"
432,"{'func name': 'test_binary_closing_noninteger_brute_force_passes_when_true', 'comments': '', 'stemmed comments': []}"
433,"{'func name': 'test_lambertw_smallz', 'comments': '', 'stemmed comments': []}"
434,"{'func name': 'test_plotting_positions', 'comments': '', 'stemmed comments': []}"
435,"{'func name': 'test_idealfourths', 'comments': '', 'stemmed comments': []}"
436,"{'func name': 'test_set_workers_invalid', 'comments': '', 'stemmed comments': []}"
437,"{'func name': 'test_random_state_property', 'comments': '', 'stemmed comments': []}"
438,"{'func name': 'test_legacy_cast', 'comments': '', 'stemmed comments': []}"
439,"{'func name': 'test_nearest_list_argument', 'comments': '', 'stemmed comments': []}"
440,"{'func name': 'sumsq', 'comments': '', 'stemmed comments': []}"
441,"{'func name': 'test_ndtr', 'comments': '', 'stemmed comments': []}"
442,"{'func name': 'test_read_withMaskAndScaleFalse', 'comments': '', 'stemmed comments': []}"
443,"{'func name': 'F6', 'comments': '', 'stemmed comments': []}"
444,"{'func name': 'test_multiprocess', 'comments': '', 'stemmed comments': []}"
445,"{'func name': 'test_odeint_banded_jac', 'comments': '', 'stemmed comments': []}"
446,"{'func name': 'test_memoize_jac_with_bfgs', 'comments': 'Tests that using MemoizedJac in combination with ScalarFunction and BFGS does not lead to repeated function evaluations. Tests changes made in response to GH11868.\n\n\n', 'stemmed comments': ['memoizedjac', 'function', 'test', 'made', 'chang', 'scalarfunct', 'use', 'bfg', 'evalu', 'repeat', 'lead', 'combin', 'gh11868', 'respons']}"
447,"{'func name': 'test_gegenbauer_nan', 'comments': '', 'stemmed comments': []}"
448,"{'func name': 'test_gh_6721', 'comments': '', 'stemmed comments': []}"
449,"{'func name': 'test_infs', 'comments': '', 'stemmed comments': []}"
450,"{'func name': 'test_pade_complex', 'comments': '', 'stemmed comments': []}"
451,"{'func name': 'test_malformed1', 'comments': '', 'stemmed comments': []}"
452,"{'func name': 'test_pbwa_nan', 'comments': '', 'stemmed comments': []}"
453,"{'func name': 'test_unpack_condition_args', 'comments': 'Verify parsing of condition arguments for `scipy.signal.find_peaks` function.\n\n\n', 'stemmed comments': ['verifi', 'function', 'condit', 'pars', 'scipysignalfind_peak', 'argument']}"
454,"{'func name': 'test_roots_extrapolate_gh_11185', 'comments': '', 'stemmed comments': []}"
455,"{'func name': 'test_generate_A', 'comments': '', 'stemmed comments': []}"
456,"{'func name': 'test_gammaincc', 'comments': '', 'stemmed comments': []}"
457,"{'func name': 'test_orthogonal_procrustes_skbio_example', 'comments': '', 'stemmed comments': []}"
458,"{'func name': 'direct_shift', 'comments': '', 'stemmed comments': []}"
459,"{'func name': 'test_ne', 'comments': '', 'stemmed comments': []}"
460,"{'func name': 'assert_hulls_equal', 'comments': '', 'stemmed comments': []}"
461,"{'func name': 'get_clib_test_routine', 'comments': '', 'stemmed comments': []}"
462,"{'func name': 'test_cases', 'comments': '', 'stemmed comments': []}"
463,"{'func name': 'test_rbf_epsilon_none_collinear', 'comments': '', 'stemmed comments': []}"
464,"{'func name': 'naive_dst4', 'comments': 'Calculate textbook definition version of DST-IV.\n\n\n', 'stemmed comments': ['textbook', 'dstiv', 'calcul', 'version', 'definit']}"
465,"{'func name': 'test_fftpack_equivalience', 'comments': '', 'stemmed comments': []}"
466,"{'func name': 'test_swapped_byte_order', 'comments': '', 'stemmed comments': []}"
467,"{'func name': 'test_gh_issue_3025', 'comments': 'Github issue #3025 - improper merging of labels\n\n\n', 'stemmed comments': ['improp', 'github', '3025', 'label', 'issu', 'merg']}"
468,"{'func name': 'test_graph_structural_rank', 'comments': '', 'stemmed comments': []}"
469,"{'func name': 'test_gh10880', 'comments': '', 'stemmed comments': []}"
470,"{'func name': 'test_sosfilt_zi', 'comments': '', 'stemmed comments': []}"
471,"{'func name': 'test_error_estimation', 'comments': '', 'stemmed comments': []}"
472,"{'func name': 'test_single_reduction', 'comments': '', 'stemmed comments': []}"
473,"{'func name': 'test_error_handling', 'comments': '', 'stemmed comments': []}"
474,"{'func name': 'test_rotation_within_numpy_array', 'comments': '', 'stemmed comments': []}"
475,"{'func name': 'test_add_round_down', 'comments': '', 'stemmed comments': []}"
476,"{'func name': 'test_sg_filter_interp_edges_3d', 'comments': '', 'stemmed comments': []}"
477,"{'func name': 'test_valid_scipy_version', 'comments': '', 'stemmed comments': []}"
478,"{'func name': 'test_errstate_all_but_one', 'comments': '', 'stemmed comments': []}"
479,"{'func name': 'test_sparse_matrices', 'comments': '', 'stemmed comments': []}"
480,"{'func name': 'test_shichi_consistency', 'comments': '', 'stemmed comments': []}"
481,"{'func name': 'test_nonnumeric_dtypes', 'comments': '', 'stemmed comments': []}"
482,"{'func name': '_generate_spherical_points', 'comments': '', 'stemmed comments': []}"
483,"{'func name': 'test_unstable', 'comments': '', 'stemmed comments': []}"
484,"{'func name': 'test_are_validate_args', 'comments': '', 'stemmed comments': []}"
485,"{'func name': 'test_minimum_spanning_tree', 'comments': '', 'stemmed comments': []}"
486,"{'func name': 'test_endianness', 'comments': '', 'stemmed comments': []}"
487,"{'func name': 'test_fiedler_companion', 'comments': '', 'stemmed comments': []}"
488,"{'func name': 'test_special_points', 'comments': '', 'stemmed comments': []}"
489,"{'func name': 'test_multigammaln_array_arg', 'comments': '', 'stemmed comments': []}"
490,"{'func name': 'test_first_harmonics', 'comments': '', 'stemmed comments': []}"
491,"{'func name': '_sample_sphere', 'comments': '', 'stemmed comments': []}"
492,"{'func name': 'test_spline_filter_vs_matrix_solution', 'comments': '', 'stemmed comments': []}"
493,"{'func name': 'test_binomtest3', 'comments': '', 'stemmed comments': []}"
494,"{'func name': 'test_read', 'comments': '', 'stemmed comments': []}"
495,"{'func name': 'test_given_directory', 'comments': '', 'stemmed comments': []}"
496,"{'func name': 'test_graph_depth_first_trivial_graph', 'comments': '', 'stemmed comments': []}"
497,"{'func name': 'test_zero_sign', 'comments': '', 'stemmed comments': []}"
498,"{'func name': 'random_entry', 'comments': '', 'stemmed comments': []}"
499,"{'func name': 'test_tukeylambda_stats_invalid', 'comments': 'Test values of lambda outside the domains of the functions.\n\n\n', 'stemmed comments': ['valu', 'function', 'test', 'domain', 'lambda', 'outsid']}"
500,"{'func name': 'upfirdn_naive', 'comments': 'Naive upfirdn processing in Python.\n\nNote: arg order (x, h) differs to facilitate apply_along_axis use.\n', 'stemmed comments': ['note', 'naiv', 'x', 'apply_along_axi', 'order', 'arg', 'upfirdn', 'process', 'use', 'differ', 'python', 'h', 'facilit']}"
501,"{'func name': 'test_make_system_bad_shape', 'comments': '', 'stemmed comments': []}"
502,"{'func name': 'test_warning_calls_stacklevels', 'comments': '', 'stemmed comments': []}"
503,"{'func name': 'compute_frequency', 'comments': ""Compute theta'(t)/(2*pi), where theta'(t) is the derivative of theta(t).\n\n\n"", 'stemmed comments': ['pi', 'theta', '2', 'comput', 'deriv', '/']}"
504,"{'func name': 'test_write_roundtrip', 'comments': '', 'stemmed comments': []}"
505,"{'func name': 'test_deprecated_pickleable', 'comments': '', 'stemmed comments': []}"
506,"{'func name': 'test_wrightomega_real_versus_complex', 'comments': '', 'stemmed comments': []}"
507,"{'func name': 'test_gh9551_raise_error_if_disp_true', 'comments': 'Test that if disp is true then zero derivative raises RuntimeError\n\n\n', 'stemmed comments': ['test', 'zero', 'true', 'disp', 'deriv', 'runtimeerror', 'rais']}"
508,"{'func name': 'test_riemann_zeta_avoid_overflow', 'comments': '', 'stemmed comments': []}"
509,"{'func name': 'test_psolveq_t', 'comments': '', 'stemmed comments': []}"
510,"{'func name': '_minimize_tnc', 'comments': ""Minimize a scalar function of one or more variables using a truncated Newton (TNC) algorithm.\n\nOptions ------- eps : float or ndarray If `jac is None` the absolute step size used for numerical approximation of the jacobian via forward differences. scale : list of floats Scaling factors to apply to each variable. If None, the factors are up-low for interval bounded variables and 1+|x] fo the others. Defaults to None. offset : float Value to subtract from each variable. If None, the offsets are (up+low)/2 for interval bounded variables and x for the others. disp : bool Set to True to print convergence messages. maxCGit : int Maximum number of hessian*vector evaluations per main iteration. If maxCGit == 0, the direction chosen is -gradient if maxCGit < 0, maxCGit is set to max(1,min(50,n/2)). Defaults to -1. maxiter : int, optional Maximum number of function evaluations. This keyword is deprecated in favor of `maxfun`. Only if `maxfun` is None is this keyword used. eta : float Severity of the line search. If < 0 or > 1, set to 0.25. Defaults to -1. stepmx : float Maximum step for the line search. May be increased during call. If too small, it will be set to 10.0. Defaults to 0. accuracy : float Relative precision for finite difference calculations. If <= machine_precision, set to sqrt(machine_precision). Defaults to 0. minfev : float Minimum function value estimate. Defaults to 0. ftol : float Precision goal for the value of f in the stopping criterion. If ftol < 0.0, ftol is set to 0.0 defaults to -1. xtol : float Precision goal for the value of x in the stopping criterion (after applying x scaling factors). If xtol < 0.0, xtol is set to sqrt(machine_precision). Defaults to -1. gtol : float Precision goal for the value of the projected gradient in the stopping criterion (after applying x scaling factors). If gtol < 0.0, gtol is set to 1e-2 * sqrt(accuracy). Setting it to 0.0 is not recommended. Defaults to -1. rescale : float Scaling factor (in log10) used to trigger f value rescaling.\n\nIf 0, rescale at each iteration.\n\nIf a large value, never rescale.\n\nIf < 0, rescale is set to 1.3. finite_diff_rel_step : None or array_like, optional If `jac in ['2-point', '3-point', 'cs']` the relative step size to use for numerical approximation of the jacobian. The absolute step size is computed as ``h = rel_step * sign(x0) * max(1, abs(x0))``, possibly adjusted to fit into the bounds. For ``method='3-point'`` the sign of `h` is ignored. If None (default) then step is selected automatically. maxfun : int Maximum number of function evaluations. If None, `maxfun` is set to max(100, 10*len(x0)). Defaults to None.\n"", 'stemmed comments': ['bound', '/2', 'default', '>', 'function', 'never', 'number', 'call', 'variabl', 'log10', 'deprec', 'search', 'offset', 'ignor', 'none', 'jacobian', 'for', 'absolut', '3point', 'sqrt', 'minim', 'rel', 'differ', 'int', 'main', 'messag', '=', 'criterion', 'finit', 'max', 'hessian', 'print', 'accuraci', '2point', 'tnc', 'machine_precis', '1|x', 'thi', 'eta', 'stop', 'newton', '00', 'float', 'finite_diff_rel_step', 'other', '100', 'trigger', 'evalu', 'stepmx', 'scale', 'x0', '1e2', 'goal', 'min', 'fo', 'x', 'valu', 'vector', '0', 'cs', 'possibl', 'larg', 'numer', 'option', 'ndarray', 'gtol', 'len', 'recommend', 'scalar', 'If', 'truncat', 'one', 'ab', 'favor', 'per', '==', 'line', 'ftol', 'maximum', 'h', 'interv', 'subtract', 'converg', 'increas', 'comput', '50', 'maxit', 'f', '10', 'sever', 'factor', 'maxcgit', 'may', 'rescal', 'size', 'rel_step', 'use', 'select', 'minfev', 'gradient', 'set', 'direct', 'precis', 'onli', '13', 'bool', 'disp', 'n/2', 'small', 'step', 'keyword', 'minimum', 'the', 'approxim', 'forward', 'chosen', 'ep', 'true', 'uplow', '025', 'xtol', 'list', 'adjust', '[', '1', ']', 'project', 'automat', 'estim', 'algorithm', 'sign', 'jac', 'calcul', 'appli', 'fit', 'method=', '<', 'iter', 'via', 'array_lik', 'maxfun']}"
511,"{'func name': 'tr_interior_point', 'comments': 'Trust-region interior points method.\n\nSolve problem: minimize fun(x) subject to: constr_ineq(x) <= 0 constr_eq(x) = 0 using trust-region interior point method described in [1]_.\n', 'stemmed comments': ['method', 'point', 'constr_ineq', 'minim', '[', '1', 'describ', 'trustregion', 'subject', ']', 'interior', 'x', '_', '0', '=', 'use', 'fun', '<', 'constr_eq', 'solv', 'problem']}"
512,"{'func name': 'trf_linear', 'comments': '', 'stemmed comments': []}"
513,"{'func name': 'trf_no_bounds', 'comments': '', 'stemmed comments': []}"
514,"{'func name': 'unicode_check', 'comments': 'If showall is True, all non-ASCII characters are displayed.\n\n\n', 'stemmed comments': ['showal', 'true', 'If', 'nonascii', 'display', 'charact']}"
515,"{'func name': 'lagrange_inversion', 'comments': ""Given a series\n\nf(x) = a[1]*x + a[2]*x**2 + ... + a[n-1]*x**(n\n\n- 1),\n\nuse the Lagrange inversion formula to compute a series\n\ng(x) = b[1]*x + b[2]*x**2 + ... + b[n-1]*x**(n\n\n- 1)\n\nso that f(g(x)) = g(f(x)) = x mod x**n. We must have a[0] = 0, so necessarily b[0] = 0 too.\n\nThe algorithm is naive and could be improved, but speed isn't an issue here and it's easy to read.\n"", 'stemmed comments': ['n1', 'We', 'given', 'necessarili', 'seri', 'nt', 'mod', 'formula', 'the', 's', 'read', 'invers', '2', 'g', 'improv', 'could', 'easi', 'naiv', '[', '1', 'n', 'must', 'lagrang', 'comput', ']', 'issu', 'f', 'algorithm', 'x', '0', '=', 'use', 'b', 'speed']}"
516,"{'func name': 'make_system', 'comments': 'Make a linear system Ax=b\n\nParameters ---------- A : LinearOperator sparse or dense matrix (or any valid input to aslinearoperator) M : {LinearOperator, Nones} preconditioner sparse or dense matrix (or any valid input to aslinearoperator) x0 : {array_like, None} initial guess to iterative method b : array_like right hand side\n##### Returns\n* **(A, M, x, b, postprocess)\n    A **: LinearOperator\n        matrix of the linear system\n    M\n\n', 'stemmed comments': ['initi', 'system', 'linearoper', 'right', 'side', 'return', 'M', 'method', 'postprocess', 'valid', 'linear', 'paramet', '}', 'none', 'spars', 'precondition', 'x0', 'dens', 'hand', '{', 'guess', 'x', 'make', 'input', 'ax=b', 'aslinearoper', 'A', 'matrix', 'iter', 'array_lik', 'b']}"
517,"{'func name': 'kmeans2', 'comments': 'Classify a set of observations into k clusters using the k-means algorithm.\n\nThe algorithm attempts to minimize the Euclidean distance between observations and centroids. Several initialization methods are included.\n\nParameters ---------- data : ndarray A \'M\' by \'N\' array of \'M\' observations in \'N\' dimensions or a length \'M\' array of \'M\' 1-D observations. k : int or ndarray The number of clusters to form as well as the number of centroids to generate. If `minit` initialization string is \'matrix\', or if a ndarray is given instead, it is interpreted as initial cluster to use instead. iter : int, optional Number of iterations of the k-means algorithm to run. Note that this differs in meaning from the iters parameter to the kmeans function. thresh : float, optional (not used yet) minit : str, optional Method for initialization. Available methods are \'random\', \'points\', \'++\' and \'matrix\':\n\n\'random\': generate k centroids from a Gaussian with mean and variance estimated from the data.\n\n\'points\': choose k observations (rows) at random from data for the initial centroids.\n\n\'++\': choose k observations accordingly to the kmeans++ method (careful seeding)\n\n\'matrix\': interpret the k parameter as a k by M (or length k array for 1-D data) array of initial centroids. missing : str, optional Method to deal with empty clusters. Available methods are \'warn\' and \'raise\':\n\n\'warn\': give a warning and continue.\n\n\'raise\': raise an ClusterError and terminate the algorithm. check_finite : bool, optional Whether to check that the input matrices contain only finite numbers. Disabling may give a performance gain, but may result in problems (crashes, non-termination) if the inputs do contain infinities or NaNs. Default: True\n##### Returns\n* **centroid **: ndarray\n    A \'k\' by \'N\' array of centroids found at the last iteration of\n    k-means.\n\n* **label **: ndarray\n    label[i] is the code or index of the centroid the\n    ith observation is closest to.\n\n* **.. [1] D. Arthur and S. Vassilvitskii, ""k-means++**: the advantages of\n   careful seeding"", Proceedings of the Eighteenth Annual ACM-SIAM Symposium\n   on Discrete Algorithms, 2007.\n\n* **>>> plt.plot(w0[**: , 0], w0[\n\n* **>>> plt.plot(w1[**: , 0], w1[\n\n* **>>> plt.plot(w2[**: , 0], w2[\n\n* **>>> plt.plot(centroid[**: , 0], centroid[\n\n', 'stemmed comments': ['N', 'default', 'varianc', '>', 'function', 'number', 'string', 'w1', 'ith', 'paramet', 'point', 'observ', 'seed', 'minim', 'str', 'centroid', 'last', 'differ', 'int', 'instead', 'includ', 'finit', 'index', 'initi', 'D', 'annual', 'given', 'distanc', 'mean', 'yet', 'k', 'gain', 'eighteenth', 'miss', 'row', 'rais', 'note', 'float', 'classifi', 'gener', 'crash', 'run', 'check_finit', 'whether', 'clustererror', 'empti', 'advantag', 'nontermin', '0', 'input', 'pltplot', 'vassilvitskii', 'A', 'label', 'gaussian', 'option', 'nan', 'ndarray', 'array', 'If', 'proceed', 'matric', 'method', 'w2', 'choos', 'avail', 'code', 'check', 'symposium', 'closest', 'well', 'termin', 'give', 'arthur', 'deal', 'euclidean', 'warn', 'data', 'sever', 'may', 'cluster', 'found', 'use', 'kmean', 'set', 'acmsiam', 'bool', 'perform', 'disabl', 'return', 'M', 'the', 'result', 'true', 'attempt', 'contain', 'length', 'thresh', 'accordingli', 'continu', '[', '1', ']', '2007', 'form', 'care', 'estim', 'discret', 'algorithm', 'w0', 'interpret', 'dimens', 'minit', 'infin', 'S', 'random', '1D', 'iter', 'matrix', 'problem']}"
518,"{'func name': 'unit_impulse', 'comments': ""Unit impulse signal (discrete delta function) or unit basis vector.\n\nParameters ---------- shape : int or tuple of int Number of samples in the output (1-D), or a tuple that represents the shape of the output (N-D). idx : None or int or tuple of int or 'mid', optional Index at which the value is 1.\n\nIf None, defaults to the 0th element. If ``idx='mid'``, the impulse will be centered at ``shape // 2`` in all dimensions.\n\nIf an int, the impulse will be at `idx` in all dimensions. dtype : data-type, optional The desired data-type for the array, e.g., ``numpy.int8``.\n\nDefault is ``numpy.float64``.\n##### Returns\n* **y **: ndarray\n    Output array containing an impulse signal.\n\n* **.. versionadded**: \n\n* **An impulse at the 0th element (**: math\n\n* **Impulse offset by 2 samples (**: math\n\n* **2-dimensional impulse, centered**: \n\n* **Impulse at (2, 2), using broadcasting**: \n\n* **Plot the impulse response of a 4th-order Butterworth lowpass filter**: \n\n"", 'stemmed comments': ['option', 'ND', 'default', 'array', 'dtype', 'function', '0th', 'numpyint8', 'ndarray', 'number', 'impuls', 'repres', 'plot', 'butterworth', 'If', 'output', 'return', 'sampl', 'tupl', 'the', 'broadcast', 'respons', 'lowpass', 'offset', 'paramet', 'idx', 'desir', 'none', '2', 'eg', 'unit', 'delta', 'contain', 'datatyp', 'signal', 'mid', '1', 'idx=mid', 'center', 'math', 'int', 'discret', 'element', 'shape', 'basi', 'An', 'filter', 'valu', 'vector', 'dimens', 'numpyfloat64', '//', 'versionad', 'use', '1D', '4thorder', '2dimension', 'index']}"
519,"{'func name': 'cwt', 'comments': 'Continuous wavelet transform.\n\nPerforms a continuous wavelet transform on `data`, using the `wavelet` function. A CWT performs a convolution with `data` using the `wavelet` function, which is characterized by a width parameter and length parameter. The `wavelet` function is allowed to be complex.\n\nParameters ---------- data : (N,) ndarray data on which to perform the transform. wavelet : function Wavelet function, which should take 2 arguments. The first argument is the number of points that the returned vector will have (len(wavelet(length,width)) == length). The second is a width parameter, defining the size of the wavelet (e.g. standard deviation of a gaussian). See `ricker`, which satisfies these requirements. widths : (M,) sequence Widths to use for transform. dtype : data-type, optional The desired data type of output. Defaults to ``float64`` if the output of `wavelet` is real and ``complex128`` if it is complex.\n\n.. versionadded:: 1.4.0\n\nkwargs Keyword arguments passed to wavelet function.\n\n.. versionadded:: 1.4.0\n##### Returns\n* **cwt**: (M, N) ndarray\n    Will have shape of (len(widths), len(data)).\n\n* **.. versionadded**: \n\n* ****: \n\n', 'stemmed comments': ['option', 'N', 'default', 'ndarray', 'dtype', 'function', 'len', 'number', 'convolut', 'perform', 'output', 'standard', 'real', 'return', 'defin', 'M', 'keyword', 'will', 'the', 'requir', '==', 'paramet', 'desir', 'take', 'first', '2', 'eg', 'cwt', 'point', 'complex128', 'transform', 'wavelet', 'float64', 'datatyp', 'length', 'ricker', 'continu', 'type', 'width', 'allow', '140', 'second', 'sequenc', 'data', 'shape', 'satisfi', 'vector', 'kwarg', 'see', 'size', 'deviat', 'pass', 'character', 'versionad', 'use', 'A', 'complex', 'gaussian', 'argument']}"
520,"{'func name': '_array_tofile', 'comments': '', 'stemmed comments': []}"
521,"{'func name': 'get_window', 'comments': 'Return a window of a given length and type.\n\nParameters ---------- window : string, float, or tuple The type of window to create. See below for more details. Nx : int The number of samples in the window. fftbins : bool, optional If True (default), create a ""periodic"" window, ready to use with `ifftshift` and be multiplied by the result of an FFT (see also :func:`~scipy.fft.fftfreq`). If False, create a ""symmetric"" window, for use in filter design.\n##### Returns\n* **Window types**: \n\n', 'stemmed comments': ['period', 'option', 'default', 'given', 'func', 'number', 'string', 'bool', 'If', 'symmetr', 'return', 'sampl', 'Nx', 'fftbin', 'the', 'tupl', 'ifftshift', 'design', 'result', 'float', 'paramet', 'window', 'true', 'fals', 'length', 'type', 'readi', 'fft', 'also', '~scipyfftfftfreq', 'creat', 'filter', 'int', 'multipli', 'see', 'detail', 'use']}"
522,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
523,"{'func name': 'toms748', 'comments': 'Find a zero using TOMS Algorithm 748 method.\n\nImplements the Algorithm 748 method of Alefeld, Potro and Shi to find a zero of the function `f` on the interval `[a , b]`, where `f(a)` and `f(b)` must have opposite signs.\n\nIt uses a mixture of inverse cubic interpolation and ""Newton-quadratic"" steps. [APS1995].\n\nParameters ---------- f : function Python function returning a scalar. The function :math:`f` must be continuous, and :math:`f(a)` and :math:`f(b)` have opposite signs. a : scalar, lower boundary of the search interval b : scalar, upper boundary of the search interval args : tuple, optional containing extra arguments for the function `f`. `f` is called by ``f(x, *args)``. k : int, optional The number of Newton quadratic steps to perform each iteration. ``k>=1``. xtol : scalar, optional The computed root ``x0`` will satisfy ``np.allclose(x, x0, atol=xtol, rtol=rtol)``, where ``x`` is the exact root. The parameter must be nonnegative. rtol : scalar, optional The computed root ``x0`` will satisfy ``np.allclose(x, x0, atol=xtol, rtol=rtol)``, where ``x`` is the exact root. maxiter : int, optional If convergence is not achieved in `maxiter` iterations, an error is raised. Must be >= 0. full_output : bool, optional If `full_output` is False, the root is returned. If `full_output` is True, the return value is ``(x, r)``, where `x` is the root, and `r` is a `RootResults` object. disp : bool, optional If True, raise RuntimeError if the algorithm didn\'t converge. Otherwise, the convergence status is recorded in the `RootResults` return object.\n##### Returns\n* **x0 **: float\n    Approximate Zero of `f`\n\n* **r **: `RootResults` (present if ``full_output = True``)\n    Object containing information about the convergence. In particular,\n    ``r.converged`` is True if the routine converged.\n\n* **fsolve **: find zeroes in N dimensions.\n\n* **.. [APS1995]\n   Alefeld, G. E. and Potra, F. A. and Shi, Yixun,\n   *Algorithm 748**: Enclosing Zeros of Continuous Functions*,\n   ACM Trans. Math. Softw. Volume 221(1995)\n   doi = {10.1145/210089.210111}\n\n* **>>> def f(x)**: \n\n* **>>> results\n      converged**: True\n           flag\n\n', 'stemmed comments': ['N', '>', '1995', 'function', 'number', 'call', 'nt', 'rconverg', 'search', 'It', 'paramet', 'enclos', 'lower', 'must', 'exact', 'achiev', 'int', '{', 'volum', 'In', '=', '101145/210089210111', 'argument', 'shi', 'k', 'G', 'object', 'quadrat', 'rais', 'find', 'newton', 'npallclos', 'rtol', 'float', 'invers', 'particular', '}', 'r', 'rtol=rtol', 'runtimeerror', 'x0', 'error', 'E', '=1', '221', 'x', 'valu', '0', 'mixtur', 'implement', 'A', 'F', 'python', 'newtonquadrat', 'option', 'aps1995', 'scalar', 'If', 'nonneg', 'method', 'tupl', 'tom', 'extra', 'fals', 'cubic', 'upper', 'softw', 'present', 'interv', 'acm', 'zero', 'converg', 'record', '748', 'routin', 'comput', 'maxit', 'f', 'satisfi', 'fsolv', 'inform', 'doi', 'atol=xtol', 'use', 'b', 'interpol', 'bool', 'disp', 'perform', 'return', 'step', 'statu', 'the', 'flag', 'approxim', 'root', 'result', 'rootresult', 'true', 'potro', 'contain', 'xtol', 'def', '[', 'continu', 'alefeld', 'arg', 'opposit', 'otherwis', ']', 'yixun', 'math', 'tran', 'algorithm', 'sign', 'boundari', 'dimens', 'potra', 'iter', 'full_output']}"
524,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
