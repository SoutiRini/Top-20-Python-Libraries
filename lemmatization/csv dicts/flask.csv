0,"{'func name': 'setupmethod', 'comments': 'Wraps a method so that it performs a check in debug mode if the first request was already handled.\n\n\n', 'stemmed comments': ['method', 'perform', 'request', 'mode', 'first', 'alreadi', 'debug', 'check', 'handl', 'wrap']}"
1,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
2,"{'func name': 'has_app_context', 'comments': 'Works like :func:`has_request_context` but for the application context.  You can also just do a boolean check on the :data:`current_app` object instead.\n\n.. versionadded:: 0.9\n', 'stemmed comments': ['func', 'has_request_context', '09', 'like', 'context', 'applic', 'object', 'also', 'current_app', 'data', 'boolean', 'instead', 'work', 'versionad', 'check', 'you']}"
3,"{'func name': 'explain_ignored_app_run', 'comments': '', 'stemmed comments': []}"
4,"{'func name': '_find_app', 'comments': '', 'stemmed comments': []}"
5,"{'func name': 'is_ip', 'comments': 'Determine if the given string is an IP address.\n\nparam value: value to check :type value: str\n\n:return: True if string is an IP address :rtype: bool\n', 'stemmed comments': ['type', 'return', 'address', 'IP', 'param', 'str', 'rtype', 'bool', 'given', 'true', 'determin', 'valu', 'check', 'string']}"
6,"{'func name': 'create_logger', 'comments': ""Get the Flask app's logger and configure it if needed.\n\nThe logger name will be the same as :attr:`app.import_name <flask.Flask.name>`.\n\nWhen :attr:`~flask.Flask.debug` is enabled, set the logger level to :data:`logging.DEBUG` if it is not set.\n\nIf there is no handler for the logger's effective level, add a :class:`~logging.StreamHandler` for :func:`~flask.logging.wsgi_errors_stream` with a basic format.\n"", 'stemmed comments': ['format', 'configur', 'name', 'app', 'effect', 'flaskflasknam', 'handler', 'data', '>', 'when', '<', 'attr', 'level', 'get', '~loggingstreamhandl', 'If', 'enabl', 'add', 'logger', '~flaskflaskdebug', 'loggingdebug', 'set', 's', 'flask', 'func', 'the', '~flaskloggingwsgi_errors_stream', 'need', 'basic', 'appimport_nam', 'class']}"
7,"{'func name': 'render_template_string', 'comments': 'Renders a template from the given template source string with the given context. Template variables will be autoescaped.\n\nparam source: the source code of the template to be rendered :param context: the variables that should be available in the context of the template.\n', 'stemmed comments': ['sourc', 'context', 'autoescap', 'variabl', 'templat', 'avail', 'param', 'given', 'render', 'code', 'string']}"
