0,"{'func name': '_has_ajaxcrawlable_meta', 'comments': '>>> _has_ajaxcrawlable_meta(\'<html><head><meta name=""fragment""  content=""!""/></head><body></body></html>\') True >>> _has_ajaxcrawlable_meta(""<html><head><meta name=\'fragment\' content=\'!\'></head></html>"") True >>> _has_ajaxcrawlable_meta(\'<html><head><!--<meta name=""fragment""  content=""!""/>--></head><body></body></html>\') False >>> _has_ajaxcrawlable_meta(\'<html></html>\') False\n\n\n', 'stemmed comments': ['bodi', '_has_ajaxcrawlable_meta', '<', 'fals', '!', 'html', '/bodi', '/head', 'head', '/html', 'meta', 'fragment', 'content=', 'name=', 'name=frag', '>', 'true', '/']}"
1,"{'func name': '_getarg', 'comments': '', 'stemmed comments': []}"
2,"{'func name': 'is_botocore', 'comments': '', 'stemmed comments': []}"
3,"{'func name': '_run_command_profiled', 'comments': '', 'stemmed comments': []}"
4,"{'func name': 'obsolete_setter', 'comments': '', 'stemmed comments': []}"
5,"{'func name': 'wrap_loader_context', 'comments': 'Wrap functions that receive loader_context to contain the context ""pre-loaded"" and expose a interface that receives only one argument\n\n\n', 'stemmed comments': ['wrap', 'receiv', 'context', 'preload', 'loader_context', 'contain', 'one', 'argument', 'interfac', 'expos', 'function']}"
6,"{'func name': 'feed_process_params_from_cli', 'comments': ""Receives feed export params (from the 'crawl' or 'runspider' commands), checks for inconsistencies in their quantities and returns a dictionary suitable to be used as the FEEDS setting.\n\n\n"", 'stemmed comments': ['export', 'receiv', 'set', 'feed', 'quantiti', 'crawl', 'return', 'use', 'check', 'command', 'runspid', 'inconsist', 'param', 'dictionari', 'suitabl']}"
7,"{'func name': 'maybe_skip_member', 'comments': '', 'stemmed comments': []}"
8,"{'func name': 'only_asyncio', 'comments': '', 'stemmed comments': []}"
9,"{'func name': 'setup', 'comments': '', 'stemmed comments': []}"
10,"{'func name': 'start_python_console', 'comments': 'Start Python console bound to the given namespace. Readline support and tab completion will be used on Unix, if available.\n\n\n', 'stemmed comments': ['readlin', 'start', 'tab', 'avail', 'unix', 'use', 'namespac', 'consol', 'support', 'given', 'python', 'bound', 'complet']}"
11,"{'func name': 'potential_domain_matches', 'comments': ""Potential domain matches for a cookie\n\n>>> potential_domain_matches('www.example.com') ['www.example.com', 'example.com', '.www.example.com', '.example.com']\n"", 'stemmed comments': ['wwwexamplecom', 'potenti', 'potential_domain_match', 'match', '[', 'examplecom', 'domain', 'cooki', '>', ']']}"
12,"{'func name': '_get_method', 'comments': '', 'stemmed comments': []}"
13,"{'func name': 'curl_to_request_kwargs', 'comments': 'Convert a cURL command syntax to Request kwargs.\n\nparam str curl_command: string containing the curl command :param bool ignore_unknown_options: If true, only a warning is emitted when cURL options are unknown. Otherwise raises an error. (default: True) :return: dictionary of Request kwargs\n', 'stemmed comments': ['request', 'error', 'warn', 'otherwis', 'contain', 'bool', 'emit', 'curl', 'command', 'param', 'unknown', 'str', 'default', 'ignore_unknown_opt', 'true', 'kwarg', 'convert', 'string', 'syntax', 'If', 'return', 'curl_command', 'dictionari', 'rais', 'option']}"
14,"{'func name': 'inthread', 'comments': 'Decorator to call a function in a thread and return a deferred with the result\n\n\n', 'stemmed comments': ['result', 'return', 'decor', 'defer', 'call', 'function', 'thread']}"
15,"{'func name': 'maybeDeferred_coro', 'comments': 'Copy of defer.maybeDeferred that also converts coroutines to Deferreds.\n\n\n', 'stemmed comments': ['convert', 'also', 'copi', 'coroutin', 'defer', 'defermaybedef']}"
16,"{'func name': 'method_is_overridden', 'comments': ""Return True if a method named ``method_name`` of a ``base_class`` is overridden in a ``subclass``.\n\n>>> class Base: ...\n\n\n\n def foo(self): ...\n\n\n\n\n\n\n\n pass >>> class Sub1(Base): ...\n\n\n\n pass >>> class Sub2(Base): ...\n\n\n\n def foo(self): ...\n\n\n\n\n\n\n\n pass >>> class Sub3(Sub1): ...\n\n\n\n def foo(self): ...\n\n\n\n\n\n\n\n pass >>> class Sub4(Sub2): ...\n\n\n\n pass >>> method_is_overridden(Sub1, Base, 'foo') False >>> method_is_overridden(Sub2, Base, 'foo') True >>> method_is_overridden(Sub3, Base, 'foo') True >>> method_is_overridden(Sub4, Base, 'foo') True\n"", 'stemmed comments': ['self', 'overridden', 'method_nam', 'foo', 'def', 'name', 'method_is_overridden', 'class', 'base_class', 'sub3', 'sub1', 'sub4', 'base', 'true', 'subclass', 'sub2', 'fals', 'return', 'method', 'pass', '>']}"
17,"{'func name': 'pprint', 'comments': '', 'stemmed comments': []}"
18,"{'func name': 'open', 'comments': 'Open or create a dummy database compatible.\n\nArguments ``flag`` and ``mode`` are ignored.\n', 'stemmed comments': ['creat', 'mode', 'ignor', 'compat', 'argument', 'flag', 'databas', 'dummi', 'open']}"
19,"{'func name': 'print_engine_status', 'comments': '', 'stemmed comments': []}"
20,"{'func name': '_get_clickable', 'comments': 'Returns the clickable element specified in clickdata, if the latter is given. If not, it returns the first clickable element found\n\n\n', 'stemmed comments': ['clickdata', 'clickabl', 'element', 'specifi', 'If', 'return', 'found', 'given', 'first', 'latter']}"
21,"{'func name': 'ftp_store_file', 'comments': 'Opens a FTP connection with passed credentials,sets current directory to the directory extracted from given path, then uploads the file to server\n\n\n', 'stemmed comments': ['file', 'upload', 'set', 'server', 'path', 'ftp', 'connect', 'current', 'directori', 'given', 'pass', 'extract', 'credenti', 'open']}"
22,"{'func name': 'sanitize_module_name', 'comments': ""Sanitize the given module name, by replacing dashes and points with underscores and prefixing it with a letter if it doesn't start with one\n\n\n"", 'stemmed comments': ['underscor', 'dash', 'nt', 'start', 'one', 'name', 'letter', 'point', 'modul', 'given', 'prefix', 'replac', 'sanit']}"
23,"{'func name': 'gzip_magic_number', 'comments': '', 'stemmed comments': []}"
24,"{'func name': 'decode_chunked_transfer', 'comments': 'Parsed body received with chunked transfer encoding, and return the decoded body.\n\nFor more info see: https://en.wikipedia.org/wiki/Chunked_transfer_encoding\n', 'stemmed comments': ['bodi', 'receiv', '//enwikipediaorg/wiki/chunked_transfer_encod', 'chunk', 'transfer', 'return', 'info', 'see', 'http', 'encod', 'decod', 'pars', 'for']}"
25,"{'func name': 'tunnel_request_data', 'comments': 'Return binary content of a CONNECT request.\n\n>>> from scrapy.utils.python import to_unicode as s >>> s(tunnel_request_data(""example.com"", 8080)) \'CONNECT example.com:8080 HTTP/1.1\\r\\nHost: example.com:8080\\r\\n\\r\\n\' >>> s(tunnel_request_data(""example.com"", 8080, b""123"")) \'CONNECT example.com:8080 HTTP/1.1\\r\\nHost: example.com:8080\\r\\nProxy-Authorization: 123\\r\\n\\r\\n\' >>> s(tunnel_request_data(b""example.com"", ""8090"")) \'CONNECT example.com:8090 HTTP/1.1\\r\\nHost: example.com:8090\\r\\n\\r\\n\'\n', 'stemmed comments': ['request', 'examplecom', '8080', 'binari', '123\\r\\n\\r\\n', 'import', '>', 'connect', 'examplecom8080', 'examplecom8080\\r\\nproxyauthor', 'to_unicod', 'examplecom8090\\r\\n\\r\\n', 'scrapyutilspython', '8090', 'examplecom8090', 'http/11\\r\\nhost', 'return', 'examplecom8080\\r\\n\\r\\n', 'content', 'tunnel_request_data', '123', 'b']}"
26,"{'func name': 'rfc1123_to_epoch', 'comments': '', 'stemmed comments': []}"
27,"{'func name': 'urlparse_cached', 'comments': 'Return urlparse.urlparse caching the result, where the argument can be a Request or Response object\n\n\n', 'stemmed comments': ['result', 'respons', 'request', 'urlparseurlpars', 'object', 'return', 'argument', 'cach']}"
28,"{'func name': 'createResolver', 'comments': '', 'stemmed comments': []}"
29,"{'func name': '_body_or_str', 'comments': '', 'stemmed comments': []}"
30,"{'func name': 'job_dir', 'comments': '', 'stemmed comments': []}"
31,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
32,"{'func name': 'logformatter_adapter', 'comments': 'Helper that takes the dictionary output from the methods in LogFormatter and adapts it into a tuple of positional arguments for logger.log calls, handling backward compatibility as well.\n\n\n', 'stemmed comments': ['loggerlog', 'well', 'posit', 'helper', 'output', 'logformatt', 'tupl', 'handl', 'backward', 'compat', 'argument', 'call', 'method', 'take', 'adapt', 'dictionari']}"
33,"{'func name': '_canonicalize_link_url', 'comments': '', 'stemmed comments': []}"
34,"{'func name': '_to_bytes_or_none', 'comments': '', 'stemmed comments': []}"
35,"{'func name': 'warn_on_generator_with_return_value', 'comments': ""Logs a warning if a callable is a generator function and includes a 'return' statement with a value different than None\n\n\n"", 'stemmed comments': ['differ', 'callabl', 'return', 'none', 'valu', 'warn', 'statement', 'log', 'function', 'gener', 'includ']}"
36,"{'func name': 'ssl_context_factory', 'comments': '', 'stemmed comments': []}"
37,"{'func name': 'install_shutdown_handlers', 'comments': ""Install the given function as a signal handler for all common shutdown signals (such as SIGINT, SIGTERM, etc). If override_sigint is ``False`` the SIGINT handler won't be install if there is already a handler in place (e.g.  Pdb)\n\n\n"", 'stemmed comments': ['instal', 'alreadi', 'pdb', 'eg', 'signal', 'sigterm', 'handler', 'etc', 'function', 'nt', 'override_sigint', 'shutdown', 'given', 'sigint', 'fals', 'If', 'wo', 'place', 'common']}"
38,"{'func name': '_path_safe', 'comments': ""Return a filesystem-safe version of a string ``text``\n\n>>> _path_safe('simple.org').startswith('simple.org') True >>> _path_safe('dash-underscore_.org').startswith('dash-underscore_.org') True >>> _path_safe('some@symbol?').startswith('some_symbol_') True\n"", 'stemmed comments': ['symbol', 'startswith', 'some_symbol_', 'string', '>', 'return', '_path_saf', '?', 'some', '@', 'version', 'filesystemsaf', 'dashunderscore_org', 'text', 'true', 'simpleorg']}"
39,"{'func name': 'get_project_settings', 'comments': '', 'stemmed comments': []}"
40,"{'func name': 'global_object_name', 'comments': ""Return full name of a global object.\n\n>>> from scrapy import Request >>> global_object_name(Request) 'scrapy.http.request.Request'\n"", 'stemmed comments': ['import', 'scrapyhttprequestrequest', 'request', 'name', 'object', 'scrapi', 'return', 'global', 'global_object_nam', '>', 'full']}"
41,"{'func name': 'is_asyncio_reactor_installed', 'comments': '', 'stemmed comments': []}"
42,"{'func name': '_load_policy_class', 'comments': 'Expect a string for the path to the policy class, otherwise try to interpret the string as a standard value from https://www.w3.org/TR/referrer-policy/#referrer-policies\n\n\n', 'stemmed comments': ['class', 'referrerpolici', 'expect', 'string', 'tri', 'http', 'polici', '//wwww3org/tr/referrerpolicy/', 'valu', 'interpret', 'path', 'standard', 'otherwis']}"
43,"{'func name': 'clean_link', 'comments': 'Remove leading and trailing whitespace and punctuation\n\n\n', 'stemmed comments': ['remov', 'whitespac', 'lead', 'trail', 'punctuat']}"
44,"{'func name': '_get_method', 'comments': '', 'stemmed comments': []}"
45,"{'func name': 'referer_str', 'comments': 'Return Referer HTTP header suitable for logging.\n\n\n', 'stemmed comments': ['refer', 'http', 'return', 'log', 'header', 'suitabl']}"
46,"{'func name': 'open_in_browser', 'comments': 'Open the given response in a local web browser, populating the <base> tag for external links to work\n\n\n', 'stemmed comments': ['popul', 'browser', 'web', '<', 'respons', '>', 'extern', 'work', 'tag', 'given', 'link', 'base', 'local', 'open']}"
47,"{'func name': 'decode_robotstxt', 'comments': '', 'stemmed comments': []}"
48,"{'func name': '_import_file', 'comments': '', 'stemmed comments': []}"
49,"{'func name': '_get_boto_connection', 'comments': '', 'stemmed comments': []}"
50,"{'func name': 'rev_role', 'comments': '', 'stemmed comments': []}"
51,"{'func name': 'has_environment_marker_platform_impl_support', 'comments': ""Code extracted from 'pytest/setup.py' https://github.com/pytest-dev/pytest/blob/7538680c/setup.py#L31\n\nThe first known release to support environment marker with range operators it is 18.5, see: https://setuptools.readthedocs.io/en/latest/history.html#id235\n"", 'stemmed comments': ['l31', 'rang', 'http', '185', 'see', 'code', 'the', 'known', 'releas', 'extract', '//setuptoolsreadthedocsio/en/latest/historyhtml', 'pytest/setuppi', 'id235', '//githubcom/pytestdev/pytest/blob/7538680c/setuppi', 'support', 'first', 'oper', 'marker', 'environ']}"
52,"{'func name': '_request_deferred', 'comments': 'Wrap a request inside a Deferred.\n\nThis function is harmful, do not use it until you know what you are doing.\n\nThis returns a Deferred whose first pair of callbacks are the request callback and errback. The Deferred also triggers when the request callback/errback is executed (i.e. when the request is downloaded)\n\nWARNING: Do not call request.replace() until after the deferred is called.\n', 'stemmed comments': ['whose', 'callback/errback', 'also', 'request', 'know', 'trigger', 'insid', 'callback', 'defer', 'warn', 'ie', 'call', 'errback', 'the', 'harm', 'execut', 'use', 'function', 'thi', 'wrap', 'download', 'Do', 'first', 'return', 'requestreplac', 'pair']}"
53,"{'func name': 'disconnect_all', 'comments': 'Disconnect all signal handlers. Useful for cleaning up after running tests\n\n\n', 'stemmed comments': ['clean', 'use', 'handler', 'disconnect', 'signal', 'test', 'run']}"
54,"{'func name': 'sitemap_urls_from_robots', 'comments': 'Return an iterator over all sitemap urls contained in the given robots.txt file\n\n\n', 'stemmed comments': ['url', 'iter', 'file', 'contain', 'return', 'sitemap', 'given', 'robotstxt']}"
55,"{'func name': 'iterloc', 'comments': '', 'stemmed comments': []}"
56,"{'func name': 'spidercls_for_request', 'comments': 'Return a spider class that handles the given Request.\n\nThis will look for the spiders that can handle the given request (using the spider loader) and return a Spider class if (and only if) there is only one Spider able to handle the Request.\n\nIf multiple spiders (or no spider) are found, it will return the default_spidercls passed. It can optionally log if multiple or no spiders are found.\n', 'stemmed comments': ['default_spidercl', 'request', 'look', 'loader', 'one', 'use', 'multipl', 'thi', 'spider', 'class', 'handl', 'found', 'given', 'If', 'return', 'abl', 'log', 'pass', 'It', 'option']}"
57,"{'func name': '_fname', 'comments': '', 'stemmed comments': []}"
58,"{'func name': '_pickle_serialize', 'comments': '', 'stemmed comments': []}"
59,"{'func name': 'get_openssl_version', 'comments': '', 'stemmed comments': []}"
60,"{'func name': '_make_writable', 'comments': '', 'stemmed comments': []}"
61,"{'func name': 'string_camelcase', 'comments': ""Convert a word  to its CamelCase version and remove invalid chars\n\n>>> string_camelcase('lost-pound') 'LostPound'\n\n>>> string_camelcase('missing_images') 'MissingImages'\n"", 'stemmed comments': ['convert', 'invalid', 'missing_imag', 'string_camelcas', 'char', 'word', 'remov', 'camelcas', 'lostpound', 'version', 'missingimag', '>']}"
62,"{'func name': '_textmode', 'comments': 'Normalize input the same as writing to a file and reading from it in text mode\n\n\n', 'stemmed comments': ['file', 'write', 'read', 'normal', 'mode', 'input', 'text']}"
63,"{'func name': 'get_permissions_dict', 'comments': '', 'stemmed comments': []}"
64,"{'func name': 'closeConnection', 'comments': '', 'stemmed comments': []}"
65,"{'func name': '_test_data', 'comments': '', 'stemmed comments': []}"
66,"{'func name': 'start_test_site', 'comments': '', 'stemmed comments': []}"
67,"{'func name': '_qs', 'comments': '', 'stemmed comments': []}"
68,"{'func name': 'function_processor_upper', 'comments': '', 'stemmed comments': []}"
69,"{'func name': 'function_processor_upper', 'comments': '', 'stemmed comments': []}"
70,"{'func name': '_prepare_request_object', 'comments': '', 'stemmed comments': []}"
71,"{'func name': '_create_image', 'comments': '', 'stemmed comments': []}"
72,"{'func name': '_mocked_download_func', 'comments': '', 'stemmed comments': []}"
73,"{'func name': '_wrong_credentials', 'comments': '', 'stemmed comments': []}"
74,"{'func name': 'protego_available', 'comments': '', 'stemmed comments': []}"
75,"{'func name': '_is_scheduling_fair', 'comments': ""We enqueued same number of requests for every slot. Assert correct order, e.g.\n\n>>> enqueued = ['a', 'b', 'c'] * 2 >>> correct = ['a', 'c', 'b', 'b', 'a', 'c'] >>> incorrect = ['a', 'a', 'b', 'c', 'c', 'b'] >>> _is_scheduling_fair(enqueued, correct) True >>> _is_scheduling_fair(enqueued, incorrect) False\n"", 'stemmed comments': ['everi', 'incorrect', 'request', 'eg', 'We', '>', ']', 'number', 'slot', 'order', '_is_scheduling_fair', '[', 'enqueu', 'c', '=', 'true', 'fals', 'assert', '2', 'correct', 'b']}"
76,"{'func name': '_responses', 'comments': '', 'stemmed comments': []}"
77,"{'func name': 'nonserializable_object_test', 'comments': '', 'stemmed comments': []}"
78,"{'func name': 'eb1', 'comments': '', 'stemmed comments': []}"
79,"{'func name': 'set_env', 'comments': '', 'stemmed comments': []}"
80,"{'func name': 'private_handle_error', 'comments': '', 'stemmed comments': []}"
81,"{'func name': 'create_skipped_scheme_t', 'comments': '', 'stemmed comments': []}"
82,"{'func name': 'getPage', 'comments': 'Adapted version of twisted.web.client.getPage\n\n\n', 'stemmed comments': ['adapt', 'twistedwebclientgetpag', 'version']}"
83,"{'func name': 'mock_google_cloud_storage', 'comments': 'Creates autospec mocks for google-cloud-storage Client, Bucket and Blob classes and set their proper return values.\n\n\n', 'stemmed comments': ['autospec', 'class', 'set', 'return', 'googlecloudstorag', 'creat', 'valu', 'mock', 'client', 'blob', 'bucket', 'proper']}"
84,"{'func name': 'test_site', 'comments': '', 'stemmed comments': []}"
85,"{'func name': '_url_from_selector', 'comments': '', 'stemmed comments': []}"
86,"{'func name': 'iter_all', 'comments': 'Iterate over all objects of the same class by its class name\n\n\n', 'stemmed comments': ['name', 'iter', 'class', 'object']}"
87,"{'func name': '_response_from_text', 'comments': '', 'stemmed comments': []}"
88,"{'func name': 'strip_url', 'comments': 'Strip URL string from some of its components\n\n- ``strip_credentials`` removes ""user:password@""\n\n- ``strip_default_port`` removes "":80"" (resp. "":443"", "":21"") from http:// (resp. https://, ftp://) URLs\n\n- ``origin_only`` replaces path component with ""/"", also dropping query and fragment components ; it also strips credentials\n\n- ``strip_fragment`` drops any #fragment component\n', 'stemmed comments': ['also', 'compon', 'queri', 'strip_default_port', 'http', 'path', 'strip', 'strip_credenti', '21', 'password', 'replac', 'url', 'resp', 'strip_frag', '80', 'user', 'fragment', 'credenti', 'origin_onli', 'string', ';', 'remov', '@', 'ftp', 'drop', '443', '//', '/']}"
89,"{'func name': 'scrapy_components_versions', 'comments': '', 'stemmed comments': []}"
90,"{'func name': '_parse', 'comments': 'Return tuple of (scheme, netloc, host, port, path), all in bytes except for port which is int. Assume url is from Request.url, which was passed via safe_url_string and is ascii-only.\n\n\n', 'stemmed comments': ['netloc', 'url', 'host', 'return', 'pass', 'requesturl', 'safe_url_str', 'port', 'path', 'assum', 'asciionli', 'byte', 'via', 'tupl', 'except', 'scheme', 'int']}"
