0,"{'func name': 'o32be', 'comments': '', 'stemmed comments': []}"
1,"{'func name': 'isDirectory', 'comments': '', 'stemmed comments': []}"
2,"{'func name': 'bdf_char', 'comments': '', 'stemmed comments': []}"
3,"{'func name': 'test_direct', 'comments': '', 'stemmed comments': []}"
4,"{'func name': 'decode_dxt5', 'comments': 'input: one ""row"" of data (i.e. will produce 4 * width pixels)\n\n\n', 'stemmed comments': ['one', 'input', 'produc', '4', 'data', 'ie', 'width', 'row', 'pixel']}"
5,"{'func name': '_save', 'comments': '', 'stemmed comments': []}"
6,"{'func name': '_save', 'comments': '', 'stemmed comments': []}"
7,"{'func name': 'build_pillow', 'comments': '', 'stemmed comments': []}"
8,"{'func name': 'test_fli_overflow', 'comments': '', 'stemmed comments': []}"
9,"{'func name': 'test_leak_getlist', 'comments': '', 'stemmed comments': []}"
10,"{'func name': 'test_leak_save', 'comments': '', 'stemmed comments': []}"
11,"{'func name': 'test_j2k_overflow', 'comments': '', 'stemmed comments': []}"
12,"{'func name': 'test_base_save', 'comments': 'base case: MB 20.99^           :::::         :::::::::::::::::::::::::::::::::::::::::::@::: |         ##: : ::::::@::::::: :::: :::: : : : : : : :::::::::::: :::@::: |         # : : :: :: @:: :::: :::: :::: : : : : : : :::::::::::: :::@::: |         # : : :: :: @:: :::: :::: :::: : : : : : : :::::::::::: :::@::: |         # : : :: :: @:: :::: :::: :::: : : : : : : :::::::::::: :::@::: |       @@# : : :: :: @:: :::: :::: :::: : : : : : : :::::::::::: :::@::: |       @ # : : :: :: @:: :::: :::: :::: : : : : : : :::::::::::: :::@::: |       @ # : : :: :: @:: :::: :::: :::: : : : : : : :::::::::::: :::@::: |     @@@ # : : :: :: @:: :::: :::: :::: : : : : : : :::::::::::: :::@::: |     @ @ # : : :: :: @:: :::: :::: :::: : : : : : : :::::::::::: :::@::: |    @@ @ # : : :: :: @:: :::: :::: :::: : : : : : : :::::::::::: :::@::: |    @@ @ # : : :: :: @:: :::: :::: :::: : : : : : : :::::::::::: :::@::: |    @@ @ # : : :: :: @:: :::: :::: :::: : : : : : : :::::::::::: :::@::: |    @@ @ # : : :: :: @:: :::: :::: :::: : : : : : : :::::::::::: :::@::: |    @@ @ # : : :: :: @:: :::: :::: :::: : : : : : : :::::::::::: :::@::: | :@@@@ @ # : : :: :: @:: :::: :::: :::: : : : : : : :::::::::::: :::@::: | :@ @@ @ # : : :: :: @:: :::: :::: :::: : : : : : : :::::::::::: :::@::: | :@ @@ @ # : : :: :: @:: :::: :::: :::: : : : : : : :::::::::::: :::@::: | :@ @@ @ # : : :: :: @:: :::: :::: :::: : : : : : : :::::::::::: :::@::: | :@ @@ @ # : : :: :: @:: :::: :::: :::: : : : : : : :::::::::::: :::@::: 0 +----------------------------------------------------------------------->Gi 0                                                                   7.882\n\n\n', 'stemmed comments': ['@', 'base', '0', 'MB', '>', 'Gi', '7882', '|', 'case', '2099^']}"
13,"{'func name': 'test_2gpx', 'comments': 'failed prepatch\n\n\n', 'stemmed comments': ['fail', 'prepatch']}"
14,"{'func name': 'test_size_greater_than_int', 'comments': '', 'stemmed comments': []}"
15,"{'func name': 'test_libtiff_segfault', 'comments': 'This test should not segfault. It will on Pillow <= 3.1.0 and libtiff >= 4.0.0\n\n\n', 'stemmed comments': ['400', '<', 'segfault', '>', 'It', 'thi', 'pillow', '310', 'libtiff', 'test', '=']}"
16,"{'func name': 'test_dos_total_memory', 'comments': '', 'stemmed comments': []}"
17,"{'func name': 'setup', 'comments': '', 'stemmed comments': []}"
18,"{'func name': 'pytest_report_header', 'comments': '', 'stemmed comments': []}"
19,"{'func name': '_accept', 'comments': '', 'stemmed comments': []}"
20,"{'func name': '_accept', 'comments': '', 'stemmed comments': []}"
21,"{'func name': '_validate', 'comments': '', 'stemmed comments': []}"
22,"{'func name': '_validate', 'comments': '', 'stemmed comments': []}"
23,"{'func name': '_save', 'comments': 'EPS Writer for the Python Imaging Library.\n\n\n', 'stemmed comments': ['python', 'imag', 'ep', 'librari', 'writer']}"
24,"{'func name': 'pilinfo', 'comments': 'Prints information about this installation of Pillow. This function can be called with ``python -m PIL``.\n\nparam out: The output stream to print to. Defaults to ``sys.stdout`` if ``None``. :param supported_formats: If ``True``, a list of all supported image file formats will be printed.\n', 'stemmed comments': ['the', 'output', 'If', 'none', 'support', 'supported_format', 'inform', 'list', 'file', 'true', 'm', 'default', 'pillow', 'imag', 'format', 'function', 'sysstdout', 'python', 'call', 'pil', 'thi', 'print', 'stream', 'param', 'instal']}"
25,"{'func name': '_save', 'comments': '', 'stemmed comments': []}"
26,"{'func name': '_accept', 'comments': '', 'stemmed comments': []}"
27,"{'func name': 'puti16', 'comments': 'Write network order (big-endian) 16-bit sequence\n\n\n', 'stemmed comments': ['bigendian', 'sequenc', 'write', 'order', '16bit', 'network']}"
28,"{'func name': '_accept', 'comments': '', 'stemmed comments': []}"
29,"{'func name': '_validate', 'comments': '', 'stemmed comments': []}"
30,"{'func name': '_accept', 'comments': '', 'stemmed comments': []}"
31,"{'func name': 'open', 'comments': 'Load texture from a GD image file.\n\nparam filename: GD file name, or an opened file handle. :param mode: Optional mode.\n\nIn this version, if the mode argument is given, it must be ""r"". :returns: An image instance. :raises OSError: If the image could not be read.\n', 'stemmed comments': ['read', 'If', 'file', 'return', 'r', 'imag', 'instanc', 'An', 'mode', 'version', 'argument', 'option', 'could', 'oserror', 'given', 'load', 'In', 'rais', 'handl', 'open', 'filenam', 'must', 'param', 'name', 'GD', 'textur']}"
32,"{'func name': 'getdata', 'comments': 'Legacy Method\n\nReturn a list of strings representing this image. The first string is a local image header, the rest contains encoded image data.\n\n:param im: Image object :param offset: Tuple of (x, y) pixels. Defaults to (0,0) :param \\**params: E.g. duration or other encoder info parameters :returns: List of Bytes containing gif encoded frame data\n', 'stemmed comments': ['00', 'data', 'object', 'durat', 'the', 'legaci', 'im', 'list', 'return', 'encod', 'offset', 'default', 'imag', 'tupl', 'info', 'pixel', 'local', 'Eg', 'x', 'header', 'frame', 'contain', 'gif', 'paramet', 'string', 'method', 'rest', 'first', '\\', 'byte', 'repres', 'param']}"
33,"{'func name': 'sphere_decreasing', 'comments': '', 'stemmed comments': []}"
34,"{'func name': '_save', 'comments': '', 'stemmed comments': []}"
35,"{'func name': '_save', 'comments': '', 'stemmed comments': []}"
36,"{'func name': 'is_mingw', 'comments': '', 'stemmed comments': []}"
37,"{'func name': '_save', 'comments': ""Saves the image as a series of PNG files, that are then converted to a .icns file using the macOS command line utility 'iconutil'.\n\nmacOS only.\n"", 'stemmed comments': ['line', 'seri', 'convert', 'use', 'util', 'command', 'save', 'icn', 'iconutil', 'imag', 'png', 'file', 'maco']}"
38,"{'func name': '_accept', 'comments': '', 'stemmed comments': []}"
39,"{'func name': '_apply_env_variables', 'comments': '', 'stemmed comments': []}"
40,"{'func name': 'offset', 'comments': 'Returns a copy of the image where data has been offset by the given distances. Data wraps around the edges. If **yoffset** is omitted, it is assumed to be equal to **xoffset**.\n\nparam xoffset: The horizontal distance. :param yoffset: The vertical distance.\n\nIf omitted, both distances are set to the same value. :rtype: :py:class:`~PIL.Image.Image`\n', 'stemmed comments': ['vertic', 'data', 'the', 'horizont', 'If', 'valu', 'py', 'return', '~pilimageimag', 'offset', 'distanc', 'xoffset', 'wrap', 'imag', 'copi', 'yoffset', 'omit', 'given', 'around', 'rtype', 'set', 'class', 'param', 'edg', 'assum', 'equal']}"
41,"{'func name': 'versions', 'comments': '(pyCMS) Fetches versions.\n\n\n', 'stemmed comments': ['version', 'fetch', 'pycm']}"
42,"{'func name': 'getcolor', 'comments': 'Same as :py:func:`~PIL.ImageColor.getrgb`, but converts the RGB value to a greyscale value if the mode is not color or a palette image. If the string cannot be parsed, this function raises a :py:exc:`ValueError` exception.\n\n.. versionadded:: 1.1.4\n\n:param color: A color string :return: ``(graylevel [, alpha]) or (red, green, blue[, alpha])``\n', 'stemmed comments': ['red', 'versionad', 'If', 'greyscal', '[', 'same', 'valu', 'py', 'valueerror', 'return', 'except', 'imag', 'color', 'exc', 'mode', 'A', 'function', '~pilimagecolorgetrgb', 'pars', '114', 'palett', 'convert', 'string', ']', 'func', 'rais', 'rgb', 'green', 'graylevel', 'param', 'blue', 'alpha']}"
43,"{'func name': '_color_diff', 'comments': 'Uses 1-norm distance to calculate difference between two values.\n\n\n', 'stemmed comments': ['use', '1norm', 'distanc', 'calcul', 'valu', 'differ', 'two']}"
44,"{'func name': '_safe_read', 'comments': ""Reads large blocks in a safe way.  Unlike fp.read(n), this function doesn't trust the user.  If the requested size is larger than SAFEBLOCK, the file is read block by block.\n\nparam fp: File handle.\n\nMust implement a <b>read</b> method. :param size: Number of bytes to read. :returns: A string containing up to <i>size</i> bytes of data.\n"", 'stemmed comments': ['size', 'data', 'n', 'read', 'If', 'fp', 'request', 'file', 'safe', 'return', 'trust', 'number', 'safeblock', '/b', 'unlik', 'block', 'A', 'nt', 'implement', 'function', '>', 'way', 'larg', 'user', 'larger', 'contain', '<', 'string', 'method', 'fpread', 'handl', 'must', 'byte', 'param', 'b', '/i']}"
45,"{'func name': 'load_default', 'comments': 'Load a ""better than nothing"" default font.\n\n.. versionadded:: 1.1.4\n\n:return: A font object.\n', 'stemmed comments': ['return', 'font', 'load', 'object', 'better', 'versionad', 'default', '114', 'A', 'noth']}"
46,"{'func name': 'grabclipboard', 'comments': '', 'stemmed comments': []}"
47,"{'func name': 'eval', 'comments': 'Evaluates an image expression.\n\nparam expression: A string containing a Python-style expression. :param options: Values to add to the evaluation context.\n\nYou can either use a dictionary, or one or more keyword arguments. :return: The evaluated expression. This is usually an image object, but can also be an integer, a floating point value, or a pixel tuple, depending on the expression.\n', 'stemmed comments': ['integ', 'you', 'object', 'the', 'float', 'point', 'dictionari', 'valu', 'return', 'use', 'evalu', 'imag', 'tupl', 'context', 'pixel', 'A', 'keyword', 'pythonstyl', 'usual', 'express', 'argument', 'also', 'option', 'either', 'contain', 'string', 'one', 'thi', 'depend', 'param', 'add']}"
48,"{'func name': 'getmode', 'comments': 'Gets a mode descriptor for the given mode.\n\n\n', 'stemmed comments': ['get', 'mode', 'given', 'descriptor']}"
49,"{'func name': 'exif_transpose', 'comments': 'If an image has an EXIF Orientation tag, return a new image that is transposed accordingly. Otherwise, return a copy of the image.\n\nparam image: The image to transpose. :return: An image.\n', 'stemmed comments': ['exif', 'return', 'transpos', 'the', 'tag', 'If', 'otherwis', 'imag', 'copi', 'param', 'An', 'orient', 'accordingli', 'new']}"
50,"{'func name': 'load', 'comments': '', 'stemmed comments': []}"
51,"{'func name': 'toqpixmap', 'comments': '', 'stemmed comments': []}"
52,"{'func name': 'all_frames', 'comments': 'Applies a given function to all frames in an image or a list of images. The frames are returned as a list of separate images.\n\nparam im: An image, or a list of images. :param func: The function to apply to all of the image frames. :returns: A list of images.\n', 'stemmed comments': ['return', 'function', 'func', 'appli', 'the', 'separ', 'imag', 'param', 'An', 'im', 'A', 'frame', 'given', 'list']}"
53,"{'func name': 'show', 'comments': 'Display a given image.\n\nparam image: An image object. :param title: Optional title. Not all viewers can display the title. :param \\**options: Additional viewer options. :returns: ``True`` if a suitable viewer was found, ``False`` otherwise.\n', 'stemmed comments': ['return', 'display', 'suitabl', 'true', 'object', 'not', '\\', 'found', 'viewer', 'otherwis', 'imag', 'param', 'An', 'titl', 'option', 'fals', 'addit', 'given']}"
54,"{'func name': '_show', 'comments': 'Helper for the Image.show method.\n\n\n', 'stemmed comments': ['imageshow', 'helper', 'method']}"
55,"{'func name': '_save', 'comments': '', 'stemmed comments': []}"
56,"{'func name': 'getiptcinfo', 'comments': 'Get IPTC information from TIFF, JPEG, or IPTC file.\n\nparam im: An image containing IPTC data. :returns: A dictionary containing IPTC information, or None if no IPTC information block was found.\n', 'stemmed comments': ['return', 'iptc', 'data', 'block', 'found', 'get', 'imag', 'dictionari', 'tiff', 'jpeg', 'param', 'An', 'inform', 'A', 'im', 'none', 'file', 'contain']}"
57,"{'func name': '_save', 'comments': '', 'stemmed comments': []}"
58,"{'func name': 'jpeg_factory', 'comments': '', 'stemmed comments': []}"
59,"{'func name': '_accept', 'comments': '', 'stemmed comments': []}"
60,"{'func name': '_accept', 'comments': '', 'stemmed comments': []}"
61,"{'func name': '_save', 'comments': '', 'stemmed comments': []}"
62,"{'func name': '_save', 'comments': '', 'stemmed comments': []}"
63,"{'func name': '_save', 'comments': '', 'stemmed comments': []}"
64,"{'func name': 'sz', 'comments': '', 'stemmed comments': []}"
65,"{'func name': '_save', 'comments': '', 'stemmed comments': []}"
66,"{'func name': '_save', 'comments': '', 'stemmed comments': []}"
67,"{'func name': 'pdf_repr', 'comments': '', 'stemmed comments': []}"
68,"{'func name': '_accept', 'comments': '', 'stemmed comments': []}"
69,"{'func name': 'getchunks', 'comments': 'Return a list of PNG chunks representing this image.\n\n\n', 'stemmed comments': ['return', 'imag', 'repres', 'png', 'chunk', 'list']}"
70,"{'func name': '_save', 'comments': '', 'stemmed comments': []}"
71,"{'func name': '_maketile', 'comments': '', 'stemmed comments': []}"
72,"{'func name': 'new', 'comments': '', 'stemmed comments': []}"
73,"{'func name': 'testimage', 'comments': 'PIL lets you create in-memory images with various pixel types\n\n>>> from PIL import Image, ImageDraw, ImageFilter, ImageMath >>> im = Image.new(""1"", (128, 128)) # monochrome >>> _info(im) (None, \'1\', (128, 128)) >>> _info(Image.new(""L"", (128, 128))) # grayscale (luminance) (None, \'L\', (128, 128)) >>> _info(Image.new(""P"", (128, 128))) # palette (None, \'P\', (128, 128)) >>> _info(Image.new(""RGB"", (128, 128))) # truecolor (None, \'RGB\', (128, 128)) >>> _info(Image.new(""I"", (128, 128))) # 32-bit integer (None, \'I\', (128, 128)) >>> _info(Image.new(""F"", (128, 128))) # 32-bit floating point (None, \'F\', (128, 128))\n\nOr open existing files:\n\n>>> with Image.open(""Tests/images/hopper.gif"") as im: ...\n\n\n\n _info(im) (\'GIF\', \'P\', (128, 128)) >>> _info(Image.open(""Tests/images/hopper.ppm"")) (\'PPM\', \'RGB\', (128, 128)) >>> try: ...\n\n_info(Image.open(""Tests/images/hopper.jpg"")) ... except OSError as v: ...\n\nprint(v) (\'JPEG\', \'RGB\', (128, 128))\n\nPIL doesn\'t actually load the image data until it\'s needed, or you call the ""load"" method:\n\n>>> im = Image.open(""Tests/images/hopper.ppm"") >>> print(im.im) # internal image attribute None >>> a = im.load() >>> type(im.im) # doctest: +ELLIPSIS <... \'...ImagingCore\'>\n\nYou can apply many different operations on images.\n\nMost operations return a new image:\n\n>>> im = Image.open(""Tests/images/hopper.ppm"") >>> _info(im.convert(""L"")) (None, \'L\', (128, 128)) >>> _info(im.copy()) (None, \'RGB\', (128, 128)) >>> _info(im.crop((32, 32, 96, 96))) (None, \'RGB\', (64, 64)) >>> _info(im.filter(ImageFilter.BLUR)) (None, \'RGB\', (128, 128)) >>> im.getbands() (\'R\', \'G\', \'B\') >>> im.getbbox() (0, 0, 128, 128) >>> len(im.getdata()) 16384 >>> im.getextrema() ((0, 255), (0, 255), (0, 255)) >>> im.getpixel((0, 0)) (20, 20, 70) >>> len(im.getprojection()) 2 >>> len(im.histogram()) 768 >>> \'%.7f\' % im.entropy() \'8.8212866\' >>> _info(im.point(list(range(256))*3)) (None, \'RGB\', (128, 128)) >>> _info(im.resize((64, 64))) (None, \'RGB\', (64, 64)) >>> _info(im.rotate(45)) (None, \'RGB\', (128, 128)) >>> [_info(ch) for ch in im.split()] [(None, \'L\', (128, 128)), (None, \'L\', (128, 128)), (None, \'L\', (128, 128))] >>> len(im.convert(""1"").tobitmap()) 10456 >>> len(im.tobytes()) 49152 >>> _info(im.transform((512, 512), Image.AFFINE, (1,0,0,0,1,0))) (None, \'RGB\', (512, 512)) >>> _info(im.transform((512, 512), Image.EXTENT, (32,32,96,96))) (None, \'RGB\', (512, 512))\n\nThe ImageDraw module lets you draw stuff in raster images:\n\n>>> im = Image.new(""L"", (128, 128), 64) >>> d = ImageDraw.ImageDraw(im) >>> d.line((0, 0, 128, 128), fill=128) >>> d.line((0, 128, 128, 0), fill=128) >>> im.getextrema() (64, 128)\n\nIn 1.1.4, you can specify colors in a number of ways:\n\n>>> xy = 0, 0, 128, 128 >>> im = Image.new(""RGB"", (128, 128), 0) >>> d = ImageDraw.ImageDraw(im) >>> d.rectangle(xy, ""#f00"") >>> im.getpixel((0, 0)) (255, 0, 0) >>> d.rectangle(xy, ""#ff0000"") >>> im.getpixel((0, 0)) (255, 0, 0) >>> d.rectangle(xy, ""rgb(255,0,0)"") >>> im.getpixel((0, 0)) (255, 0, 0) >>> d.rectangle(xy, ""rgb(100%,0%,0%)"") >>> im.getpixel((0, 0)) (255, 0, 0) >>> d.rectangle(xy, ""hsl(0, 100%, 50%)"") >>> im.getpixel((0, 0)) (255, 0, 0) >>> d.rectangle(xy, ""red"") >>> im.getpixel((0, 0)) (255, 0, 0)\n\nIn 1.1.6, you can use the ImageMath module to do image calculations.\n\n>>> im = ImageMath.eval(""float(im + 20)"", im=im.convert(""L"")) >>> im.mode, im.size (\'F\', (128, 128))\n\nPIL can do many other things, but I\'ll leave that for another day.\n\nIf you\'re curious, check the handbook, available from:\n\nhttp://www.pythonware.com\n\nCheers /F\n', 'stemmed comments': ['ppm', 'im=imconvert', 'tests/images/hoppergif', 'rang', 'the', '32', 'imentropi', 'L', '[', 'imgetpixel', 'imagenew', '7f', 'list', 'actual', 'exist', 'imag', '512', 'drectangl', '128', 'modul', 'handbook', '255', 'impoint', 'raster', 'thing', '1', 'imgetdata', '64', 'imcopi', 'calcul', 'most', '20', 'oserror', 'imageaffin', 'tobitmap', '50', 'new', 'pil', 'variou', 'xy', 'imhistogram', 'curiou', 'integ', 'you', '32329696', 'specifi', 'imgetproject', 'point', 'none', '3', '88212866', 'im', 'ch', 'check', 'F', 'except', 'G', '768', 'ff0000', 'appli', 'imgetbbox', '>', 'P', 'draw', 'imconvert', '96', 'll', 'imagemath', '//wwwpythonwarecom', 'gif', 'imagedraw', '<', 'imsplit', 'need', 'call', 'rgb', '32bit', 'hsl', 'let', 'imagefilt', 'leav', '49152', 'f00', 'avail', 'monochrom', 'lumin', '45', 'differ', 'file', '=', 'oper', '16384', 'return', '70', 'v', 'immod', 'tri', 'doctest', 'cheer', '/F', 'inmemori', '25500', 'imagedrawimagedraw', 'way', 'attribut', 'imim', 'type', 'palett', 'imgetextrema', 'truecolor', 'tests/images/hopperjpg', ']', 'In', 'imload', 'anoth', 'ellipsi', 'len', 'imagefilterblur', '116', 'I', 'day', 'imtobyt', '%', 'data', '_info', '100', 'Or', 'intern', 'red', 'float', 'If', 'imsiz', '2', 'tests/images/hopperppm', 'imtransform', 'fill=128', 'use', 'imfilt', 'number', 'imagemathev', 're', '10456', 's', 'color', 'import', 'pixel', 'mani', 'nt', '0', 'imageopen', 'http', 'imcrop', 'stuff', '114', 'jpeg', 'B', 'R', 'dline', '100010', 'grayscal', 'load', 'method', 'open', 'imgetband', 'print', 'creat', '256', 'imrot', 'imageext', 'imagingcor', 'imres']}"
74,"{'func name': 'debug_build', 'comments': '', 'stemmed comments': []}"
75,"{'func name': '_save', 'comments': '', 'stemmed comments': []}"
76,"{'func name': '_save_spider', 'comments': '', 'stemmed comments': []}"
77,"{'func name': '_accept', 'comments': '', 'stemmed comments': []}"
78,"{'func name': 'test_sanity', 'comments': '', 'stemmed comments': []}"
79,"{'func name': 'test_big_endian', 'comments': '', 'stemmed comments': []}"
80,"{'func name': 'test_good', 'comments': ""These should all work. There's a set of target files in the html directory that we can compare against.\n\n\n"", 'stemmed comments': ['directori', 'set', 'target', 'work', 'there', 's', 'compar', 'these', 'file', 'html']}"
81,"{'func name': 'test_three_passes', 'comments': '', 'stemmed comments': []}"
82,"{'func name': 'test_reset_stats', 'comments': '', 'stemmed comments': []}"
83,"{'func name': 'test_pilinfo', 'comments': '', 'stemmed comments': []}"
84,"{'func name': 'test_apng_save_blend', 'comments': '', 'stemmed comments': []}"
85,"{'func name': 'test_load_blp2_dxt1a', 'comments': '', 'stemmed comments': []}"
86,"{'func name': 'test_rgba_bitfields', 'comments': '', 'stemmed comments': []}"
87,"{'func name': 'test_save', 'comments': '', 'stemmed comments': []}"
88,"{'func name': 'test_readlines', 'comments': '', 'stemmed comments': []}"
89,"{'func name': 'test_invalid_file', 'comments': '', 'stemmed comments': []}"
90,"{'func name': 'test_seek_too_far', 'comments': '', 'stemmed comments': []}"
91,"{'func name': 'test_unimplemented_pixel_format', 'comments': '', 'stemmed comments': []}"
92,"{'func name': 'test_emptyline', 'comments': '', 'stemmed comments': []}"
93,"{'func name': 'test_save', 'comments': '', 'stemmed comments': []}"
94,"{'func name': 'test_seek', 'comments': '', 'stemmed comments': []}"
95,"{'func name': 'test_fpx_invalid_number_of_bands', 'comments': '', 'stemmed comments': []}"
96,"{'func name': 'test_load_dxt1', 'comments': '', 'stemmed comments': []}"
97,"{'func name': 'test_multiple_load_operations', 'comments': '', 'stemmed comments': []}"
98,"{'func name': 'test_invalid_file', 'comments': '', 'stemmed comments': []}"
99,"{'func name': 'test_extents', 'comments': '', 'stemmed comments': []}"
100,"{'func name': 'test_load_1_3_via_imagepalette', 'comments': '', 'stemmed comments': []}"
101,"{'func name': 'test_get_palette', 'comments': '', 'stemmed comments': []}"
102,"{'func name': 'test_save', 'comments': '', 'stemmed comments': []}"
103,"{'func name': 'test_save', 'comments': '', 'stemmed comments': []}"
104,"{'func name': 'test_not_an_icns_file', 'comments': '', 'stemmed comments': []}"
105,"{'func name': 'test_draw_reloaded', 'comments': '', 'stemmed comments': []}"
106,"{'func name': 'test_number', 'comments': '', 'stemmed comments': []}"
107,"{'func name': 'test_dump', 'comments': '', 'stemmed comments': []}"
108,"{'func name': 'test_parser_feed', 'comments': '', 'stemmed comments': []}"
109,"{'func name': 'test_valid_file', 'comments': '', 'stemmed comments': []}"
110,"{'func name': 'test_invalid_file', 'comments': '', 'stemmed comments': []}"
111,"{'func name': 'test_save', 'comments': '', 'stemmed comments': []}"
112,"{'func name': 'test_cannot_save_wrong_mode', 'comments': '', 'stemmed comments': []}"
113,"{'func name': 'test_rgb_oserror', 'comments': '', 'stemmed comments': []}"
114,"{'func name': 'test_load_raw', 'comments': '', 'stemmed comments': []}"
115,"{'func name': 'test_break_padding', 'comments': '', 'stemmed comments': []}"
116,"{'func name': 'test_pdf_append_to_bytesio', 'comments': '', 'stemmed comments': []}"
117,"{'func name': 'test_invalid_file', 'comments': '', 'stemmed comments': []}"
118,"{'func name': 'roundtrip', 'comments': '', 'stemmed comments': []}"
119,"{'func name': 'test_mimetypes', 'comments': '', 'stemmed comments': []}"
120,"{'func name': 'test_combined_larger_than_size', 'comments': '', 'stemmed comments': []}"
121,"{'func name': 'test_unsupported_mode', 'comments': '', 'stemmed comments': []}"
122,"{'func name': 'test_odd_size', 'comments': '', 'stemmed comments': []}"
123,"{'func name': 'test_others', 'comments': '', 'stemmed comments': []}"
124,"{'func name': 'test_contextmanager', 'comments': '', 'stemmed comments': []}"
125,"{'func name': 'test_save_l_transparency', 'comments': '', 'stemmed comments': []}"
126,"{'func name': 'test_too_many_entries', 'comments': '', 'stemmed comments': []}"
127,"{'func name': 'test_open', 'comments': '', 'stemmed comments': []}"
128,"{'func name': 'test_write_unsupported_mode_PA', 'comments': 'Saving a palette-based file with transparency to WebP format should work, and be similar to the original file.\n\n\n', 'stemmed comments': ['transpar', 'work', 'save', 'similar', 'origin', 'palettebas', 'webp', 'format', 'file']}"
129,"{'func name': 'test_seek_errors', 'comments': '', 'stemmed comments': []}"
130,"{'func name': 'test_write_lossless_rgb', 'comments': '', 'stemmed comments': []}"
131,"{'func name': 'test_write_animated_metadata', 'comments': '', 'stemmed comments': []}"
132,"{'func name': 'test_save', 'comments': '', 'stemmed comments': []}"
133,"{'func name': 'test_hotspot', 'comments': '', 'stemmed comments': []}"
134,"{'func name': 'test_load_read', 'comments': '', 'stemmed comments': []}"
135,"{'func name': 'test_invalid_file', 'comments': '', 'stemmed comments': []}"
136,"{'func name': 'test_invalid_file', 'comments': '', 'stemmed comments': []}"
137,"{'func name': 'test_textsize_cp1250', 'comments': '', 'stemmed comments': []}"
138,"{'func name': 'test_high_characters', 'comments': '', 'stemmed comments': []}"
139,"{'func name': 'test_hsv_to_rgb', 'comments': '', 'stemmed comments': []}"
140,"{'func name': 'test_red', 'comments': '', 'stemmed comments': []}"
141,"{'func name': 'test_fromarray', 'comments': '', 'stemmed comments': []}"
142,"{'func name': 'test_matrix_identity', 'comments': '', 'stemmed comments': []}"
143,"{'func name': 'test_copy_zero', 'comments': '', 'stemmed comments': []}"
144,"{'func name': 'test_crop_zero', 'comments': '', 'stemmed comments': []}"
145,"{'func name': 'test_several_drafts', 'comments': '', 'stemmed comments': []}"
146,"{'func name': 'test_entropy', 'comments': '', 'stemmed comments': []}"
147,"{'func name': 'test_consistency_5x5', 'comments': '', 'stemmed comments': []}"
148,"{'func name': 'test_not_implemented', 'comments': '', 'stemmed comments': []}"
149,"{'func name': 'test_sanity_p', 'comments': '', 'stemmed comments': []}"
150,"{'func name': 'test_getbands', 'comments': '', 'stemmed comments': []}"
151,"{'func name': 'test_bbox', 'comments': '', 'stemmed comments': []}"
152,"{'func name': 'test_pack', 'comments': '', 'stemmed comments': []}"
153,"{'func name': 'test_roundtrip', 'comments': '', 'stemmed comments': []}"
154,"{'func name': 'test_true_16', 'comments': '', 'stemmed comments': []}"
155,"{'func name': 'test_sanity', 'comments': '', 'stemmed comments': []}"
156,"{'func name': 'test_palette', 'comments': '', 'stemmed comments': []}"
157,"{'func name': 'test_sanity', 'comments': '', 'stemmed comments': []}"
158,"{'func name': 'test_histogram', 'comments': '', 'stemmed comments': []}"
159,"{'func name': 'test_contextmanager_non_exclusive_fp', 'comments': '', 'stemmed comments': []}"
160,"{'func name': 'test_properties', 'comments': '', 'stemmed comments': []}"
161,"{'func name': 'test_f_mode', 'comments': '', 'stemmed comments': []}"
162,"{'func name': 'test_readonly', 'comments': '', 'stemmed comments': []}"
163,"{'func name': 'test_array_F', 'comments': '', 'stemmed comments': []}"
164,"{'func name': 'test_imagepalette', 'comments': '', 'stemmed comments': []}"
165,"{'func name': 'test_quantize_dither_diff', 'comments': '', 'stemmed comments': []}"
166,"{'func name': 'test_jpeg2k', 'comments': '', 'stemmed comments': []}"
167,"{'func name': 'gradients_image', 'comments': '', 'stemmed comments': []}"
168,"{'func name': 'test_alpha_rotate_with_fill', 'comments': '', 'stemmed comments': []}"
169,"{'func name': 'test_split_open', 'comments': '', 'stemmed comments': []}"
170,"{'func name': 'test_reducing_gap_for_DCT_scaling', 'comments': '', 'stemmed comments': []}"
171,"{'func name': 'test_sanity', 'comments': '', 'stemmed comments': []}"
172,"{'func name': 'test_sanity', 'comments': '', 'stemmed comments': []}"
173,"{'func name': 'test_roundtrip', 'comments': '', 'stemmed comments': []}"
174,"{'func name': 'mock_encode', 'comments': '', 'stemmed comments': []}"
175,"{'func name': 'test_logical', 'comments': '', 'stemmed comments': []}"
176,"{'func name': 'test_auxiliary_channels_isolated', 'comments': '', 'stemmed comments': []}"
177,"{'func name': 'test_rounding_errors', 'comments': '', 'stemmed comments': []}"
178,"{'func name': 'test_same_color_outline', 'comments': '', 'stemmed comments': []}"
179,"{'func name': 'test_flush', 'comments': '', 'stemmed comments': []}"
180,"{'func name': 'test_alpha', 'comments': '', 'stemmed comments': []}"
181,"{'func name': 'test_similar', 'comments': '', 'stemmed comments': []}"
182,"{'func name': 'test_render_mono_size', 'comments': '', 'stemmed comments': []}"
183,"{'func name': 'test_language', 'comments': '', 'stemmed comments': []}"
184,"{'func name': 'test_logical_not_equal', 'comments': '', 'stemmed comments': []}"
185,"{'func name': 'test_wrong_mode', 'comments': '', 'stemmed comments': []}"
186,"{'func name': 'test_blur_accuracy', 'comments': '', 'stemmed comments': []}"
187,"{'func name': 'test_autocontrast_cutoff', 'comments': '', 'stemmed comments': []}"
188,"{'func name': 'test_invalid_palette', 'comments': '', 'stemmed comments': []}"
189,"{'func name': 'test_image', 'comments': '', 'stemmed comments': []}"
190,"{'func name': 'test_all_frames', 'comments': '', 'stemmed comments': []}"
191,"{'func name': 'test_viewers', 'comments': '', 'stemmed comments': []}"
192,"{'func name': 'test_constant', 'comments': '', 'stemmed comments': []}"
193,"{'func name': 'test_bitmapimage', 'comments': '', 'stemmed comments': []}"
194,"{'func name': 'test_setmode', 'comments': '', 'stemmed comments': []}"
195,"{'func name': 'test_sanity', 'comments': '', 'stemmed comments': []}"
196,"{'func name': 'test_main', 'comments': '', 'stemmed comments': []}"
197,"{'func name': 'test_ysize', 'comments': '', 'stemmed comments': []}"
198,"{'func name': 'test_convert', 'comments': '', 'stemmed comments': []}"
199,"{'func name': 'test_no_resource_warning_for_numpy_array', 'comments': '', 'stemmed comments': []}"
200,"{'func name': 'test_pdf_repr', 'comments': '', 'stemmed comments': []}"
201,"{'func name': 'test_pickle_tell', 'comments': '', 'stemmed comments': []}"
202,"{'func name': 'test_stdout', 'comments': '', 'stemmed comments': []}"
203,"{'func name': 'test_pyroma', 'comments': '', 'stemmed comments': []}"
204,"{'func name': 'test_segfault', 'comments': '', 'stemmed comments': []}"
205,"{'func name': 'test_crashes', 'comments': '', 'stemmed comments': []}"
206,"{'func name': 'test_ifd_rational_save', 'comments': '', 'stemmed comments': []}"
207,"{'func name': 'check_upload_similar', 'comments': '', 'stemmed comments': []}"
208,"{'func name': 'test_deferred_error', 'comments': '', 'stemmed comments': []}"
209,"{'func name': '_save', 'comments': '', 'stemmed comments': []}"
210,"{'func name': '_save_all', 'comments': '', 'stemmed comments': []}"
211,"{'func name': '_populate', 'comments': '', 'stemmed comments': []}"
212,"{'func name': 'open', 'comments': 'Load texture from a Quake2 WAL texture file.\n\nBy default, a Quake2 standard palette is attached to the texture. To override the palette, use the :py:func:`PIL.Image.Image.putpalette()` method.\n\n:param filename: WAL file name, or an opened file handle. :returns: An image instance.\n', 'stemmed comments': ['By', 'overrid', 'py', 'attach', 'file', 'return', 'use', 'default', 'quake2', 'imag', 'instanc', 'An', 'To', 'standard', 'palett', 'wal', 'pilimageimageputpalett', 'load', 'func', 'method', 'handl', 'open', 'filenam', 'param', 'name', 'textur']}"
213,"{'func name': '_save', 'comments': '', 'stemmed comments': []}"
214,"{'func name': '_save', 'comments': '', 'stemmed comments': []}"
215,"{'func name': '_save', 'comments': '', 'stemmed comments': []}"
216,"{'func name': '_accept', 'comments': '', 'stemmed comments': []}"
217,"{'func name': '_accept', 'comments': '', 'stemmed comments': []}"
