0,"{'func name': 'add_newdoc_for_scalar_type', 'comments': '', 'stemmed comments': []}"
1,"{'func name': 'require', 'comments': ""Return an ndarray of the provided type that satisfies requirements.\n\nThis function is useful to be sure that an array with the correct flags is returned for passing to compiled code (perhaps through ctypes).\n\nParameters ---------- a : array_like The object to be converted to a type-and-requirement-satisfying array. dtype : data-type The required data-type. If None preserve the current dtype. If your application requires the data to be in native byteorder, include a byteorder specification as a part of the dtype specification. requirements : str or list of str The requirements list can be any of the following\n\n* 'F_CONTIGUOUS' ('F')\n\n- ensure a Fortran-contiguous array * 'C_CONTIGUOUS' ('C')\n\n- ensure a C-contiguous array * 'ALIGNED' ('A')\n\n\n\n\n\n- ensure a data-type aligned array * 'WRITEABLE' ('W')\n\n\n\n- ensure a writable array * 'OWNDATA' ('O')\n\n\n\n\n\n- ensure an array that owns its own data * 'ENSUREARRAY', ('E')\n\n- ensure a base array, instead of a subclass\n##### Returns\n* **out **: ndarray\n    Array with specified requirements and type if given.\n\n* **asarray **: Convert input to an ndarray.\n\n* **asanyarray **: Convert to an ndarray, but pass through ndarray subclasses.\n\n* **ascontiguousarray **: Convert input to a contiguous array.\n\n* **asfortranarray **: Convert input to an ndarray with column-major\n                 memory order.\n\n* **ndarray.flags **: Information about the memory layout of the array.\n\n* **>>> x.flags\n  C_CONTIGUOUS **: True\n  F_CONTIGUOUS\n\n* **>>> y.flags\n  C_CONTIGUOUS **: False\n  F_CONTIGUOUS\n\n"", 'stemmed comments': ['return', 'list', 'order', 'F', 'correct', 'ensur', 'datatyp', 'ndarray', 'fortrancontigu', 'specif', 'owndata', 'satisfi', 'preserv', 'asarray', 'dtype', 'f_contigu', '>', 'align', 'c_contigu', 'thi', 'compil', 'specifi', 'data', 'ctype', 'ensurearray', 'flag', 'pass', 'writabl', 'inform', 'true', 'subclass', 'xflag', 'none', 'W', 'ndarrayflag', 'nativ', 'yflag', 'memori', 'current', 'If', 'array_lik', 'sure', 'provid', 'requir', 'O', 'given', 'asanyarray', 'object', 'asfortranarray', 'fals', 'str', 'part', 'follow', 'C', 'applic', 'instead', 'A', 'use', 'paramet', 'columnmajor', 'function', 'contigu', 'convert', 'input', 'perhap', 'byteord', 'base', 'code', 'includ', 'own', 'the', 'ascontiguousarray', 'typeandrequirementsatisfi', 'type', 'array', 'ccontigu', 'E', 'layout', 'writeabl']}"
2,"{'func name': 'open', 'comments': ""Open `path` with `mode` and return the file object.\n\nIf ``path`` is an URL, it will be downloaded, stored in the `DataSource` `destpath` directory and opened from there.\n\nParameters ---------- path : str Local file path or URL to open. mode : str, optional Mode to open `path`. Mode 'r' for reading, 'w' for writing, 'a' to append. Available modes depend on the type of object specified by path.\n\nDefault is 'r'. destpath : str, optional Path to the directory where the source file gets downloaded to for use.\n\nIf `destpath` is None, a temporary directory will be created. The default path is the current directory. encoding : {None, str}, optional Open text file with given encoding. The default encoding will be what `io.open` uses. newline : {None, str}, optional Newline to use when reading text file.\n##### Returns\n* **out **: file object\n    The opened file.\n\n"", 'stemmed comments': ['return', 'w', 'temporari', 'default', 'option', 'mode', 'creat', 'current', 'specifi', 'newlin', 'If', 'store', 'use', 'text', 'paramet', '{', 'open', 'sourc', 'given', '}', 'avail', 'r', 'object', 'encod', 'read', 'ioopen', 'url', 'write', 'append', 'str', 'path', 'download', 'the', 'type', 'directori', 'depend', 'local', 'get', 'datasourc', 'file', 'none', 'destpath']}"
3,"{'func name': 'dtype_from_ctypes_type', 'comments': 'Construct a dtype object from a ctypes type\n\n\n', 'stemmed comments': ['object', 'ctype', 'type', 'construct', 'dtype']}"
4,"{'func name': '_name_get', 'comments': '', 'stemmed comments': []}"
5,"{'func name': '_display_as_base', 'comments': 'A decorator that makes an exception class look like its base.\n\nWe use this to hide subclasses that are implementation details\n\n- the user should catch the base type, which is what the traceback will show them.\n\nClasses decorated with this decorator are subject to removal without a deprecation warning.\n', 'stemmed comments': ['hide', 'detail', 'traceback', 'decor', 'except', 'A', 'use', 'implement', 'deprec', 'remov', 'catch', 'We', 'without', 'like', 'warn', 'base', 'class', 'subject', 'look', 'type', 'make', 'subclass', 'user', 'show']}"
6,"{'func name': 'formatargvalues', 'comments': 'Format an argument spec from the 4 values returned by getargvalues.\n\nThe first four arguments are (args, varargs, varkw, locals).\n\nThe next four arguments are the corresponding optional formatting functions that are called to turn names and values into strings.\n\nThe ninth argument is an optional function to format the sequence of arguments.\n', 'stemmed comments': ['return', 'option', 'getargvalu', 'string', 'first', 'four', 'correspond', 'function', 'format', 'call', 'sequenc', 'vararg', 'turn', 'ninth', 'argument', '4', 'spec', 'the', 'name', 'local', 'arg', 'next', 'varkw', 'valu']}"
7,"{'func name': 'npy_ctypes_check', 'comments': '', 'stemmed comments': []}"
8,"{'func name': 'easy_dtype', 'comments': 'Convenience function to create a `np.dtype` object.\n\nThe function processes the input `dtype` and matches it with the given names.\n\nParameters ---------- ndtype : var Definition of the dtype. Can be any string or dictionary recognized by the `np.dtype` function, or a sequence of types. names : str or sequence, optional Sequence of strings to use as field names for a structured dtype. For convenience, `names` can be a string of a comma-separated list of names. defaultfmt : str, optional Format string used to define missing names, such as ``""f%i""`` (default) or ``""fields_%02i""``. validationargs : optional A series of optional arguments used to initialize a `NameValidator`.\n\nExamples -------- >>> np.lib._iotools.easy_dtype(float) dtype(\'float64\') >>> np.lib._iotools.easy_dtype(""i4, f8"") dtype([(\'f0\', \'<i4\'), (\'f1\', \'<f8\')]) >>> np.lib._iotools.easy_dtype(""i4, f8"", defaultfmt=""field_%03i"") dtype([(\'field_000\', \'<i4\'), (\'field_001\', \'<f8\')])\n\n>>> np.lib._iotools.easy_dtype((int, float, float), names=""a,b,c"") dtype([(\'a\', \'<i8\'), (\'b\', \'<f8\'), (\'c\', \'<f8\')]) >>> np.lib._iotools.easy_dtype(float, names=""a,b,c"") dtype([(\'a\', \'<f8\'), (\'b\', \'<f8\'), (\'c\', \'<f8\')])\n', 'stemmed comments': ['list', 'structur', '>', '03i', 'b', 'fields_', 'match', 'default', 'creat', 'option', 'A', 'npdtype', 'float64', 'string', '[', 'f1', 'field_', 'use', 'paramet', 'ndtype', 'function', 'conveni', 'format', 'given', 'var', '%', 'field', 'sequenc', 'defaultfmt', 'for', 'namevalid', 'f', 'can', 'commasepar', 'input', 'defin', 'nplib_iotoolseasy_dtyp', 'f8', 'object', 'definit', 'miss', 'process', 'seri', 'i4', 'defaultfmt=', ']', 'i8', 'float', 'argument', 'dtype', 'str', 'exampl', 'c', 'dictionari', 'the', 'f0', 'name', 'type', 'names=', 'validationarg', 'field_001', '<', 'int', 'initi', '02i', 'field_000', 'recogn']}"
9,"{'func name': 'find_comma_decimal_point_locale', 'comments': 'See if platform has a decimal point as comma locale.\n\nFind a locale that uses a comma instead of a period as the decimal point.\n##### Returns\n* **old_locale**: str\n    Locale when the function was called.\n\n* **new_locale**: {str, None)\n    First French locale found, None if none found.\n\n', 'stemmed comments': ['return', 'platform', 'new_local', 'found', 'first', 'use', 'comma', '{', 'function', 'call', 'decim', 'old_local', 'period', 'see', 'str', 'french', 'point', 'local', 'find', 'none', 'instead']}"
10,"{'func name': '_dumps', 'comments': '', 'stemmed comments': []}"
11,"{'func name': '__randomstate_ctor', 'comments': 'Pickling helper function that returns a legacy RandomState-like object\n\nParameters ---------- bit_generator_name: str String containing the core BitGenerator\n##### Returns\n* **rs**: RandomState\n    Legacy RandomState using the named core BitGenerator\n\n', 'stemmed comments': ['return', 'randomstatelik', 'legaci', 'object', 'paramet', 'use', 'pickl', 'contain', 'name', 'bit_generator_nam', 'function', 'core', 'randomst', 'rs', 'str', 'helper', 'string', 'bitgener']}"
12,"{'func name': 'irfft2', 'comments': 'Compute the 2-dimensional inverse FFT of a real array.\n\nParameters ---------- a : array_like The input array s : sequence of ints, optional Shape of the real output to the inverse FFT. axes : sequence of ints, optional The axes over which to compute the inverse fft. Default is the last two axes. norm : {""backward"", ""ortho"", ""forward""}, optional .. versionadded:: 1.10.0\n\nNormalization mode (see `numpy.fft`). Default is ""backward"". Indicates which direction of the forward/backward pair of transforms is scaled and with what normalization factor.\n\n.. versionadded:: 1.20.0\n\nThe ""backward"", ""forward"" values were added.\n##### Returns\n* **out **: ndarray\n    The result of the inverse real 2-D FFT.\n\n* **irfftn **: Compute the inverse of the N-dimensional FFT of real input.\n\n', 'stemmed comments': ['return', 'last', 'normal', 'output', 'backward', '2D', 'shape', 'default', 'axe', 'option', 'mode', 'transform', 'fft', 'paramet', 'ortho', '{', '1100', 'scale', 'array_lik', 'two', 'ndarray', 'result', 'irfftn', '}', 'sequenc', 'valu', 'norm', 'input', 'numpyfft', 'ndimension', 'forward', 'ad', 'factor', 'indic', 'see', 'real', '1200', 'comput', 'invers', 'the', 'pair', 'array', '2dimension', 'int', 'versionad', 'forward/backward', 'direct']}"
13,"{'func name': '_show_numpy_info', 'comments': '', 'stemmed comments': []}"
14,"{'func name': 'english_capitalize', 'comments': 'Apply English case rules to convert the first character of an ASCII string to upper case.\n\nThis is an internal utility function to replace calls to str.capitalize() such that we can avoid changing behavior with changing locales.\n\nParameters ---------- s : str\n##### Returns\n* **capitalized **: str\n\n', 'stemmed comments': ['return', 'charact', 'thi', 'string', 'first', 'upper', 'case', 'paramet', 'chang', 'english', 'function', 'ascii', 'call', 'convert', 'appli', 'replac', 'strcapit', 'capit', 'str', 'avoid', 'util', 'rule', 'local', 'intern', 'behavior']}"
15,"{'func name': '_set_array_types', 'comments': '', 'stemmed comments': []}"
16,"{'func name': '_setdef', 'comments': '', 'stemmed comments': []}"
17,"{'func name': 'pad', 'comments': ""Pad an array.\n\nParameters ---------- array : array_like of rank N The array to pad. pad_width : {sequence, array_like, int} Number of values padded to the edges of each axis. ((before_1, after_1), ... (before_N, after_N)) unique pad widths for each axis. ((before, after),) yields same before and after pad for each axis. (pad,) or int is a shortcut for before = after = pad width for all axes. mode : str or function, optional One of the following string values or a user supplied function.\n\n'constant' (default) Pads with a constant value. 'edge' Pads with the edge values of array. 'linear_ramp' Pads with the linear ramp between end_value and the array edge value. 'maximum' Pads with the maximum value of all or part of the vector along each axis. 'mean' Pads with the mean value of all or part of the vector along each axis. 'median' Pads with the median value of all or part of the vector along each axis. 'minimum' Pads with the minimum value of all or part of the vector along each axis. 'reflect' Pads with the reflection of the vector mirrored on the first and last values of the vector along each axis. 'symmetric' Pads with the reflection of the vector mirrored along the edge of the array. 'wrap' Pads with the wrap of the vector along the axis. The first values are used to pad the end and the end values are used to pad the beginning. 'empty' Pads with undefined values.\n\n.. versionadded:: 1.17\n\n<function> Padding function, see Notes. stat_length : sequence or int, optional Used in 'maximum', 'mean', 'median', and 'minimum'.\n\nNumber of values at edge of each axis used to calculate the statistic value.\n\n((before_1, after_1), ... (before_N, after_N)) unique statistic lengths for each axis.\n\n((before, after),) yields same before and after statistic lengths for each axis.\n\n(stat_length,) or int is a shortcut for before = after = statistic length for all axes.\n\nDefault is ``None``, to use the entire axis. constant_values : sequence or scalar, optional Used in 'constant'.\n\nThe values to set the padded values for each axis.\n\n``((before_1, after_1), ... (before_N, after_N))`` unique pad constants for each axis.\n\n``((before, after),)`` yields same before and after constants for each axis.\n\n``(constant,)`` or ``constant`` is a shortcut for ``before = after = constant`` for all axes.\n\nDefault is 0. end_values : sequence or scalar, optional Used in 'linear_ramp'.\n\nThe values used for the ending value of the linear_ramp and that will form the edge of the padded array.\n\n``((before_1, after_1), ... (before_N, after_N))`` unique end values for each axis.\n\n``((before, after),)`` yields same before and after end values for each axis.\n\n``(constant,)`` or ``constant`` is a shortcut for ``before = after = constant`` for all axes.\n\nDefault is 0. reflect_type : {'even', 'odd'}, optional Used in 'reflect', and 'symmetric'.\n\nThe 'even' style is the default with an unaltered reflection around the edge value.\n\nFor the 'odd' style, the extended part of the array is created by subtracting the reflected values from two times the edge value.\n##### Returns\n* **pad **: ndarray\n    Padded array of rank equal to `array` with shape increased\n    according to `pad_width`.\n\n* **.. versionadded**: \n\n* **has the following signature**: \n\n* **where\n    vector **: ndarray\n        A rank 1 array already padded with zeros.  Padded values are\n        vector[\n\n* **>>> def pad_with(vector, pad_width, iaxis, kwargs)**: \n\n* **...     vector[**: pad_width[0]] = pad_value\n\n* **...     vector[-pad_width[1]**: ] = pad_value\n\n"", 'stemmed comments': ['return', 'zero', '=', 'extend', 'creat', 'after_n', 'string', 'scalar', 'minimum', 'ndarray', 'pad', 'pad_with', 'iaxi', 'def', 'unalt', 'maximum', 'uniqu', 'after_1', '117', '0', 'N', 'int', 'linear', 'one', 'user', 'around', 'last', '>', 'default', 'linear_ramp', 'style', 'mode', 'accord', 'note', '[', 'first', 'symmetr', 'vector', 'axi', 'width', 'for', 'stat_length', 'kwarg', 'constant_valu', 'subtract', 'end', 'yield', '1', 'statist', 'none', 'alreadi', 'pad_valu', 'set', 'shape', 'increas', 'before_n', 'length', 'pad_width', 'wrap', 'odd', 'form', '{', 'array_lik', 'two', 'median', 'sequenc', 'end_valu', 'mean', 'reflect', 'empti', 'see', ']', 'str', 'part', 'equal', 'signatur', 'entir', 'begin', 'follow', 'reflect_typ', 'shortcut', 'suppli', 'versionad', 'time', 'calcul', 'constant', 'undefin', 'number', 'along', 'axe', 'option', 'mirror', 'A', 'even', 'use', 'paramet', 'function', '}', 'edg', 'before_1', 'ramp', 'rank', 'the', 'array', '<', 'valu']}"
18,"{'func name': 'set_string_function', 'comments': ""Set a Python function to be used when pretty printing arrays.\n\nParameters ---------- f : function or None Function to be used to pretty print arrays. The function should expect a single array argument and return a string of the representation of the array. If None, the function is reset to the default NumPy function to print arrays. repr : bool, optional If True (default), the function for pretty printing (``__repr__``) is set, if False the function that returns the default string representation (``__str__``) is set.\n\nSee Also -------- set_printoptions, get_printoptions\n\nExamples -------- >>> def pprint(arr): ...\n\n\n\n return 'HA!\n\n- What are you going to do now?' ... >>> np.set_string_function(pprint) >>> a = np.arange(10) >>> a HA!\n\n- What are you going to do now? >>> _ = a >>> # [0 1 2 3 4 5 6 7 8 9]\n\nWe can reset the function to the default:\n\n>>> np.set_string_function(None) >>> a array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n`repr` affects either pretty printing or normal string representation. Note that ``__repr__`` is still affected by setting ``__str__`` because the width of each array element in the returned string becomes equal to the length of the result of ``__str__()``.\n\n>>> x = np.arange(4) >>> np.set_string_function(lambda x:'random', repr=False) >>> x.__str__() 'random' >>> x.__repr__() 'array([0, 1, 2, 3])'\n"", 'stemmed comments': ['return', 'set_printopt', '=', 'string', 'pprint', 'f', 'def', 'HA', '!', 'print', 'x__repr__', '4', 'exampl', 'random', '0', 'python', 'npset_string_funct', '>', 'default', '3', 'pretti', 'either', 'note', '[', '__repr__', 'width', '?', 'We', 'get_printopt', 'argument', 'still', 'true', '10', '1', 'also', 'numpi', 'none', 'arr', 'set', 'go', '7', '9', 'expect', '__str__', 'nparang', 'x', 'If', 'length', 'result', '_', 'fals', 'see', '2', ']', 'equal', '5', 'repr', 'lambda', 'x__str__', 'repr=fals', 'becom', 'singl', 'bool', 'affect', 'normal', '8', 'element', 'option', '6', 'use', 'paramet', 'function', 'represent', 'what', 'the', 'array', 'reset']}"
19,"{'func name': 'setdiff1d', 'comments': 'Find the set difference of two arrays.\n\nReturn the unique values in `ar1` that are not in `ar2`.\n\nParameters ---------- ar1 : array_like Input array. ar2 : array_like Input comparison array. assume_unique : bool If True, the input arrays are both assumed to be unique, which can speed up the calculation.\n\nDefault is False.\n##### Returns\n* **setdiff1d **: ndarray\n    1D array of values in `ar1` that are not in `ar2`. The result\n    is sorted when `assume_unique=False`, but otherwise only sorted\n    if the input is sorted.\n\n* **numpy.lib.arraysetops **: Module with a number of other functions for\n                        performing set operations on arrays.\n\n', 'stemmed comments': ['return', 'set', 'bool', 'number', 'ar1', 'setdiff1d', 'default', 'perform', 'oper', 'assume_uniqu', 'If', '1D', 'paramet', 'result', 'two', 'array_lik', 'ndarray', 'numpylibarraysetop', 'modul', 'function', 'valu', 'input', 'assum', 'otherwis', 'differ', 'fals', 'uniqu', 'ar2', 'sort', 'true', 'the', 'array', 'find', 'comparison', 'calcul', 'assume_unique=fals', 'speed']}"
20,"{'func name': 'check_gcc_variable_attribute', 'comments': 'Return True if the given variable attribute is supported.\n\n\n', 'stemmed comments': ['return', 'support', 'true', 'attribut', 'given', 'variabl']}"
21,"{'func name': 'applyrules', 'comments': '', 'stemmed comments': []}"
22,"{'func name': 'memoize', 'comments': '', 'stemmed comments': []}"
23,"{'func name': 'mock_concatenate', 'comments': '', 'stemmed comments': []}"
24,"{'func name': 'compare_functions_2v', 'comments': '', 'stemmed comments': []}"
25,"{'func name': 'nep_metadata', 'comments': '', 'stemmed comments': []}"
26,"{'func name': 'get_f2py_modulename', 'comments': '', 'stemmed comments': []}"
27,"{'func name': 'collect_stats', 'comments': '', 'stemmed comments': []}"
28,"{'func name': 'common_sign2map', 'comments': '', 'stemmed comments': []}"
29,"{'func name': 'buildcallback', 'comments': '', 'stemmed comments': []}"
30,"{'func name': 'new_ccompiler_opt', 'comments': ""Create a new instance of 'CCompilerOpt' and generate the dispatch header inside NumPy source dir.\n\nParameters ---------- 'compiler' : CCompiler instance '**kwargs': passed as-is to `CCompilerOpt(...)`\n##### Returns\n"", 'stemmed comments': ['return', 'insid', 'paramet', 'new', 'ccompileropt', 'kwarg', 'instanc', 'gener', 'numpi', 'pass', 'creat', 'sourc', 'asi', 'header', 'dir', 'ccompil', 'dispatch', 'compil']}"
31,"{'func name': 'gen_lib_options', 'comments': '', 'stemmed comments': []}"
32,"{'func name': 'get_needs', 'comments': '', 'stemmed comments': []}"
33,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
34,"{'func name': 'chebpts2', 'comments': 'Chebyshev points of the second kind.\n\nThe Chebyshev points of the second kind are the points ``cos(x)``, where ``x = [pi*k/(npts\n\n- 1) for k in range(npts)]``.\n\nParameters ---------- npts : int Number of sample points desired.\n##### Returns\n* **pts **: ndarray\n    The Chebyshev points of the second kind.\n\n* **.. versionadded**: \n\n', 'stemmed comments': ['return', 'number', 'desir', '=', 'x', '[', 'pi', 'paramet', 'ndarray', 'k/', 'k', 'pt', 'sampl', ']', 'rang', 'npt', 'the', '1', 'point', 'second', 'co', 'int', 'chebyshev', 'versionad', 'kind']}"
35,"{'func name': 'scrubSource', 'comments': '', 'stemmed comments': []}"
36,"{'func name': 'get_count', 'comments': '', 'stemmed comments': []}"
37,"{'func name': 'buildhooks', 'comments': '', 'stemmed comments': []}"
38,"{'func name': 'get_indexes_rand_', 'comments': '', 'stemmed comments': []}"
39,"{'func name': 'coerce_text', 'comments': '', 'stemmed comments': []}"
40,"{'func name': 'linkcode_resolve', 'comments': 'Determine the URL corresponding to Python object\n\n\n', 'stemmed comments': ['object', 'correspond', 'determin', 'url', 'python']}"
41,"{'func name': 'show_fortran_compilers', 'comments': '', 'stemmed comments': []}"
42,"{'func name': 'add_np', 'comments': '', 'stemmed comments': []}"
43,"{'func name': 'add_newdoc', 'comments': '', 'stemmed comments': []}"
44,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
45,"{'func name': '_check_append_ext_library', 'comments': '', 'stemmed comments': []}"
46,"{'func name': 'append', 'comments': 'Append values to the end of an array.\n\n.. versionadded:: 1.9.0\n\nParameters ---------- a : array_like Values are appended to a copy of this array. b : array_like These values are appended to a copy of `a`.\n\nIt must be of the correct shape (the same shape as `a`, excluding `axis`).\n\nIf `axis` is not specified, `b` can be any shape and will be flattened before use. axis : int, optional The axis along which `v` are appended.\n\nIf `axis` is not given, both `a` and `b` are flattened before use.\n##### Returns\n* **append **: MaskedArray\n    A copy of `a` with `b` appended to `axis`.  Note that `append`\n    does not occur in-place\n\n* **numpy.append **: Equivalent function in the top-level NumPy module.\n\n', 'stemmed comments': ['return', '190', 'shape', 'along', 'equival', 'option', 'maskedarray', 'specifi', 'correct', 'A', 'If', 'flatten', 'note', 'use', 'paramet', 'axi', 'array_lik', 'must', 'function', 'modul', 'given', 'v', 'b', 'exclud', 'It', 'occur', 'inplac', 'append', 'toplevel', 'end', 'numpyappend', 'the', 'copi', 'array', 'numpi', 'int', 'versionad', 'valu', 'these']}"
47,"{'func name': 'key_value_from_command', 'comments': '', 'stemmed comments': []}"
48,"{'func name': 'crack2fortran', 'comments': '', 'stemmed comments': []}"
49,"{'func name': 'ndpointer', 'comments': 'Array-checking restype/argtypes.\n\nAn ndpointer instance is used to describe an ndarray in restypes and argtypes specifications.\n\nThis approach is more flexible than using, for example, ``POINTER(c_double)``, since several restrictions can be specified, which are verified upon calling the ctypes function. These include data type, number of dimensions, shape and flags.\n\nIf a given array does not satisfy the specified restrictions, a ``TypeError`` is raised.\n\nParameters ---------- dtype : data-type, optional Array data-type. ndim : int, optional Number of array dimensions. shape : tuple of ints, optional Array shape. flags : str or tuple of str Array flags; may be one or more of:\n\n- C_CONTIGUOUS / C / CONTIGUOUS\n\n- F_CONTIGUOUS / F / FORTRAN\n\n- OWNDATA / O\n\n- WRITEABLE / W\n\n- ALIGNED / A\n\n- WRITEBACKIFCOPY / X\n\n- UPDATEIFCOPY / U\n##### Returns\n* **klass **: ndpointer type object\n    A type object, which is an ``_ndtpr`` instance containing\n    dtype, ndim, shape and flags information.\n\n', 'stemmed comments': ['return', 'sinc', 'align', 'number', 'F', 'restyp', 'rais', 'shape', 'flexibl', 'option', 'c_contigu', 'U', 'thi', 'typeerror', 'ndpointer', 'specifi', 'fortran', 'If', 'A', 'writebackifcopi', '_ndtpr', 'use', 'data', 'datatyp', 'ctype', 'paramet', 'An', 'approach', 'ndarray', 'function', 'contigu', 'dimens', 'O', 'given', 'sever', 'call', 'updateifcopi', 'X', ';', 'contain', 'flag', 'pointer', 'upon', 'object', 'specif', 'owndata', 'argtyp', 'satisfi', 'W', 'restype/argtyp', '/', 'exampl', 'arraycheck', 'verifi', 'dtype', 'str', 'tupl', 'f_contigu', 'includ', 'inform', 'C', 'c_doubl', 'instanc', 'type', 'restrict', 'array', 'ndim', 'may', 'int', 'one', 'writeabl', 'klass', 'these', 'describ']}"
50,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
51,"{'func name': 'parametrize', 'comments': 'Pytest compatibility class. This implements the simplest level of pytest.mark.parametrize for use in nose as an aid in making the transition to pytest. It achieves that by adding a dummy var parameter and ignoring the doc_func parameter of the base class. It does not support variable substitution by name, nor does it support nesting or classes. See the pytest documentation for usage.\n\n.. versionadded:: 1.14.0\n', 'stemmed comments': ['level', 'pytest', 'thi', 'aid', 'achiev', 'use', '1140', 'paramet', 'pytestmarkparametr', 'var', 'implement', 'dummi', 'compat', 'document', 'support', 'It', 'ad', 'see', 'simplest', 'base', 'variabl', 'nose', 'class', 'doc_func', 'name', 'usag', 'transit', 'ignor', 'substitut', 'nest', 'make', 'versionad']}"
52,"{'func name': 'asarray', 'comments': ""Convert the input to a `chararray`, copying the data only if necessary.\n\nVersus a regular NumPy array of type `str` or `unicode`, this class adds the following functionality:\n\n1) values automatically have whitespace removed from the end when indexed\n\n2) comparison operators automatically remove whitespace from the end when comparing values\n\n3) vectorized string operations are provided as methods (e.g. `str.endswith`) and infix operators (e.g. ``+``, ``*``,``%``)\n\nParameters ---------- obj : array of str or unicode-like\n\nitemsize : int, optional `itemsize` is the number of characters per scalar in the resulting array.\n\nIf `itemsize` is None, and `obj` is an object array or a Python list, the `itemsize` will be automatically determined.\n\nIf `itemsize` is provided and `obj` is of type str or unicode, then the `obj` string will be chunked into `itemsize` pieces.\n\nunicode : bool, optional When true, the resulting `chararray` can contain Unicode characters, when false only 8-bit characters.\n\nIf unicode is None and `obj` is one of the following:\n\n- a `chararray`,\n\n- an ndarray of type `str` or 'unicode`\n\n- a Python str or unicode object,\n\nthen the unicode setting of the output array will be automatically determined.\n\norder : {'C', 'F'}, optional Specify the order of the array.\n\nIf order is 'C' (default), then the array will be in C-contiguous order (last-index varies the fastest).\n\nIf order is 'F', then the returned array will be in Fortran-contiguous order (first-index varies the fastest).\n"", 'stemmed comments': ['return', 'list', 'order', 'F', 'oper', 'string', 'scalar', 'ndarray', 'automat', 'fortrancontigu', 'contain', 'chararray', 'copi', 'int', 'python', 'strendswith', 'one', 'whitespac', 'output', 'default', '3', 'necessari', 'index', 'specifi', 'data', 'vector', 'per', 'when', 'vari', 'remov', 'class', 'end', 'true', '1', 'add', 'numpi', 'piec', 'comparison', 'none', 'set', 'fastest', 'items', 'If', 'result', 'infix', '{', 'versu', 'firstindex', 'provid', 'object', 'fals', '2', 'str', 'follow', 'C', '8bit', 'bool', 'charact', 'number', 'chunk', 'unicod', 'lastindex', 'determin', 'option', 'eg', 'paramet', 'function', '%', '}', 'convert', 'input', 'method', 'obj', 'regular', 'type', 'array', 'compar', 'ccontigu', 'unicodelik', 'valu']}"
53,"{'func name': 'bmat', 'comments': 'Build a matrix object from a string, nested sequence, or array.\n\nParameters ---------- obj : str or array_like Input data. If a string, variables in the current scope may be referenced by name. ldict : dict, optional A dictionary that replaces local operands in current frame. Ignored if `obj` is not a string or `gdict` is None. gdict : dict, optional A dictionary that replaces global operands in current frame. Ignored if `obj` is not a string.\n##### Returns\n* **block **: A generalization of this function for N-d arrays, that returns normal\n    ndarrays.\n\n* **All the following expressions construct the same block matrix**: \n\n', 'stemmed comments': ['return', 'normal', 'gdict', 'referenc', 'gener', 'option', 'current', 'A', 'dict', 'If', 'string', 'data', 'Nd', 'paramet', 'ldict', 'build', 'array_lik', 'ndarray', 'function', 'scope', 'global', 'sequenc', 'matrix', 'all', 'input', 'object', 'replac', 'construct', 'operand', 'variabl', 'str', 'obj', 'block', 'follow', 'dictionari', 'name', 'array', 'local', 'frame', 'ignor', 'may', 'nest', 'none', 'express']}"
54,"{'func name': 'run', 'comments': '', 'stemmed comments': []}"
55,"{'func name': 'download_wheels', 'comments': 'Download release wheels.\n\nThe release wheels for the given NumPy version are downloaded into the given directory.\n\nParameters ---------- version : str The release version. For instance, ""1.18.3"". wheelhouse : str Directory in which to download the wheels.\n', 'stemmed comments': ['paramet', 'wheel', 'download', 'the', 'releas', 'version', 'directori', 'numpi', 'instanc', 'wheelhous', 'given', 'str', 'for', '1183']}"
56,"{'func name': 'restore_all', 'comments': '', 'stemmed comments': []}"
57,"{'func name': 'einsum', 'comments': ""einsum(subscripts, *operands, out=None, dtype=None, order='K', casting='safe', optimize=False)\n\nEvaluates the Einstein summation convention on the operands.\n\nUsing the Einstein summation convention, many common multi-dimensional, linear algebraic array operations can be represented in a simple fashion. In *implicit* mode `einsum` computes these values.\n\nIn *explicit* mode, `einsum` provides further flexibility to compute other array operations that might not be considered classical Einstein summation operations, by disabling, or forcing summation over specified subscript labels.\n\nSee the notes and examples for clarification.\n\nParameters ---------- subscripts : str Specifies the subscripts for summation as comma separated list of subscript labels. An implicit (classical Einstein summation) calculation is performed unless the explicit indicator '->' is included as well as subscript labels of the precise output form. operands : list of array_like These are the arrays for the operation. out : ndarray, optional If provided, the calculation is done into this array. dtype : {data-type, None}, optional If provided, forces the calculation to use the data type specified. Note that you may have to also give a more liberal `casting` parameter to allow the conversions. Default is None. order : {'C', 'F', 'A', 'K'}, optional Controls the memory layout of the output. 'C' means it should be C contiguous. 'F' means it should be Fortran contiguous, 'A' means it should be 'F' if the inputs are all 'F', 'C' otherwise. 'K' means it should be as close to the layout as the inputs as is possible, including arbitrarily permuted axes. Default is 'K'. casting : {'no', 'equiv', 'safe', 'same_kind', 'unsafe'}, optional Controls what kind of data casting may occur.\n\nSetting this to 'unsafe' is not recommended, as it can adversely affect accumulations.\n\n* 'no' means the data types should not be cast at all. * 'equiv' means only byte-order changes are allowed. * 'safe' means only casts which can preserve values are allowed. * 'same_kind' means only safe casts or casts within a kind, like float64 to float32, are allowed. * 'unsafe' means any data conversions may be done.\n\nDefault is 'safe'. optimize : {False, True, 'greedy', 'optimal'}, optional Controls if intermediate optimization should occur. No optimization will occur if False and True will default to the 'greedy' algorithm. Also accepts an explicit contraction list from the ``np.einsum_path`` function. See ``np.einsum_path`` for more details. Defaults to False.\n##### Returns\n* **output **: ndarray\n    The calculation based on the Einstein summation convention.\n\n* **.. versionadded**: \n\n* **which can be computed by `einsum`, is shown below along with examples**: \n\n* *** Trace of an array, **: py\n\n* *** Return a diagonal, **: py\n\n* *** Array axis summations, **: py\n\n* *** Transpositions and permutations, **: py\n\n* *** Matrix multiplication and dot product, **: py\n\n* *** Vector inner and outer products, **: py\n\n* *** Broadcasting, element-wise and scalar multiplication, **: py\n\n* *** Tensor contractions, **: py\n\n* *** Chained array operations, in efficient calculation order, **: py\n\n* **is equivalent to **: py\n\n* ****: py\n\n* **to **: py\n\n* **``np.einsum('i->', a)`` is like **: py\n\n* **and ``np.einsum('ii->i', a)`` is like **: py\n\n* **have the same effect as **: py\n\n* **See **: py\n\n* **Trace of a matrix**: \n\n* **Extract the diagonal (requires explicit form)**: \n\n* **Sum over an axis (requires explicit form)**: \n\n* **For higher dimensional arrays summing a single axis can be done with ellipsis**: \n\n* **Compute a matrix transpose, or reorder any number of axes**: \n\n* **Vector inner products**: \n\n* **Matrix vector multiplication**: \n\n* **Broadcasting and scalar multiplication**: \n\n* **Vector outer product**: \n\n* **Tensor contraction**: \n\n* **Writeable returned arrays (since version 1.10.0)**: \n\n* **>>> np.einsum('ii->i', a)[**: ] = 1\n\n* **Example of ellipsis use**: \n\n* **particularly significant with larger arrays**: \n\n* **Basic `einsum`**: ~1520ms  (benchmarked on 3.1GHz Intel i5.)\n\n* **>>> for iteration in range(500)**: \n\n* **Sub-optimal `einsum` (due to repeated path calculation time)**: ~330ms\n\n* **Greedy `einsum` (faster optimal path approximation)**: ~160ms\n\n* **Optimal `einsum` (best usage pattern in some use cases)**: ~110ms\n\n"", 'stemmed comments': ['return', 'list', 'detail', 'outer', 'label', 'order', 'disabl', 'F', 'chain', '~1520m', 'dot', '=', 'flexibl', 'oper', 'forc', 'broadcast', 'dimension', 'repres', 'basic', 'consid', 'mani', 'datatyp', 'implicit', 'possibl', 'scalar', 'version', 'particularli', 'ndarray', 'order=', 'like', 'occur', 'safe', 'preserv', 'einsum', 'liber', 'rang', 'exampl', 'dtype', 'extract', 'suboptim', '~330m', 'transposit', 'optim', 'path', 'allow', 'benchmark', 'intermedi', 'reorder', 'linear', 'float32', 'kind', 'cast', 'intel', 'unless', '>', 'output', 'iter', 'dtype=non', 'transpos', 'default', 'equival', 'mode', 'specifi', 'note', 'separ', '[', 'data', 'vector', 'case', 'axi', 'chang', 'An', 'effect', 'advers', 'simpl', 'fashion', 'control', 'matrix', 'einstein', 'for', 'common', 'repeat', 'greedi', 'out=non', 'otherwis', 'indic', 'elementwis', 'tensor', 'close', 'comput', 'true', 'optimize=fals', 'arbitrarili', '1', 'algorithm', 'also', 'usag', 'done', 'No', 'may', 'convers', 'algebra', 'shown', 'none', 'these', 'py', 'set', 'sinc', 'unsaf', 'within', 'memori', 'same_kind', 'multipl', '31ghz', 'pattern', 'fortran', 'higher', 'If', 'convent', '500', 'approxim', 'i', 'comma', 'form', '{', 'npeinsum', 'sum', 'array_lik', '1100', 'provid', 'requir', 'due', 'precis', 'contract', 'mean', 'effici', 'fals', 'operand', 'see', 'accept', ']', 'casting=saf', 'str', 'C', 'larger', 'best', 'versionad', 'time', 'calcul', 'singl', 'recommend', 'affect', 'number', '~160m', 'perform', 'axe', 'along', 'option', 'diagon', 'inner', '~110m', 'A', 'permut', 'float64', 'might', 'K', 'accumul', 'use', 'npeinsum_path', 'paramet', 'ellipsi', 'function', 'classic', 'contigu', '}', 'signific', 'input', 'equiv', 'faster', 'product', 'byteord', 'base', 'i5', 'trace', 'includ', 'explicit', 'no', 'evalu', 'the', 'In', 'type', 'array', 'give', 'layout', 'subscript', 'writeabl', 'clarif', 'valu', 'summat', 'well', 'multidimension', 'ii']}"
58,"{'func name': 'foo', 'comments': ""A one-line summary that does not use variable names or the function name.\n\nSeveral sentences providing an extended description. Refer to variables using back-ticks, e.g. `var`.\n\nParameters ---------- var1 : array_like Array_like means all those objects -- lists, nested lists, etc. -- that can be converted to an array.\n\nWe can also refer to variables like `var1`. var2 : int The type above can either refer to an actual Python type (e.g. ``int``), or describe the type of the variable in more detail, e.g. ``(N,) ndarray`` or ``array_like``. long_var_name : {'hi', 'ho'}, optional Choices in brackets, default first when optional.\n##### Returns\n* **describe **: type\n    Explanation of return value named `describe`.\n\n* **out **: type\n    Explanation of `out`.\n\n* **only_seldom_used_keywords **: type\n    Explanation\n\n* **common_parameters_listed_above **: type\n    Explanation\n\n"", 'stemmed comments': ['return', 'list', 'detail', 'choic', 'refer', 'default', 'extend', 'var1', 'option', 'A', 'either', 'long_var_nam', 'eg', 'var2', 'use', 'first', 'hi', 'paramet', 'actual', '{', 'array_lik', 'sentenc', 'function', 'ndarray', 'provid', 'sever', 'var', '}', 'convert', 'summari', 'common_parameters_listed_abov', 'backtick', 'We', 'object', 'like', 'mean', 'onelin', 'variabl', 'explan', 'bracket', 'ho', 'the', 'name', 'also', 'array', 'type', 'N', 'only_seldom_used_keyword', 'nest', 'int', 'python', 'etc', 'valu', 'descript', 'describ']}"
59,"{'func name': '_quote_arg', 'comments': 'Quote the argument for safe use in a shell command line.\n\n\n', 'stemmed comments': ['use', 'command', 'line', 'safe', 'argument', 'shell', 'quot']}"
60,"{'func name': 'normals', 'comments': '', 'stemmed comments': []}"
61,"{'func name': 'bounded_uints', 'comments': '', 'stemmed comments': []}"
62,"{'func name': 'polyfit', 'comments': 'Any masked values in x is propagated in y, and vice-versa.\n\n\n', 'stemmed comments': ['ani', 'viceversa', 'mask', 'valu', 'x', 'propag']}"
63,"{'func name': 'run', 'comments': '', 'stemmed comments': []}"
64,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
65,"{'func name': 'buildhooks', 'comments': '', 'stemmed comments': []}"
66,"{'func name': 'mirr', 'comments': 'Modified internal rate of return.\n\n.. deprecated:: 1.18\n\n`mirr` is deprecated; for details, see NEP 32 [1]_. Use the corresponding function in the numpy-financial library, https://pypi.org/project/numpy-financial.\n\nParameters ---------- values : array_like Cash flows (must contain at least one positive and one negative value) or nan is returned.\n\nThe first value is considered a sunk cost at time zero. finance_rate : scalar Interest rate paid on the cash flows reinvest_rate : scalar Interest rate received on the cash flows upon reinvestment\n##### Returns\n* **out **: float\n    Modified internal rate of return\n\n* **.. [1] NumPy Enhancement Proposal (NEP) 32,\n   https**: //numpy.org/neps/nep-0032-remove-financial-functions.html\n\n', 'stemmed comments': ['return', 'detail', 'receiv', '//numpyorg/neps/nep0032removefinancialfunctionshtml', 'nep', 'zero', 'finance_r', 'interest', 'numpyfinanci', 'neg', 'nan', 'least', '[', 'modifi', 'flow', 'first', 'use', 'consid', 'paramet', 'scalar', '_', 'posit', 'correspond', 'array_lik', 'must', 'function', 'time', 'mirr', 'deprec', 'http', ';', 'contain', '32', 'upon', '118', 'paid', 'librari', 'see', ']', 'propos', 'float', 'sunk', 'reinvest', 'the', '1', 'cost', 'rate', 'reinvest_r', 'numpi', 'intern', 'one', 'cash', 'valu', '//pypiorg/project/numpyfinanci', 'enhanc']}"
67,"{'func name': 'main', 'comments': 'Find deprecated escape sequences.\n\nChecks for deprecated escape sequences in ``*.py files``. If `root` is a file, that file is checked, if `root` is a directory all ``*.py`` files found in a recursive descent are checked.\n\nIf a deprecated escape sequence is found, the file and line where found is printed. Note that for multiline strings the line where the string ends is printed and the error(s) are somewhere in the body of the string.\n\nParameters ---------- root : str File or directory to check.\n##### Returns\n', 'stemmed comments': ['return', 'recurs', 'found', 'note', 'If', 'string', 'paramet', 'check', 'escap', 'multilin', 'sequenc', 'line', 'deprec', 'root', 'print', 'descent', 'str', 'end', 'directori', 'bodi', 'somewher', 'find', 'file', 'error', 'py']}"
68,"{'func name': '_read_bytes', 'comments': 'Read from file-like object until size bytes are read. Raises ValueError if not EOF is encountered before size bytes are read. Non-blocking objects only supported if they derive from io objects.\n\nRequired as e.g. ZipExtFile in python 2.6 can return less data than requested.\n', 'stemmed comments': ['return', 'rais', 'less', '26', 'eg', 'data', 'io', 'zipextfil', 'deriv', 'eof', 'requir', 'object', 'support', 'read', 'size', 'byte', 'encount', 'filelik', 'request', 'valueerror', 'python', 'nonblock']}"
69,"{'func name': 'getDependencies', 'comments': 'For a Fortran source file, return a list of routines declared as EXTERNAL in it.\n\n\n', 'stemmed comments': ['return', 'list', 'extern', 'routin', 'declar', 'sourc', 'file', 'fortran', 'for']}"
70,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
71,"{'func name': 'alltrue', 'comments': 'Check if all elements of input array are true.\n\nSee Also -------- numpy.all : Equivalent function; see for details.\n', 'stemmed comments': ['input', 'detail', 'true', 'element', 'also', 'array', 'check', 'function', 'equival', 'see', 'numpyal', ';']}"
72,"{'func name': 'assubr', 'comments': '', 'stemmed comments': []}"
73,"{'func name': 'add_newdoc', 'comments': ""Add documentation to an existing object, typically one defined in C\n\nThe purpose is to allow easier editing of the docstrings without requiring a re-compile. This exists primarily for internal use within numpy itself.\n\nParameters ---------- place : str The absolute name of the module to import from obj : str The name of the object to add documentation to, typically a class or function name doc : {str, Tuple[str, str], List[Tuple[str, str]]} If a string, the documentation to apply to `obj`\n\nIf a tuple, then the first element is interpreted as an attribute of `obj` and the second as the docstring to apply\n\n- ``(method, docstring)``\n\nIf a list, then each element of the list should be a tuple of length two\n\n- ``[(method1, docstring1), (method2, docstring2), ...]`` warn_on_python : bool If True, the default, emit `UserWarning` if this is used to attach documentation to a pure-python object.\n\nNotes ----- This routine never raises an error if the docstring can't be written, but will raise an error if the object being documented does not exist.\n\nThis routine cannot modify read-only docstrings, as appear in new-style classes or built-in functions. Because this routine never raises an error the caller must check manually that the docstrings were changed.\n\nSince this function grabs the ``char *`` from a c-level str object and puts it into the ``tp_doc`` slot of the type of `obj`, it violates a number of C-API best-practices, by:\n\n- modifying a `PyTypeObject` after calling `PyType_Ready`\n\n- calling `Py_INCREF` on the str and losing the reference, so the str will never be released\n\nIf possible it should be avoided.\n"", 'stemmed comments': ['list', 'rais', 'written', 'string', 'recompil', 'possibl', 'check', 'put', 'document', 'tp_doc', 'char', 'newstyl', 'ca', 'tupl', 'absolut', 'allow', 'name', 'one', 'becaus', 'userwarn', 'error', 'default', 'thi', 'note', '[', 'readonli', 'first', 'interpret', 'chang', 'slot', 'method1', 'docstring1', 'call', 'defin', 'without', 'attribut', 'grab', 'purpos', 'manual', 'class', 'true', 'builtin', 'add', 'numpi', 'easier', 'second', 'never', 'edit', 'sinc', 'violat', 'within', 'capi', 'If', 'method2', 'modifi', 'length', 'warn_on_python', 'place', '{', 'two', 'must', 'requir', 'docstr', 'appli', 'clevel', 'lose', 'object', 'attach', ']', 'pytypeobject', 'nt', 'str', 'C', 'pytype_readi', 'emit', 'intern', 'bool', 'number', 'element', 'refer', 'caller', 'use', 'paramet', 'exist', 'modul', 'function', 'py_incref', '}', 'purepython', 'releas', 'import', 'method', 'bestpractic', 'typic', 'appear', 'obj', 'avoid', 'docstring2', 'the', 'primarili', 'doc', 'type', 'routin']}"
74,"{'func name': 'digitize', 'comments': 'Return the indices of the bins to which each value in input array belongs.\n\n=========\n\n=============\n\n============================ `right`\n\n\n\norder of bins\n\nreturned index `i` satisfies =========\n\n=============\n\n============================ ``False``\n\nincreasing\n\n\n\n ``bins[i-1] <= x < bins[i]`` ``True``\n\n increasing\n\n\n\n ``bins[i-1] < x <= bins[i]`` ``False``\n\ndecreasing\n\n\n\n ``bins[i-1] > x >= bins[i]`` ``True``\n\n decreasing\n\n\n\n ``bins[i-1] >= x > bins[i]`` =========\n\n=============\n\n============================\n\nIf values in `x` are beyond the bounds of `bins`, 0 or ``len(bins)`` is returned as appropriate.\n\nParameters ---------- x : array_like Input array to be binned. Prior to NumPy 1.10.0, this array had to be 1-dimensional, but can now have any shape. bins : array_like Array of bins. It has to be 1-dimensional and monotonic. right : bool, optional Indicating whether the intervals include the right or the left bin edge. Default behavior is (right==False) indicating that the interval does not include the right edge. The left bin end is open in this case, i.e., bins[i-1] <= x < bins[i] is the default behavior for monotonically increasing bins.\n##### Returns\n* **indices **: ndarray of ints\n    Output array of indices, of same shape as `x`.\n\n', 'stemmed comments': ['return', 'bool', 'belong', '>', 'output', 'order', 'shape', 'default', '=', 'option', 'index', 'increas', 'x', 'left', 'right', 'If', '[', 'right==fals', 'paramet', 'prior', 'case', '1100', '============================', 'bound', 'array_lik', 'open', 'ndarray', 'edg', 'valu', 'input', 'appropri', 'It', 'len', 'fals', 'satisfi', 'indic', '1dimension', ']', '=========', 'decreas', 'monoton', 'ie', 'whether', 'includ', 'end', 'bin', 'true', 'beyond', '0', 'the', 'array', 'numpi', 'interv', 'i1', '<', 'behavior', 'int', '=============']}"
75,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
76,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
77,"{'func name': 'do_generate_api', 'comments': '', 'stemmed comments': []}"
78,"{'func name': 'do_generate_api', 'comments': '', 'stemmed comments': []}"
79,"{'func name': 'make_code', 'comments': '', 'stemmed comments': []}"
80,"{'func name': '_discovered_machar', 'comments': 'Create MachAr instance with found information on float types\n\n\n', 'stemmed comments': ['instanc', 'type', 'machar', 'creat', 'float', 'found', 'inform']}"
81,"{'func name': '_can_target', 'comments': 'Return true if the architecture supports the -arch flag\n\n\n', 'stemmed comments': ['return', 'architectur', 'flag', 'support', 'true', 'arch']}"
82,"{'func name': 'rfftfreq', 'comments': 'Return the Discrete Fourier Transform sample frequencies (for usage with rfft, irfft).\n\nThe returned float array `f` contains the frequency bin centers in cycles per unit of the sample spacing (with zero at the start).\n\nFor instance, if the sample spacing is in seconds, then the frequency unit is cycles/second.\n\nGiven a window length `n` and a sample spacing `d`::\n\nf = [0, 1, ...,\n\n\n\n n/2-1,\n\n\n\n n/2] / (d*n)\n\n if n is even f = [0, 1, ..., (n-1)/2-1, (n-1)/2] / (d*n)\n\n if n is odd\n\nUnlike `fftfreq` (but like `scipy.fftpack.rfftfreq`) the Nyquist frequency component is considered to be positive.\n\nParameters ---------- n : int Window length. d : scalar, optional Sample spacing (inverse of the sampling rate). Defaults to 1.\n##### Returns\n* **f **: ndarray\n    Array of length ``n//2 + 1`` containing the sample frequencies.\n\n', 'stemmed comments': ['return', 'n/2', 'zero', '=', 'default', 'option', '/21', '[', 'even', 'consid', 'length', 'odd', 'transform', 'unit', 'per', 'paramet', 'irfft', 'posit', 'start', 'n/21', 'scalar', 'ndarray', 'given', 'compon', 'n//2', 'for', 'window', 'f', 'contain', 'fftfreq', 'n', 'frequenc', 'like', 'rfft', '/2', 'sampl', ']', 'float', '/', 'unlik', 'scipyfftpackrfftfreq', 'bin', 'discret', 'n1', 'the', 'fourier', '0', 'instanc', '1', 'array', 'usag', 'space', 'nyquist', 'invers', 'rate', 'int', 'cycles/second', 'second', 'center', 'cycl']}"
83,"{'func name': 'hermeweight', 'comments': 'Weight function of the Hermite_e polynomials.\n\nThe weight function is :math:`\\exp(-x^2/2)` and the interval of integration is :math:`[-\\inf, \\inf]`. the HermiteE polynomials are orthogonal, but not normalized, with respect to this weight function.\n\nParameters ---------- x : array_like Values at which the weight function will be computed.\n##### Returns\n* **w **: ndarray\n   The weight function at `x`.\n\n* **.. versionadded**: \n\n', 'stemmed comments': ['return', 'normal', 'hermite', 'weight', '\\inf', 'w', 'integr', 'hermite_', 'x', 'orthogon', '[', '\\exp', 'paramet', 'x^2/2', 'array_lik', 'ndarray', 'function', 'polynomi', 'respect', ']', 'math', 'comput', 'the', 'interv', 'versionad', 'valu']}"
84,"{'func name': 'hermweight', 'comments': 'Weight function of the Hermite polynomials.\n\nThe weight function is :math:`\\exp(-x^2)` and the interval of integration is :math:`[-\\inf, \\inf]`. the Hermite polynomials are orthogonal, but not normalized, with respect to this weight function.\n\nParameters ---------- x : array_like Values at which the weight function will be computed.\n##### Returns\n* **w **: ndarray\n   The weight function at `x`.\n\n* **.. versionadded**: \n\n', 'stemmed comments': ['return', 'normal', 'weight', '\\inf', 'w', 'integr', 'x', 'orthogon', '[', '\\exp', 'paramet', 'array_lik', 'ndarray', 'hermit', 'function', 'polynomi', 'respect', ']', 'math', 'comput', 'the', 'x^2', 'interv', 'versionad', 'valu']}"
85,"{'func name': 'histogramdd', 'comments': 'Compute the multidimensional histogram of some data.\n\nParameters ---------- sample : (N, D) array, or (D, N) array_like The data to be histogrammed.\n\nNote the unusual interpretation of sample when an array_like:\n\n* When an array, each row is a coordinate in a D-dimensional space\n\n- such as ``histogramdd(np.array([p1, p2, p3]))``. * When an array_like, each element is the list of values for single coordinate\n\n- such as ``histogramdd((X, Y, Z))``.\n\nThe first form should be preferred.\n\nbins : sequence or int, optional The bin specification:\n\n* A sequence of arrays describing the monotonically increasing bin edges along each dimension. * The number of bins for each dimension (nx, ny, ... =bins) * The number of bins for all dimensions (nx=ny=...=bins).\n\nrange : sequence, optional A sequence of length D, each an optional (lower, upper) tuple giving the outer bin edges to be used if the edges are not given explicitly in `bins`. An entry of None in the sequence results in the minimum and maximum values being used for the corresponding dimension. The default, None, is equivalent to passing a tuple of D None values. density : bool, optional If False, the default, returns the number of samples in each bin. If True, returns the probability *density* function at the bin, ``bin_count / sample_count / bin_volume``. normed : bool, optional An alias for the density argument that behaves identically. To avoid confusion with the broken normed argument to `histogram`, `density` should be preferred. weights : (N,) array_like, optional An array of values `w_i` weighing each sample `(x_i, y_i, z_i, ...)`. Weights are normalized to 1 if normed is True. If normed is False, the values of the returned histogram are equal to the sum of the weights belonging to the samples falling into each bin.\n##### Returns\n* **H **: ndarray\n    The multidimensional histogram of sample x. See normed and weights\n    for the different possible semantics.\n\n* **edges **: list\n    A list of D arrays describing the bin edges for each dimension.\n\n* **histogram**: 1-D histogram\n\n* **histogram2d**: 2-D histogram\n\n', 'stemmed comments': ['outer', 'list', 'return', 'fall', 'weigh', 'broken', 'upper', 'bin_count', 'possibl', 'minimum', 'correspond', 'H', 'ndarray', 'specif', 'densiti', 'alia', 'maximum', 'sampl', 'confus', 'rang', 'tupl', 'z_i', 'unusu', 'N', 'int', 'probabl', 'To', 'lower', 'describ', 'belong', '2D', 'p1', 'default', 'equival', 'entri', 'sample_count', 'note', 'semant', '[', '1D', 'first', 'data', 'D', 'interpret', 'An', 'when', 'dimens', 'ddimension', 'pass', 'prefer', 'argument', 'ny', 'comput', 'row', 'true', '1', 'space', 'none', 'histogramdd', 'behav', 'increas', 'x', 'If', 'length', 'result', 'form', 'sum', 'array_lik', 'p3', 'x_i', 'given', 'sequenc', 'p2', '=bin', 'fals', 'see', ']', 'coordin', '/', 'equal', 'histogram', 'bin', 'nparray', 'Y', 'singl', 'bool', 'normal', 'number', 'element', 'weight', 'along', 'option', 'A', 'ident', 'nx', 'use', 'paramet', 'function', 'edg', 'bin_volum', 'X', 'norm', 'differ', 'explicitli', 'w_i', 'histogram2d', 'avoid', 'monoton', 'the', 'array', 'nx=ny=', 'give', 'Z', 'y_i', 'valu', 'multidimension']}"
86,"{'func name': 'diag_indices_from', 'comments': 'Return the indices to access the main diagonal of an n-dimensional array.\n\nSee `diag_indices` for full details.\n\nParameters ---------- arr : array, at least 2-D\n\nSee Also -------- diag_indices\n\nNotes ----- .. versionadded:: 1.4.0\n', 'stemmed comments': ['return', 'detail', '2D', 'diagon', 'note', 'least', 'paramet', 'ndimension', '140', 'main', 'indic', 'see', 'access', 'full', 'diag_indic', 'also', 'array', 'versionad', 'arr']}"
87,"{'func name': 'intel_version_match', 'comments': '', 'stemmed comments': []}"
88,"{'func name': 'lagweight', 'comments': 'Weight function of the Laguerre polynomials.\n\nThe weight function is :math:`exp(-x)` and the interval of integration is :math:`[0, \\inf]`. The Laguerre polynomials are orthogonal, but not normalized, with respect to this weight function.\n\nParameters ---------- x : array_like Values at which the weight function will be computed.\n##### Returns\n* **w **: ndarray\n   The weight function at `x`.\n\n* **.. versionadded**: \n\n', 'stemmed comments': ['return', 'normal', 'weight', '\\inf', 'w', 'integr', 'exp', 'x', 'orthogon', '[', 'paramet', 'array_lik', 'ndarray', 'function', 'polynomi', 'respect', 'laguerr', ']', 'math', 'comput', 'the', '0', 'interv', 'versionad', 'valu']}"
89,"{'func name': 'legweight', 'comments': 'Weight function of the Legendre polynomials.\n\nThe weight function is :math:`1` and the interval of integration is :math:`[-1, 1]`. The Legendre polynomials are orthogonal, but not normalized, with respect to this weight function.\n\nParameters ---------- x : array_like Values at which the weight function will be computed.\n##### Returns\n* **w **: ndarray\n   The weight function at `x`.\n\n* **.. versionadded**: \n\n', 'stemmed comments': ['return', 'normal', 'weight', 'w', 'integr', 'x', 'orthogon', '[', 'paramet', 'array_lik', 'ndarray', 'function', 'polynomi', 'respect', ']', 'math', 'comput', 'the', '1', 'interv', 'legendr', 'versionad', 'valu']}"
90,"{'func name': 'output_def', 'comments': 'Outputs the final DEF file to a file defaulting to stdout.\n\noutput_def(dlist, flist, header, file = sys.stdout)\n', 'stemmed comments': ['def', 'output', 'default', '=', 'final', 'header', 'dlist', 'stdout', 'output_def', 'file', 'sysstdout', 'flist']}"
91,"{'func name': '_multi_dot', 'comments': 'Actually do the multiplication with the given order.\n\n\n', 'stemmed comments': ['order', 'given', 'multipl', 'actual']}"
92,"{'func name': 'unix2dos_dir', 'comments': '', 'stemmed comments': []}"
93,"{'func name': 'set_verbosity', 'comments': '', 'stemmed comments': []}"
94,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
95,"{'func name': 'repmat', 'comments': 'Repeat a 0-D to 2-D array or matrix MxN times.\n\nParameters ---------- a : array_like The array or matrix to be repeated. m, n : int The number of times `a` is repeated along the first and second axes.\n##### Returns\n* **out **: ndarray\n    The result of repeating `a`.\n\n', 'stemmed comments': ['return', 'mxn', 'number', '2D', 'along', 'axe', 'first', 'paramet', 'result', 'array_lik', 'ndarray', 'matrix', 'repeat', 'n', 'the', 'array', 'int', '0D', 'second', 'time']}"
96,"{'func name': 'generate_manifest', 'comments': '', 'stemmed comments': []}"
97,"{'func name': 'get_build_architecture', 'comments': '', 'stemmed comments': []}"
98,"{'func name': '_unary_method', 'comments': 'Implement a unary special method with a ufunc.\n\n\n', 'stemmed comments': ['implement', 'method', 'ufunc', 'special', 'unari']}"
99,"{'func name': 'addfield', 'comments': ""Adds a new field to the masked record array\n\nUses `newfield` as data and `newfieldname` as name. If `newfieldname` is None, the new field name is set to 'fi', where `i` is the number of existing fields.\n"", 'stemmed comments': ['set', 'use', 'newfield', 'data', 'new', 'number', 'add', 'record', 'array', 'name', 'fi', 'exist', 'mask', 'field', 'none', 'If', 'newfieldnam']}"
100,"{'func name': '_merge', 'comments': 'Concatenate two environment paths avoiding repeats.\n\nHere `old` is the environment string before the base class initialize function is called and `new` is the string after the call. The new string will be a fixed string if it is not obtained from the current environment, or the same as the old string if obtained from the same environment. The aim here is not to append the new string if it is already contained in the old string so as to limit the growth of the environment string.\n\nParameters ---------- old : string Previous environment string. new : string New environment string.\n##### Returns\n* **ret **: string\n    Updated environment string.\n\n', 'stemmed comments': ['return', 'ret', 'new', 'fix', 'current', 'here', 'growth', 'aim', 'string', 'paramet', 'two', 'function', 'limit', 'call', 'contain', 'old', 'repeat', 'concaten', 'environ', 'base', 'append', 'avoid', 'previou', 'class', 'path', 'the', 'initi', 'updat', 'alreadi', 'obtain']}"
101,"{'func name': '_merge', 'comments': 'Concatenate two environment paths avoiding repeats.\n\nHere `old` is the environment string before the base class initialize function is called and `new` is the string after the call. The new string will be a fixed string if it is not obtained from the current environment, or the same as the old string if obtained from the same environment. The aim here is not to append the new string if it is already contained in the old string so as to limit the growth of the environment string.\n\nParameters ---------- old : string Previous environment string. new : string New environment string.\n##### Returns\n* **ret **: string\n    Updated environment string.\n\n', 'stemmed comments': ['return', 'ret', 'new', 'fix', 'current', 'here', 'growth', 'aim', 'string', 'paramet', 'two', 'function', 'limit', 'call', 'contain', 'old', 'repeat', 'concaten', 'environ', 'base', 'append', 'avoid', 'previou', 'class', 'path', 'the', 'initi', 'updat', 'alreadi', 'obtain']}"
102,"{'func name': 'datetime_as_string', 'comments': ""datetime_as_string(arr, unit=None, timezone='naive', casting='same_kind')\n\nConvert an array of datetimes into an array of strings.\n\nParameters ---------- arr : array_like of datetime64 The array of UTC timestamps to format. unit : str One of None, 'auto', or a :ref:`datetime unit <arrays.dtypes.dateunits>`. timezone : {'naive', 'UTC', 'local'} or tzinfo Timezone information to use when displaying the datetime. If 'UTC', end with a Z to indicate UTC time. If 'local', convert to the local timezone first, and suffix with a +-#### timezone offset. If a tzinfo object, then do as with 'local', but use the specified timezone. casting : {'no', 'equiv', 'safe', 'same_kind', 'unsafe'} Casting to allow when changing between datetime units.\n##### Returns\n* **str_arr **: ndarray\n    An array of strings the same shape as `arr`.\n\n* **>>> d = np.arange('2002-10-27T04**: 30', 4*60, 60, dtype='M8[m]')\n\n* **array(['2002-10-27T04**: 30\n\n* **array(['2002-10-27T00**: 30-0400', '2002-10-27T01\n\n* **Traceback (most recent call last)**: ...\n\n* **TypeError**: Cannot create a datetime string as units 'h' from a NumPy\n\n"", 'stemmed comments': ['return', 'naiv', '=', 'creat', 'typeerror', 'string', 'ndarray', 'ref', 'can', 'safe', '4', 'allow', 'h', 'one', 'cast', 'last', '>', 'traceback', 'dtype=m8', 'display', '60', 'specifi', '[', 'first', 'timezone=na', 'chang', 'An', 'format', 'call', '300400', 'suffix', 'indic', 'inform', 'end', 'recent', 'datetim', 'numpi', 'none', 'arr', 'unsaf', 'shape', 'same_kind', 'nparang', 'unit=non', 'If', '{', 'array_lik', 'tzinfo', '20021027t04', 'casting=same_kind', 'object', 'offset', ']', 'str', 'arraysdtypesdateunit', 'time', 'datetime_as_str', '30', 'str_arr', 'auto', 'use', 'unit', 'paramet', '}', 'timezon', 'convert', 'equiv', '20021027t00', '20021027t01', 'no', 'timestamp', 'the', 'array', 'local', 'datetime64', '<', 'Z', 'utc']}"
103,"{'func name': 'nanstd', 'comments': 'Compute the standard deviation along the specified axis, while ignoring NaNs.\n\n\n##### Returns\n* **standard_deviation **: ndarray, see dtype parameter above.\n    If `out` is None, return a new array containing the standard\n    deviation, otherwise return a reference to the output array. If\n    ddof is >= the number of non-NaN elements in a slice or the slice\n    contains only NaNs, then the result for that slice is NaN.\n\n* **deviations from the mean**: ``std = sqrt(mean(abs(x - x.mean())**2))``.\n\n', 'stemmed comments': ['return', 'nonnan', 'output', 'new', '>', 'number', 'element', 'standard_devi', 'slice', 'refer', 'along', 'standard', '=', 'nan', 'specifi', 'x', 'If', 'sqrt', 'paramet', 'axi', 'result', 'std', 'ndarray', 'contain', 'ddof', 'otherwis', 'mean', 'xmean', 'see', '2', 'dtype', 'deviat', 'comput', 'ab', 'array', 'ignor', 'none']}"
104,"{'func name': 't', 'comments': '', 'stemmed comments': []}"
105,"{'func name': '_numpy_tester', 'comments': '', 'stemmed comments': []}"
106,"{'func name': 'read_config', 'comments': 'Return library info for a package from its configuration file.\n\nParameters ---------- pkgname : str Name of the package (should match the name of the .ini file, without the extension, e.g. foo for the file foo.ini). dirs : sequence, optional If given, should be a sequence of directories\n\n- usually including the NumPy base directory\n\n- where to look for npy-pkg-config files.\n##### Returns\n* **pkginfo **: class instance\n    The `LibraryInfo` instance containing the build information.\n\n', 'stemmed comments': ['return', 'configur', 'fooini', 'extens', 'pkgname', 'match', 'option', 'If', 'eg', 'npypkgconfig', 'paramet', 'ini', 'build', 'foo', 'given', 'pkginfo', 'dir', 'sequenc', 'usual', 'contain', 'libraryinfo', 'without', 'packag', 'librari', 'base', 'str', 'class', 'inform', 'includ', 'info', 'look', 'the', 'name', 'directori', 'numpi', 'instanc', 'file']}"
107,"{'func name': 'recfromcsv', 'comments': 'Load ASCII data stored in a comma-separated file.\n\nThe returned array is a record array (if ``usemask=False``, see `recarray`) or a masked record array (if ``usemask=True``, see `ma.mrecords.MaskedRecords`).\n\nParameters ---------- fname, kwargs : For a description of input parameters, see `genfromtxt`.\n\nSee Also -------- numpy.genfromtxt : generic function to load ASCII data.\n\nNotes ----- By default, `dtype` is None, which means that the data-type of the output array will be determined from the data.\n', 'stemmed comments': ['return', 'numpygenfromtxt', 'output', 'gener', 'default', 'determin', 'recarray', 'load', 'note', 'usemask=fals', 'store', 'datatyp', 'data', 'paramet', 'record', 'function', 'ascii', 'for', 'commasepar', 'input', 'kwarg', 'mamrecordsmaskedrecord', 'mean', 'see', 'fname', 'dtype', 'By', 'the', 'also', 'array', 'usemask=tru', 'mask', 'file', 'none', 'descript', 'genfromtxt']}"
108,"{'func name': 'extend_all', 'comments': '', 'stemmed comments': []}"
109,"{'func name': 'find_common_type', 'comments': 'Determine common type following standard coercion rules.\n\nParameters ---------- array_types : sequence A list of dtypes or dtype convertible objects representing arrays. scalar_types : sequence A list of dtypes or dtype convertible objects representing scalars.\n##### Returns\n* **datatype **: dtype\n    The common data type, which is the maximum of `array_types` ignoring\n    `scalar_types`, unless the maximum of `scalar_types` is of a\n    different kind (`dtype.kind`). If the kind is not understood, then\n    None is returned.\n\n* **the array**: \n\n* **`array_types` argument**: \n\n* **be used instead of dtypes**: \n\n', 'stemmed comments': ['return', 'list', 'unless', 'standard', 'determin', 'A', 'array_typ', 'repres', 'If', 'datatyp', 'data', 'use', 'paramet', 'scalar', 'sequenc', 'convert', 'common', 'object', 'maximum', 'coercion', 'dtypekind', 'differ', 'argument', 'dtype', 'follow', 'the', 'type', 'rule', 'array', 'ignor', 'scalar_typ', 'understood', 'none', 'kind', 'instead']}"
110,"{'func name': 'render_html', 'comments': '', 'stemmed comments': []}"
111,"{'func name': 'test_version', 'comments': 'Assert that expected OpenBLAS version is actually available via NumPy\n\n\n', 'stemmed comments': ['openbla', 'actual', 'version', 'numpi', 'expect', 'via', 'assert', 'avail']}"
112,"{'func name': 'array_function_from_dispatcher', 'comments': 'Like array_function_dispatcher, but with function arguments flipped.\n\n\n', 'stemmed comments': ['array_function_dispatch', 'like', 'function', 'flip', 'argument']}"
113,"{'func name': 'detect_runner', 'comments': ""Guess which test runner we're using by traversing the stack and looking for the first matching module. This *should* be reasonably safe, as it's done during test discovery where the test runner should be the stack frame immediately outside.\n\n\n"", 'stemmed comments': ['match', 'thi', 'first', 'use', 'travers', 'discoveri', 'runner', 'modul', 'guess', 're', 'test', 'reason', 'safe', 's', 'look', 'stack', 'done', 'frame', 'immedi', 'outsid']}"
114,"{'func name': 'parse_distributions_h', 'comments': 'Parse distributions.h located in inc_dir for CFFI, filling in the ffi.cdef\n\nRead the function declarations without the ""#define ..."" macros that will be filled in when loading the library.\n', 'stemmed comments': ['defin', 'without', 'fficdef', 'pars', 'declar', 'read', 'fill', 'function', 'macro', 'librari', 'distributionsh', 'cffi', 'load', 'inc_dir', 'locat']}"
115,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
116,"{'func name': 'write_release', 'comments': 'Write the README files.\n\nTwo README files are generated from the release notes, one in ``rst`` markup for the general release, the other in ``md`` markup for the github release notes.\n\nParameters ---------- options : Set by ``task`` decorator.\n', 'stemmed comments': ['set', 'md', 'paramet', 'task', 'releas', 'two', 'gener', 'note', 'rst', 'markup', 'option', 'decor', 'one', 'write', 'file', 'readm', 'github']}"
117,"{'func name': 'polyroots', 'comments': 'Compute the roots of a polynomial.\n\nReturn the roots (a.k.a. ""zeros"") of the polynomial\n\n.. math:: p(x) = \\sum_i c[i] * x^i.\n\nParameters ---------- c : 1-D array_like 1-D array of polynomial coefficients.\n##### Returns\n* **out **: ndarray\n    Array of the roots of the polynomial. If all the roots are real,\n    then `out` is also real, otherwise it is complex.\n\n', 'stemmed comments': ['return', 'complex', '\\sum_i', 'p', 'zero', '=', 'x', 'If', '[', '1D', 'paramet', 'array_lik', 'ndarray', 'polynomi', 'x^i', 'root', 'otherwis', ']', 'math', 'real', 'comput', 'c', 'also', 'array', 'coeffici', 'aka']}"
118,"{'func name': '_raise_power', 'comments': '', 'stemmed comments': []}"
119,"{'func name': '_deprecate_as_int', 'comments': 'Like `operator.index`, but emits a deprecation warning when passed a float\n\nParameters ---------- x : int-like, or float with integral value Value to interpret as an integer desc : str description to include in any error message\n', 'stemmed comments': ['integr', 'x', 'interpret', 'desc', 'paramet', 'deprec', 'messag', 'intlik', 'like', 'warn', 'pass', 'float', 'str', 'includ', 'integ', 'operatorindex', 'emit', 'valu', 'error', 'descript']}"
120,"{'func name': 'process_tex', 'comments': 'Remove unnecessary section titles from the LaTeX file.\n\n\n', 'stemmed comments': ['titl', 'section', 'file', 'unnecessari', 'latex', 'remov']}"
121,"{'func name': 'print_coercion_table', 'comments': '', 'stemmed comments': []}"
122,"{'func name': 'run', 'comments': '', 'stemmed comments': []}"
123,"{'func name': 'npy_load_module', 'comments': 'Load a module.\n\n.. versionadded:: 1.11.2\n\nParameters ---------- name : str Full module name. fn : str Path to module file. info : tuple, optional Only here for backward compatibility with Python 2.*.\n##### Returns\n* **mod **: module\n\n', 'stemmed comments': ['return', 'mod', 'backward', 'option', 'load', 'paramet', 'modul', 'fn', 'compat', '1112', 'onli', '2', 'str', 'tupl', 'full', 'info', 'path', 'name', 'python', 'file', 'versionad']}"
124,"{'func name': 'rec_join', 'comments': 'Join arrays `r1` and `r2` on keys. Alternative to join_by, that always returns a np.recarray.\n\nSee Also -------- join_by : equivalent function\n', 'stemmed comments': ['return', 'r1', 'nprecarray', 'alway', 'key', 'array', 'also', 'altern', 'equival', 'function', 'r2', 'see', 'join', 'join_bi']}"
125,"{'func name': 'array', 'comments': 'Construct a record array from a wide-variety of objects.\n\nA general-purpose record array constructor that dispatches to the appropriate `recarray` creation function based on the inputs (see Notes).\n\nParameters ---------- obj: any Input object. See Notes for details on how various input types are treated. dtype: data-type, optional Valid dtype for array. shape: int or tuple of ints, optional Shape of each array. offset: int, optional Position in the file or buffer to start reading from. strides: tuple of ints, optional Buffer (`buf`) is interpreted according to these strides (strides define how many bytes each array element, row, column, etc. occupy in memory). formats, names, titles, aligned, byteorder : If `dtype` is ``None``, these arguments are passed to `numpy.format_parser` to construct a dtype. See that function for detailed documentation. copy: bool, optional Whether to copy the input object (True), or to use a reference instead. This option only applies when the input is an ndarray or recarray. Defaults to True.\n##### Returns\n', 'stemmed comments': ['numpyformat_pars', 'bool', 'detail', 'return', 'align', 'element', 'shape', 'stride', 'refer', 'default', 'memori', 'option', 'accord', 'recarray', 'thi', 'A', 'valid', 'note', 'If', 'dispatch', 'constructor', 'creation', 'mani', 'datatyp', 'interpret', 'use', 'paramet', 'posit', 'start', 'record', 'treat', 'ndarray', 'function', 'format', 'widevarieti', 'appli', 'input', 'appropri', 'defin', 'document', 'object', 'buffer', 'instead', 'read', 'buf', 'construct', 'occupi', 'offset', 'pass', 'see', 'byteord', 'base', 'argument', 'dtype', 'obj', 'byte', 'tupl', 'generalpurpos', 'whether', 'row', 'true', 'column', 'type', 'name', 'array', 'copi', 'titl', 'int', 'etc', 'file', 'none', 'variou']}"
126,"{'func name': 'main', 'comments': 'Validates the docstrings of all the pre decided set of modules for errors and docstring standards.\n\n\n', 'stemmed comments': ['set', 'pre', 'modul', 'standard', 'docstr', 'valid', 'error', 'decid']}"
127,"{'func name': 'buildapi', 'comments': '', 'stemmed comments': []}"
128,"{'func name': 'lcov_generate', 'comments': '', 'stemmed comments': []}"
129,"{'func name': 'arctanh', 'comments': 'Compute the inverse hyperbolic tangent of `x`.\n\nReturn the ""principal value"" (for a description of this, see `numpy.arctanh`) of `arctanh(x)`. For real `x` such that `abs(x) < 1`, this is a real number.\n\nIf `abs(x) > 1`, or if `x` is complex, the result is complex. Finally, `x = 1` returns``inf`` and `x=-1` returns ``-inf``.\n\nParameters ---------- x : array_like The value(s) whose arctanh is (are) required.\n##### Returns\n* **out **: ndarray or scalar\n   The inverse hyperbolic tangent(s) of the `x` value(s). If `x` was\n   a scalar so is `out`, otherwise an array is returned.\n\n* **>>> with suppress_warnings() as sup**: \n\n', 'stemmed comments': ['return', 'complex', '>', 'number', 'hyperbol', '=', 'x', 'x=1', 'If', 'result', 'paramet', 'scalar', 'array_lik', 'ndarray', 'inf', 'final', 'requir', 'for', 'whose', 'otherwis', 'see', 'real', 'tangent', 'arctanh', 'comput', 'ab', 'invers', 'princip', '1', 'the', 'suppress_warn', 'array', 'numpyarctanh', '<', 'valu', 'sup', 'descript']}"
130,"{'func name': 'check_for_right_shift_internal_compiler_error', 'comments': ""On our arm CI, this fails with an internal compilation error\n\nThe failure looks like the following, and can be reproduced on ARM64 GCC 5.4:\n\n<source>: In function 'right_shift': <source>:4:20: internal compiler error: in expand_shift_1, at expmed.c:2349 ip1[i] = ip1[i] >> in2; ^ Please submit a full bug report, with preprocessed source if appropriate. See <http://gcc.gnu.org/bugs.html> for instructions. Compiler returned: 1\n\nThis function returns True if this compiler bug is present, and we need to turn off optimization for the function\n"", 'stemmed comments': ['return', 'pleas', '54', '>', 'gcc', 'arm', '=', 'thi', 'compil', '[', '^', 'expmedc2349', 'function', 'in2', 'report', 'sourc', 'On', 'http', 'fail', ';', '//gccgnuorg/bugshtml', 'appropri', 'like', 'present', 'turn', 'expand_shift_1', 'arm64', ']', 'see', 'right_shift', '420', 'reproduc', 'ip1', 'full', 'optim', 'look', 'follow', 'preprocess', 'true', 'the', 'submit', 'In', '1', 'need', 'instruct', 'failur', 'intern', '<', 'bug', 'error', 'CI']}"
131,"{'func name': 'setup_package', 'comments': '', 'stemmed comments': []}"
132,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
133,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
134,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
135,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
136,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
137,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
138,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
139,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
140,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
141,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
142,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
143,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
144,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
145,"{'func name': 'configuration', 'comments': '', 'stemmed comments': []}"
146,"{'func name': '_block_concatenate', 'comments': '', 'stemmed comments': []}"
147,"{'func name': 'tile', 'comments': ""Construct an array by repeating A the number of times given by reps.\n\nIf `reps` has length ``d``, the result will have dimension of ``max(d, A.ndim)``.\n\nIf ``A.ndim < d``, `A` is promoted to be d-dimensional by prepending new axes. So a shape (3,) array is promoted to (1, 3) for 2-D replication, or shape (1, 1, 3) for 3-D replication. If this is not the desired behavior, promote `A` to d-dimensions manually before calling this function.\n\nIf ``A.ndim > d``, `reps` is promoted to `A`.ndim by pre-pending 1's to it. Thus for an `A` of shape (2, 3, 4, 5), a `reps` of (2, 2) is treated as (1, 1, 2, 2).\n\nNote : Although tile may be used for broadcasting, it is strongly recommended to use numpy's broadcasting operations and functions.\n\nParameters ---------- A : array_like The input array. reps : array_like The number of repetitions of `A` along each axis.\n##### Returns\n* **c **: ndarray\n    The tiled output array.\n\n* **repeat **: Repeat elements of an array.\n\n* **broadcast_to **: Broadcast an array to a new shape\n\n"", 'stemmed comments': ['max', 'return', 'recommend', 'although', '>', 'new', 'output', 'number', 'desir', '2D', 'strongli', 'shape', 'element', 'along', 'axe', '3', 'oper', 'broadcast', 'A', 'thu', 'note', 'If', 'length', 'use', 'result', 'paramet', 'axi', 'array_lik', 'treat', 'ndarray', 'function', 'dimens', 'andim', 'given', 'call', 'tile', 'rep', 'input', 'repeat', 'prepend', 'replic', 'ddimension', 'construct', 'broadcast_to', '2', 's', '4', '3D', 'manual', '5', 'c', 'the', '1', 'array', 'ddimens', 'ndim', 'numpi', 'may', '<', 'behavior', 'So', 'promot', 'time', 'repetit']}"
148,"{'func name': 'features_table_diff', 'comments': '', 'stemmed comments': []}"
149,"{'func name': 'iterable_func', 'comments': '', 'stemmed comments': []}"
150,"{'func name': 'broadcast_arrays', 'comments': 'Broadcast any number of arrays against each other.\n\nParameters ---------- `*args` : array_likes The arrays to broadcast.\n\nsubok : bool, optional If True, then sub-classes will be passed-through, otherwise the returned arrays will be forced to be a base-class array (default).\n##### Returns\n* **broadcasted **: list of arrays\n    These arrays are views on the original arrays.  They are typically\n    not contiguous.  Furthermore, more than one element of a\n    broadcasted array may refer to a single memory location. If you need\n    to write to the arrays, make copies first. While you can set the\n    ``writable`` flag True, writing to a single output value may end up\n    changing more than one location in the output array.\n    .. deprecated\n\n', 'stemmed comments': ['bool', 'return', 'list', 'set', 'output', 'number', 'element', 'refer', 'default', 'memori', 'option', 'forc', 'broadcast', 'If', 'first', 'paramet', 'chang', 'array_lik', 'baseclass', 'contigu', 'origin', 'deprec', 'flag', 'otherwis', 'subok', 'view', 'write', 'typic', 'writabl', 'while', 'locat', 'they', 'end', 'true', 'need', 'the', 'copi', 'array', 'arg', 'may', 'furthermor', 'make', 'subclass', 'passedthrough', 'one', 'valu', 'these', 'singl']}"
151,"{'func name': 'show_all', 'comments': '', 'stemmed comments': []}"
152,"{'func name': 'test_del_attr_handling', 'comments': '', 'stemmed comments': []}"
153,"{'func name': '_bytes_to_date', 'comments': '', 'stemmed comments': []}"
154,"{'func name': 'test_raises', 'comments': '', 'stemmed comments': []}"
155,"{'func name': 'test_full_from_list', 'comments': '', 'stemmed comments': []}"
156,"{'func name': 'is_parametric_dtype', 'comments': 'Returns True if the the dtype is a parametric legacy dtype (itemsize is 0, or a datetime without units)\n\n\n', 'stemmed comments': ['return', 'without', 'legaci', 'unit', 'true', '0', 'datetim', 'parametr', 'dtype', 'items']}"
157,"{'func name': 'flags2names', 'comments': '', 'stemmed comments': []}"
158,"{'func name': 'test_dtype_persistence', 'comments': '', 'stemmed comments': []}"
159,"{'func name': 'test_unicode_object_array', 'comments': '', 'stemmed comments': []}"
160,"{'func name': 'test', 'comments': '', 'stemmed comments': []}"
161,"{'func name': '_path', 'comments': '', 'stemmed comments': []}"
162,"{'func name': 'new_test', 'comments': '', 'stemmed comments': []}"
163,"{'func name': 'trim', 'comments': '', 'stemmed comments': []}"
164,"{'func name': 'test_ufunc_override', 'comments': '', 'stemmed comments': []}"
165,"{'func name': '_path', 'comments': '', 'stemmed comments': []}"
166,"{'func name': 'test_isfileobj', 'comments': '', 'stemmed comments': []}"
167,"{'func name': 'test_compile_from_strings', 'comments': '', 'stemmed comments': []}"
168,"{'func name': 'test_doc_note', 'comments': '', 'stemmed comments': []}"
169,"{'func name': 'test_dispatcher', 'comments': 'Testing the utilites of the CPU dispatcher\n\n\n', 'stemmed comments': ['cpu', 'dispatch', 'test', 'utilit']}"
170,"{'func name': 'assert_features_equal', 'comments': '', 'stemmed comments': []}"
171,"{'func name': 'test_get_datetime64_unit', 'comments': '', 'stemmed comments': []}"
172,"{'func name': 'test_empty_indexing', 'comments': 'Regression test for ticket 1948.\n\n\n', 'stemmed comments': ['ticket', 'regress', 'test', '1948']}"
173,"{'func name': 'test_qr_mode_full_future_warning', 'comments': ""Check mode='full' FutureWarning.\n\nIn numpy 1.8 the mode options 'full' and 'economic' in linalg.qr were deprecated. The release date will probably be sometime in the summer of 2013.\n"", 'stemmed comments': ['econom', 'option', 'mode', 'mode=ful', 'linalgqr', 'check', 'deprec', 'sometim', '18', 'releas', 'summer', 'date', 'full', 'futurewarn', 'the', 'In', 'numpi', 'probabl', '2013']}"
174,"{'func name': 'test_deprecate_ragged_arrays', 'comments': '', 'stemmed comments': []}"
175,"{'func name': 'test_seedsequence', 'comments': '', 'stemmed comments': []}"
176,"{'func name': 'check_skip', 'comments': 'Check skip directive\n\nThe test below should not run\n\n>>> 1/0 #doctest: +SKIP\n', 'stemmed comments': ['>', 'the', '1/0', 'check', 'test', 'skip', 'doctest', 'direct', 'run']}"
177,"{'func name': 'test_keyword_argument', 'comments': '', 'stemmed comments': []}"
178,"{'func name': 'test_overlap', 'comments': '', 'stemmed comments': []}"
179,"{'func name': 'test_exec_command_stderr', 'comments': '', 'stemmed comments': []}"
180,"{'func name': 'test_cffi', 'comments': '', 'stemmed comments': []}"
181,"{'func name': 'test_ceildiv_128_64', 'comments': '', 'stemmed comments': []}"
182,"{'func name': 'test_fcompiler_flags', 'comments': '', 'stemmed comments': []}"
183,"{'func name': 'filter_deprecation', 'comments': '', 'stemmed comments': []}"
184,"{'func name': 'test_metadata_dtype', 'comments': '', 'stemmed comments': []}"
185,"{'func name': 'test_from_template', 'comments': 'Regression test for gh-10712.\n\n\n', 'stemmed comments': ['gh10712', 'regress', 'test']}"
186,"{'func name': 'compare_results', 'comments': '', 'stemmed comments': []}"
187,"{'func name': 'test_broadcast_size_scalar', 'comments': '', 'stemmed comments': []}"
188,"{'func name': 'test_plausible_finfo', 'comments': '', 'stemmed comments': []}"
189,"{'func name': 'assert_raises_fpe', 'comments': '', 'stemmed comments': []}"
190,"{'func name': 'trim', 'comments': '', 'stemmed comments': []}"
191,"{'func name': 'trim', 'comments': '', 'stemmed comments': []}"
192,"{'func name': 'test_ndindex', 'comments': '', 'stemmed comments': []}"
193,"{'func name': 'test_array_almost_equal_matrix', 'comments': '', 'stemmed comments': []}"
194,"{'func name': 'test_load_refcount', 'comments': '', 'stemmed comments': []}"
195,"{'func name': '_path', 'comments': '', 'stemmed comments': []}"
196,"{'func name': 'trim', 'comments': '', 'stemmed comments': []}"
197,"{'func name': 'trim', 'comments': '', 'stemmed comments': []}"
198,"{'func name': 'test_blas64_geqrf_lwork_smoketest', 'comments': '', 'stemmed comments': []}"
199,"{'func name': 'test_longdouble_from_bool', 'comments': '', 'stemmed comments': []}"
200,"{'func name': 'test_repmat', 'comments': '', 'stemmed comments': []}"
201,"{'func name': 'assert_copy_equivalent', 'comments': 'Check that operation(*args, out=out) produces results equivalent to out[...] = operation(*args, out=out.copy())\n\n\n', 'stemmed comments': ['result', 'out=outcopi', 'check', 'equival', '=', 'arg', 'oper', ']', 'out=out', 'produc', '[']}"
202,"{'func name': 'test_build_import', 'comments': 'Test the mingw32ccompiler.build_import_library, which builds a `python.a` from the MSVC `python.lib`\n\n\n', 'stemmed comments': ['pythona', 'build', 'pythonlib', 'test', 'mingw32ccompilerbuild_import_librari', 'msvc']}"
203,"{'func name': 'test_installed_npymath_ini', 'comments': '', 'stemmed comments': []}"
204,"{'func name': '_path', 'comments': '', 'stemmed comments': []}"
205,"{'func name': '_assert_equal_type_and_value', 'comments': '', 'stemmed comments': []}"
206,"{'func name': 'test_record_array_with_object_field', 'comments': '', 'stemmed comments': []}"
207,"{'func name': 'test_getfield', 'comments': '', 'stemmed comments': []}"
208,"{'func name': 'test__replace_nan', 'comments': 'Test that _replace_nan returns the original array if there are no NaNs, not a copy.\n\n\n', 'stemmed comments': ['return', 'copi', 'array', 'origin', 'nan', 'test', '_replace_nan']}"
209,"{'func name': 'test_warn_noclose', 'comments': '', 'stemmed comments': []}"
210,"{'func name': 'test_diagonal', 'comments': '', 'stemmed comments': []}"
211,"{'func name': 'test_outer_out_param', 'comments': '', 'stemmed comments': []}"
212,"{'func name': 'test_issctype', 'comments': '', 'stemmed comments': []}"
213,"{'func name': 'test_valid_numpy_version', 'comments': '', 'stemmed comments': []}"
214,"{'func name': 'eqmask', 'comments': '', 'stemmed comments': []}"
215,"{'func name': '_new_duck_type_and_implements', 'comments': 'Create a duck array type and implements functions.\n\n\n', 'stemmed comments': ['type', 'array', 'function', 'duck', 'creat', 'implement']}"
216,"{'func name': 'test_unpackbits_large', 'comments': '', 'stemmed comments': []}"
217,"{'func name': '_path', 'comments': '', 'stemmed comments': []}"
218,"{'func name': 'test_fft_with_order', 'comments': '', 'stemmed comments': []}"
219,"{'func name': 'trim', 'comments': '', 'stemmed comments': []}"
220,"{'func name': 'test_scalar_format', 'comments': 'Test the str.format method with NumPy scalar types\n\n\n', 'stemmed comments': ['scalar', 'type', 'numpi', 'strformat', 'method', 'test']}"
221,"{'func name': 'test_nonnumeric_object_coefficients', 'comments': 'Test coef fallback for object arrays of non-numeric coefficients.\n\n\n', 'stemmed comments': ['fallback', 'object', 'coef', 'array', 'coeffici', 'test', 'nonnumer']}"
222,"{'func name': 'test_array_called', 'comments': '', 'stemmed comments': []}"
223,"{'func name': 'test_api_importable', 'comments': 'Check that all submodules listed higher up in this file can be imported\n\nNote that if a PRIVATE_BUT_PRESENT_MODULES entry goes missing, it may simply need to be removed from the list (deprecation may or may not be needed\n\n- apply common sense).\n', 'stemmed comments': ['list', 'goe', 'entri', 'simpli', 'note', 'higher', 'check', 'private_but_present_modul', 'deprec', 'appli', 'remov', 'common', 'submodul', 'sens', 'miss', 'import', 'need', 'may', 'file']}"
224,"{'func name': 'test_broadcast_size_error', 'comments': '', 'stemmed comments': []}"
225,"{'func name': 'test_find_duplicate', 'comments': '', 'stemmed comments': []}"
226,"{'func name': '_path', 'comments': '', 'stemmed comments': []}"
227,"{'func name': 'test_full_reimport', 'comments': 'At the time of writing this, it is *not* truly supported, but apparently enough users rely on it, for it to be an annoying change when it started failing previously.\n\n\n', 'stemmed comments': ['support', 'appar', 'enough', 'chang', 'start', 'annoy', 'user', 'previous', 'write', 'reli', 'time', 'truli', 'At', 'fail']}"
228,"{'func name': '_signs', 'comments': '', 'stemmed comments': []}"
229,"{'func name': 'test_pep338', 'comments': '', 'stemmed comments': []}"
230,"{'func name': 'test_zero_padding', 'comments': 'Ensure that the implicit zero-padding does not cause problems.\n\n\n', 'stemmed comments': ['implicit', 'zeropad', 'caus', 'problem', 'ensur']}"
231,"{'func name': 'test_block_dispatcher', 'comments': '', 'stemmed comments': []}"
232,"{'func name': 'compare_results', 'comments': '', 'stemmed comments': []}"
233,"{'func name': 'test_roundtrip', 'comments': 'Test that split is the inverse operation of join\n\n\n', 'stemmed comments': ['invers', 'split', 'oper', 'test', 'join']}"
234,"{'func name': '_path', 'comments': '', 'stemmed comments': []}"
235,"{'func name': 'warmup', 'comments': '', 'stemmed comments': []}"
236,"{'func name': 'test_reference_types', 'comments': '', 'stemmed comments': []}"
237,"{'func name': '_path', 'comments': '', 'stemmed comments': []}"
238,"{'func name': 'assert_startswith', 'comments': '', 'stemmed comments': []}"
239,"{'func name': 'have_compiler', 'comments': 'Return True if there appears to be an executable compiler\n\n\n', 'stemmed comments': ['return', 'true', 'appear', 'execut', 'compil']}"
240,"{'func name': 'test_tril_indices', 'comments': '', 'stemmed comments': []}"
241,"{'func name': 'assert_all', 'comments': '', 'stemmed comments': []}"
242,"{'func name': 'test_code_runs', 'comments': '', 'stemmed comments': []}"
243,"{'func name': 'test_ufunc_warn_with_nan', 'comments': '', 'stemmed comments': []}"
244,"{'func name': 'convert', 'comments': '', 'stemmed comments': []}"
245,"{'func name': 'check_complex_value', 'comments': '', 'stemmed comments': []}"
246,"{'func name': 'test_outer_subclass_preserve', 'comments': '', 'stemmed comments': []}"
247,"{'func name': 'test_string_cast', 'comments': '', 'stemmed comments': []}"
248,"{'func name': 'test_clear_and_catch_warnings_inherit', 'comments': '', 'stemmed comments': []}"
249,"{'func name': 'test_assert_raises_regex_context_manager', 'comments': '', 'stemmed comments': []}"
250,"{'func name': 'test_warning_calls', 'comments': '', 'stemmed comments': []}"
251,"{'func name': 'assert_mask_equal', 'comments': 'Asserts the equality of two masks.\n\n\n', 'stemmed comments': ['equal', 'two', 'assert', 'mask']}"
252,"{'func name': 'triu_indices_from', 'comments': 'Return the indices for the upper-triangle of arr.\n\nSee `triu_indices` for full details.\n\nParameters ---------- arr : ndarray, shape(N, N) The indices will be valid for square arrays. k : int, optional Diagonal offset (see `triu` for details).\n##### Returns\n* **triu_indices_from **: tuple, shape(2) of ndarray, shape(N)\n    Indices for the upper-triangle of `arr`.\n\n* **.. versionadded**: \n\n', 'stemmed comments': ['return', 'detail', 'shape', 'uppertriangl', 'option', 'diagon', 'valid', 'triu_indic', 'paramet', 'ndarray', 'k', 'triu_indices_from', 'offset', 'indic', 'see', 'squar', '2', 'full', 'tupl', 'triu', 'the', 'array', 'N', 'int', 'versionad', 'arr']}"
253,"{'func name': 'common_type', 'comments': 'Return a scalar type which is common to the input arrays.\n\nThe return type will always be an inexact (i.e. floating point) scalar type, even if all the arrays are integer arrays. If one of the inputs is an integer array, the minimum precision type that is returned is a 64-bit floating point dtype.\n\nAll input arrays except int64 and uint64 can be safely cast to the returned dtype without loss of information.\n\nParameters ---------- array1, array2, ... : ndarrays Input arrays.\n##### Returns\n* **out **: data type code\n    Data type code.\n\n', 'stemmed comments': ['return', 'cast', 'except', 'If', 'even', 'data', 'paramet', 'scalar', 'alway', 'minimum', 'ndarray', 'array1', 'all', 'array2', 'common', 'input', 'without', 'precis', 'safe', 'float', 'dtype', 'code', 'inform', 'ie', 'int64', 'integ', 'loss', 'the', 'type', 'point', 'array', '64bit', 'inexact', 'one', 'uint64']}"
254,"{'func name': 'add_newdoc', 'comments': '', 'stemmed comments': []}"
255,"{'func name': 'isneginf', 'comments': 'Test element-wise for negative infinity, return result as bool array.\n\nParameters ---------- x : array_like The input array. out : array_like, optional A location into which the result is stored. If provided, it must have a shape that the input broadcasts to. If not provided or None, a freshly-allocated boolean array is returned.\n##### Returns\n* **out **: ndarray\n    A boolean array with the same dimensions as the input.\n    If second argument is not supplied then a numpy boolean array is\n    returned with values True where the corresponding element of the\n    input is negative infinity and values False where the element of\n    the input is not negative infinity.\n    If a second argument is supplied the result is stored there. If the\n    type of that array is a numeric type the result is represented as\n    zeros and ones, if the type is boolean then as False and True. The\n    return value `out` is then a reference to that array.\n\n', 'stemmed comments': ['return', 'bool', 'element', 'shape', 'refer', 'boolean', 'zero', 'option', 'neg', 'broadcast', 'A', 'x', 'If', 'repres', 'store', 'freshlyalloc', 'result', 'paramet', 'numer', 'correspond', 'array_lik', 'must', 'ndarray', 'dimens', 'provid', 'test', 'infin', 'input', 'fals', 'elementwis', 'argument', 'locat', 'true', 'the', 'type', 'array', 'numpi', 'one', 'second', 'valu', 'none', 'suppli']}"
256,"{'func name': 'UnixCCompiler_create_static_lib', 'comments': 'Build a static library in a separate sub-process.\n\nParameters ---------- objects : list or tuple of str List of paths to object files used to build the static library. output_libname : str The library name as an absolute or relative (if `output_dir` is used) path. output_dir : str, optional The path to the output directory. Default is None, in which case the ``output_dir`` attribute of the UnixCCompiler instance. debug : bool, optional This parameter is not used. target_lang : str, optional This parameter is not used.\n##### Returns\n', 'stemmed comments': ['bool', 'static', 'list', 'return', 'output', 'default', 'option', 'thi', 'separ', 'use', 'paramet', 'case', 'build', 'target_lang', 'output_libnam', 'subprocess', 'unixccompil', 'object', 'attribut', 'debug', 'librari', 'str', 'tupl', 'path', 'absolut', 'the', 'output_dir', 'name', 'directori', 'instanc', 'file', 'rel', 'none']}"
257,"{'func name': 'buildusevar', 'comments': '', 'stemmed comments': []}"
258,"{'func name': 'build_module_distutils', 'comments': 'Build a module via distutils and import it.\n\n\n', 'stemmed comments': ['distutil', 'build', 'via', 'modul', 'import']}"
259,"{'func name': '_median_nancheck', 'comments': 'Utility function to check median result from data for NaN values at the end and return NaN in that case. Input result can also be a MaskedArray.\n\nParameters ---------- data : array Input data to median function result : Array or MaskedArray Result of median function axis : {int, sequence of int, None}, optional Axis or axes along which the median was computed. out : ndarray, optional Output array in which to place the result.\n##### Returns\n* **median **: scalar or ndarray\n    Median or NaN in axes which contained NaN in the input.\n\n', 'stemmed comments': ['return', 'output', 'along', 'axe', 'option', 'nan', 'maskedarray', 'data', 'result', 'case', 'paramet', 'axi', '{', 'place', 'scalar', 'check', 'ndarray', 'function', 'median', '}', 'sequenc', 'contain', 'input', 'util', 'end', 'comput', 'also', 'array', 'int', 'valu', 'none']}"
260,"{'func name': '_no_tracing', 'comments': 'Decorator to temporarily turn off tracing for the duration of a test. Needed in tests that check refcounting, otherwise the tracing itself influences the refcounts\n\n\n', 'stemmed comments': ['need', 'influenc', 'otherwis', 'turn', 'check', 'decor', 'test', 'temporarili', 'durat', 'trace', 'refcount']}"
