0,"{'func name': 'make_abs_tests', 'comments': 'Make a set of tests to do abs.\n\n\n', 'stemmed comments': ['set', 'ab', 'make', 'test']}"
1,"{'func name': '_ref_softmax', 'comments': '', 'stemmed comments': []}"
2,"{'func name': 'get', 'comments': 'Returns function.\n\nArguments: identifier: Function or string\n##### Returns\n* **example**: \n\n* **eback (most recent call last)**: \n\n* **eError**: Unknown activation function\n\n', 'stemmed comments': ['activ', 'return', 'unknown', 'identifi', 'function', 'eback', 'call', 'exampl', 'string', 'last', 'eerror', 'recent', 'argument']}"
3,"{'func name': 'resolve', 'comments': '', 'stemmed comments': []}"
4,"{'func name': 'sparse_adagrad_update_numpy', 'comments': '', 'stemmed comments': []}"
5,"{'func name': 'adam_update_numpy', 'comments': '', 'stemmed comments': []}"
6,"{'func name': 'get_beta_accumulators', 'comments': '', 'stemmed comments': []}"
7,"{'func name': 'adam_update_numpy', 'comments': '', 'stemmed comments': []}"
8,"{'func name': 'get_beta_accumulators', 'comments': '', 'stemmed comments': []}"
9,"{'func name': 'get_ctl_train_step', 'comments': '', 'stemmed comments': []}"
10,"{'func name': 'make_add_n_tests', 'comments': 'Make a set of tests for AddN op.\n\n\n', 'stemmed comments': ['addn', 'make', 'op', 'set', 'test']}"
11,"{'func name': '_adjoint_householder', 'comments': '', 'stemmed comments': []}"
12,"{'func name': '_default_control_status_ctx', 'comments': '', 'stemmed comments': []}"
13,"{'func name': 'warn', 'comments': '', 'stemmed comments': []}"
14,"{'func name': 'build_shuffle_then_shuffle', 'comments': 'Construct hybrid of Shuffle within workers, Shuffle across workers.\n\n\n', 'stemmed comments': ['shuffl', 'worker', 'across', 'hybrid', 'within', 'construct']}"
15,"{'func name': 'add_contrib_direct_import_support', 'comments': 'Add support for `tf.contrib.*` alias `contrib_*.` Updates dict in place.\n\n\n', 'stemmed comments': ['alia', 'add', 'updat', 'support', 'dict', 'contrib_', 'place', 'tfcontrib']}"
16,"{'func name': 'remove_undocumented', 'comments': 'Removes symbols in a module that are not referenced by a docstring.\n\n\n##### Args\n* **module_name**: the name of the module (usually `__name__`).\n\n* **allowed_exception_list**: a list of names that should not be removed.\n\n* **doc_string_modules**: a list of modules from which to take the docstrings.\n\n##### Returns\n', 'stemmed comments': ['symbol', 'take', 'return', 'module_nam', 'docstr', 'arg', 'name', 'usual', 'doc_string_modul', 'allowed_exception_list', 'remov', 'list', 'modul', 'referenc', '__name__']}"
17,"{'func name': 'track_usage', 'comments': 'No usage tracking for external library.\n\n\n##### Args\n* **tool_id**: A string identifier for tool to be tracked.\n\n* **tags**: list of string tags that will be added to the tracking.\n\n', 'stemmed comments': ['tool_id', 'tag', 'identifi', 'usag', 'No', 'A', 'ad', 'string', 'arg', 'librari', 'list', 'extern', 'tool', 'track']}"
18,"{'func name': 'create_analyzer_cli', 'comments': 'Create an analyzer CLI.\n\n\n##### Args\n* **dump**: A `DebugDumpDir` object to base the analyzer CLI on.\n\n##### Returns\n', 'stemmed comments': ['creat', 'return', 'cli', 'dump', 'A', 'arg', 'debugdumpdir', 'analyz', 'object', 'base']}"
19,"{'func name': 'create_analyzer_ui', 'comments': 'Create an instance of CursesUI based on a DebugDumpDir object.\n\n\n##### Args\n* **debug_dump**: (debug_data.DebugDumpDir) The debug dump to use.\n\n* **tensor_filters**: (dict) A dict mapping tensor filter name (str) to tensor\n  filter (Callable).\n\n* **ui_type**: (str) requested UI type, e.g., ""curses"", ""readline"".\n\n* **on_ui_exit**: (`Callable`) the callback to be called when the UI exits.\n\n* **config**: A `cli_config.CLIConfig` object.\n\n##### Returns\n', 'stemmed comments': ['map', 'instanc', 'curs', 'UI', 'debug_datadebugdumpdir', 'the', 'arg', 'ui_typ', 'object', 'readlin', 'return', 'dict', 'tensor_filt', 'debug_dump', 'callabl', 'type', 'A', 'on_ui_exit', 'filter', 'call', 'exit', 'debugdumpdir', 'str', 'eg', 'callback', 'tensor', 'cursesui', 'base', 'creat', 'request', 'config', 'debug', 'cli_configcliconfig', 'dump', 'name', 'use']}"
20,"{'func name': 'exec_expected_result', 'comments': '', 'stemmed comments': []}"
21,"{'func name': 'transform', 'comments': 'Converts the given node to A-normal form (ANF).\n\nThe general idea of A-normal form: https://en.wikipedia.org/wiki/A-normal_form\n\nThe specific converters used here are based on Python AST semantics as documented at https://greentreesnakes.readthedocs.io/en/latest/.\n\nWhat exactly should be considered A-normal form for any given programming language is not completely obvious.\n\nThe transformation defined here is therefore configurable as to which syntax to replace with a fresh variable and which to leave be.\n\nThe configuration is intentionally flexible enough to define very precise variable insertion transformations, should that be desired.\n\nThe configuration is a list of syntax rules, each of which is a 2-tuple:\n\n- An `ASTEdgePattern` (which see) defining a type of AST edge, and\n\n- Whether to transform children of such edges. The special object `anf.ANY` may be used as a pattern that matches all edges.\n\nEach replacement directive is one of three possible things:\n\n- The object `anf.REPLACE`, meaning ""Replace this child node with a variable"",\n\n- The object `anf.LEAVE`, meaning ""Do not replace this child node with a variable"", or\n\n- A Python callable.\n\nIf a callable, it is called with the parent node, the field name, and the child node, and must compute a boolean indicating whether to transform the child node or not.\n\nThe callable is free to use whatever context information it chooses.\n\nThe callable may be invoked more than once on the same link, and must produce the same answer each time.\n\nThe syntax rules are tested in order, and the first match governs.\n\nIf no rule matches, the node is not transformed.\n\nThe above rules notwithstanding,\n\n- Variable references are never replaced with (fresh) variables, as that would accomplish nothing.\n\n- The left-hand children of Assign and AugAssign nodes, and the children of Del nodes, are never replaced with variables, as that would break their semantics.\n\n- The right-hand children of Assign nodes are never replaced with variables, as the original assignment would still have to be present in the result to define the new variable.\n\n(That is, there\'s no point in transforming `x = sin(y)` into `tmp = sin(y); x = tmp`.)\n\n- The right-hand children of AugAssign nodes are never replaced with variables either, but only because the difference from Assign was considered a potential source of confusion (and it would have been slightly awkward in the code to treat the RHS differently than the LHS).\n\n- Various special-purpose AST nodes are not exposed to the configuration, lest the transform produce invalid syntax like, e.g., `tmp = +; x = 1 tmp 2`.\n\nFor example, the configuration ```python [(anf.ASTEdgePattern(anf.ANY, anf.ANY, gast.expr), anf.REPLACE)] ``` gives explicit fresh names to all expressions regardless of context (except as outlined above), whereas ```python [(anf.ASTEdgePattern(gast.If, ""test"", anf.ANY), anf.REPLACE)] ``` only transforms the conditionals of `if` statements (but not, e.g., `while`).\n\nIf no configuration is supplied, the default behavior is to transform all expressions except literal constants, which is defined as a configuration as ```python # For Python 3, and gast library versions before 0.3 literals = (gast.Num, gast.Str, gast.Bytes, gast.NameConstant) [(anf.ASTEdgePattern(anf.ANY, anf.ANY, literals), anf.LEAVE), (anf.ASTEdgePattern(anf.ANY, anf.ANY, gast.expr), anf.REPLACE)] ```\n##### Args\n* **node**: The node to transform.\n\n* **ctx**: transformer.EntityInfo.  TODO(mdan)\n\n* **config**: Optional ANF configuration.  If omitted, ANF replaces all expression\n  expect literal constants.\n\n', 'stemmed comments': ['lest', 'regardless', 'exactli', 'the', 'arg', 'omit', 'document', 'mean', 'match', 'object', 'express', 'obviou', 'see', 'program', 'notwithstand', 'code', 'configur', 'outlin', 'anfani', 'lefthand', 'indic', 'variou', 'transform', 'must', 'origin', ']', 'callabl', 'whether', 'type', 'variabl', 'precis', 'test', 'still', 'http', 'gast', 'would', 'pattern', 'rh', 'anfleav', 'first', 'refer', 'edg', 'expect', ';', 'specif', 'each', '3', 'therefor', 'fresh', 'result', 'for', 'anorm', 'augassign', 'specialpurpos', 'break', 'default', 'child', 'time', 'new', 'condit', 'answer', 'option', '=', '2', 'list', 'gastnum', 'gastif', 'anfreplac', 'Do', 'todo', 'consid', 'A', 'assign', 'wherea', 'invok', 'treat', 'expos', 'exampl', 'convert', 'explicit', 'constant', 'gastbyt', 'ast', 'insert', 'one', 'sourc', 'never', 'choos', 'like', 'anf', 'either', 'that', 'languag', 'tmp', 'flexibl', 'name', 'python', 'librari', 'ctx', 'mdan', 'slightli', 'children', 'lh', '[', 'whatev', '03', 'special', 'link', 'invalid', 'confus', 'gastexpr', 'field', 'direct', 'statement', '2tupl', 'transformerentityinfo', 'inform', 'accomplish', 'node', 'may', 'An', 'gastnameconst', 'three', 'call', '//greentreesnakesreadthedocsio/en/latest/', 's', 'semant', 'eg', 'anfastedgepattern', 'parent', 'sin', 'potenti', 'liter', 'version', 'defin', 'gaststr', 'intent', 'replac', 'x', 'desir', 'use', 'awkward', 'context', 'gener', 'give', 'point', 'complet', 'syntax', 'except', 'idea', 'behavior', 'leav', 'order', 'free', 'govern', 'what', 'thing', 'suppli', '1', 'form', 'boolean', 'If', 'present', 'rule', '//enwikipediaorg/wiki/anormal_form', 'produc', 'noth', 'differ', 'righthand', 'base', 'config', 'del', 'astedgepattern', 'given', 'enough', 'possibl', 'comput']}"
22,"{'func name': 'dup', 'comments': 'Recursively copies annotations in an AST tree.\n\n\n##### Args\n* **node**: ast.AST\n\n* **copy_map**: Dict[Hashable, Hashable], maps a source anno key to a destination\n    key. All annotations with the source key will be copied to identical\n    annotations with the destination key.\n\n* **field_name**: str\n\n', 'stemmed comments': ['map', 'annot', 'field_nam', '[', 'destin', 'tree', 'arg', 'hashabl', 'astast', 'copi', 'dict', 'anno', 'recurs', 'ident', 'node', ']', 'str', 'copy_map', 'ast', 'sourc', 'key', 'all']}"
23,"{'func name': '_FilterGoldenProtoDict', 'comments': 'Filter out golden proto dict symbols that should be omitted.\n\n\n', 'stemmed comments': ['symbol', 'proto', 'filter', 'omit', 'dict', 'golden']}"
24,"{'func name': '_running_from_pip_package', 'comments': '', 'stemmed comments': []}"
25,"{'func name': '_running_from_pip_package', 'comments': '', 'stemmed comments': []}"
26,"{'func name': 'to_code', 'comments': 'Returns the source code generated by AutoGraph, as a string.\n\nExample usage:\n\n>>> def f(x): ...\n\n if x < 0: ...\n\n\n\n x = -x ...\n\n return x >>> tf.autograph.to_code(f) ""...def tf__f(x):...""\n\nAlso see: `tf.autograph.to_graph`.\n\nNote: If a function has been decorated with `tf.function`, pass its underlying Python function, rather than the callable that `tf.function creates:\n\n>>> @tf.function ... def f(x): ...\n\n if x < 0: ...\n\n\n\n x = -x ...\n\n return x >>> tf.autograph.to_code(f.python_function) ""...def tf__f(x):...""\n##### Args\n* **entity**: Python callable or class to convert.\n\n* **recursive**: Whether to recursively convert any functions that the converted\n  function may call.\n\n* **experimental_optional_features**: `None`, a tuple of, or a single\n  `tf.autograph.experimental.Feature` value.\n\n##### Returns\n', 'stemmed comments': ['note', 'tupl', 'pass', 'tfautographto_cod', 'arg', 'underli', 'tfautographto_graph', 'also', 'tf__f', '>', 'tffunction', 'see', 'tfautographexperimentalfeatur', 'return', 'code', 'fpython_funct', 'usag', 'valu', 'def', '=', 'none', 'recurs', 'If', 'autograph', 'singl', 'may', 'callabl', 'whether', 'f', 'call', 'exampl', 'string', 'convert', 'entiti', 'rather', 'decor', 'sourc', 'creat', '@', 'class', 'function', '<', 'x', 'experimental_optional_featur', '0', 'python', 'gener']}"
27,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
28,"{'func name': 'run', 'comments': ""Runs the program with an optional 'main' function and 'argv' list.\n\n\n"", 'stemmed comments': ['program', 'argv', 'run', 'function', 'option', 'main', 'list']}"
29,"{'func name': '_get_elephant', 'comments': '', 'stemmed comments': []}"
30,"{'func name': '_get_output_shape', 'comments': '', 'stemmed comments': []}"
31,"{'func name': 'make_arg_min_max_tests', 'comments': 'Make a set of tests to do arg_max.\n\n\n', 'stemmed comments': ['set', 'arg_max', 'make', 'test']}"
32,"{'func name': '_BroadcastToGrad', 'comments': '', 'stemmed comments': []}"
33,"{'func name': 'repeat', 'comments': 'Repeat elements of `input`.\n\nSee also `tf.concat`, `tf.stack`, `tf.tile`.\n##### Args\n* **input**: An `N`-dimensional Tensor.\n\n* **repeats**: An 1-D `int` Tensor. The number of repetitions for each element.\n  repeats is broadcasted to fit the shape of the given axis. `len(repeats)`\n  must equal `input.shape[axis]` if axis is not None.\n\n* **axis**: An int. The axis along which to repeat values. By default (axis=None),\n  use the flattened input array, and return a flat output array.\n\n* **name**: A name for the operation.\n\n##### Returns\n* **ample usage**: \n\n* **f.Tensor**: shape=(8,), dtype=int32,\n\n', 'stemmed comments': ['array', '[', '1D', 'the', 'arg', 'tftile', 'repetit', 'repeat', 'also', 'axis=non', 'default', 'N', 'see', 'return', 'flatten', 'usag', 'inputshap', 'shape=', 'valu', 'none', 'By', 'dtype=int32', 'len', 'element', '8', 'must', ']', 'An', 'A', 'equal', 'flat', 'dimension', 'shape', 'input', 'ampl', 'tfstack', 'tensor', 'tfconcat', 'ftensor', 'axi', 'int', 'along', 'oper', 'broadcast', 'use', 'given', 'name', 'fit', 'number', 'output']}"
34,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
35,"{'func name': 'transform', 'comments': '', 'stemmed comments': []}"
36,"{'func name': 'excluded_from_module_rename', 'comments': 'Check if this module import should not be renamed.\n\n\n##### Args\n* **module**: (string) module name.\n\n* **import_rename_spec**: ImportRename instance.\n\n##### Returns\n', 'stemmed comments': ['instanc', 'return', 'import_rename_spec', 'import', 'string', 'arg', 'name', 'importrenam', 'modul', 'renam', 'check']}"
37,"{'func name': 'parallel_walk', 'comments': 'Walks two ASTs in parallel.\n\nThe two trees must have identical structure.\n##### Args\n* **node**: Union[ast.AST, Iterable[ast.AST]]\n\n* **other**: Union[ast.AST, Iterable[ast.AST]]\n\n* **elds**: \n\n', 'stemmed comments': ['must', 'node', ']', 'structur', 'astast', '[', 'eld', 'the', 'union', 'tree', 'arg', 'iter', 'walk', 'parallel', 'two', 'ast', 'ident']}"
38,"{'func name': 'model_fn', 'comments': '', 'stemmed comments': []}"
39,"{'func name': '_upsample_filters', 'comments': ""Upsamples the filters by a factor of rate along the spatial dimensions.\n\n\n##### Args\n* **filters**: [h, w, in_depth, out_depth]. Original filters.\n\n* **rate**: An int, specifying the upsampling rate.\n\n##### Returns\n* **filters_up**: [h_up, w_up, in_depth, out_depth]. Upsampled filters with\n  h_up = h + (h - 1) * (rate - 1)\n  w_up = w + (w - 1) * (rate - 1)\n  containing (rate - 1) zeros between consecutive filter values along\n  the filters' spatial dimensions.\n\n"", 'stemmed comments': ['[', 'arg', 'rate', 'dimens', 'return', 'valu', 'h', '=', 'filters_up', 'spatial', '1', 'zero', 'out_depth', 'origin', ']', 'An', 'factor', 'filter', 'w', 'w_up', 'specifi', 'consecut', 'int', 'contain', 'along', 'h_up', 'in_depth', 'upsampl']}"
40,"{'func name': 'upsample_filters', 'comments': 'Upsamples the filters by a factor of rate along the spatial dimensions.\n\n\n##### Args\n* **filters**: spatial_shape + [in_channels, out_channels]\n  Original filters.\n\n* **rate**: A list of len(spatial_shape) positive ints, specifying the\n  upsampling rate.\n\n##### Returns\n* **filters_up**: output_spatial_shape + [in_channels, out_channels].\n  Upsampled filters with\n  output_spatial_shape[i] = (spatial_shape[i] - 1) * rate[i] + 1\n  containing (rate[i] - 1) zeros between consecutive filter values along\n  spatial dimension i.\n\n', 'stemmed comments': ['[', 'out_channel', 'arg', 'rate', 'output_spatial_shap', 'dimens', 'return', 'in_channel', 'valu', '=', 'filters_up', 'spatial', 'list', '1', 'zero', 'len', 'origin', ']', 'factor', 'spatial_shap', 'A', 'filter', 'specifi', 'consecut', 'int', 'contain', 'along', 'posit', 'upsampl']}"
41,"{'func name': 'audio_microfrontend', 'comments': 'Audio Microfrontend Op.\n\nThis Op converts a sequence of audio data into one or more feature vectors containing filterbanks of the input. The conversion process uses a lightweight library to perform:\n\n1. A slicing window function 2. Short-time FFTs 3. Filterbank calculations 4. Noise reduction 5. PCAN Auto Gain Control 6. Logarithmic scaling\n##### Args\n* **audio**: 1D Tensor, int16 audio data in temporal ordering.\n\n* **sample_rate**: Integer, the sample rate of the audio in Hz.\n\n* **window_size**: Integer, length of desired time frames in ms.\n\n* **window_step**: Integer, length of step size for the next frame in ms.\n\n* **num_channels**: Integer, the number of filterbank channels to use.\n\n* **upper_band_limit**: Float, the highest frequency included in the filterbanks.\n\n* **lower_band_limit**: Float, the lowest frequency included in the filterbanks.\n\n* **smoothing_bits**: Int, scale up signal by 2^(smoothing_bits) before reduction.\n\n* **even_smoothing**: Float, smoothing coefficient for even-numbered channels.\n\n* **odd_smoothing**: Float, smoothing coefficient for odd-numbered channels.\n\n* **min_signal_remaining**: Float, fraction of signal to preserve in smoothing.\n\n* **enable_pcan**: Bool, enable PCAN auto gain control.\n\n* **pcan_strength**: Float, gain normalization exponent.\n\n* **pcan_offset**: Float, positive value added in the normalization denominator.\n\n* **gain_bits**: Int, number of fractional bits in the gain.\n\n* **enable_log**: Bool, enable logarithmic scaling of filterbanks.\n\n* **scale_shift**: Integer, scale filterbanks by 2^(scale_shift).\n\n* **left_context**: Integer, number of preceding frames to attach to each frame.\n\n* **right_context**: Integer, number of preceding frames to attach to each frame.\n\n* **frame_stride**: Integer, M frames to skip over, where output[n] = frame[n*M].\n\n* **zero_padding**: Bool, if left/right context is out-of-bounds, attach frame of\n  zeroes. Otherwise, frame[0] or frame[size-1] will be copied.\n\n* **out_scale**: Integer, divide all filterbanks by this number.\n\n* **out_type**: DType, type of the output Tensor, defaults to UINT16.\n\n##### Returns\n* **filterbanks**: 2D Tensor, each row is a time frame, each column is a channel.\n\n', 'stemmed comments': ['scale_shift', 'the', 'channel', 'arg', '4', 'left_context', 'num_channel', 'upper_band_limit', 'window', 'microfrontend', 'logarithm', 'pcan', '2^', 'tempor', 'integ', ']', 'type', 'uint16', 'out_typ', 'oddnumb', 'highest', 'M', 'perform', 'featur', 'sample_r', 'right_context', 'evennumb', 'number', 'window_s', '3', 'step', 'default', 'return', 'time', 'ad', 'vector', 'copi', 'valu', 'ms', '2', 'int16', '=', 'zero', 'zero_pad', 'calcul', 'fft', 'odd_smooth', 'sequenc', 'A', 'convert', 'reduct', 'next', 'one', 'shorttim', 'Op', 'data', 'enabl', 'posit', 'denomin', 'librari', '5', 'gain', 'smooth', 'normal', 'otherwis', '[', '1D', 'preced', 'column', 'includ', 'float', 'process', '6', 'frequenc', 'Hz', 'attach', 'filterbank', 'gain_bit', 'pcan_strength', 'scale', 'window_step', 'n', 'out_scal', 'bit', 'input', '2D', 'min_signal_remain', 'coeffici', 'int', 'pcan_offset', 'contain', 'function', 'lower_band_limit', 'smoothing_bit', 'desir', 'use', '0', 'auto', 'context', 'fraction', 'output', 'length', 'frame', 'lowest', 'convers', 'rate', 'slice', 'nois', 'control', 'frame_strid', 'signal', 'order', 'audio', 'outofbound', 'sampl', 'expon', 'left/right', 'size1', '1', 'thi', 'even_smooth', 'enable_pcan', 'enable_log', 'lightweight', 'tensor', 'dtype', 'preserv', 'divid', 'bool', 'skip', 'size', 'row']}"
42,"{'func name': '_input_index', 'comments': 'Returns the index of `handle` in `op.inputs`.\n\n\n##### Args\n* **op**: Operation.\n\n* **handle**: Resource handle.\n\n##### Returns\n', 'stemmed comments': ['return', 'op', 'arg', 'oper', 'index', 'handl', 'opinput', 'resourc']}"
43,"{'func name': 'automatic_control_dependencies', 'comments': 'Wraps f to automatically insert control dependencies.\n\nThe inserted dependencies ensure that: 1. All stateful ops in f run when the result of f runs 2. Updates to the same resources happen in order.\n##### Args\n* **f**: the function to be wrapped.\n\n##### Returns\n', 'stemmed comments': ['wrap', 'run', 'the', 'arg', 'result', 'control', 'resourc', 'order', 'return', 'ensur', '2', '1', 'automat', 'f', 'state', 'depend', 'happen', 'insert', 'function', 'op', 'updat', 'all']}"
44,"{'func name': '_example_noninlined_funcdef', 'comments': 'Computes the Swish activation function: `x * sigmoid(x)`.\n\n\n', 'stemmed comments': ['activ', 'swish', 'function', 'x', 'sigmoid', 'comput']}"
45,"{'func name': 'chunk', 'comments': '', 'stemmed comments': []}"
46,"{'func name': 'get_var', 'comments': '', 'stemmed comments': []}"
47,"{'func name': '_maybe_wrap', 'comments': 'Creates an AutoCastVariable that wraps another variable if applicable.\n\nThis function is used to wrap the return value of AutoCastVariable.assign. Unfortunately MirroredVariable.assign will (incorrectly) return a Mirrored value instead of a MirroredVariable. So we cannot properly wrap it in an AutoCastVariable. We return the original variable in that case.\n##### Args\n* **variable**: A tf.Variable or op.\n\n* **wrap**: A boolean to define whether to wrap the variable in an\n  AutoCastVariable or not.\n\n##### Returns\n', 'stemmed comments': ['wrap', 'We', 'incorrectli', 'arg', 'unfortun', 'return', 'applic', 'valu', 'anoth', 'autocastvariableassign', 'boolean', 'thi', 'instead', 'origin', 'whether', 'A', 'variabl', 'mirroredvari', 'autocastvari', 'defin', 'mirroredvariableassign', 'creat', 'tfvariabl', 'function', 'properli', 'case', 'op', 'mirror', 'use', 'So']}"
48,"{'func name': 'mnist_model', 'comments': 'Creates a MNIST model.\n\n\n', 'stemmed comments': ['model', 'creat', 'mnist']}"
49,"{'func name': 'set_image_data_format', 'comments': ""Sets the value of the image data format convention.\n\nArguments: data_format: string. `'channels_first'` or `'channels_last'`.\n\nExample: >>> tf.keras.backend.image_data_format() 'channels_last' >>> tf.keras.backend.set_image_data_format('channels_first') >>> tf.keras.backend.image_data_format() 'channels_first' >>> tf.keras.backend.set_image_data_format('channels_last')\n"", 'stemmed comments': ['data', 'format', 'convent', 'imag', 'exampl', 'string', 'channels_first', 'valu', 'set', 'tfkerasbackendimage_data_format', 'tfkerasbackendset_image_data_format', '>', 'data_format', 'channels_last', 'argument']}"
50,"{'func name': 'compare_two_inputs_op_to_numpy', 'comments': '', 'stemmed comments': []}"
51,"{'func name': 'maybe_convert_to_ragged', 'comments': 'Converts any ragged input back to its initial structure.\n\n\n', 'stemmed comments': ['structur', 'convert', 'input', 'initi', 'back', 'rag']}"
52,"{'func name': 'IsTrainable', 'comments': '', 'stemmed comments': []}"
53,"{'func name': '_handle_or_self', 'comments': 'Unwrap resource variable/ndarray to return tensors.\n\n\n', 'stemmed comments': ['return', 'unwrap', 'variable/ndarray', 'tensor', 'resourc']}"
54,"{'func name': 'get_base_dirs_and_prefixes', 'comments': 'Returns the base_dirs and code_prefixes for OSS TensorFlow api gen.\n\n\n', 'stemmed comments': ['base_dir', 'return', 'api', 'oss', 'gen', 'tensorflow', 'code_prefix']}"
55,"{'func name': 'no_ragged_support', 'comments': '', 'stemmed comments': []}"
56,"{'func name': '_convert_numpy_or_python_types', 'comments': '', 'stemmed comments': []}"
57,"{'func name': 'get_layer', 'comments': '', 'stemmed comments': []}"
58,"{'func name': 'convert_to_list', 'comments': 'Convert a TensorLike, CompositeTensor, or ndarray into a Python list.\n\n\n', 'stemmed comments': ['ndarray', 'tensorlik', 'convert', 'python', 'compositetensor', 'list']}"
59,"{'func name': '_add_elements_to_collection', 'comments': '', 'stemmed comments': []}"
60,"{'func name': 'no_automatic_dependency_tracking_scope', 'comments': 'A context that disables automatic dependency tracking when assigning attrs.\n\nObjects that inherit from Autotrackable automatically creates dependencies to trackable objects through attribute assignments, and wraps data structures (lists or dicts) with trackable classes. This scope may be used to temporarily disable this behavior. This works similar to the decorator `no_automatic_dependency_tracking`.\n\nExample usage: ``` model = tf.keras.Model() model.arr1 = []\n\n# Creates a ListWrapper object with no_automatic_dependency_tracking_scope(model): model.arr2 = []\n\n# Creates a regular, untracked python list ```\n##### Args\n* **obj**: A trackable object.\n\n* **elds**: \n\n', 'stemmed comments': ['wrap', 'untrack', '[', 'regular', 'arg', 'behavior', 'trackabl', 'object', 'track', 'obj', 'attribut', 'usag', 'work', 'dict', '=', 'inherit', 'list', 'automat', 'thi', 'tfkerasmodel', 'listwrapp', 'may', 'structur', ']', 'temporarili', 'no_automatic_dependency_track', 'A', 'assign', 'eld', 'scope', 'exampl', 'attr', 'depend', 'decor', 'data', 'similar', 'creat', 'model', 'autotrack', 'class', 'modelarr1', 'use', 'no_automatic_dependency_tracking_scop', 'python', 'context', 'modelarr2', 'disabl']}"
61,"{'func name': 'decorated_function', 'comments': '', 'stemmed comments': []}"
62,"{'func name': '_test_dir', 'comments': '', 'stemmed comments': []}"
63,"{'func name': 'basic_train_loop', 'comments': 'Basic loop to train a model.\n\nCalls `train_step_fn` in a loop to train a model.\n\nThe function is called as:\n\n```python train_step_fn(session, *args, **kwargs) ```\n\nIt is passed a `tf.compat.v1.Session` in addition to `args` and `kwargs`.\n\nThe function typically runs one training step in the session.\n##### Args\n* **supervisor**: `tf.compat.v1.train.Supervisor` to run the training services.\n\n* **train_step_fn**: Callable to execute one training step.  Called repeatedly as\n  `train_step_fn(session, *args **kwargs)`.\n\n* **args**: Optional positional arguments passed to `train_step_fn`.\n\n* **kwargs**: Optional keyword arguments passed to `train_step_fn`.\n\n* **master**: Master to use to create the training session.  Defaults to `""""`\n  which causes the session to be created in the local process.\n\n', 'stemmed comments': ['local', 'pass', 'addit', 'run', 'the', 'session', 'arg', 'basic', 'step', 'train_step_fn', 'process', 'typic', 'argument', 'repeatedli', 'default', 'servic', 'caus', 'option', 'supervisor', 'tfcompatv1trainsupervisor', 'train', 'It', 'callabl', 'call', 'kwarg', 'tfcompatv1sess', 'one', 'model', 'creat', 'execut', 'function', 'posit', 'master', 'use', 'python', 'keyword', 'loop']}"
64,"{'func name': '_as_graph_element', 'comments': 'Retrieves Graph element.\n\n\n', 'stemmed comments': ['element', 'graph', 'retriev']}"
65,"{'func name': 'Test', 'comments': '', 'stemmed comments': []}"
66,"{'func name': '_GetBatchMatmulGradientWithBroadcastingTest', 'comments': '', 'stemmed comments': []}"
67,"{'func name': 'print_difference', 'comments': 'Print the difference in timing between two runs.\n\n\n', 'stemmed comments': ['time', 'run', 'differ', 'print', 'two']}"
68,"{'func name': 'delayed_plus1', 'comments': 'Sleeps for 100ms then returns x+1.\n\n\n', 'stemmed comments': ['x1', 'sleep', 'return', '100m']}"
69,"{'func name': 'batch_function', 'comments': 'Batches the computation done by the decorated function.\n\nSo, for example, in the following code\n\n```python @batch_function(1, 2, 3) def layer(a): return tf.matmul(a, a)\n\nb = layer(w) ```\n\nif more than one session.run call is simultaneously trying to compute `b` the values of `w` will be gathered, non-deterministically concatenated along the first axis, and only one thread will run the computation. See the documentation of the `Batch` op for more details.\n\nAssumes that all arguments of the decorated function are Tensors which will be batched along their first dimension.\n\nSparseTensor is not supported. The return value of the decorated function must be a Tensor or a list/tuple of Tensors.\n##### Args\n* **num_batch_threads**: Number of scheduling threads for processing batches\n of work. Determines the number of batches processed in parallel.\n\n* **max_batch_size**: Batch sizes will never be bigger than this.\n\n* **batch_timeout_micros**: Maximum number of microseconds to wait before\n outputting an incomplete batch.\n\n* **allowed_batch_sizes**: Optional list of allowed batch sizes. If left empty,\n does nothing. Otherwise, supplies a list of batch sizes, causing the op\n to pad batches up to one of those sizes. The entries must increase\n monotonically, and the final entry must equal max_batch_size.\n\n* **max_enqueued_batches**: The maximum depth of the batch queue. Defaults to 10.\n\n* **autograph**: Whether to use autograph to compile python and eager style code\n for efficient graph-mode execution.\n\n##### Returns\n', 'stemmed comments': ['microsecond', 'sessionrun', 'the', 'arg', 'document', 'see', 'code', '10', 'allowed_batch_s', 'must', 'schedul', 'whether', 'sparsetensor', 'follow', 'max_enqueued_batch', 'batch', 'along', 'first', 'number', '3', 'final', 'parallel', 'determin', 'default', 'return', 'pad', 'detail', 'assum', 'valu', 'def', 'option', '2', '=', 'list', 'num_batch_thread', 'incomplet', 'depth', 'exampl', 'queue', 'thread', 'one', 'axi', 'b', 'never', 'execut', 'maximum', 'op', 'python', 'batch_timeout_micro', 'list/tupl', 'otherwis', 'style', 'run', 'wait', 'process', 'dimens', 'argument', 'comput', 'caus', 'layer', 'compil', 'allow', 'simultan', 'call', 'equal', 'bigger', 'eager', 'w', 'decor', 'graphmod', '@', 'function', 'tri', 'use', 'So', 'nondeterminist', 'batch_funct', 'output', 'done', 'effici', 'left', 'increas', 'concaten', 'suppli', 'work', 'gather', '1', 'max_batch_s', 'If', 'autograph', 'entri', 'support', 'noth', 'tfmatmul', 'tensor', 'size', 'empti', 'monoton']}"
70,"{'func name': '_NumpyUpdate', 'comments': '', 'stemmed comments': []}"
71,"{'func name': 'make_batch_to_space_nd_tests', 'comments': 'Make a set of tests to do batch_to_space_nd.\n\n\n', 'stemmed comments': ['set', 'make', 'batch_to_space_nd', 'test']}"
72,"{'func name': 'unbatch', 'comments': ""Splits elements of a dataset into multiple elements on the batch dimension.\n\nFor example, if elements of the dataset are shaped `[B, a0, a1, ...]`, where `B` may vary for each input element, then for each element in the dataset, the unbatched dataset will contain `B` consecutive elements of shape `[a0, a1, ...]`.\n\n```python # NOTE: The following example uses `{ ... }` to represent the contents # of a dataset. a = { ['a', 'b', 'c'], ['a', 'b'], ['a', 'b', 'c', 'd'] }\n\na.unbatch() == { 'a', 'b', 'c', 'a', 'b', 'a', 'b', 'c', 'd'} ```\n##### Returns\n"", 'stemmed comments': ['note', 'content', 'split', '[', 'the', 'unbatch', '{', 'for', 'dimens', 'return', 'B', 'vari', 'aunbatch', '=', 'element', ']', 'may', 'exampl', 'a0', 'follow', 'dataset', '}', 'shape', 'multipl', 'input', 'a1', 'c', 'batch', 'consecut', 'b', 'repres', 'contain', 'd', '==', 'use', 'python']}"
73,"{'func name': 'measure_performance', 'comments': ""Run models and measure the performance.\n\nArguments: model_fn: Model function to be benchmarked. x: Input data. See `x` in the `fit()` method of `keras.Model`. y: Target data. See `y` in the `fit()` method of `keras.Model`. epoch: Integer. Number of epochs to train the model. If unspecified, `epoch` will default to 2. batch_size: Integer. Number of samples per gradient update. If unspecified, `batch_size` will default to 32. run_iters: Integer. Number of iterations to run the performance measurement. If unspecified, `run_iters` will default to 4. optimizer: String (name of optimizer) or optimizer instance. See `tf.keras.optimizers`. loss: String (name of objective function), objective function or `tf.keras.losses.Loss` instance. See `tf.keras.losses`. metrics: Lists of metrics to be evaluated by the model during training. See `metrics` in the `compile()` method of\n\n`keras.Model`. verbose: 0, 1, 2. Verbosity mode. See `verbose` in the `fit()` method of `keras.Model`. If unspecified, `verbose` will default to 0. num_gpus: Number of GPUs to run the model. distribution_strategy: Distribution strategies. It could be `multi_worker_mirrored`, `one_device`, `mirrored`. If unspecified, `distribution_strategy` will default to 'off'. Note that, `TPU` and `parameter_server` are not supported yet.\n##### Returns\n* **ise**: \n\n* **ValueError**: If `x` is none or if `optimizer` is not provided or\n\n"", 'stemmed comments': ['note', 'instanc', 'strategi', 'benchmark', 'run', 'loss', 'optim', 'one_devic', 'mode', '4', 'multi_worker_mirror', 'argument', 'object', 'default', 'see', 'return', 'kerasmodel', 'sampl', 'tfkeraslossesloss', 'distribut', 'off', '2', 'iter', 'none', 'list', '1', 'provid', 'If', 'epoch', 'unspecifi', 'compil', 'gpu', 'integ', 'valueerror', 'train', 'It', 'gradient', 'method', '32', 'run_it', 'ise', 'string', 'parameter_serv', 'metric', 'tfkerasloss', 'evalu', 'verbos', 'tpu', 'input', 'tfkerasoptim', 'measur', 'support', 'batch_siz', 'model_fn', 'model', 'perform', 'data', 'target', 'num_gpu', 'could', 'yet', 'function', 'x', 'distribution_strategi', 'updat', 'name', 'mirror', '0', 'fit', 'per', 'number']}"
74,"{'func name': 'benchmarks_main', 'comments': 'Run benchmarks as declared in argv.\n\n\n##### Args\n* **true_main**: True main function to run if benchmarks are not requested.\n\n* **argv**: the command line arguments (if None, uses sys.argv).\n\n', 'stemmed comments': ['command', 'request', 'argv', 'benchmark', 'run', 'function', 'arg', 'line', 'declar', 'true', 'use', 'none', 'sysargv', 'main', 'true_main', 'argument']}"
75,"{'func name': 'run_benchmark', 'comments': '', 'stemmed comments': []}"
76,"{'func name': '_save_checkpoint', 'comments': '', 'stemmed comments': []}"
77,"{'func name': 'entropy', 'comments': '', 'stemmed comments': []}"
78,"{'func name': '_kl_bernoulli_bernoulli', 'comments': 'Calculate the batched KL divergence KL(a || b) with a and b Bernoulli.\n\n\n##### Args\n* **a**: instance of a Bernoulli distribution object.\n\n* **b**: instance of a Bernoulli distribution object.\n\n* **name**: (optional) Name to use for created operations.\n  default is ""kl_bernoulli_bernoulli"".\n\n##### Returns\n', 'stemmed comments': ['kl_bernoulli_bernoulli', 'instanc', '||', 'bernoulli', 'arg', 'object', 'KL', 'default', 'return', 'distribut', 'option', 'calcul', 'batch', 'creat', 'b', 'oper', 'name', 'use', 'diverg']}"
79,"{'func name': 'try_import', 'comments': '', 'stemmed comments': []}"
80,"{'func name': '_kl_beta_beta', 'comments': 'Calculate the batchwise KL divergence KL(d1 || d2) with d1 and d2 Beta.\n\n\n##### Args\n* **d1**: instance of a Beta distribution object.\n\n* **d2**: instance of a Beta distribution object.\n\n* **name**: (optional) Name to use for created operations.\n  default is ""kl_beta_beta"".\n\n##### Returns\n', 'stemmed comments': ['instanc', '||', 'arg', 'd2', 'd1', 'object', 'KL', 'default', 'return', 'distribut', 'beta', 'option', 'calcul', 'kl_beta_beta', 'batchwis', 'creat', 'oper', 'name', 'use', 'diverg']}"
81,"{'func name': 'numpy_assert_allclose', 'comments': '', 'stemmed comments': []}"
82,"{'func name': 'float_values', 'comments': 'Returns values that should round trip exactly to float and back.\n\n\n', 'stemmed comments': ['return', 'exactli', 'trip', 'valu', 'round', 'float', 'back']}"
83,"{'func name': 'bfloat16_scope', 'comments': 'Scope class for bfloat16 variables so that the model uses custom getter.\n\nThis enables variables to be read as bfloat16 type when using get_variable.\n', 'stemmed comments': ['model', 'getter', 'class', 'type', 'variabl', 'enabl', 'scope', 'get_vari', 'bfloat16', 'use', 'read', 'thi', 'custom']}"
84,"{'func name': 'assert_bijective_and_finite', 'comments': ""Assert that forward/inverse (along with jacobians) are inverses and finite.\n\nIt is recommended to use x and y values that are very very close to the edge of the Bijector's domain.\n##### Args\n* **bijector**: A Bijector instance.\n\n* **x**: np.array of values in the domain of bijector.forward.\n\n* **y**: np.array of values in the domain of bijector.inverse.\n\n* **event_ndims**: Integer describing the number of event dimensions this bijector\n  operates on.\n\n* **atol**: Absolute tolerance.\n\n* **rtol**: Relative tolerance.\n\n* **sess**: TensorFlow session.  Defaults to the default session.\n\n"", 'stemmed comments': ['instanc', 'forward/invers', 'atol', 'session', 'close', 'arg', 'bijectorforward', 'number', 'dimens', 'default', 'assert', 'event', 'describ', 'recommend', 'rel', 'invers', 'valu', 'bijectorinvers', 'absolut', 'integ', 'It', 'A', 's', 'event_ndim', 'tensorflow', 'finit', 'sess', 'rtol', 'bijector', 'along', 'toler', 'x', 'oper', 'use', 'nparray', 'edg', 'domain', 'jacobian']}"
85,"{'func name': 'make_squared_difference_tests', 'comments': '', 'stemmed comments': []}"
86,"{'func name': 'validate_ragged_weights', 'comments': 'Validates the passed weight tensor or creates an empty one.\n\n\n', 'stemmed comments': ['creat', 'pass', 'weight', 'one', 'tensor', 'valid', 'empti']}"
87,"{'func name': 'load_data', 'comments': 'Loads the Boston Housing dataset.\n\nThis is a dataset taken from the StatLib library which is maintained at Carnegie Mellon University.\n\nSamples contain 13 attributes of houses at different locations around the Boston suburbs in the late 1970s. Targets are the median values of the houses at a location (in k$).\n\nThe attributes themselves are defined in the [StatLib website](http://lib.stat.cmu.edu/datasets/boston).\n\nArguments: path: path where to cache the dataset locally (relative to `~/.keras/datasets`). test_split: fraction of the data to reserve as test set. seed: Random seed for shuffling the data before computing the test split.\n##### Returns\n* **Tuple of Numpy arrays**: `(x_train, y_train), (x_test, y_test)`.\n\n* ****x_train, x_test****: numpy arrays with shape `(num_samples, 13)`\n  containing either the training samples (for x_train),\n  or test samples (for y_train).\n\n* ****y_train, y_test****: numpy arrays of shape `(num_samples,)` containing the\n  target scalars. The targets are float scalars typically between 10 and\n  50 that represent the home prices in k$.\n\n', 'stemmed comments': ['local', 'tupl', 'array', '[', 'reserv', 'split', 'y_test', 'the', 'cach', 'suburb', 'taken', 'price', 'mellon', 'float', '50', 'univers', 'argument', 'typic', 'home', 'return', 'attribut', 'sampl', 'x_train', '10', 'median', 'rel', 'boston', 'valu', 'locat', 'thi', '1970', 'late', '13', ']', 'train', 'numpi', 'x_test', 'carnegi', 'shuffl', '~/keras/dataset', 'websit', 'dataset', 'path', 'scalar', 'shape', 'load', 'differ', 'seed', 'defin', 'data', 'target', 'http', 'test', 'repres', 'contain', 'around', 'k', 'either', 'statlib', 'y_train', 'set', 'hous', 'test_split', 'librari', '//libstatcmuedu/datasets/boston', 'random', '$', 'num_sampl', 'fraction', 'comput', 'maintain']}"
88,"{'func name': 'transform', 'comments': '', 'stemmed comments': []}"
89,"{'func name': '_get_record_shape', 'comments': '', 'stemmed comments': []}"
90,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
91,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
92,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
93,"{'func name': '_add_op_to_signature_def_map', 'comments': '', 'stemmed comments': []}"
94,"{'func name': 'new_tf_operations', 'comments': ""Generator that yields newly-added TF_Operations in `graph`.\n\nSpecifically, yields TF_Operations that don't have associated Operations in `graph`. This is useful for processing nodes added by the C API.\n##### Args\n* **graph**: Graph\n\n* **elds**: \n\n"", 'stemmed comments': ['nt', 'node', 'newlyad', 'graph', 'api', 'C', 'eld', 'yield', 'ad', 'specif', 'oper', 'tf_oper', 'use', 'arg', 'associ', 'process', 'thi', 'gener']}"
95,"{'func name': 'transform', 'comments': 'Transform function call to the compiled counterparts.\n\n\n##### Args\n* **node**: AST\n\n* **ctx**: EntityContext\n\n##### Returns\n* **A tuple (node, new_names)**: node\n\n', 'stemmed comments': ['node', 'tupl', 'return', 'counterpart', 'A', 'function', 'ast', 'call', 'new_nam', 'arg', 'entitycontext', 'ctx', 'transform', 'compil']}"
96,"{'func name': 'list_summaries', 'comments': 'Read all summaries under the logdir into a `_SummaryFile`.\n\n\n##### Args\n* **logdir**: A path to a directory that contains zero or more event\n  files, either as direct children or in transitive subdirectories.\n  Summaries in these events must only contain old-style scalars,\n  images, and histograms. Non-summary events, like `graph_def`s, are\n  ignored.\n\n##### Returns\n', 'stemmed comments': ['children', 'nonsummari', 'imag', 'arg', 'direct', 'return', 'event', 'logdir', 'transit', 'histogram', 'zero', 'subdirectori', 'must', 'A', 'oldstyl', 'path', 'scalar', 'ignor', 'file', 'like', 'contain', 'either', 'directori', 'read', '_summaryfil', 'graph_def', 'summari']}"
97,"{'func name': 'make_logs', 'comments': 'Computes logs for sending to `on_batch_end` methods.\n\n\n', 'stemmed comments': ['send', 'on_batch_end', 'method', 'log', 'comput']}"
98,"{'func name': 'compute_accidental_hits', 'comments': ""Compute the position ids in `sampled_candidates` matching `true_classes`.\n\nIn Candidate Sampling, this operation facilitates virtually removing sampled classes which happen to match target classes.\n\nThis is done in Sampled Softmax and Sampled Logistic.\n\nSee our [Candidate Sampling Algorithms Reference](http://www.tensorflow.org/extras/candidate_sampling.pdf).\n\nWe presuppose that the `sampled_candidates` are unique.\n\nWe call it an 'accidental hit' when one of the target classes matches one of the sampled classes.\n\nThis operation reports accidental hits as triples `(index, id, weight)`, where `index` represents the row number in `true_classes`, `id` represents the position in `sampled_candidates`, and weight is `-FLOAT_MAX`.\n\nThe result of this op should be passed through a `sparse_to_dense` operation, then added to the logits of the sampled classes. This removes the contradictory effect of accidentally sampling the true target classes as noise classes for the same example.\n##### Args\n* **true_classes**: A `Tensor` of type `int64` and shape `[batch_size,\n  num_true]`. The target classes.\n\n* **sampled_candidates**: A tensor of type `int64` and shape `[num_sampled]`.\n  The sampled_candidates output of CandidateSampler.\n\n* **num_true**: An `int`.  The number of target classes per training example.\n\n* **seed**: An `int`. An operation-specific seed. Default is 0.\n\n* **name**: A name for the operation (optional).\n\n##### Returns\n* **indices**: A `Tensor` of type `int32` and shape `[num_accidental_hits]`.\n  Values indicate rows in `true_classes`.\n\n* **ids**: A `Tensor` of type `int64` and shape `[num_accidental_hits]`.\n  Values indicate positions in `sampled_candidates`.\n\n* **weights**: A `Tensor` of type `float` and shape `[num_accidental_hits]`.\n  Each value is `-FLOAT_MAX`.\n\n"", 'stemmed comments': ['the', 'arg', 'virtual', 'match', 'see', 'contradictori', 'logist', 'indic', ']', 'type', 'int32', 'num_tru', 'http', 'num_accidental_hit', 'refer', 'per', 'number', 'pass', 'each', 'softmax', 'result', 'sampled_candid', 'algorithm', 'default', 'return', 'ad', 'valu', 'option', 'accident', 'A', 'exampl', '//wwwtensorfloworg/extras/candidate_samplingpdf', 'one', 'repres', 'facilit', 'hit', 'candidatesampl', 'posit', 'name', 'op', 'effect', 'true', 'int64', '[', 'presuppos', 'candid', 'true_class', 'remov', 'float', 'train', 'An', 'weight', 'call', 'shape', 'operationspecif', 'happen', 'batch_siz', 'float_max', 'target', 'int', 'In', '0', 'num_sampl', 'output', 'We', 'done', 'index', 'nois', 'sampl', 'id', 'report', 'thi', 'tensor', 'seed', 'sparse_to_dens', 'class', 'oper', 'uniqu', 'row', 'tripl', 'logit', 'comput']}"
99,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
100,"{'func name': 'new_data_to_array', 'comments': '', 'stemmed comments': []}"
101,"{'func name': '_test_combinations', 'comments': '', 'stemmed comments': []}"
102,"{'func name': 'assert_cardinality', 'comments': 'Asserts the cardinality of the input dataset.\n\nNOTE: The following assumes that ""examples.tfrecord"" contains 42 records.\n\n>>> dataset = tf.data.TFRecordDataset(""examples.tfrecord"") >>> cardinality = tf.data.experimental.cardinality(dataset) >>> print((cardinality == tf.data.experimental.UNKNOWN_CARDINALITY).numpy()) True >>> dataset = dataset.apply(tf.data.experimental.assert_cardinality(42)) >>> print(tf.data.experimental.cardinality(dataset).numpy()) 42\n##### Args\n* **expected_cardinality**: The expected cardinality of the input dataset.\n\n##### Returns\n', 'stemmed comments': ['note', 'expect', 'the', 'arg', 'examplestfrecord', 'datasetappli', '>', 'assert', 'return', 'tfdataexperimentalcardin', 'assum', '=', 'numpi', 'tfdataexperimentalunknown_cardin', 'follow', 'dataset', '42', 'tfdatatfrecorddataset', 'input', 'tfdataexperimentalassert_cardin', 'contain', 'expected_cardin', '==', 'true', 'record', 'print', 'cardin']}"
103,"{'func name': 'make_cast_tests', 'comments': 'Generate examples for cast.\n\n\n', 'stemmed comments': ['exampl', 'cast', 'gener']}"
104,"{'func name': 'make_categorical', 'comments': '', 'stemmed comments': []}"
105,"{'func name': '_kl_categorical_categorical', 'comments': 'Calculate the batched KL divergence KL(a || b) with a and b Categorical.\n\n\n##### Args\n* **a**: instance of a Categorical distribution object.\n\n* **b**: instance of a Categorical distribution object.\n\n* **name**: (optional) Name to use for created operations.\n  default is ""kl_categorical_categorical"".\n\n##### Returns\n', 'stemmed comments': ['instanc', '||', 'arg', 'object', 'KL', 'default', 'return', 'distribut', 'option', 'calcul', 'categor', 'kl_categorical_categor', 'batch', 'creat', 'b', 'oper', 'name', 'use', 'diverg']}"
106,"{'func name': 'int_gen', 'comments': '', 'stemmed comments': []}"
107,"{'func name': 'batch_wrapper', 'comments': '', 'stemmed comments': []}"
108,"{'func name': 'batch_wrapper', 'comments': '', 'stemmed comments': []}"
109,"{'func name': 'get_layer_class', 'comments': '', 'stemmed comments': []}"
110,"{'func name': 'make_ceil_tests', 'comments': 'Make a set of tests to do ceil.\n\n\n', 'stemmed comments': ['set', 'ceil', 'make', 'test']}"
111,"{'func name': 'build', 'comments': '', 'stemmed comments': []}"
112,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
113,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
114,"{'func name': 'disable_check_numerics', 'comments': 'Disable the eager/graph unified numerics checking mechanism.\n\nThis method can be used after a call to `tf.debugging.enable_check_numerics()` to disable the numerics-checking mechanism that catches infinity and NaN values output by ops executed eagerly or in tf.function-compiled graphs.\n\nThis method is idempotent. Calling it multiple times has the same effect as calling it once.\n\nThis method takes effect only on the thread in which it is called.\n', 'stemmed comments': ['nan', 'graph', 'idempot', 'tffunctioncompil', 'check', 'take', 'time', 'numericscheck', 'infin', 'valu', 'tfdebuggingenable_check_numer', 'thi', 'method', 'call', 'catch', 'eagerli', 'multipl', 'numer', 'thread', 'unifi', 'execut', 'effect', 'op', 'eager/graph', 'use', 'mechan', 'output', 'disabl']}"
115,"{'func name': '_ensure_shape_grad', 'comments': '', 'stemmed comments': []}"
116,"{'func name': '_test_combinations', 'comments': '', 'stemmed comments': []}"
117,"{'func name': 'meta_graph_filename', 'comments': ""Returns the meta graph filename.\n\n\n##### Args\n* **checkpoint_filename**: Name of the checkpoint file.\n\n* **meta_graph_suffix**: Suffix for `MetaGraphDef` file. Defaults to 'meta'.\n\n##### Returns\n"", 'stemmed comments': ['default', 'return', 'meta_graph_suffix', 'graph', 'filenam', 'meta', 'suffix', 'arg', 'name', 'metagraphdef', 'checkpoint', 'checkpoint_filenam', 'file']}"
118,"{'func name': '_load_embedding_initializer', 'comments': 'Returns a variable initializer for loading pre-trained embeddings.\n\nWrapper around `load_and_remap_matrix_initializer()` specialized for loading embedding weights and remapping according to the provided vocab files. See docs for `load_and_remap_matrix_initializer()` for more details.\n\nNOTE: Only for use with div-partitioned variables / vocabularies.\n##### Args\n* **ckpt_path**: Path to the TensorFlow checkpoint (version 2, `TensorBundle`)\n  from which the old matrix `Tensor` will be loaded.\n\n* **embedding_tensor_name**: Name of the 2-D `Tensor` to load from checkpoint.\n\n* **new_vocab_size**: Number of entries in the new vocab.\n\n* **embedding_dim**: `int` specifying the dimension of the embedding vectors from\n  the checkpoint. Must match the number of columns in the old embedding\n  matrix.\n\n* **old_vocab_file**: A scalar `Tensor` of type `string` containing the\n  path to the old vocabulary file.\n\n* **new_vocab_file**: A scalar `Tensor` of type `string` containing the\n  path to the new vocabulary file.\n\n* **old_vocab_size**: The number of entries to consider in the old vocabulary.\n  With the default value of -1, the entire old row vocabulary file will be\n  used.  Otherwise, only the first `old_vocab_size` entries will be\n  considered for remapping.Must be smaller than the length of\n  `old_row_vocab_file`.\n\n* **num_oov_buckets**: `int` specifying the number of out-of-vocabulary\n  buckets to use. Must be >= 0.\n\n* **initializer**: Initializer function that accepts a 1-D tensor as the arg to\n  specify the shape of the returned tensor. If `None`, defaults to using\n  `truncated_normal_initializer()`.\n\n* **max_rows_in_memory**: `int` specifying the maximum number of rows to load from\n  the checkpoint at once. If less than or equal to 0, the entire matrix will\n  be loaded into memory. Setting this arg trades increased disk reads for\n  lower memory usage.\n\n##### Returns\n', 'stemmed comments': ['memori', 'disk', 'the', 'arg', 'match', 'trade', 'new_vocab_fil', 'old_vocab_fil', 'new_vocab_s', '>', 'see', 'old', 'none', 'must', 'type', 'variabl', 'path', 'scalar', 'file', 'wrapper', 'around', 'first', 'number', '/', 'old_row_vocab_fil', 'initi', 'less', 'default', 'accept', 'return', 'ckpt_path', 'new', 'detail', 'vector', 'valu', '2', '=', 'tensorbundl', 'divpartit', 'consid', 'A', 'load_and_remap_matrix_initi', 'embed', 'specifi', 'doc', 'truncated_normal_initi', 'maximum', 'name', 'read', 'bucket', 'note', 'otherwis', 'remap', 'remappingmust', '1D', 'special', 'column', 'dimens', 'usag', 'embedding_tensor_nam', 'smaller', 'vocabulari', 'weight', 'equal', 'string', 'pretrain', 'shape', 'accord', 'outofvocabulari', 'version', 'entir', '2D', 'int', 'contain', 'onli', 'function', 'use', '0', 'lower', 'max_rows_in_memori', 'num_oov_bucket', 'length', 'embedding_dim', 'old_vocab_s', 'increas', 'with', 'checkpoint', 'provid', '1', 'If', 'entri', 'load', 'tensor', 'tensorflow', 'matrix', 'set', 'vocab', 'row']}"
119,"{'func name': '_create_checkpoints', 'comments': '', 'stemmed comments': []}"
120,"{'func name': '_create_partition_checkpoints', 'comments': '', 'stemmed comments': []}"
121,"{'func name': '_collect_partitioned_variable', 'comments': 'Returns list of `tf.Variable` that comprise the partitioned variable.\n\n\n', 'stemmed comments': ['return', 'tfvariabl', 'variabl', 'partit', 'list', 'compris']}"
122,"{'func name': 'TriAngInvCompositeGrad', 'comments': '', 'stemmed comments': []}"
123,"{'func name': '_cholesky_kronecker', 'comments': '', 'stemmed comments': []}"
124,"{'func name': 'load_batch', 'comments': 'Internal utility for parsing CIFAR data.\n\nArguments: fpath: path the file to parse. label_key: key for label data in the retrieve dictionary.\n##### Returns\n', 'stemmed comments': ['data', 'return', 'retriev', 'dictionari', 'key', 'label_key', 'util', 'pars', 'fpath', 'path', 'file', 'label', 'cifar', 'intern', 'argument']}"
125,"{'func name': 'load_data', 'comments': ""Loads [CIFAR10 dataset](https://www.cs.toronto.edu/~kriz/cifar.html).\n\nThis is a dataset of 50,000 32x32 color training images and 10,000 test images, labeled over 10 categories. See more info at the [CIFAR homepage](https://www.cs.toronto.edu/~kriz/cifar.html).\n##### Returns\n* **Tuple of Numpy arrays**: `(x_train, y_train), (x_test, y_test)`.\n\n* ****x_train, x_test****: uint8 arrays of RGB image data with shape\n  `(num_samples, 3, 32, 32)` if `tf.keras.backend.image_data_format()` is\n  `'channels_first'`, or `(num_samples, 32, 32, 3)` if the data format\n  is `'channels_last'`.\n\n* ****y_train, y_test****: uint8 arrays of category labels\n  (integers in range 0-9) each with shape (num_samples, 1).\n\n"", 'stemmed comments': ['tupl', 'format', 'array', '[', 'y_test', 'imag', 'uint8', 'tfkerasbackendimage_data_format', '32x32', '3', 'rang', 'see', 'rgb', 'return', '09', 'x_train', '10', '//wwwcstorontoedu/~kriz/cifarhtml', 'color', '10000', '1', 'cifar', 'cifar10', 'thi', 'integ', 'train', ']', 'numpi', 'x_test', '32', 'channels_first', 'dataset', 'shape', 'load', 'categori', 'info', 'test', 'data', 'http', 'homepag', '50000', 'y_train', 'label', 'channels_last', 'num_sampl']}"
126,"{'func name': 'load_data', 'comments': 'Loads [CIFAR100 dataset](https://www.cs.toronto.edu/~kriz/cifar.html).\n\nThis is a dataset of 50,000 32x32 color training images and 10,000 test images, labeled over 100 fine-grained classes that are grouped into 20 coarse-grained classes. See more info at the [CIFAR homepage](https://www.cs.toronto.edu/~kriz/cifar.html).\n\nArguments: label_mode: one of ""fine"", ""coarse"". If it is ""fine"" the category labels are the fine-grained labels, if it is ""coarse"" the output labels are the coarse-grained superclasses.\n##### Returns\n* **Tuple of Numpy arrays**: `(x_train, y_train), (x_test, y_test)`.\n\n* ****x_train, x_test****: uint8 arrays of RGB image data with shape\n  `(num_samples, 3, 32, 32)` if `tf.keras.backend.image_data_format()` is\n  `\'channels_first\'`, or `(num_samples, 32, 32, 3)` if the data format\n  is `\'channels_last\'`.\n\n* ****y_train, y_test****: uint8 arrays of category labels with shape\n  (num_samples, 1).\n\n', 'stemmed comments': ['tupl', 'format', 'array', '[', 'y_test', 'imag', 'uint8', 'tfkerasbackendimage_data_format', '32x32', '3', 'cifar100', 'superclass', 'argument', 'see', 'rgb', 'return', 'x_train', '//wwwcstorontoedu/~kriz/cifarhtml', 'color', 'finegrain', '10000', '1', 'cifar', 'If', 'thi', 'fine', 'train', ']', 'numpi', 'coarsegrain', '20', 'x_test', '32', 'coars', 'channels_first', 'dataset', 'shape', 'load', '100', 'categori', 'one', 'info', 'test', 'data', 'http', 'class', 'homepag', '50000', 'y_train', 'group', 'label', 'channels_last', 'num_sampl', 'label_mod', 'output']}"
127,"{'func name': 'get_error_intro', 'comments': 'Generate formatted intro for TensorFlow run-time error.\n\n\n##### Args\n* **tf_error**: (errors.OpError) TensorFlow run-time error object.\n\n##### Returns\n', 'stemmed comments': ['format', 'return', 'tf_error', 'arg', 'intro', 'errorsoperror', 'runtim', 'error', 'tensorflow', 'object', 'gener']}"
128,"{'func name': 'assert_array_lines_close', 'comments': 'Assert that the array value represented by lines is close to expected.\n\nNote that the shape of the array represented by the `array_lines` is ignored.\n##### Args\n* **test**: An instance of TensorFlowTestCase.\n\n* **expected_array**: Expected value of the array.\n\n* **array_lines**: A list of strings representing the array.\n  E.g., ""array([[ 1.0, 2.0 ], [ 3.0, 4.0 ]])""\n  Assumes that values are separated by commas, parentheses, brackets, ""|""\n  characters and whitespace.\n\n', 'stemmed comments': ['expect', 'note', 'instanc', 'array', '[', 'close', 'arg', '|', 'Eg', 'assert', '10', 'expected_array', 'tensorflowtestcas', 'assum', 'valu', 'parenthes', 'bracket', 'list', '30', 'whitespac', ']', 'An', 'A', '20', 'string', 'line', 'array_lin', 'shape', 'comma', 'ignor', '40', 'test', 'repres', 'separ', 'charact']}"
129,"{'func name': 'mock_request_compute_metadata', 'comments': '', 'stemmed comments': []}"
130,"{'func name': '_as_text', 'comments': '', 'stemmed comments': []}"
131,"{'func name': 'clip_by_average_norm', 'comments': 'Clips tensor values to a maximum average L2-norm.\n\nGiven a tensor `t`, and a maximum clip value `clip_norm`, this operation normalizes `t` so that its average L2-norm is less than or equal to `clip_norm`. Specifically, if the average L2-norm is already less than or equal to `clip_norm`, then `t` is not modified. If the average L2-norm is greater than `clip_norm`, then this operation returns a tensor of the same type and shape as `t` with its values set to:\n\n`t * clip_norm / l2norm_avg(t)`\n\nIn this case, the average L2-norm of the output tensor is `clip_norm`.\n\nThis operation is typically used to clip gradients before applying them with an optimizer.\n##### Args\n* **t**: A `Tensor`.\n\n* **clip_norm**: A 0-D (scalar) `Tensor` > 0. A maximum clipping value.\n\n* **name**: A name for the operation (optional).\n\n##### Returns\n', 'stemmed comments': ['/', 'specif', 'clip_norm', 'l2norm_avg', 'optim', 'arg', 'alreadi', 'less', 'appli', 'typic', '>', '0D', 'return', 'valu', 'l2norm', 'option', 'If', 'thi', 'greater', 'modifi', 'type', 'A', 'gradient', 'equal', 'scalar', 'shape', 'tensor', 'maximum', 'case', 'oper', 'averag', 'clip', 'given', 'set', 'In', 'use', '0', 'name', 'normal', 'output']}"
132,"{'func name': 'get_accelerator_devices', 'comments': 'Returns accelerator devices given a master and a configuration.\n\n\n', 'stemmed comments': ['return', 'configur', 'acceler', 'master', 'given', 'devic']}"
133,"{'func name': 'Provision', 'comments': '', 'stemmed comments': []}"
134,"{'func name': 'generate_random_functiondef', 'comments': '', 'stemmed comments': []}"
135,"{'func name': 'create_test_objects', 'comments': '', 'stemmed comments': []}"
136,"{'func name': 'create_test_objects', 'comments': '', 'stemmed comments': []}"
137,"{'func name': 'broadcast_recv', 'comments': 'Receives a broadcasts tensor, across devices.\n\n\n##### Args\n* **shape**: Shape of the tensor to be received.\n\n* **dtype**: Type of the tensor to be received.\n\n* **group_size**: one plus the number of receiving tensors, i.e. the total\n  number of devices participating.  Each tensor must reside on a\n  different device.\n\n* **group_key**: an integer identifying the group of devices.\n\n* **instance_key**: an integer identifying the participating group of Ops.\n\n* **communication_hint**: preferred collective communication.  The implementation\n  may fall back to another mechanism.  Options include `auto`, `ring`, and\n  `nccl`.\n\n* **timeout**: If set to a non zero, set a completion timeout to detect staleness.\n  If the timer goes off, a DeadlineExceededError is raised.\n  The timeout value in seconds. This feature is experimental.\n\n##### Returns\n', 'stemmed comments': ['experiment', 'timeout', 'rais', 'the', 'second', 'each', 'arg', 'complet', 'includ', 'goe', 'auto', 'instance_key', 'particip', 'commun', 'return', 'plu', 'communication_hint', 'valu', 'ie', 'anoth', 'option', 'If', 'nccl', 'zero', 'thi', 'resid', 'must', 'integ', 'may', 'group_key', 'type', 'receiv', 'timer', 'prefer', 'devic', 'shape', 'differ', 'one', 'tensor', 'implement', 'non', 'collect', 'dtype', 'identifi', 'stale', 'deadlineexceedederror', 'ring', 'total', 'featur', 'op', 'broadcast', 'set', 'group_siz', 'group', 'mechan', 'across', 'detect', 'number', 'back', 'fall']}"
138,"{'func name': '_multi_worker_session', 'comments': 'Returns a context manager that enters a session that is configured for the MultiWorkerMirroredStrategy.\n\n\n##### Args\n* **kwargs**: a dict. Keyword arguments passed to the test.\n\n##### Returns\n', 'stemmed comments': ['pass', 'return', 'configur', 'manag', 'multiworkermirroredstrategi', 'kwarg', 'session', 'arg', 'dict', 'keyword', 'enter', 'context', 'argument', 'test']}"
139,"{'func name': 'keras_tensor_combinations', 'comments': '', 'stemmed comments': []}"
140,"{'func name': 'get_print_tensor_argparser', 'comments': 'Get an ArgumentParser for a command that prints tensor values.\n\nExamples of such commands include print_tensor and print_feed.\n##### Args\n* **description**: Description of the ArgumentParser.\n\n##### Returns\n', 'stemmed comments': ['command', 'return', 'print_fe', 'exampl', 'print_tensor', 'arg', 'valu', 'print', 'argumentpars', 'get', 'includ', 'descript', 'tensor']}"
141,"{'func name': 'broadcast_shape', 'comments': 'Returns the broadcasted shape between `shape_x` and `shape_y`.\n\n\n##### Args\n* **shape_x**: A `TensorShape`\n\n* **shape_y**: A `TensorShape`\n\n##### Returns\n', 'stemmed comments': ['return', 'A', 'arg', 'broadcast', 'tensorshap', 'shape_x', 'shape', 'shape_i']}"
142,"{'func name': 'do_test', 'comments': 'Runs test.\n\n1. Performs absl and tf ""main""-like initialization that must run before almost anything else. 2. Converts signature_def_map to SavedModel V1 3. Converts SavedModel V1 to MLIR 4. Prints the textual MLIR to stdout (it is expected that the caller will have FileCheck checks in its file to check this output).\n\nThis is only for use by the MLIR SavedModel importer tests.\n##### Args\n* **create_signature**: A functor that return signature_def_map, init_op and\n  assets_collection. signature_def_map is a map from string key to\n  signature_def. The key will be used as function name in the resulting\n  MLIR.\n\n* **canonicalize**: If true, canonicalizer will be run on the resulting MLIR.\n\n* **show_debug_info**: If true, shows debug locations in the resulting MLIR.\n\n', 'stemmed comments': ['expect', 'functor', 'map', 'signature_def_map', 'run', 'the', '3', 'arg', 'init_op', 'main', '4', 'initi', 'mlir', 'result', 'show_debug_info', 'show', 'check', 'return', 'absl', 'anyth', 'textual', 'V1', '2', '1', 'locat', 'If', 'thi', 'almost', 'must', 'stdout', 'A', 'canonic', 'import', 'string', 'convert', 'create_signatur', 'test', 'perform', 'filecheck', 'file', 'tf', 'like', 'debug', 'assets_collect', 'function', 'signature_def', 'key', 'name', 'use', 'true', 'print', 'savedmodel', 'caller', 'els', 'output']}"
143,"{'func name': 'do_test', 'comments': 'Runs test.\n\n1. Performs absl and tf ""main""-like initialization that must run before almost anything else. 2. Converts `tf.Module` to SavedModel 3. Converts SavedModel to MLIR 4. Prints the textual MLIR to stdout (it is expected that the caller will have FileCheck checks in its file to check this output).\n\nThis is only for use by the MLIR SavedModel importer tests.\n##### Args\n* **create_module_fn**: A callable taking no arguments, which returns the\n  `tf.Module` to be converted and printed.\n\n* **exported_names**: A set of exported names for the MLIR converter (default is\n  ""export all"").\n\n* **show_debug_info**: If true, shows debug locations in the resulting MLIR.\n\n', 'stemmed comments': ['expect', 'run', '3', 'arg', 'export', 'main', '4', 'mlir', 'initi', 'show_debug_info', 'show', 'result', 'check', 'argument', 'default', 'take', 'return', 'absl', 'anyth', 'textual', '2', '1', 'create_module_fn', 'locat', 'If', 'thi', 'almost', 'must', 'stdout', 'callabl', 'A', 'import', 'convert', 'tfmodul', 'test', 'perform', 'filecheck', 'file', 'exported_nam', 'tf', 'like', 'debug', 'name', 'use', 'set', 'true', 'print', 'savedmodel', 'caller', 'els', 'output']}"
144,"{'func name': 'get_run_key', 'comments': 'Summarize the names of feeds and fetches as a RunKey JSON string.\n\n\n##### Args\n* **feed_dict**: The feed_dict given to the `Session.run()` call.\n\n* **fetches**: The fetches from the `Session.run()` call.\n\n##### Returns\n', 'stemmed comments': ['feed', 'feed_dict', 'summar', 'return', 'json', 'the', 'sessionrun', 'call', 'string', 'arg', 'name', 'given', 'runkey', 'fetch']}"
145,"{'func name': 'to_float', 'comments': '', 'stemmed comments': []}"
146,"{'func name': 'LargePbs', 'comments': 'Converts ASCII string Large PBs to messages.\n\n\n', 'stemmed comments': ['larg', 'messag', 'ascii', 'pb', 'string', 'convert']}"
147,"{'func name': 'ProtoEq', 'comments': 'Compares two proto2 objects for equality.\n\nRecurses into nested messages. Uses list (not set) semantics for comparing repeated fields, ie duplicates and order matter.\n##### Args\n* **a**: A proto2 message or a primitive.\n\n* **b**: A proto2 message or a primitive.\n\n##### Returns\n', 'stemmed comments': ['nest', 'arg', 'compar', 'repeat', 'primit', 'order', 'field', 'object', 'return', 'messag', 'duplic', 'proto2', 'ie', 'list', 'recurs', 'A', 'equal', 'semant', 'two', 'b', 'matter', 'use', 'set']}"
148,"{'func name': '_get_func_name', 'comments': 'Get the name of current function.\n\n\n##### Returns\n', 'stemmed comments': ['return', 'current', 'function', 'name', 'get']}"
149,"{'func name': 'path_to_str', 'comments': 'Returns the file system path representation of a `PathLike` object, else as it is.\n\n\n##### Args\n* **path**: An object that can be converted to path representation.\n\n##### Returns\n', 'stemmed comments': ['return', 'An', 'represent', 'arg', 'convert', 'pathlik', 'path', 'els', 'system', 'object', 'file']}"
150,"{'func name': 'deprecated_py2_support', 'comments': 'Swaps calling module with a Py2-specific implementation. Noop in Py3.\n\n\n', 'stemmed comments': ['call', 'swap', 'noop', 'py2specif', 'modul', 'implement', 'py3']}"
151,"{'func name': 'forward_compatibility_horizon', 'comments': 'Context manager for testing forward compatibility of generated graphs.\n\nSee [Version compatibility](https://tensorflow.org/guide/version_compat#backward_forward).\n\nTo ensure forward compatibility of generated graphs (see `forward_compatible`) with older binaries, new features can be gated with:\n\n```python if compat.forward_compatible(year=2018, month=08, date=01): generate_graph_with_new_features() else: generate_graph_so_older_binaries_can_consume_it() ```\n\nHowever, when adding new features, one may want to unittest it before the forward compatibility window expires. This context manager enables such tests. For example:\n\n```python from tensorflow.python.compat import compat\n\ndef testMyNewFeature(self): with compat.forward_compatibility_horizon(2018, 08, 02): # Test that generate_graph_with_new_features() has an effect ```\n##### Args\n* **year**: A year (e.g., 2018). Must be an `int`.\n\n* **month**: A month (1 <= month <= 12) in year. Must be an `int`.\n\n* **day**: A day (1 <= day <= 31, or 30, or 29, or 28) in month. Must be an\n  `int`.\n\n* **elds**: \n\n', 'stemmed comments': ['unittest', 'want', 'compatforward_compatibility_horizon', '29', 'graph', 'manag', '[', '02', 'arg', 'year', 'for', 'forward', 'testmynewfeatur', 'month', '31', 'see', 'window', 'forward_compat', 'new', 'self', 'ad', 'generate_graph_with_new_featur', 'def', 'binari', 'ensur', 'generate_graph_so_older_binaries_can_consume_it', '=', 'year=2018', '1', '12', 'compat', '30', 'thi', 'compatforward_compat', 'must', ']', 'may', 'gate', 'A', 'eld', 'import', 'exampl', 'older', 'month=08', 'day', 'eg', 'backward_forward', 'version', 'one', 'howev', 'test', 'expir', 'http', 'tensorflowpythoncompat', '08', 'int', '28', '<', 'featur', 'enabl', 'effect', 'To', '//tensorfloworg/guide/version_compat', 'python', 'date=01', '2018', 'els', 'context', 'gener']}"
152,"{'func name': 'path_to_bytes', 'comments': 'Converts input which is a `PathLike` object to `bytes`.\n\nConverts from any python constant representation of a `PathLike` object or `str` to bytes.\n##### Args\n* **path**: An object that can be converted to path representation.\n\n##### Returns\n* **age**: \n\n', 'stemmed comments': ['An', 'return', 'represent', 'age', 'byte', 'arg', 'convert', 'pathlik', 'python', 'str', 'constant', 'path', 'input', 'object']}"
153,"{'func name': 'apply_mask', 'comments': 'Applies any mask on predictions to sample weights.\n\n\n', 'stemmed comments': ['predict', 'sampl', 'weight', 'mask', 'appli']}"
154,"{'func name': 'prepare_inputs', 'comments': '', 'stemmed comments': []}"
155,"{'func name': 'append_composite_tensor', 'comments': ""Helper function to append composite tensors to each other in the 0 axis.\n\nIn order to support batching within a fit/evaluate/predict call, we need to be able to aggregate within a CompositeTensor. Unfortunately, the CT API currently does not make this easy\n\n- especially in V1 mode, where we're working with CompositeTensor Value objects that have no connection with the CompositeTensors that created them.\n\nArguments: target: CompositeTensor or CompositeTensor value object that will be appended to. to_append: CompositeTensor or CompositeTensor value object to append to. 'target'.\n##### Returns\n"", 'stemmed comments': ['helper', 'make', 'to_append', 'unfortun', 'mode', 'especi', 're', 'CT', 'abl', 'order', 'composit', 'object', 'argument', 'return', 'need', 'work', 'V1', 'valu', 'compositetensor', 'aggreg', 'fit/evaluate/predict', 'api', 'call', 'append', 'support', 'tensor', 'batch', 'axi', 'target', 'creat', 'current', 'function', 'connect', 'In', '0', 'within', 'easi']}"
156,"{'func name': 'replace_composites_with_components', 'comments': 'Recursively replaces CompositeTensors with their components.\n\n\n##### Args\n* **structure**: A `nest`-compatible structure, possibly containing composite\n  tensors.\n\n##### Returns\n', 'stemmed comments': ['composit', 'structur', 'return', 'compon', 'compat', 'A', 'contain', 'replac', 'arg', 'nest', 'compositetensor', 'recurs', 'tensor', 'possibl']}"
157,"{'func name': '_test_objects', 'comments': '', 'stemmed comments': []}"
158,"{'func name': 'uncompress', 'comments': 'Uncompress a compressed dataset element.\n\n\n##### Args\n* **element**: A scalar variant tensor to uncompress. The element should have been\n  created by calling `compress`.\n\n* **output_spec**: A nested structure of `tf.TypeSpec` representing the type(s) of\n  the uncompressed element.\n\n##### Returns\n', 'stemmed comments': ['the', 'compress', 'arg', 'nest', 'uncompress', 'output_spec', 'variant', 'tftypespec', 'return', 'element', 'structur', 'type', 'A', 'call', 'dataset', 'scalar', 'tensor', 'creat', 'repres']}"
159,"{'func name': 'build_graph', 'comments': ""Build a graph containing a sequence of concat operations.\n\n\n##### Args\n* **device**: string, the device to run on.\n\n* **input_shape**: shape of the input tensors.\n\n* **variable**: whether or not to randomize the input shape\n\n* **num_inputs**: the number of inputs to concat\n\n* **axis**: axis to be concat'ed\n\n* **grad**: if True compute the gradient\n\n##### Returns\n"", 'stemmed comments': ['grad', 'graph', 'run', 'arg', 'return', 'input_shap', 'sequenc', 'whether', 'gradient', 'variabl', 'string', 'devic', 'shape', 'input', 'tensor', 'axi', 'concat', 'contain', 'num_input', 'oper', 'true', 'random', 'number', 'comput', 'build']}"
160,"{'func name': 'make_concat_tests', 'comments': 'Make a set of tests to do concatenation.\n\n\n', 'stemmed comments': ['set', 'concaten', 'make', 'test']}"
161,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
162,"{'func name': '_has_node_with_op', 'comments': 'Whether any node in `run_metadata.partition_graphs` matches `op_type`.\n\n\n', 'stemmed comments': ['node', 'op_typ', 'run_metadatapartition_graph', 'whether', 'match']}"
163,"{'func name': '_set_read_only_resource_inputs_attr', 'comments': 'Sets the list of resource inputs which are read-only.\n\nThis is used by AutomaticControlDependencies.\n##### Args\n* **op**: If or Case Operation.\n\n* **branch_graphs**: List of branch FuncGraphs.\n\n', 'stemmed comments': ['branch_graph', 'funcgraph', 'branch', 'automaticcontroldepend', 'op', 'arg', 'case', 'set', 'use', 'oper', 'input', 'readonli', 'list', 'If', 'thi', 'resourc']}"
164,"{'func name': '_basic_expr', 'comments': '', 'stemmed comments': []}"
165,"{'func name': 'transform', 'comments': '', 'stemmed comments': []}"
166,"{'func name': '_py_if_exp', 'comments': '', 'stemmed comments': []}"
167,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
168,"{'func name': 'reset_eager', 'comments': '', 'stemmed comments': []}"
169,"{'func name': 'disable_mlir_graph_optimization', 'comments': 'Disables experimental MLIR-Based TensorFlow Compiler Optimizations.\n\n\n', 'stemmed comments': ['experiment', 'optim', 'mlirbas', 'tensorflow', 'compil', 'disabl']}"
170,"{'func name': 'confusion_matrix_v1', 'comments': 'Computes the confusion matrix from predictions and labels.\n\nThe matrix columns represent the prediction labels and the rows represent the real labels. The confusion matrix is always a 2-D array of shape `[n, n]`, where `n` is the number of valid labels for a given classification task. Both prediction and labels must be 1-D arrays of the same shape in order for this function to work.\n\nIf `num_classes` is `None`, then `num_classes` will be set to one plus the maximum value in either predictions or labels. Class labels are expected to start at 0. For example, if `num_classes` is 3, then the possible labels would be `[0, 1, 2]`.\n\nIf `weights` is not `None`, then each prediction contributes its corresponding weight to the total value of the confusion matrix cell.\n\nFor example:\n\n```python tf.math.confusion_matrix([1, 2, 4], [2, 2, 4]) ==> [[0 0 0 0 0] [0 0 1 0 0] [0 0 1 0 0] [0 0 0 0 0] [0 0 0 0 1]] ```\n\nNote that the possible labels are assumed to be `[0, 1, 2, 3, 4]`, resulting in a 5x5 confusion matrix.\n##### Args\n* **labels**: 1-D `Tensor` of real labels for the classification task.\n\n* **predictions**: 1-D `Tensor` of predictions for a given classification.\n\n* **num_classes**: The possible number of labels the classification task can have.\n  If this value is not provided, it will be calculated using both\n  predictions and labels array.\n\n* **dtype**: Data type of the confusion matrix.\n\n* **name**: Scope name.\n\n* **weights**: An optional `Tensor` whose shape matches `predictions`.\n\n##### Returns\n', 'stemmed comments': ['array', 'the', 'alway', 'arg', 'match', '4', 'num_class', '>', 'none', 'must', ']', 'type', 'tfmathconfusion_matrix', 'would', 'both', 'number', 'expect', 'predict', '3', 'result', 'for', '5x5', 'return', 'plu', 'assum', 'valu', 'option', '2', 'task', 'calcul', 'exampl', 'one', 'real', 'data', 'repres', 'maximum', 'either', 'name', 'python', 'label', 'note', 'whose', '[', '1D', 'cell', 'column', 'confus', 'valid', 'An', 'n', 'weight', 'scope', 'shape', '2D', 'function', 'contribut', 'total', 'use', '0', 'start', 'classif', 'order', 'work', '1', 'provid', 'If', 'correspond', 'tensor', 'dtype', 'matrix', 'class', '==', 'set', 'given', 'row', 'possibl', 'comput']}"
171,"{'func name': '_get_conjugate_gradient_test', 'comments': '', 'stemmed comments': []}"
172,"{'func name': 'conjugate_gradient', 'comments': 'Conjugate gradient solver.\n\nSolves a linear system of equations `A*x = rhs` for self-adjoint, positive definite matrix `A` and right-hand side vector `rhs`, using an iterative, matrix-free algorithm where the action of the matrix A is represented by `operator`. The iteration terminates when either the number of iterations exceeds `max_iter` or when the residual norm has been reduced to `tol` times its initial value, i.e. \\\\(||rhs\n\n- A x_k|| <= tol ||rhs||\\\\).\n##### Args\n* **operator**: A `LinearOperator` that is self-adjoint and positive definite.\n\n* **rhs**: A possibly batched vector of shape `[..., N]` containing the right-hand\n  size vector.\n\n* **preconditioner**: A `LinearOperator` that approximates the inverse of `A`.\n  An efficient preconditioner could dramatically improve the rate of\n  convergence. If `preconditioner` represents matrix `M`(`M` approximates\n  `A^{-1}`), the algorithm uses `preconditioner.apply(x)` to estimate\n  `A^{-1}x`. For this to be useful, the cost of applying `M` should be\n  much lower than computing `A^{-1}` directly.\n\n* **x**: A possibly batched vector of shape `[..., N]` containing the initial\n  guess for the solution.\n\n* **tol**: A float scalar convergence tolerance.\n\n* **max_iter**: An integer giving the maximum number of iterations.\n\n* **name**: A name scope for the operation.\n\n##### Returns\n* **output**: A namedtuple representing the final state with fields\n\n', 'stemmed comments': ['A^', 'the', 'arg', 'reduc', 'much', 'appli', 'N', 'improv', 'ie', 'namedtupl', 'integ', ']', '}', 'scalar', '||rh', 'M', 'batch', 'side', '<', 'rh', 'number', 'norm', 'solut', 'final', 'x_k||', 'initi', 'for', 'converg', 'algorithm', 'return', 'time', 'matrixfre', 'vector', 'valu', '=', 'iter', 'termin', 'precondition', 'conjug', 'A', 'state', 'max_it', 'solv', 'exce', 'repres', 'either', 'maximum', 'posit', 'name', 'definit', '[', 'selfadjoint', 'residu', '{', 'float', 'field', 'invers', 'An', 'scope', 'guess', 'tol', 'shape', 'preconditionerappli', 'contain', 'toler', 'x', 'use', 'lower', 'output', 'action', 'give', 'dramat', 'estim', 'rate', '||rhs||\\\\', 'approxim', 'effici', 'system', '1', 'If', 'gradient', '\\\\', 'righthand', 'equat', 'could', 'matrix', 'directli', 'linearoper', 'oper', 'solver', 'linear', 'size', 'cost', 'possibl', 'comput']}"
173,"{'func name': '_dimension_tensor_conversion_function', 'comments': 'Function to convert Dimension to Tensor.\n\n\n', 'stemmed comments': ['function', 'tensor', 'convert', 'dimens']}"
174,"{'func name': 'make_constant_tests', 'comments': 'Make a set of tests to do constant ops.\n\n\n', 'stemmed comments': ['make', 'op', 'set', 'constant', 'test']}"
175,"{'func name': 'get_example_kernel', 'comments': '', 'stemmed comments': []}"
176,"{'func name': 'get', 'comments': '', 'stemmed comments': []}"
177,"{'func name': 'control_dependency_on_returns', 'comments': 'Create a TF control dependency on the return values of a function.\n\nIf the function had no return value, a no-op context is returned.\n##### Args\n* **return_value**: The return value to set as control dependency.\n\n##### Returns\n', 'stemmed comments': ['creat', 'return', 'function', 'the', 'arg', 'valu', 'set', 'noop', 'TF', 'depend', 'control', 'If', 'context', 'return_valu']}"
178,"{'func name': '_tmp_in_graph_mode', 'comments': '', 'stemmed comments': []}"
179,"{'func name': 'transform', 'comments': '', 'stemmed comments': []}"
180,"{'func name': 'transform', 'comments': '', 'stemmed comments': []}"
181,"{'func name': '_py_if_stmt', 'comments': 'Overload of if_stmt that executes a Python if statement.\n\n\n', 'stemmed comments': ['statement', 'execut', 'if_stmt', 'overload', 'python']}"
182,"{'func name': 'Test', 'comments': '', 'stemmed comments': []}"
183,"{'func name': '_LoopCondGrad', 'comments': 'Stop backprop for the predicate of a while loop.\n\n\n', 'stemmed comments': ['backprop', 'loop', 'stop', 'predic']}"
184,"{'func name': 'tf_function_in_tf2', 'comments': '', 'stemmed comments': []}"
185,"{'func name': '_raw_nested_shape', 'comments': '', 'stemmed comments': []}"
186,"{'func name': 'create_dynamic_lstm', 'comments': '', 'stemmed comments': []}"
187,"{'func name': 'from_control_flow_context_def', 'comments': 'Deserializes `context_def` into the appropriate ControlFlowContext.\n\n\n##### Args\n* **context_def**: ControlFlowContextDef proto\n\n* **import_scope**: Optional `string`. Name scope to add.\n\n##### Returns\n', 'stemmed comments': ['return', 'add', 'appropri', 'proto', 'import_scop', 'scope', 'string', 'arg', 'name', 'option', 'controlflowcontextdef', 'context_def', 'deseri', 'controlflowcontext']}"
188,"{'func name': 'vectorized_map', 'comments': 'Parallel map on the list of tensors unpacked from `elems` on dimension 0.\n\nThis method works similar to `tf.map_fn` but is optimized to run much faster, possibly with a much larger memory footprint. The speedups are obtained by vectorization (see [Auto-Vectorizing TensorFlow Graphs: Jacobians, Auto-Batching and Beyond](https://arxiv.org/pdf/1903.04243.pdf)). The idea behind vectorization is to semantically launch all the invocations of `fn` in parallel and fuse corresponding operations across all these invocations. This fusion is done statically at graph generation time and the generated code is often similar in performance to a manually fused version.\n\nBecause `tf.vectorized_map` fully parallelizes the batch, this method will generally be significantly faster than using `tf.map_fn`, especially in eager mode. However this is an experimental feature and currently has a lot of limitations:\n\n- There should be no data dependency between the different semantic invocations of `fn`, i.e. it should be safe to map the elements of the inputs in any order.\n\n- Stateful kernels may mostly not be supported since these often imply a data dependency. We do support a limited set of such stateful kernels though (like RandomFoo, Variable operations like reads, etc).\n\n- `fn` has limited support for control flow operations.\n\n- `fn` should return nested structure of Tensors or Operations. However if an Operation is returned, it should have zero outputs.\n\n- The shape and dtype of any intermediate or output tensors in the computation of `fn` should not depend on the input to `fn`.\n\nExamples: ```python def outer_product(a): return tf.tensordot(a, a, 0)\n\nbatch_size = 100 a = tf.ones((batch_size, 32, 32)) c = tf.vectorized_map(outer_product, a) assert c.shape == (batch_size, 32, 32, 32, 32) ```\n\n```python # Computing per-example gradients\n\nbatch_size = 10 num_features = 32 layer = tf.keras.layers.Dense(1)\n\ndef model_fn(arg): with tf.GradientTape() as g: inp, label = arg inp = tf.expand_dims(inp, 0) label = tf.expand_dims(label, 0) prediction = layer(inp) loss = tf.nn.l2_loss(label\n\n- prediction) return g.gradient(loss, (layer.kernel, layer.bias))\n\ninputs = tf.random.uniform([batch_size, num_features]) labels = tf.random.uniform([batch_size, 1]) per_example_gradients = tf.vectorized_map(model_fn, (inputs, labels)) assert per_example_gradients[0].shape == (batch_size, num_features, 1) assert per_example_gradients[1].shape == (batch_size, 1) ```\n##### Args\n* **fn**: The callable to be performed. It accepts one argument, which will have\n  the same (possibly nested) structure as `elems`, and returns a possibly\n  nested structure of Tensors and Operations, which may be different than\n  the structure of `elems`.\n\n* **elems**: A tensor or (possibly nested) sequence of tensors, each of which will\n  be unpacked along their first dimension. The nested sequence of the\n  resulting slices will be mapped over by `fn`.\n\n* **fallback_to_while_loop**: If true, on failing to vectorize an operation,\n  the unsupported op is wrapped in a tf.while_loop to execute the map\n  iterations. Note that this fallback only happens for unsupported ops and\n  other parts of `fn` are still vectorized. If false, on encountering an\n  unsupported op, a ValueError is thrown. Note that the fallbacks can result\n  in slowdowns since vectorization often yields speedup of one to two orders\n  of magnitude.\n\n##### Returns\n', 'stemmed comments': ['tfmap_fn', 'elem', 'memori', 'the', 'arg', 'much', 'static', 'see', 'tfvectorized_map', 'code', '10', 'yield', 'ie', 'cshape', 'num_featur', 'often', 'speedup', 'It', ']', 'callabl', 'becaus', '32', 'variabl', 'depend', 'two', '100', 'c', 'batch', 'howev', 'still', 'perform', 'http', 'current', 'along', 'featur', 'per_example_gradi', 'autovector', 'first', 'across', 'perexampl', 'wrap', 'predict', 'unpack', 'nest', 'mode', 'parallel', 'footprint', 'result', 'launch', 'tfrandomuniform', 'accept', 'return', 'time', 'vector', 'def', 'tfkeraslayersdens', '=', 'iter', 'ggradient', 'list', 'thrown', 'zero', 'sequenc', 'state', 'A', 'unsupport', 'exampl', 'g', 'one', 'model_fn', 'similar', 'data', 'like', 'execut', 'behind', 'op', 'read', 'fuse', 'python', 'label', 'true', 'faster', 'jacobian', 'experiment', 'map', 'layerbia', 'note', 'mostli', '[', 'run', 'loss', 'optim', 'significantli', 'tfone', 'fulli', 'dimens', 'argument', 'lot', 'comput', 'tfnnl2_loss', 'invoc', 'element', 'layer', 'layerkernel', 'may', 'method', 'etc', 'manual', 'semant', 'eager', 'safe', 'shape', 'input', 'version', 'batch_siz', 'happen', 'flow', 'though', 'use', '0', 'beyond', 'tfexpand_dim', 'inp', 'output', 'gener', 'impli', 'encount', 'We', 'graph', 'done', 'tfgradienttap', 'especi', 'intermedi', 'slice', 'control', 'idea', 'fals', 'order', 'slowdown', 'assert', 'fail', 'autobatch', 'larger', 'magnitud', 'fallback_to_while_loop', 'work', 'fusion', 'kernel', 'tftensordot', '1', 'there', 'If', 'thi', 'valueerror', 'randomfoo', 'structur', 'fallback', 'gradient', 'support', 'correspond', 'differ', '//arxivorg/pdf/190304243pdf', 'outer_product', 'tensor', 'tensorflow', 'fn', 'part', 'dtype', 'limit', 'tfwhile_loop', 'sinc', '==', 'oper', 'set', 'possibl', 'obtain']}"
189,"{'func name': 'ZerosLike', 'comments': 'Create zeros_like for the specified output of an op.\n\n\n', 'stemmed comments': ['creat', 'op', 'zeros_lik', 'specifi', 'output']}"
190,"{'func name': 'Test', 'comments': '', 'stemmed comments': []}"
191,"{'func name': 'get_func_graph', 'comments': 'Generates and returns a FuncGraph for the given op and input_shapes.\n\n\n', 'stemmed comments': ['funcgraph', 'return', 'input_shap', 'op', 'given', 'gener']}"
192,"{'func name': 'GetWhileContext', 'comments': 'Get the WhileContext to which this op belongs.\n\n\n', 'stemmed comments': ['whilecontext', 'get', 'op', 'belong']}"
193,"{'func name': 'output_all_intermediates', 'comments': 'Whether to output all intermediates from functional control flow ops.\n\nThe ""default"" behavior to is to output all intermediates when using v2 control flow inside Keras models in graph mode (possibly inside Estimators). This is needed to support taking gradients of v2 control flow. In graph mode, Keras can sometimes freeze the forward graph before the gradient computation which does not work for v2 control flow since it requires updating the forward ops to output the needed intermediates. We work around this by proactively outputting the needed intermediates when building the forward pass itself. Ideally any such extra tensors should be pruned out at runtime. However, if for any reason this doesn\'t work for you or if you have an inference-only model you can turn this behavior off using `tf.compat.v1.experimental.output_all_intermediates(False)`.\n\nIf with the default behavior you are still seeing errors of the form ""Connecting to invalid output X of source node Y which has Z outputs"" try setting `tf.compat.v1.experimental.output_all_intermediates(True)` and please file an issue at https://github.com/tensorflow/tensorflow/issues.\n##### Args\n* **state**: True, False or None. None restores the default behavior.\n\n', 'stemmed comments': ['inferenceonli', 'We', 'pass', 'graph', 'estim', 'the', 'turn', 'arg', 'freez', 'mode', 'invalid', 'intermedi', 'kera', 'control', 'fals', 'behavior', 'forward', 'error', 'http', 'default', 'nt', 'take', 'see', 'need', 'comput', 'work', 'none', 'form', 'If', 'thi', 'runtim', 'proactiv', 'Z', 'file', 'node', 'whether', 'tfcompatv1experimentaloutput_all_intermedi', 'state', 'gradient', 'reason', 'support', 'issu', 'restor', 'insid', 'tensor', 'howev', 'still', 'model', 'ideal', 'requir', 'extra', 'flow', 'X', 'sourc', 'Y', 'around', 'function', 'v2', 'prune', 'tri', 'sinc', 'op', 'In', 'updat', 'use', 'connect', 'set', 'true', 'pleas', '//githubcom/tensorflow/tensorflow/issu', 'possibl', 'sometim', 'output', 'build']}"
194,"{'func name': 'transform', 'comments': '', 'stemmed comments': []}"
195,"{'func name': '_py_if_stmt', 'comments': 'Overload of if_stmt that executes a Python if statement.\n\n\n', 'stemmed comments': ['statement', 'execut', 'if_stmt', 'overload', 'python']}"
196,"{'func name': 'make_conv_relu1_tests', 'comments': 'Make a set of tests to do conv_relu1.\n\n\n', 'stemmed comments': ['set', 'conv_relu1', 'make', 'test']}"
197,"{'func name': 'GetTestConfigs', 'comments': 'Get all the valid tests configs to run.\n\n\n##### Returns\n', 'stemmed comments': ['config', 'return', 'run', 'get', 'valid', 'test']}"
198,"{'func name': 'GetInceptionBackFilterTest', 'comments': '', 'stemmed comments': []}"
199,"{'func name': 'make_conv_to_depthwiseconv_with_shared_weights_tests', 'comments': 'Make a test where 2 Conv ops shared the same constant weight tensor.\n\n\n', 'stemmed comments': ['weight', 'make', 'op', 'conv', '2', 'constant', 'tensor', 'share', 'test']}"
200,"{'func name': '_get_const_output_shape', 'comments': '', 'stemmed comments': []}"
201,"{'func name': 'conv_output_shape', 'comments': 'Return the output shape of an N-D convolution.\n\nForces dimensions where input is empty (size 0) to remain empty.\n##### Args\n* **input_shape**: tuple of size N\n\n* **kernel_shape**: tuple of size N, spatial shape of the convolutional kernel /\n  receptive field.\n\n* **strides**: tuple of size N, strides along each spatial dimension.\n\n* **padding**: type of padding, string `""same""` or `""valid""`.\n  `""valid""` means no padding. `""same""` results in padding evenly to \n  the left/right or up/down of the input such that output has the same \n  height/width dimension as the input.\n\n##### Returns\n* **tuple of size N**: `(d_out1, ..., d_outN)`, spatial shape of the output.\n\n', 'stemmed comments': ['d_out1', 'tupl', '/', 'convolut', 'arg', 'mean', 'result', 'dimens', 'remain', 'field', 'evenli', 'N', 'ND', 'return', 'input_shap', 'pad', 'left/right', 'kernel', 'spatial', 'valid', 'kernel_shap', 'stride', 'up/down', 'type', 'd_outn', 'string', 'shape', 'input', 'along', 'height/width', 'recept', 'forc', '0', 'output', 'size', 'empti']}"
202,"{'func name': 'make_conv_with_shared_weights_tests', 'comments': 'Make a test where 2 Conv ops shared the same constant weight tensor.\n\n\n', 'stemmed comments': ['weight', 'make', 'op', 'conv', '2', 'constant', 'tensor', 'share', 'test']}"
203,"{'func name': 'make_conv_tests', 'comments': 'Make a set of tests to do convolution.\n\n\n', 'stemmed comments': ['set', 'convolut', 'make', 'test']}"
204,"{'func name': 'build_graph', 'comments': 'builds a graph containing a sequence of conv2d operations.\n\n\n##### Args\n* **device**: String, the device to run on.\n\n* **dtype**: Data type for the convolution.\n\n* **data_format**: A string from\n\n* **input_shape**: Shape of the input tensor.\n\n* **filter_shape**: Shape of the filter tensor.\n\n* **strides**: A list of ints. 1-D of length 4. The stride of sliding\n         window for each dimension of input.\n\n* **padding**: A string from\n\n* **num_iters**: number of iterations to run conv2d.\n\n* **warmup_iters**: number of iterations for warmup runs.\n\n##### Returns\n', 'stemmed comments': ['warmup_it', 'length', 'graph', '1D', 'run', 'the', 'convolut', 'arg', '4', 'data_format', 'dimens', 'conv2d', 'return', 'input_shap', 'window', 'pad', 'iter', 'list', 'slide', 'sequenc', 'type', 'A', 'filter', 'string', 'filter_shap', 'devic', 'shape', 'warmup', 'input', 'tensor', 'data', 'int', 'dtype', 'contain', 'num_it', 'oper', 'number', 'stride', 'build']}"
205,"{'func name': 'build_graph', 'comments': '', 'stemmed comments': []}"
206,"{'func name': 'make_conv2d_transpose_tests', 'comments': 'Make a set of tests to do transpose_conv.\n\n\n', 'stemmed comments': ['set', 'make', 'transpose_conv', 'test']}"
207,"{'func name': 'cache_allowlisted', 'comments': '', 'stemmed comments': []}"
208,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
209,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
210,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
211,"{'func name': 'freeze_saved_model', 'comments': 'Converts a SavedModel to a frozen graph.\n\n\n##### Args\n* **saved_model_dir**: SavedModel directory to convert.\n\n* **input_arrays**: List of input tensors to freeze graph with. Uses input arrays\n  from SignatureDef when none are provided.\n\n* **input_shapes**: Dict of strings representing input tensor names to list of\n  integers representing input shapes (e.g., {""foo""\n\n* **output_arrays**: List of output tensors to freeze graph with. Uses output\n  arrays from SignatureDef when none are provided.\n\n* **tag_set**: Set of tags identifying the MetaGraphDef within the SavedModel to\n  analyze. All tags in the tag set must be present.\n\n* **signature_key**: Key identifying SignatureDef containing inputs and outputs.\n\n##### Returns\n* **frozen_graph_def**: Frozen GraphDef.\n\n* **in_tensors**: List of input tensors for the graph.\n\n* **out_tensors**: List of output tensors for the graph.\n\n* **graph**: `Graph` object.\n\n', 'stemmed comments': ['output_array', 'tag_set', 'array', 'graph', 'arg', 'freez', '{', 'analyz', 'object', 'out_tensor', 'input_array', 'return', 'input_shap', 'in_tensor', 'signaturedef', 'dict', 'none', 'provid', 'list', 'signature_key', 'integ', 'must', 'tag', 'present', 'frozen_graph_def', 'string', 'convert', 'eg', 'saved_model_dir', 'shape', 'input', 'tensor', 'repres', 'foo', 'identifi', 'contain', 'directori', 'key', 'name', 'use', 'set', 'metagraphdef', 'all', 'savedmodel', 'graphdef', 'within', 'output', 'frozen']}"
212,"{'func name': 'convert_variables_to_constants_from_session_graph', 'comments': 'Replaces all the variables in a graph with constants of the same values.\n\nThis function works similarly to convert_variables_to_constants_v2, but it retrieves the constant values from a Session instead of from a ConcreteFunction. This is useful when converting graphs generated from TensorFlow V1, where ConcreteFunctions are not available. This also differs from graph_util.convert_variables_to_constants in that it supports resource variables when V2 control flow constructions are present.\n##### Args\n* **session**: Active TensorFlow session containing the variables.\n\n* **graph_def**: A GraphDef to convert.\n\n* **output_node_names**: List of name strings for the result nodes of the graph.\n\n* **variable_names_allowlist**: The set of variable names to convert (by default,\n  all variables are converted).\n\n* **variable_names_blacklist**: The set of variable names to omit converting to\n  constants.\n\n##### Returns\n', 'stemmed comments': ['activ', 'graph', 'retriev', 'variable_names_allowlist', 'output_node_nam', 'session', 'the', 'arg', 'omit', 'result', 'control', 'also', 'concretefunct', 'resourc', 'default', 'return', 'work', 'valu', 'V1', 'list', 'thi', 'convert_variables_to_constants_v2', 'instead', 'variable_names_blacklist', 'node', 'construct', 'present', 'V2', 'A', 'variabl', 'string', 'convert', 'support', 'constant', 'differ', 'graph_utilconvert_variables_to_const', 'tensorflow', 'flow', 'contain', 'function', 'avail', 'replac', 'name', 'use', 'set', 'graph_def', 'similarli', 'graphdef', 'gener']}"
213,"{'func name': 'toco_convert', 'comments': 'Convert a model using TOCO.\n\nTypically this function is used to convert from TensorFlow GraphDef to TFLite. Conversion can be customized by providing arguments that are forwarded to `build_toco_convert_protos` (see documentation for details). This function has been deprecated. Please use `lite.TFLiteConverter` instead.\n##### Args\n* **input_data**: Input data (i.e. often `sess.graph_def`),\n\n* **input_tensors**: List of input tensors. Type and shape are computed using\n  `foo.shape` and `foo.dtype`.\n\n* **output_tensors**: List of output tensors (only .name is used from this).\n\n* ***args**: See `build_toco_convert_protos`,\n\n* ****kwargs**: See `build_toco_convert_protos`.\n\n##### Returns\n', 'stemmed comments': ['input_data', 'convers', 'arg', 'document', 'input_tensor', 'forward', 'litetfliteconvert', 'typic', 'argument', 'output_tensor', 'see', 'return', 'foodtyp', 'detail', 'fooshap', 'ie', 'often', 'provid', 'list', 'thi', 'instead', 'type', 'kwarg', 'convert', 'shape', 'input', 'tflite', 'tensor', 'tensorflow', 'custom', 'deprec', 'model', 'data', 'build_toco_convert_proto', 'sessgraph_def', 'function', 'name', 'use', 'output', 'pleas', 'graphdef', 'toco', 'comput']}"
214,"{'func name': 'partial_shape_to_tensor', 'comments': 'Returns a `tf.Tensor` that represents the given shape.\n\n\n##### Args\n* **shape_like**: A value that can be converted to a `tf.TensorShape` or a\n  `tf.Tensor`.\n\n##### Returns\n', 'stemmed comments': ['return', 'repres', 'tftensor', 'shape_lik', 'A', 'arg', 'valu', 'convert', 'given', 'shape', 'tftensorshap']}"
215,"{'func name': 'is_inside_generated_code', 'comments': 'Tests whether the caller is generated code. Implementation-specific.\n\n\n', 'stemmed comments': ['code', 'whether', 'caller', 'implementationspecif', 'test', 'gener']}"
216,"{'func name': 'conv3d_transpose', 'comments': 'Functional interface for transposed 3D convolution layer.\n\nArguments: inputs: Input tensor. filters: Integer, the dimensionality of the output space (i.e. the number of filters in the convolution). kernel_size: A tuple or list of 3 positive integers specifying the spatial dimensions of the filters. Can be a single integer to specify the same value for all spatial dimensions. strides: A tuple or list of 3 positive integers specifying the strides of the convolution. Can be a single integer to specify the same value for all spatial dimensions. padding: one of `""valid""` or `""same""` (case-insensitive). `""valid""` means no padding. `""same""` results in padding evenly to the left/right or up/down of the input such that output has the same height/width dimension as the input. data_format: A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs. `channels_last` corresponds to inputs with shape `(batch, depth, height, width, channels)` while `channels_first` corresponds to inputs with shape `(batch, channels, depth, height, width)`. activation: Activation function. Set it to None to maintain a linear activation. use_bias: Boolean, whether the layer uses a bias. kernel_initializer: An initializer for the convolution kernel. bias_initializer: An initializer for the bias vector. If None, the default initializer will be used. kernel_regularizer: Optional regularizer for the convolution kernel. bias_regularizer: Optional regularizer for the bias vector. activity_regularizer: Optional regularizer function for the output. kernel_constraint: Optional projection function to be applied to the kernel after being updated by an `Optimizer` (e.g. used to implement norm constraints or value constraints for layer weights). The function must take as input the unprojected variable and must return the projected variable (which must have the same shape). Constraints are not safe to use when doing asynchronous distributed training. bias_constraint: Optional projection function to be applied to the bias after being updated by an `Optimizer`. trainable: Boolean, if `True` also add variables to the graph collection `GraphKeys.TRAINABLE_VARIABLES` (see `tf.Variable`). name: A string, the name of the layer. reuse: Boolean, whether to reuse the weights of a previous layer by the same name.\n##### Returns\n', 'stemmed comments': ['tupl', 'the', 'convolut', 'channel', 'mean', 'use_bia', 'evenli', 'appli', 'see', '3D', 'ie', 'none', 'integ', 'must', 'whether', 'activity_regular', 'kernel_regular', 'filter', 'variabl', 'batch', 'height/width', 'unproject', 'bias_regular', 'number', 'previou', 'norm', 'activ', 'kernel_constraint', '3', 'regular', 'result', 'initi', 'also', 'default', 'return', 'pad', 'vector', 'valu', 'option', 'list', 'trainabl', 'depth', 'A', 'space', 'constraint', 'bia', 'specifi', 'one', 'tfvariabl', 'posit', 'name', 'true', 'stride', 'kernel_s', 'optim', 'height', 'data_format', 'dimens', 'argument', 'asynchron', 'take', 'bias_constraint', 'width', 'valid', 'layer', 'graphkeystrainable_vari', 'train', 'An', 'up/down', 'weight', 'string', 'eg', 'safe', 'dimension', 'shape', 'input', 'implement', 'reus', 'function', 'bias_initi', 'caseinsensit', 'kernel_initi', 'use', 'channels_last', 'output', 'maintain', 'project', 'graph', 'order', 'add', 'left/right', 'distribut', 'kernel', 'spatial', 'boolean', 'If', 'singl', 'channels_first', 'transpos', 'correspond', 'interfac', 'tensor', 'collect', 'can', 'updat', 'set', 'linear']}"
217,"{'func name': '_StopAt0', 'comments': '', 'stemmed comments': []}"
218,"{'func name': 'main', 'comments': 'This script copies binaries.\n\nRequirements: filename: The path to the whl file AND new_py_ver: Create a nightly tag with current date\n', 'stemmed comments': ['script', 'requir', 'creat', 'tag', 'current', 'and', 'filenam', 'the', 'copi', 'date', 'new_py_v', 'binari', 'path', 'nightli', 'whl', 'thi', 'file']}"
219,"{'func name': 'configure_virtual_cpus', 'comments': '', 'stemmed comments': []}"
220,"{'func name': '_get_variable_dict_from_varstore', 'comments': '', 'stemmed comments': []}"
221,"{'func name': '_status_to_exception', 'comments': '', 'stemmed comments': []}"
222,"{'func name': 'dense', 'comments': 'Densely connected NN layer op.\n\nArguments: inputs: `tf.Tensor` or `tf.SparseTensor`. Inputs to operation. kernel: `tf.Variable`. Matrix kernel. bias: (Optional) `tf.Variable`. Bias to add to outputs. activation: (Optional) 1-argument callable. Activation function to apply to outputs. dtype: (Optional) `tf.DType`. Dtype to cast `inputs` to.\n##### Returns\n', 'stemmed comments': ['dens', 'activ', 'tftensor', 'appli', 'argument', 'tfdtype', 'return', 'add', '1argument', 'option', 'kernel', 'layer', 'cast', 'callabl', 'bia', 'NN', 'input', 'tfvariabl', 'matrix', 'dtype', 'function', 'op', 'connect', 'oper', 'tfsparsetensor', 'output']}"
223,"{'func name': 'flatten', 'comments': 'Flattens an input tensor while preserving the batch axis (axis 0).\n\nArguments: inputs: Tensor input. name: The name of the layer (string). data_format: A string, one of `channels_last` (default) or `channels_first`. The ordering of the dimensions in the inputs. `channels_last` corresponds to inputs with shape `(batch, height, width, channels)` while `channels_first` corresponds to inputs with shape `(batch, channels, height, width)`.\n##### Returns\n* **amples**: \n\n', 'stemmed comments': ['the', 'channel', 'height', 'data_format', 'dimens', 'order', 'argument', 'default', 'return', 'flatten', 'width', 'layer', 'A', 'string', 'channels_first', 'shape', 'correspond', 'input', 'ampl', 'one', 'tensor', 'batch', 'axi', 'preserv', 'name', '0', 'channels_last']}"
224,"{'func name': 'multi_input_functional', 'comments': 'Functional Model that adds its inputs and then adds a bias.\n\n\n', 'stemmed comments': ['model', 'add', 'function', 'bia', 'input']}"
225,"{'func name': 'make_cos_tests', 'comments': 'Make a set of tests to do cos.\n\n\n', 'stemmed comments': ['co', 'set', 'make', 'test']}"
226,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
227,"{'func name': 'GenerateMemoryReport', 'comments': 'Analyze the peak memory usage for the provided metagraph.\n\n\n##### Args\n* **metagraph**: A TensorFlow MetaGraphDef.\n\n* **detailed_report**: print the live tensors in addition to the peak memory\n  usage.\n\n* **cluster**: Analyze the memory using the specified cluster, or the local\n  machine if no cluster was specified.\n\n##### Returns\n', 'stemmed comments': ['peak', 'local', 'memori', 'addit', 'machin', 'arg', 'live', 'analyz', 'return', 'usag', 'metagraph', 'provid', 'cluster', 'A', 'specifi', 'tensor', 'tensorflow', 'use', 'metagraphdef', 'print', 'detailed_report']}"
228,"{'func name': 'CounterV1', 'comments': '', 'stemmed comments': []}"
229,"{'func name': 'to_h', 'comments': 'Writes a header file for the table values.\n\n\n', 'stemmed comments': ['write', 'tabl', 'valu', 'header', 'file']}"
230,"{'func name': 'deprecated_test_op', 'comments': '', 'stemmed comments': []}"
231,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
232,"{'func name': '_push_critical_section_stack', 'comments': ""Push a CriticalSection._signature to the thread-local stack.\n\nIf the signature is already on the stack, raise an error because it means we're trying to execute inside the same locked CriticalSection, which will create a deadlock.\n##### Args\n* **signature**: Tuple of the type `CriticalSection._signature`.  Uniquely\n  identifies a CriticalSection by its `shared_name`, `container`,\n  and device.\n\n* **elds**: \n\n"", 'stemmed comments': ['tupl', 'rais', 'deadlock', 'arg', 'alreadi', 'mean', 're', 'push', 'error', 'stack', 'criticalsection_signatur', 'shared_nam', 'lock', 'threadloc', 'If', 'signatur', 'criticalsect', 'type', 'eld', 'devic', 'insid', 'creat', 'execut', 'identifi', 'contain', 'tri', 'uniqu']}"
233,"{'func name': '_make_mirrored_indexed_slices', 'comments': '', 'stemmed comments': []}"
234,"{'func name': 'choose_the_best', 'comments': 'Find the best CrossDeviceOps locally given a `tf.compat.v1.ConfigProto`.\n\n\n##### Args\n* **devices**: a list of devices passed to `tf.distribute.Strategy`.\n\n* **session_config**: a `tf.compat.v1.ConfigProto` or `None`. If `None`, it will\n  make decision based on all logical devices.\n\n##### Returns\n', 'stemmed comments': ['local', 'pass', 'make', 'arg', 'best', 'tfdistributestrategi', 'find', 'return', 'none', 'list', 'decis', 'If', 'tfcompatv1configproto', 'crossdeviceop', 'devic', 'session_config', 'base', 'given', 'logic']}"
235,"{'func name': '_control_input', 'comments': 'Returns the `idx`-th item in control_inputs to be used in ops.control_dependencies.\n\nThis is a helper function for building collective ops.\n##### Args\n* **devices**: a list of device strings the collective run on.\n\n* **control_inputs**: a list or None.\n\n* **idx**: the index into `inputs` and `control_inputs`.\n\n##### Returns\n', 'stemmed comments': ['helper', 'run', 'arg', 'index', 'idx', 'return', 'none', 'list', 'thi', 'control_input', 'string', 'opscontrol_depend', 'item', 'devic', 'input', 'collect', 'th', 'function', 'op', 'use', 'build']}"
236,"{'func name': '_add_test', 'comments': '', 'stemmed comments': []}"
237,"{'func name': '_add_test', 'comments': '', 'stemmed comments': []}"
238,"{'func name': 'twist_matrix', 'comments': 'Permute the rows and columns of a 2D or (batched) 3D Tensor.\n\n\n', 'stemmed comments': ['3D', 'column', 'row', 'permut', 'tensor', 'batch', '2D']}"
239,"{'func name': '_add_test', 'comments': '', 'stemmed comments': []}"
240,"{'func name': 'flatten', 'comments': 'Flatten one level of nesting.\n\n\n', 'stemmed comments': ['nest', 'one', 'flatten', 'level']}"
241,"{'func name': '_ctc_loss_v3', 'comments': '', 'stemmed comments': []}"
242,"{'func name': '_get_dim', 'comments': 'Get value of tensor shape[i] preferring static value if available.\n\n\n', 'stemmed comments': [']', '[', 'avail', 'prefer', 'valu', 'shape', 'get', 'tensor', 'static']}"
243,"{'func name': 'iteration_outside_func', 'comments': 'Helper function to test iterating over data outside a tf.function.\n\n\n', 'stemmed comments': ['data', 'tffunction', 'helper', 'function', 'iter', 'outsid', 'test']}"
244,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
245,"{'func name': '_cudnn_rnn_backwardv3', 'comments': 'Gradients for the CudnnRNNV3 op.\n\n\n', 'stemmed comments': ['gradient', 'op', 'cudnnrnnv3']}"
246,"{'func name': 'codes_to_string', 'comments': '', 'stemmed comments': []}"
247,"{'func name': '_get_command_from_line_attr_segs', 'comments': 'Attempt to extract command from the attribute segments of a line.\n\n\n##### Args\n* **mouse_x**: (int) x coordinate of the mouse event.\n\n* **attr_segs**: (list) The list of attribute segments of a line from a\n  RichTextLines object.\n\n##### Returns\n* **(str or None) If a command exists**: the command as a str; otherwise, None.\n\n', 'stemmed comments': ['otherwis', ';', 'attr_seg', 'the', 'arg', 'object', 'mouse_x', 'return', 'attribut', 'event', 'none', 'list', 'If', 'command', 'mous', 'attempt', 'line', 'str', 'extract', 'int', 'x', 'exist', 'coordin', 'richtextlin', 'segment']}"
248,"{'func name': 'grad_pass_through', 'comments': 'Creates a grad-pass-through op with the forward behavior provided in f.\n\nUse this function to wrap any op, maintaining its behavior in the forward pass, but replacing the original op in the backward graph with an identity. For example:\n\n```python x = tf.Variable(1.0, name=""x"") z = tf.Variable(3.0, name=""z"")\n\nwith tf.GradientTape() as tape: # y will evaluate to 9.0 y = tf.grad_pass_through(x.assign)(z**2) # grads will evaluate to 6.0 grads = tape.gradient(y, z) ```\n\nAnother example is a \'differentiable\' moving average approximation, where gradients are allowed to flow into the last value fed to the moving average, but the moving average is still used for the forward pass:\n\n```python x = ... # Some scalar value # A moving average object, we don\'t need to know how this is implemented moving_average = MovingAverage() with backprop.GradientTape() as tape: # mavg_x will evaluate to the current running average value mavg_x = tf.grad_pass_through(moving_average)(x) grads = tape.gradient(mavg_x, x) # grads will evaluate to 1.0 ```\n##### Args\n* **f**: function `f(*x)` that returns a `Tensor` or nested structure of `Tensor`\n  outputs.\n\n##### Returns\n', 'stemmed comments': ['wrap', '90', 'pass', 'grad', 'graph', 'gradpassthrough', 'mavg_x', 'run', 'xassign', 'arg', 'tfgradienttap', 'differenti', 'nest', 'moving_averag', 'for', 'behavior', 'forward', 'approxim', 'object', 'nt', 'return', 'need', 'know', 'movingaverag', '10', 'valu', 'anoth', '=', '2', 'some', 'provid', '30', 'ident', 'tapegradi', 'tfgrad_pass_through', 'origin', 'allow', 'structur', 'f', 'gradient', 'A', 'exampl', 'backpropgradienttap', 'scalar', 'evalu', 'backward', 'move', 'tensor', 'implement', 'still', 'creat', 'flow', 'tfvariabl', 'tape', 'fed', 'current', 'function', 'replac', 'name=', 'x', 'op', 'last', 'averag', 'use', 'python', '60', 'z', 'output', 'maintain']}"
249,"{'func name': 'get_dataset_from_tensor_slices', 'comments': '', 'stemmed comments': []}"
250,"{'func name': 'get_dataset_from_tensor_slices', 'comments': '', 'stemmed comments': []}"
251,"{'func name': 'add_metric_step', 'comments': '', 'stemmed comments': []}"
252,"{'func name': '_default_tolerance', 'comments': 'Returns a sensible default tolerance for comparing results of a given type.\n\n\n##### Args\n* **dtype**: A datatype.\n\n', 'stemmed comments': ['default', 'return', 'dtype', 'datatyp', 'type', 'toler', 'A', 'sensibl', 'arg', 'given', 'compar', 'result']}"
253,"{'func name': '_default_tolerance', 'comments': 'Returns a sensible default tolerance for comparing results of a given type.\n\n\n##### Args\n* **dtype**: A datatype.\n\n', 'stemmed comments': ['default', 'return', 'dtype', 'datatyp', 'type', 'toler', 'A', 'sensibl', 'arg', 'given', 'compar', 'result']}"
254,"{'func name': '_default_tolerance', 'comments': 'Returns a sensible default tolerance for comparing results of a given type.\n\n\n##### Args\n* **dtype**: A datatype.\n\n', 'stemmed comments': ['default', 'return', 'dtype', 'datatyp', 'type', 'toler', 'A', 'sensibl', 'arg', 'given', 'compar', 'result']}"
255,"{'func name': 'fail_on_convert', 'comments': '', 'stemmed comments': []}"
256,"{'func name': '_is_distributed_dataset', 'comments': '', 'stemmed comments': []}"
257,"{'func name': 'augment_data', 'comments': 'Perform data augmentation.\n\n\n', 'stemmed comments': ['perform', 'data', 'augment']}"
258,"{'func name': '_DynamicStitchGrads', 'comments': 'Gradients for DynamicStitch and ParallelDynamicStitch.\n\n\n', 'stemmed comments': ['gradient', 'dynamicstitch', 'paralleldynamicstitch']}"
259,"{'func name': '_shared_name', 'comments': '', 'stemmed comments': []}"
260,"{'func name': 'write_data', 'comments': '', 'stemmed comments': []}"
261,"{'func name': '_make_distributed_dataset', 'comments': 'Creates a distributed dataset with a short task refresh interval.\n\n\n', 'stemmed comments': ['creat', 'refresh', 'interv', 'short', 'distribut', 'dataset', 'task']}"
262,"{'func name': 'distribute', 'comments': 'A transformation that moves dataset processing to the tf.data service.\n\nWhen you iterate over a dataset containing the `distribute` transformation, the tf.data service creates a ""job"" which produces data for the dataset iteration.\n\nThe `processing_mode` argument controls what data is produced by a tf.data service job. Currently, the only supported mode is ""parallel_epochs"".\n\nprocessing_mode=""parallel_epochs"" means that multiple tf.data workers will iterate through the dataset in parallel, each producing all elements of the dataset. For example, if the dataset contains {0, 1, 2}, every tf.data worker used for execution will produce {0, 1, 2}. If there are 3 workers, the job will produce the elements {0, 0, 0, 1, 1, 1, 2, 2, 2} (though not necessarily in that order). To account for this, it is recommended to randomly shuffle your dataset, so that different tf.data workers will iterate through the dataset in different orders.\n\nIn the future, there will be additional processing modes. For example, a ""one_epoch"" mode which partitions the dataset across the tf.data workers, so that the consumers see each element of the dataset only once.\n\n``` dataset = tf.data.Dataset.range(5) dataset = dataset.map(lambda x: x*x) dataset = dataset.apply( tf.data.experimental.service.distribute(""parallel_epochs"", ""grpc://dataservice:5000"")) dataset = dataset.map(lambda x: x+1)\n\nfor element in dataset: print(element)\n\n# prints { 1, 2, 5, 10, 17 } ```\n\nIn the above example, the first two lines (before the call to `distribute`) will be executed on tf.data workers, and the elements provided over RPC. The remaining transformations (after the call to `distribute`) will be executed locally.\n\nThe `job_name` argument allows jobs to be shared across multiple datasets. Instead of each dataset creating its own job, all datasets with the same `job_name` will consume from the same job. A new job will be created for each iteration of the dataset (with each repetition of `Dataset.repeat` counting as a new iteration). Suppose two training workers (in either a single client or multi-client setup) iterate over the below dataset, and there is a single tf.data worker:\n\n``` range5_dataset = tf.data.Dataset.range(5) dataset = range5_dataset.apply(tf.data.experimental.service.distribute( ""parallel_epochs"", ""grpc://dataservice:5000"", job_name=""my_job_name"")) for iteration in range(3): print(list(dataset)) ```\n\nThe elements of each job will be split between the two processes, with elements being consumed by the processes on a first-come first-served basis. One possible result is that process 1 prints\n\n``` [0, 2, 4] [0, 1, 3] [1] ```\n\nand process 2 prints\n\n``` [1, 3] [2, 4] [0, 2, 3, 4] ```\n\nJob names must not be re-used across different training jobs within the lifetime of the tf.data service. In general, the tf.data service is expected to live for the duration of a single training job. To use the tf.data service with multiple training jobs, make sure to use different job names to avoid conflicts. For example, suppose a training job calls `distribute` with `job_name=""job""` and reads until end of input. If another independent job connects to the same tf.data service and tries to read from `job_name=""job""`, it will immediately receive end of input, without getting any data.\n\n**Keras and Distribution Strategies**\n\nThe dataset produced by the `distribute` transformation can be passed to Keras\' `Model.fit` or Distribution Strategy\'s `tf.distribute.Strategy.experimental_distribute_dataset` like any other `tf.data.Dataset`. We recommend setting a `job_name` on the call to `distribute` so that if there are multiple workers, they read data from the same job. Note that the autosharding normally performed by `experimental_distribute_dataset` will be disabled when setting a `job_name`, since sharing the job already results in splitting data across the workers. When using a shared job, data will be dynamically balanced across workers, so that they reach end of input about the same time. This results in better worker utilization than with autosharding, where each worker processes an independent set of files, and some workers may run out of data earlier than others.\n##### Args\n* **processing_mode**: A string specifying the policy for how data should be\n  processed by tf.data workers. Currently, the only supported value is\n  ""parallel_epochs"".\n\n* **service**: A string indicating how to connect to the tf.data service. The\n  string should be in the format protocol\n\n* **job_name**: (Optional.) The name of the job. This argument makes it possible\n  for multiple datasets to share the same job. The default behavior is that\n  the dataset creates anonymous, exclusively owned jobs.\n\n* **max_outstanding_requests**: (Optional.) A limit on how many elements may be\n  requested at the same time. You can use this option to control the amount\n  of memory used, since `distribute` won\'t use more than `element_size` *\n  `max_outstanding_requests` of memory.\n\n##### Returns\n* **Dataset**: A `Dataset` of the elements produced by the data service.\n\n', 'stemmed comments': ['mani', 'format', 'strategi', 'tfdatadatasetrang', 'memori', 'the', 'make', 'arg', 'mean', 'firstserv', 'partit', 'kera', '4', 'see', 'lambda', '10', 'datasetmap', 'indic', 'get', 'tfdatadataset', 'transform', 'my_job_nam', 'must', ']', 'rpc', 'job_name=', 'balanc', '}', 'grpc', 'two', 'file', 'perform', 'client', 'current', 'other', 'multicli', 'To', 'first', 'across', 'tfdataexperimentalservicedistribut', 'expect', 'exclus', 'conflict', 'pass', 'when', 'worker', '3', 'mode', 'parallel', 'datasetappli', 'repetit', 'result', 'for', 'live', 'polici', 'remain', 'one_epoch', 'default', 'dynam', 'return', 'suppos', 'time', 'new', 'valu', 'anoth', 'iter', '2', '=', 'option', 'list', 'basi', 'end', 'autoshard', 'futur', 'A', 'wo', 'tfdata', 'exampl', 'better', 'protocol', 'specifi', 'one', 'data', 'creat', 'like', 'execut', 'either', 'independ', 'name', 'read', 'immedi', 'job', '5', '//dataservice5000', 'count', 'experimental_distribute_dataset', 'normal', 'disabl', 'account', 'note', 'local', 'addit', 'split', '[', 'datasetrepeat', 'run', 'alreadi', '{', 'max_outstanding_request', 'process', 'argument', 'nt', 'x1', 'consum', 'own', 'job_nam', 'firstcom', 'util', 'everi', 'share', 'element', 'allow', 'train', 'may', 'shuffl', 'setup', 'call', 's', 'string', 'move', 'input', 'tfdistributestrategyexperimental_distribute_dataset', 'reus', 'you', 'contain', 'tri', 'sure', 'though', 'x', 'In', 'range5_datasetappli', 'use', '0', 'randomli', 'modelfit', 'gener', 'We', 'parallel_epoch', 'element_s', 'amount', 'rang', 'processing_mode=', 'control', 'behavior', 'order', '17', 'servic', 'distribut', 'recommend', 'earlier', 'processing_mod', 'lifetim', '1', 'provid', 'durat', 'If', 'thi', 'instead', 'singl', 'anonym', 'receiv', 'support', 'dataset', 'produc', 'line', 'reach', 'multipl', 'differ', 'request', 'avoid', 'range5_dataset', 'limit', 'sinc', 'connect', 'set', 'print', 'necessarili', 'within', 'possibl', 'without']}"
263,"{'func name': 'person_split', 'comments': 'Split data by person.\n\n\n', 'stemmed comments': ['data', 'person', 'split']}"
264,"{'func name': 'split_data', 'comments': 'Splits data into train, validation and test according to ratio.\n\n\n', 'stemmed comments': ['data', 'train', 'ratio', 'split', 'accord', 'valid', 'test']}"
265,"{'func name': '_py_list_stack', 'comments': 'Overload of list_stack that executes a Python list append.\n\n\n', 'stemmed comments': ['execut', 'list_stack', 'append', 'overload', 'python', 'list']}"
266,"{'func name': '_set_tuple_item', 'comments': '', 'stemmed comments': []}"
267,"{'func name': 'create_generator_from_sequence_pcs', 'comments': '', 'stemmed comments': []}"
268,"{'func name': 'next_sample', 'comments': 'Gets the next value from the generator `uid`.\n\nTo allow multiple generators to be used at the same time, we use `uid` to get a specific one. A single generator would cause the validation to overwrite the training generator.\n\nArguments: uid: int, generator identifier\n##### Returns\n', 'stemmed comments': ['specif', 'argument', 'return', 'time', 'caus', 'valu', 'get', 'valid', 'singl', 'allow', 'train', 'A', 'next', 'multipl', 'uid', 'one', 'overwrit', 'int', 'would', 'identifi', 'To', 'use', 'gener']}"
269,"{'func name': '_resource_resolver', 'comments': 'Updates resource inputs for tf.data ops with indirect dependencies.\n\n\n', 'stemmed comments': ['tfdata', 'op', 'updat', 'depend', 'input', 'indirect', 'resourc']}"
270,"{'func name': 'remove_variants', 'comments': 'Remove variants from a nest structure, so sess.run will execute.\n\n\n', 'stemmed comments': ['variant', 'structur', 'execut', 'nest', 'remov', 'sessrun']}"
271,"{'func name': 'check_validation_split_arg', 'comments': 'Raise errors in case of invalid argument values.\n\n\n', 'stemmed comments': ['rais', 'case', 'valu', 'invalid', 'error', 'argument']}"
272,"{'func name': 'test', 'comments': 'tf.data.Dataset object for MNIST test data.\n\n\n', 'stemmed comments': ['data', 'mnist', 'tfdatadataset', 'object', 'test']}"
273,"{'func name': 'StreamingFilesDataset', 'comments': ""StreamingFilesDataset constructs a dataset to stream from workers (GCE VM).\n\nBecause Cloud TPUs are allocated over the network, a Cloud TPU cannot read files local to your GCE VM. In order to train using files stored on your local VM (e.g. on local SSD for extreme performance), use the StreamingFilesDataset helper to generate a dataset to feed your Cloud TPU with files from your GCE VM.\n\nThe resulting dataset may return an OutOfRangeError if there are no files found as a result of the fileglob expansion.\n\nNote: StreamingFilesDataset assumes that the session is using a TPUClusterResolver and has therefore a worker and a coordinator job. File loading will be done on the coordinator job.\n##### Args\n* **files**: A string glob to match files, or a `tf.data.Dataset` generating file\n  names.\n\n* **filetype**: A string (one of 'tfrecord', or 'textline') or a single-argument\n  TensorFlow function that when given a filename returns a dataset.\n\n* **file_reader_job**: An optional string that corresponds to the job that should\n  perform the file reads.\n\n* **worker_job**: An optional string that corresponds to the job that should\n  process the tensors (i.e. your GPU or TPU worker).\n\n* **num_epochs**: The number of epochs through the training set that should be\n  generated. By default, it will repeat infinitely.\n\n* **filename_shuffle_buffer_size**: An optional integer whose value controls the\n  shuffling of the file names. If you would like to read from the files in\n  the same order, set to 0 or False.\n\n* **num_parallel_reads**: An optional integer controlling the number of files to\n  read from concurrently. (Set to 1 for no parallelism.)\n\n* **batch_transfer_size**: An optional integer controlling the batching used to\n  amortize the remote function invocation overhead. Set to a very large\n  number to increase throughput. Set to a very small number to reduce memory\n  consumption. Set to False to skip batching.\n\n* **sloppy**: (Optional.) If `False`, read input data while maintaining a\n  deterministic order. (This may have significant performance impacts.)\n  sloppy defaults to\n\n##### Returns\n"", 'stemmed comments': ['helper', 'memori', 'the', 'arg', 'amort', 'impact', 'reduc', 'match', 'ie', 'tfdatadataset', 'num_parallel_read', 'cloud', 'integ', 'batch_transfer_s', 'becaus', 'consumpt', 'batch', 'file', 'perform', 'would', 'expans', 'number', 'glob', 'determinist', 'gce', 'worker', 'therefor', 'parallel', 'repeat', 'result', 'fileglob', 'default', 'return', 'assum', 'valu', 'option', 'overhead', 'singleargu', 'A', 'concurr', 'tpu', 'filetyp', 'stream', 'one', 'data', 'like', 'filenam', 'name', 'read', 'job', 'throughput', 'construct', 'note', 'whose', 'local', 'session', 'process', 'filename_shuffle_buffer_s', 'ssd', 'signific', 'invoc', 'alloc', 'By', 'train', 'may', 'An', 'larg', 'textlin', 'found', 'shuffl', 'string', 'extrem', 'outofrangeerror', 'eg', 'input', 'small', 'VM', 'tfrecord', 'tpuclusterresolv', 'function', 'In', 'use', '0', 'coordin', 'network', 'gener', 'maintain', 'done', 'streamingfilesdataset', 'control', 'fals', 'order', 'increas', '1', 'If', 'epoch', 'thi', 'gpu', 'sloppi', 'dataset', 'store', 'load', 'correspond', 'num_epoch', 'tensor', 'tensorflow', 'file_reader_job', 'feed', 'infinit', 'set', 'given', 'skip', 'remot', 'worker_job']}"
274,"{'func name': '_np_dct4', 'comments': 'Computes the DCT-IV manually with NumPy.\n\n\n', 'stemmed comments': ['dctiv', 'numpi', 'manual', 'comput']}"
275,"{'func name': 'idct', 'comments': ""Computes the 1D [Inverse Discrete Cosine Transform (DCT)][idct] of `input`.\n\nCurrently Types I, II, III, IV are supported. Type III is the inverse of Type II, and vice versa.\n\nNote that you must re-normalize by 1/(2n) to obtain an inverse if `norm` is not `'ortho'`. That is: `signal == idct(dct(signal)) * 0.5 / signal.shape[-1]`. When `norm='ortho'`, we have: `signal == idct(dct(signal, norm='ortho'), norm='ortho')`.\n\n@compatibility(scipy) Equivalent to [scipy.fftpack.idct] (https://docs.scipy.org/doc/scipy-1.4.0/reference/generated/scipy.fftpack.idct.html) for Type-I, Type-II, Type-III and Type-IV DCT. @end_compatibility\n##### Args\n* **input**: A `[..., samples]` `float32`/`float64` `Tensor` containing the\n  signals to take the DCT of.\n\n* **type**: The IDCT type to perform. Must be 1, 2, 3 or 4.\n\n* **n**: For future expansion. The length of the transform. Must be `None`.\n\n* **axis**: For future expansion. The axis to compute the DCT along. Must be `-1`.\n\n* **norm**: The normalization to apply. `None` for no normalization or `'ortho'`\n  for orthonormal normalization.\n\n* **name**: An optional name for the operation.\n\n##### Returns\n"", 'stemmed comments': ['the', 'arg', '4', 'appli', 'typeii', 'float64', 'none', 'transform', 'must', ']', 'I', 'type', 'equival', 'IV', 'perform', 'http', 'typeiii', 'current', 'expans', 'along', 'orthonorm', 'scipi', 'norm', '/', 'when', '3', 'for', 'return', 'iii', 'II', '2', 'option', 'scipyfftpackidct', 'typeiv', 'futur', 'A', 'end_compat', 'discret', 'axi', 'idct', 'that', 'name', 'signalshap', 'normal', 'note', '[', '1D', 'take', 'comput', 'invers', 'compat', 'An', 'n', 'input', 'float32', 'vice', '@', 'contain', '1/', 'length', 'dct', 'versa', '05', 'signal', 'sampl', '2n', '1', '//docsscipyorg/doc/scipy140/reference/generated/scipyfftpackidcthtml', 'typei', 'renorm', 'support', 'cosin', 'tensor', 'ortho', 'norm=ortho', '==', 'oper', 'obtain']}"
276,"{'func name': 'device_path_to_device_name', 'comments': 'Parse device name from device path.\n\n\n##### Args\n* **device_dir**: (str) a directory name for the device.\n\n##### Returns\n', 'stemmed comments': ['device_dir', 'return', 'directori', 'arg', 'name', 'str', 'path', 'pars', 'devic']}"
277,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
278,"{'func name': '_execution_from_debug_event_proto', 'comments': 'Convert a DebugEvent proto into an Execution data object.\n\n\n', 'stemmed comments': ['data', 'execut', 'proto', 'convert', 'object', 'debugev']}"
279,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
280,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
281,"{'func name': 'gradient_values_from_dump', 'comments': 'Find gradient values from a `DebugDumpDir` object.\n\n\n##### Args\n* **grad_debugger**: the `tf_debug.GradientsDebugger` instance to be used.\n\n* **x_tensor**: (`tf.Tensor`, `tf.Variable` or `str`) The x-tensor object or its\n  name. x-tensor refers to the independent `tf.Tensor`, i.e., the tensor\n  on the denominator of the differentiation.\n\n* **dump**: A `tfdbg.DebugDumpDir` object.\n\n##### Returns\n* **If this `GradientsDebugger` instance has the gradient tensor of `x_tensor`\n  registered**: a list of `numpy.ndarray` representing the value of the\n  gradient tensor from `dump`. The list could be empty, if the gradient\n  tensor is not executed in the `tf.Session.run()` call that generated\n  the `dump`. The list could also contain multiple values of the gradient\n  tensor, e.g., if gradient tensor is computed repeatedly in a\n  `tf.while_loop` during the run that generated the `dump`.\n\n', 'stemmed comments': ['instanc', 'tftensor', 'regist', 'run', 'the', 'arg', 'differenti', 'also', 'object', 'find', 'repeatedli', 'return', 'comput', 'grad_debugg', 'valu', 'ie', 'list', 'If', 'numpyndarray', 'tfdbgdebugdumpdir', 'A', 'gradient', 'xtensor', 'x_tensor', 'gradientsdebugg', 'tfsessionrun', 'call', 'debugdumpdir', 'str', 'eg', 'multipl', 'tensor', 'tf_debuggradientsdebugg', 'could', 'tfvariabl', 'repres', 'execut', 'contain', 'dump', 'tfwhile_loop', 'independ', 'name', 'use', 'denomin', 'refer', 'empti', 'gener']}"
282,"{'func name': 'reconstruct_non_debug_graph_def', 'comments': 'Reconstruct original (non-debugger-decorated) partition GraphDef.\n\nThis method strips the input `tf.compat.v1.GraphDef` of the Copy* and Debug*-type nodes inserted by the debugger.\n\nThe reconstructed partition graph is identical to the original (i.e., non-debugger-decorated) partition graph except in the following respects: 1) The exact names of the runtime-inserted internal nodes may differ. These include _Send, _Recv, _HostSend, _HostRecv, _Retval ops. 2) As a consequence of 1, the nodes that receive input directly from such send- and recv-type ops will have different input names. 3) The parallel_iteration attribute of while-loop Enter ops are set to 1.\n##### Args\n* **debug_graph_def**: The debugger-decorated `tf.compat.v1.GraphDef`, with the\n  debugger-inserted Copy* and Debug* nodes.\n\n##### Returns\n', 'stemmed comments': ['graph', 'nondebuggerdecor', 'send', 'whileloop', 'the', '3', 'arg', 'includ', 'partit', 'except', 'enter', 'intern', 'debuggerinsert', '_retval', 'return', 'tfcompatv1graphdef', 'attribut', 'reconstruct', 'copi', 'strip', 'ie', '2', 'consequ', '1', 'ident', 'thi', 'origin', 'node', 'respect', 'may', 'these', 'type', '_send', 'receiv', 'method', 'debug_graph_def', 'follow', '_hostrecv', 'input', 'runtimeinsert', 'differ', 'insert', '_recv', 'parallel_iter', 'debug', 'recvtyp', 'directli', 'debuggerdecor', '_hostsend', 'op', 'name', 'set', 'As', 'graphdef', 'debugg', 'exact']}"
283,"{'func name': '_grappler_enabled_session_config', 'comments': 'Constructs a Session config proto that explicitly enables Grappler.\n\n\n##### Returns\n', 'stemmed comments': ['config', 'return', 'proto', 'enabl', 'session', 'grappler', 'explicitli', 'construct']}"
284,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
285,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
286,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
287,"{'func name': 'add_EventListenerServicer_to_server', 'comments': '', 'stemmed comments': []}"
288,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
289,"{'func name': 'watch_graph_with_blacklists', 'comments': 'Add debug tensor watches, blacklisting nodes and op types.\n\nThis is similar to `watch_graph()`, but the node names and op types are blacklisted, instead of allowlisted.\n\nN.B.: 1. Under certain circumstances, the `Tensor` may not get actually watched (e.g., if the node of the `Tensor` is constant-folded during runtime). 2. For debugging purposes, the `parallel_iteration` attribute of all `tf.while_loop`s in the graph are set to 1 to prevent any node from being executed multiple times concurrently. This change does not affect subsequent non-debugged runs of the same `tf.while_loop`s.\n##### Args\n* **run_options**: An instance of `config_pb2.RunOptions` to be modified.\n\n* **graph**: An instance of `ops.Graph`.\n\n* **debug_ops**: (`str` or `list` of `str`) name(s) of the debug op(s) to use.\n  See the documentation of `watch_graph` for more details.\n\n* **debug_urls**: URL(s) to send debug values to, e.g.,\n  `file\n\n* **node_name_regex_blacklist**: Regular-expression blacklist for node_name.\n  This should be a string, e.g., `""(weight_[0-9]+|bias_.*)""`.\n\n* **op_type_regex_blacklist**: Regular-expression blacklist for the op type of\n  nodes, e.g., `""(Variable|Add)""`.\n  If both node_name_regex_blacklist and op_type_regex_blacklist\n  are set, the two filtering operations will occur in a logical `OR`\n  relation. In other words, a node will be excluded if it hits either of\n  the two blacklists; a node will be included if and only if it hits\n  neither of the blacklists.\n\n* **tensor_dtype_regex_blacklist**: Regular-expression blacklist for Tensor\n  data type, e.g., `""^int.*""`.\n  This blacklist operates in logical `OR` relations to the two allowlists\n  above.\n\n* **tolerate_debug_op_creation_failures**: (`bool`) whether debug op creation\n  failures (e.g., due to dtype incompatibility) are to be tolerated by not\n  throwing exceptions.\n\n* **global_step**: (`int`) Optional global_step count for this debug tensor\n  watch.\n\n* **reset_disk_byte_usage**: (`bool`) whether to reset the tracked disk byte\n  usage to zero (default\n\n', 'stemmed comments': ['neither', 'disk', 'arg', 'document', 'tolerate_debug_op_creation_failur', 'occur', 'track', 'see', 'attribut', 'relat', 'get', 'throw', 'modifi', 'debug_op', ']', '^int', 'whether', 'type', 'filter', 'chang', 'two', 'due', 'file', 'failur', 'debug', 'creation', 'regularexpress', 'under', 'prevent', 'reset_disk_byte_usag', 'instanc', ';', 'for', 'allowlist', 'NB', 'default', 'run_opt', 'time', 'detail', 'global_step', 'valu', 'option', '2', 'constantfold', 'list', 'runtim', 'zero', 'concurr', 'exclud', 'similar', 'data', 'execut', 'either', 'hit', 'op', 'tensor_dtype_regex_blacklist', 'name', 'node_nam', 'nondebug', 'count', 'purpos', 'debug_url', 'blacklist', 'watch_graph', 'variable|add', '[', 'run', 'node_name_regex_blacklist', '|bias_', 'weight_', 'includ', '09', 'usag', 'OR', 'actual', 'node', 'circumst', 'may', 'An', 'opsgraph', 'string', 'eg', 'op_type_regex_blacklist', 'word', 'int', 'toler', 'In', 'use', 'logic', 'affect', 'graph', 'send', 'watch', 'except', 'url', 'incompat', 'add', 'byte', '1', 'If', 'thi', 'certain', 'instead', 'subsequ', 'str', 'multipl', 'config_pb2runopt', 'tensor', 'parallel_iter', 'dtype', 'reset', 'tfwhile_loop', 'oper', 'set', 'bool']}"
290,"{'func name': 'wrap_rich_text_lines', 'comments': ""Wrap RichTextLines according to maximum number of columns.\n\nProduces a new RichTextLines object with the text lines, font_attr_segs and annotations properly wrapped. This ought to be used sparingly, as in most cases, command handlers producing RichTextLines outputs should know the screen/panel width via the screen_info kwarg and should produce properly length-limited lines in the output accordingly.\n##### Args\n* **inp**: Input RichTextLines object.\n\n* **cols**: Number of columns, as an int.\n\n##### Returns\n* **2) A list of new (wrapped) line index. For example, if the original input\n  consists of three lines and only the second line is wrapped, and it's\n  wrapped into two lines, this return value will be**: [0, 1, 3].\n\n"", 'stemmed comments': ['wrap', 'annot', '[', 'second', 'arg', '3', 'column', 'index', 'for', 'object', 'return', 'know', 'font_attr_seg', 'new', 'width', 'lengthlimit', 'valu', '2', 'list', '1', 'thi', 'text', 'via', 'origin', 'command', ']', 'A', 'three', 'screen/panel', 'kwarg', 'exampl', 'line', 'produc', 'consist', 'accordingli', 'accord', 'input', 'two', 'ought', 'col', 'int', 'maximum', 'properli', 'case', 'handler', 'use', '0', 'richtextlin', 'sparingli', 'number', 'inp', 'output', 'screen_info']}"
291,"{'func name': '_test_function', 'comments': '', 'stemmed comments': []}"
292,"{'func name': 'validate_callable', 'comments': '', 'stemmed comments': []}"
293,"{'func name': 'functional_decorator', 'comments': '', 'stemmed comments': []}"
294,"{'func name': 'undecorated_function', 'comments': '', 'stemmed comments': []}"
295,"{'func name': 'function', 'comments': 'Compiles a function into a callable TensorFlow graph.\n\n`tf.function` constructs a callable that executes a TensorFlow graph (`tf.Graph`) created by trace-compiling the TensorFlow operations in `func`, effectively executing `func` as a TensorFlow graph.\n\nExample usage:\n\n>>> @tf.function ... def f(x, y): ...\n\n return x ** 2 + y >>> x = tf.constant([2, 3]) >>> y = tf.constant([3, -2]) >>> f(x, y) <tf.Tensor: ... numpy=array([7, 7], ...)>\n\n_Features_\n\n`func` may use data-dependent control flow, including `if`, `for`, `while` `break`, `continue` and `return` statements:\n\n>>> @tf.function ... def f(x): ...\n\n if tf.reduce_sum(x) > 0: ...\n\n\n\n return x * x ...\n\n else: ...\n\n\n\n return -x // 2 >>> f(tf.constant(-2)) <tf.Tensor: ... numpy=1>\n\n`func`\'s closure may include `tf.Tensor` and `tf.Variable` objects:\n\n>>> @tf.function ... def f(): ...\n\n return x ** 2 + y >>> x = tf.constant([-2, -3]) >>> y = tf.Variable([3, -2]) >>> f() <tf.Tensor: ... numpy=array([7, 7], ...)>\n\n`func` may also use ops with side effects, such as `tf.print`, `tf.Variable` and others:\n\n>>> v = tf.Variable(1) >>> @tf.function ... def f(x): ...\n\n for i in tf.range(x): ...\n\n\n\n v.assign_add(i) >>> f(3) >>> v <tf.Variable ... numpy=4>\n\nImportant: Any Python side-effects (appending to a list, printing with `print`, etc) will only happen once, when `func` is traced. To have side-effects executed into your `tf.function` they need to be written as TF ops:\n\n>>> l = [] >>> @tf.function ... def f(x): ...\n\n for i in x: ...\n\n\n\n l.append(i + 1)\n\n\n\n# Caution! Will only happen once when tracing >>> f(tf.constant([1, 2, 3])) >>> l [<tf.Tensor ...>]\n\nInstead, use TensorFlow collections like `tf.TensorArray`:\n\n>>> @tf.function ... def f(x): ...\n\n ta = tf.TensorArray(dtype=tf.int32, size=0, dynamic_size=True) ...\n\n for i in range(len(x)): ...\n\n\n\n ta = ta.write(i, x[i] + 1) ...\n\n return ta.stack() >>> f(tf.constant([1, 2, 3])) <tf.Tensor: ..., numpy=array([2, 3, 4], ...)>\n\n_`tf.function` is polymorphic_\n\nInternally, `tf.function` can build more than one graph, to support arguments with different data types or shapes, since TensorFlow can build more efficient graphs that are specialized on shapes and dtypes. `tf.function` also treats any pure Python value as opaque objects, and builds a separate graph for each set of Python arguments that it encounters.\n\nTo obtain an individual graph, use the `get_concrete_function` method of the callable created by `tf.function`. It can be called with the same arguments as `func` and returns a special `tf.Graph` object:\n\n>>> @tf.function ... def f(x): ...\n\n return x + 1 >>> isinstance(f.get_concrete_function(1).graph, tf.Graph) True\n\nCaution: Passing python scalars or lists as arguments to `tf.function` will always build a new graph. To avoid this, pass numeric arguments as Tensors whenever possible:\n\n>>> @tf.function ... def f(x): ...\n\n return tf.abs(x) >>> f1 = f.get_concrete_function(1) >>> f2 = f.get_concrete_function(2)\n\n# Slow\n\n- builds new graph >>> f1 is f2 False >>> f1 = f.get_concrete_function(tf.constant(1)) >>> f2 = f.get_concrete_function(tf.constant(2))\n\n# Fast\n\n- reuses f1 >>> f1 is f2 True\n\nPython numerical arguments should only be used when they take few distinct values, such as hyperparameters like the number of layers in a neural network.\n\n_Input signatures_\n\nFor Tensor arguments, `tf.function` instantiates a separate graph for every unique set of input shapes and datatypes. The example below creates two separate graphs, each specialized to a different shape:\n\n>>> @tf.function ... def f(x): ...\n\n return x + 1 >>> vector = tf.constant([1.0, 1.0]) >>> matrix = tf.constant([[3.0]]) >>> f.get_concrete_function(vector) is f.get_concrete_function(matrix) False\n\nAn ""input signature"" can be optionally provided to `tf.function` to control the graphs traced. The input signature specifies the shape and type of each Tensor argument to the function using a `tf.TensorSpec` object. More general shapes can be used. This is useful to avoid creating multiple graphs when Tensors have dynamic shapes. It also restricts the shape and datatype of Tensors that can be used:\n\n>>> @tf.function( ...\n\n\n\n input_signature=[tf.TensorSpec(shape=None, dtype=tf.float32)]) ... def f(x): ...\n\n return x + 1 >>> vector = tf.constant([1.0, 1.0]) >>> matrix = tf.constant([[3.0]]) >>> f.get_concrete_function(vector) is f.get_concrete_function(matrix) True\n\n_Variables may only be created once_\n\n`tf.function` only allows creating new `tf.Variable` objects when it is called for the first time:\n\n>>> class MyModule(tf.Module): ...\n\n def __init__(self): ...\n\n\n\n self.v = None ... ...\n\n @tf.function ...\n\n def __call__(self, x): ...\n\n\n\n if self.v is None: ...\n\n\n\n\n\n self.v = tf.Variable(tf.ones_like(x)) ...\n\n\n\n return self.v * x\n\nIn general, it is recommended to create stateful objects like `tf.Variable` outside of `tf.function` and passing them as arguments.\n##### Args\n* **func**: the function to be compiled. If `func` is None, `tf.function` returns\n  a decorator that can be invoked with a single argument - `func`. In other\n  words, `tf.function(input_signature=...)(func)` is equivalent to\n  `tf.function(func, input_signature=...)`. The former can be used as\n  decorator.\n\n* **input_signature**: A possibly nested sequence of `tf.TensorSpec` objects\n  specifying the shapes and dtypes of the Tensors that will be supplied to\n  this function. If `None`, a separate function is instantiated for each\n  inferred input signature.  If input_signature is specified, every input to\n  `func` must be a `Tensor`, and `func` cannot accept `**kwargs`.\n\n* **autograph**: Whether autograph should be applied on `func` before tracing a\n  graph. Data-dependent control flow requires `autograph=True`. For more\n  information, see the [tf.function and AutoGraph guide](\n  https\n\n* **experimental_implements**: If provided, contains a name of a ""known"" function\n  this implements. For example ""mycompany.my_recurrent_cell"".\n  This is stored as an attribute in inference function,\n  which can then be detected when processing serialized function.\n  See [standardizing composite ops](https\n\n* **experimental_autograph_options**: Optional tuple of\n  `tf.autograph.experimental.Feature` values.\n\n* **experimental_relax_shapes**: When True, `tf.function` may generate fewer,\n  graphs that are less specialized on input shapes.\n\n* **experimental_compile**: If True, the function is always compiled by\n  [XLA](https\n\n##### Returns\n', 'stemmed comments': ['tupl', 'tftensor', 'restrict', 'the', '//', 'alway', 'arg', '4', 'neural', 'appli', '>', 'object', 'see', 'attribut', 'shape=non', '10', 'f2', 'get_concrete_funct', 'none', 'trace', 'will', 'outsid', 'func', 'len', 'must', 'It', ']', 'callabl', 'whether', 'type', 'import', 'written', 'experimental_compil', 'dynamic_size=tru', 'datadepend', 'sideeffect', 'scalar', 'v', 'signatures_', 'two', 'equival', 'tfmodul', 'vassign_add', 'http', 'side', '7', '<', '_features_', 'other', 'autograph=tru', 'To', 'selfv', 'whenev', 'first', 'number', 'dtype=tffloat32', 'slow', 'fast', 'experimental_impl', 'pass', 'when', 'f1', '3', 'nest', 'also', 'for', 'less', 'tastack', 'intern', 'break', '_', 'return', 'numpy=4', 'dynam', 'time', 'new', '__call__', 'accept', 'l', 'vector', 'tfones_lik', 'valu', 'def', 'option', '2', '=', 'list', '30', 'sequenc', 'state', 'A', 'append', 'exampl', 'treat', 'invok', 'numer', 'specifi', 'one', 'data', 'creat', 'requir', 'tfvariabl', 'execut', 'like', 'experimental_autograph_opt', 'distinct', 'fewer', 'effect', 'op', 'name', 'python', 'true', 'tfab', 'tftensorspec', 'construct', 'caution', 'isinst', 'mymodul', '[', 'special', 'pure', 'includ', 'process', 'closur', 'argument', 'composit', 'tffunction', 'take', 'statement', 'usag', 'dtype=tfint32', 'numpy=array', 'polymorphic_', '_variabl', 'fget_concrete_funct', 'everi', 'inform', 'compil', 'layer', 'allow', 'may', 'An', 'signatur', 'tfreduce_sum', '!', 'f', 'opaqu', 'etc', 's', 'method', 'call', 'kwarg', 'shape', 'individu', 'instanti', 'input', 'former', 'happen', 'implement', 'decor', 'tftensorarray', 'reus', 'hyperparamet', 'once_', 'word', '@', 'flow', 'infer', 'contain', 'tracecompil', 'function', 'experimental_relax_shap', 'tfrang', 'x', 'size=0', 'input_signature=', 'In', 'use', '0', 'TF', 'mycompanymy_recurrent_cel', 'network', 'els', 'detect', 'gener', 'encount', 'graph', 'tfgraph', '_input', 'rang', 'control', 'ani', 'effici', 'fals', 'tfautographexperimentalfeatur', 'need', 'tawrit', 'self', 'continu', 'recommend', 'suppli', 'numpy=1', '1', 'provid', 'If', 'thi', 'autograph', 'instead', 'singl', 'ta', 'tfconstant', 'datatyp', 'serial', 'support', 'store', 'multipl', 'differ', 'standard', 'tensor', 'tensorflow', 'more', '__init__', 'collect', 'xla', 'dtype', 'separ', 'avoid', 'matrix', 'lappend', 'class', 'sinc', 'oper', 'uniqu', 'set', 'guid', 'tfprint', 'print', 'input_signatur', 'known', 'possibl', 'obtain', 'build']}"
296,"{'func name': 'supports_default_grad', 'comments': 'Whether tensor `t` supports creating a default gradient.\n\nThis function assumes that `t` is of a trainable type.\n##### Args\n* **t**: Tensor\n\n##### Returns\n', 'stemmed comments': ['default', 'creat', 'return', 'whether', 'type', 'gradient', 'function', 'assum', 'arg', 'support', 'trainabl', 'thi', 'tensor']}"
297,"{'func name': 'get_model', 'comments': '', 'stemmed comments': []}"
298,"{'func name': 'test_defun', 'comments': '', 'stemmed comments': []}"
299,"{'func name': '_merge_masks', 'comments': '', 'stemmed comments': []}"
300,"{'func name': '_initialized_session', 'comments': '', 'stemmed comments': []}"
301,"{'func name': '_initialized_session', 'comments': '', 'stemmed comments': []}"
302,"{'func name': 'InLabels', 'comments': 'Returns true iff one of the labels contains substr.\n\n\n', 'stemmed comments': ['iff', 'return', 'contain', 'true', 'label', 'substr', 'one']}"
303,"{'func name': '_to_list', 'comments': '', 'stemmed comments': []}"
304,"{'func name': 'decode_predictions', 'comments': '', 'stemmed comments': []}"
305,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
306,"{'func name': 'silence', 'comments': 'Temporarily silence deprecation warnings.\n\n\n', 'stemmed comments': ['warn', 'silenc', 'temporarili', 'deprec']}"
307,"{'func name': 'make_depth_to_space_tests', 'comments': 'Make a set of tests to do depth_to_space.\n\n\n', 'stemmed comments': ['depth_to_spac', 'set', 'make', 'test']}"
308,"{'func name': 'CheckGradConfigsToTest', 'comments': 'Iterator for different convolution shapes, strides and paddings.\n\ncompute_gradient_error() is very expensive. So the configs should be relatively small.\n\nYields: Tuple (input_size, filter_size, out_size, stride, padding), the depthwise convolution parameters.\n', 'stemmed comments': ['tupl', 'convolut', 'out_siz', 'compute_gradient_error', 'pad', 'yield', 'filter_s', 'rel', 'iter', 'paramet', 'input_s', 'expens', 'shape', 'differ', 'small', 'config', 'depthwis', 'So', 'stride']}"
309,"{'func name': 'CheckGradConfigsToTestExplicit', 'comments': 'Iterator for different convolution shapes, strides and explicit paddings.\n\ncompute_gradient_error() is very expensive. So the configs should be relatively small.\n##### Returns\n', 'stemmed comments': ['config', 'compute_gradient_error', 'return', 'pad', 'convolut', 'explicit', 'expens', 'rel', 'iter', 'So', 'shape', 'differ', 'small', 'stride']}"
310,"{'func name': 'make_depthwiseconv_tests', 'comments': 'Make a set of tests to do convolution.\n\n\n', 'stemmed comments': ['set', 'convolut', 'make', 'test']}"
311,"{'func name': 'device_assignment', 'comments': ""Computes a device_assignment of a computation across a TPU topology.\n\nAttempts to choose a compact grid of cores for locality.\n##### Args\n* **topology**: A `Topology` object that describes the TPU cluster topology.\n  To obtain a TPU topology, evaluate the `Tensor` returned by\n  `initialize_system` using `Session.run`. Either a serialized\n  `TopologyProto` or a `Topology` object may be passed. Note\n\n* **computation_shape**: A rank 1 int32 numpy array with size equal to the\n  topology rank, describing the shape of the computation's block of cores.\n  If None, the `computation_shape` is `[1] * topology_rank`.\n\n* **computation_stride**: A rank 1 int32 numpy array of size `topology_rank`,\n  describing the inter-core spacing of the `computation_shape` cores in the\n  TPU topology. If None, the `computation_stride` is `[1] * topology_rank`.\n\n* **num_replicas**: The number of computation replicas to run. The replicas will\n  be packed into the free spaces of the topology.\n\n##### Returns\n"", 'stemmed comments': ['note', 'local', 'pass', 'array', 'num_replica', '[', 'topolog', 'run', 'sessionrun', 'the', 'arg', 'intercor', 'device_assign', 'pack', 'topologyproto', 'object', 'free', 'return', 'comput', 'describ', 'initialize_system', 'none', '1', 'If', 'core', 'rank', 'serial', 'may', 'cluster', 'numpi', ']', 'A', 'space', 'grid', 'equal', 's', 'attempt', 'int32', 'tpu', 'evalu', 'shape', 'topology_rank', 'tensor', 'computation_shap', 'compact', 'choos', 'either', 'To', 'computation_strid', 'replica', 'use', 'block', 'size', 'across', 'number', 'obtain']}"
312,"{'func name': 'device_details', 'comments': '', 'stemmed comments': []}"
313,"{'func name': 'log_device_compatibility_check', 'comments': 'Logs a compatibility check if the devices support the policy.\n\nCurrently only logs for the policy mixed_float16. A log is shown only the first time this function is called.\n##### Args\n* **policy_name**: The name of the dtype policy.\n\n', 'stemmed comments': ['the', 'arg', 'mixed_float16', 'policy_nam', 'polici', 'check', 'time', 'compat', 'A', 'shown', 'call', 'log', 'support', 'devic', 'dtype', 'current', 'function', 'name', 'first']}"
314,"{'func name': 'enclosing_tpu_context', 'comments': '', 'stemmed comments': []}"
315,"{'func name': 'list_local_devices', 'comments': 'List the available devices available in the local process.\n\n\n##### Args\n* **session_config**: a session config proto or None to use the default config.\n\n##### Returns\n', 'stemmed comments': ['default', 'local', 'config', 'return', 'proto', 'avail', 'session', 'arg', 'use', 'devic', 'none', 'list', 'session_config', 'process']}"
316,"{'func name': 'replica_device_setter', 'comments': 'Return a `device function` to use when building a Graph for replicas.\n\nDevice Functions are used in `with tf.device(device_function):` statement to automatically assign devices to `Operation` objects as they are constructed, Device constraints are added from the inner-most context first, working outwards. The merging behavior adds constraints to fields that are yet unset by a more inner context. Currently the fields are (job, task, cpu/gpu).\n\nIf `cluster` is `None`, and `ps_tasks` is 0, the returned function is a no-op. Otherwise, the value of `ps_tasks` is derived from `cluster`.\n\nBy default, only Variable ops are placed on ps tasks, and the placement strategy is round-robin over all ps tasks. A custom `ps_strategy` may be used to do more intelligent placement, such as `tf.contrib.training.GreedyLoadBalancingStrategy`.\n\nFor example,\n\n```python # To build a cluster with two ps jobs on hosts ps0 and ps1, and 3 worker # jobs on hosts worker0, worker1 and worker2. cluster_spec = { ""ps"": [""ps0:2222"", ""ps1:2222""], ""worker"": [""worker0:2222"", ""worker1:2222"", ""worker2:2222""]} with tf.device(tf.compat.v1.train.replica_device_setter(cluster=cluster_spec)): # Build your graph v1 = tf.Variable(...)\n\n# assigned to /job:ps/task:0 v2 = tf.Variable(...)\n\n# assigned to /job:ps/task:1 v3 = tf.Variable(...)\n\n# assigned to /job:ps/task:0 # Run compute ```\n##### Args\n* **ps_tasks**: Number of tasks in the `ps` job.  Ignored if `cluster` is\n  provided.\n\n* **ps_device**: String.  Device of the `ps` job.  If empty no `ps` job is used.\n  Defaults to `ps`.\n\n* **worker_device**: String.  Device of the `worker` job.  If empty no `worker`\n  job is used.\n\n* **merge_devices**: `Boolean`. If `True`, merges or only sets a device if the\n  device constraint is completely unset. merges device specification rather\n  than overriding them.\n\n* **cluster**: `ClusterDef` proto or `ClusterSpec`.\n\n* **ps_ops**: List of strings representing `Operation` types that need to be\n  placed on `ps` devices.  If `None`, defaults to `STANDARD_PS_OPS`.\n\n* **ps_strategy**: A callable invoked for every ps `Operation` (i.e. matched by\n  `ps_ops`), that takes the `Operation` and returns the ps task index to\n  use.  If `None`, defaults to a round-robin strategy across all `ps`\n  devices.\n\n##### Returns\n', 'stemmed comments': ['cluster_spec', 'strategi', 'the', 'arg', 'match', 'object', 'place', 'inner', 'cpu/gpu', 'noop', 'ie', 'none', 'tfdevic', ']', 'cluster', 'callabl', 'proto', 'type', 'overrid', 'variabl', '}', 'devic', 'rather', 'two', 'custom', 'v3', 'worker02222', 'current', 'ps0', 'To', 'clusterdef', 'first', 'across', 'number', 'worker1', 'worker', 'specif', '3', 'merge_devic', 'for', 'cluster=cluster_spec', 'ps_task', 'default', 'return', 'ps_devic', 'ad', 'valu', '=', 'list', 'automat', 'task', 'ps/task0', 'A', 'assign', 'constraint', 'tfcontribtraininggreedyloadbalancingstrategi', 'exampl', 'invok', 'ignor', 'worker2', 'v1', 'tfvariabl', 'repres', 'v2', 'ps02222', 'op', 'worker22222', 'worker0', 'python', 'true', 'job', 'empti', 'intellig', 'clusterspec', 'innermost', 'construct', 'otherwis', 'host', '[', 'tfcompatv1trainreplica_device_sett', 'run', 'merg', 'unset', '{', 'ps_op', 'field', 'take', 'statement', 'worker_devic', 'By', 'everi', 'deriv', 'may', 'worker12222', 'string', 'ps', 'outward', 'yet', 'function', 'ps/task1', 'use', '0', 'standard_ps_op', 'replica', 'context', '/job', 'graph', 'ps12222', 'placement', 'complet', 'index', 'behavior', 'add', 'need', 'work', 'provid', 'boolean', 'If', 'ps1', 'ps_strategi', 'roundrobin', 'oper', 'set', 'device_funct', 'comput', 'build']}"
317,"{'func name': '_as_device_str_or_none', 'comments': '', 'stemmed comments': []}"
318,"{'func name': 'local_devices_from_num_gpus', 'comments': 'Returns device strings for local GPUs or CPU.\n\n\n', 'stemmed comments': ['local', 'return', 'string', 'cpu', 'devic', 'gpu']}"
319,"{'func name': 'merge_device', 'comments': 'Returns a device function that merges devices specifications.\n\nThis can be used to merge partial specifications of devices. The innermost setting for a device field takes precedence. For example:\n\nwith tf.device(merge_device(""/device:GPU:0"")) # Nodes created here have device ""/device:GPU:0"" with tf.device(merge_device(""/job:worker"")): # Nodes created here have device ""/job:worker/device:GPU:0"" with tf.device(merge_device(""/device:CPU:0"")): # Nodes created here have device ""/job:worker/device:CPU:0"" with tf.device(merge_device(""/job:ps"")): # Nodes created here have device ""/job:ps/device:CPU:0""\n##### Args\n* **spec**: A `DeviceSpec` or a device spec string (partially) describing the\n  device that should be used for all nodes created in the scope of\n  the returned device function\'s with block.\n\n##### Returns\n', 'stemmed comments': ['/job', 'gpu0', 'ps/devic', 'the', 'worker', 'preced', 'specif', 'arg', 'merg', 'merge_devic', 'for', 'field', 'take', 'return', 'describ', '/devic', 'thi', 'tfdevic', 'cpu0', 'node', 'partial', 'A', 's', 'exampl', 'string', 'scope', 'ps', 'devic', 'worker/devic', 'spec', 'devicespec', 'creat', 'function', 'use', 'set', 'block', 'innermost']}"
320,"{'func name': 'all_tests', 'comments': '', 'stemmed comments': []}"
321,"{'func name': 'set_loop_options', 'comments': 'Specifies additional arguments to be passed to the enclosing while_loop.\n\nThe parameters apply to and only to the immediately enclosing loop. It only has effect if the loop is staged as a TF while_loop; otherwise the parameters have no effect.\n\nUsage:\n\n>>> @tf.function(autograph=True) ... def f(): ...\n\n n = 0 ...\n\n for i in tf.range(10): ...\n\n\n\n tf.autograph.experimental.set_loop_options(maximum_iterations=3) ...\n\n\n\n n += 1 ...\n\n return n\n\n>>> @tf.function(autograph=True) ... def f(): ...\n\n v = tf.constant((0,)) ...\n\n for i in tf.range(3): ...\n\n\n\n tf.autograph.experimental.set_loop_options( ...\n\n\n\n\n\n\n\n shape_invariants=[(v, tf.TensorShape([None]))] ...\n\n\n\n ) ...\n\n\n\n v = tf.concat((v, [i]), 0) ...\n\n return v\n\nAlso see tf.while_loop.\n##### Args\n* **parallel_iterations**: The maximum number of iterations allowed to run in\n    parallel at any given time. Note that this does not guarantee parallel\n    execution.\n\n* **swap_memory**: Whether to store intermediate values needed for\n    gradients on the CPU instead of GPU.\n\n* **maximum_iterations**: Allows limiting the total number of iterations executed\n    by the loop.\n\n* **shape_invariants**: Allows controlling the argument with the same name passed\n    to tf.while_loop. Unlike tf.while_loop, this is a list of\n    `(tensor, shape)` pairs.\n\n', 'stemmed comments': ['the', 'arg', 'tftensorshap', 'maximum_iter', 'appli', '>', 'see', 'tfautographexperimentalset_loop_opt', '10', 'none', 'It', ']', 'whether', 'shape_invariants=', 'v', 'tfconcat', 'autograph=tru', 'number', 'loop', 'pass', ';', '3', 'parallel', 'also', 'guarante', 'return', 'time', 'valu', 'def', '=', 'iter', 'list', 'shape_invari', 'paramet', 'unlik', 'specifi', 'execut', 'maximum', 'effect', 'immedi', 'name', 'enclos', 'note', 'otherwis', 'addit', '[', 'run', 'maximum_iterations=3', 'argument', 'tffunction', 'usag', 'stage', 'allow', 'f', 'n', 'shape', '@', 'total', 'tfrang', '0', 'TF', 'pair', 'intermedi', 'control', 'need', 'swap_memori', '1', 'while_loop', 'instead', 'gpu', 'tfconstant', 'gradient', 'store', 'tensor', 'parallel_iter', 'limit', 'tfwhile_loop', 'cpu', 'given']}"
322,"{'func name': 'transform', 'comments': '', 'stemmed comments': []}"
323,"{'func name': 'try_import', 'comments': '', 'stemmed comments': []}"
324,"{'func name': '_kl_dirichlet_dirichlet', 'comments': 'Batchwise KL divergence KL(d1 || d2) with d1 and d2 Dirichlet.\n\n\n##### Args\n* **d1**: instance of a Dirichlet distribution object.\n\n* **d2**: instance of a Dirichlet distribution object.\n\n* **name**: (optional) Name to use for created operations.\n  default is ""kl_dirichlet_dirichlet"".\n\n##### Returns\n', 'stemmed comments': ['instanc', '||', 'kl_dirichlet_dirichlet', 'arg', 'd2', 'd1', 'object', 'KL', 'default', 'return', 'dirichlet', 'distribut', 'option', 'batchwis', 'creat', 'oper', 'name', 'use', 'diverg']}"
325,"{'func name': 'test_op', 'comments': 'A fake op for testing dispatch of Python ops.\n\n\n', 'stemmed comments': ['A', 'fake', 'op', 'python', 'dispatch', 'test']}"
326,"{'func name': 'add_dispatch_support', 'comments': 'Decorator that adds a dispatch handling wrapper to an op.\n\n\n', 'stemmed comments': ['add', 'op', 'handl', 'dispatch', 'decor', 'wrapper']}"
327,"{'func name': 'get_current_worker_context', 'comments': 'Returns the current task context.\n\n\n', 'stemmed comments': ['context', 'task', 'return', 'current']}"
328,"{'func name': '_strip_protocol', 'comments': '', 'stemmed comments': []}"
329,"{'func name': 'run_distribute_coordinator', 'comments': 'Runs the coordinator for distributed TensorFlow.\n\nThis function runs a split coordinator for distributed TensorFlow in its default mode, i.e the STANDALONE_CLIENT mode. Given a `cluster_spec` specifying server addresses and their roles in a cluster, this coordinator will figure out how to set them up, give the underlying function the right targets for master sessions via a scope object and coordinate their training. The cluster consisting of standard servers needs to be brought up either with the standard server binary or with a binary running distribute coordinator with `task_type` set to non-client type which will then turn into standard servers.\n\nIn addition to be the distribute coordinator, this is also the source of configurations for each job in the distributed training. As there are multiple ways to configure a distributed TensorFlow cluster, its context object provides these configurations so that users or higher-level APIs don\'t have to figure out the configuration for each job by themselves.\n\nIn the between-graph replicated training, this coordinator will create multiple threads and each calls the `worker_fn` which is supposed to create its own graph and connect to one worker master given by its context object. In the in-graph replicated training, it has only one thread calling this `worker_fn`.\n\nAnother mode is the INDEPENDENT_WORKER mode where each server runs a distribute coordinator which will start a standard server and optionally runs `worker_fn` depending whether it is between-graph training or in-graph replicated training.\n\nThe `strategy` object is expected to be a DistributionStrategy object which has implemented methods needed by distributed coordinator such as `configure(session_config, cluster_spec, task_type, task_id)` which configures the strategy object for a specific task and `experimental_should_init` property which instructs the distribute coordinator whether to run init ops for a task. The distribute coordinator will make a copy of the `strategy` object, call its `configure` method and pass it to `worker_fn` as an argument.\n\nThe `worker_fn` defines the training logic and is called under its own worker context which can be accessed to via `get_current_worker_context`. A worker context provides access to configurations for each task, e.g. the task_type, task_id, master target and so on. Since `worker_fn` will be called in a thread and possibly multiple times, caller should be careful when it accesses global data. For example, it is unsafe to define flags in a `worker_fn` or to define different environment variables for different `worker_fn`s.\n\nThe `worker_fn` for the between-graph replication is defined as if there is only one worker corresponding to the `worker_fn` and possibly ps jobs. For example, when training with parameter servers, it assigns variables to parameter servers and all other operations to that worker. In the in-graph replication case, the `worker_fn` has to define operations for all worker jobs. Using a distribution strategy can simplify the `worker_fn` by not having to worry about the replication and device assignment of variables and operations.\n\nThis method is intended to be invoked by high-level APIs so that users don\'t have to explicitly call it to run this coordinator. For those who don\'t use high-level APIs, to change a program to use this coordinator, wrap everything in a the program after global data definitions such as commandline flag definition into the `worker_fn` and get task-specific configurations from the worker context.\n\nThe `cluster_spec` can be either passed by the argument or parsed from the ""TF_CONFIG"" environment variable. Example of a TF_CONFIG: ``` cluster = {\'chief\': [\'host0:2222\'], \'ps\': [\'host1:2222\', \'host2:2222\'], \'worker\': [\'host3:2222\', \'host4:2222\', \'host5:2222\']} os.environ[\'TF_CONFIG\'] = json.dumps({\'cluster\': cluster}) ```\n\nIf `cluster_spec` is not given in any format, it becomes local training and this coordinator will connect to a local session.\n\nFor evaluation, if ""evaluator"" exists in the cluster_spec, a separate thread will be created to call `eval_fn` with its `task_type` set to ""evaluator"". If `eval_fn` is not defined, fall back to `worker_fn`. This implies that evaluation will be done on a single machine if there is an ""evaluator"" task. If ""evaluator"" doesn\'t exist in the cluster_spec, it entirely depends on the `worker_fn` for how to do evaluation.\n##### Args\n* **worker_fn**: the function to be called. The function should accept a\n  `strategy` object and will be given access to a context object via a\n  context manager scope.\n\n* **strategy**: a DistributionStrategy object specifying whether it should\n  run between-graph replicated training or not, whether to run init ops,\n  etc. This object will also be configured given `session_config`,\n  `cluster_spec`, `task_type` and `task_id`.\n\n* **eval_fn**: optional function for ""evaluator"" task. If `eval_fn` is not passed\n  in but a ""evaluator"" task is found in the `cluster_spec`, the `worker_fn`\n  will be used for this task.\n\n* **eval_strategy**: optional DistributionStrategy object for ""evaluator"" task.\n\n* **mode**: in which mode this distribute coordinator runs.\n\n* **cluster_spec**: a dict, ClusterDef or ClusterSpec specifying servers and roles\n  in a cluster. If not set or empty, fall back to local training.\n\n* **task_type**: the current task type, optional if this is a client.\n\n* **task_id**: the current task id, optional if this is a client.\n\n* **session_config**: an optional `tf.compat.v1.ConfigProto` object which will be\n  passed to `strategy`\'s `configure` method and used to create a session.\n\n* **rpc_layer**: optional string, the protocol for RPC, e.g. ""grpc"".\n\n##### Returns\n', 'stemmed comments': ['cluster_spec', 'host22222', 'strategi', 'jsondump', 'format', 'machin', 'the', 'host02222', 'make', 'arg', 'underli', 'host12222', 'object', 'rpc_layer', 'simplifi', 'program', 'properti', 'configur', 'user', 'ie', 'global', 'pars', 'get', 'replic', ']', 'cluster', 'whether', 'type', 'environ', 'eval_fn', 'rpc', 'variabl', 'host42222', 'ingraph', 'chang', '}', 'grpc', 'devic', 'depend', 'address', 'care', 'client', 'worker_fn', 'current', 'clusterdef', 'caller', 'expect', 'wrap', 'host32222', 'pass', 'becom', 'worker', 'figur', 'specif', 'mode', 'tf_config', 'also', 'for', 'default', 'betweengraph', 'role', 'accept', 'return', 'get_current_worker_context', 'suppos', 'time', 'copi', 'dict', 'binari', 'anoth', 'option', '=', 'independent_work', 'task', 'api', 'A', 'paramet', 'assign', 'commandlin', 'osenviron', 'exampl', 'server', 'invok', 'tfcompatv1configproto', 'evalu', 'protocol', 'explicitli', 'specifi', 'thread', 'one', 'init', 'sourc', 'data', 'unsaf', 'creat', 'either', 'op', 'master', 'exist', 'job', 'clusterspec', 'worri', 'highlevel', 'local', 'definit', 'addit', 'split', '[', 'run', 'turn', 'session', 'higherlevel', '{', 'argument', 'nt', 'instruct', 'via', 'train', 'found', 'method', 'call', 'etc', 'scope', 'everyth', 's', 'string', 'eg', 'ps', 'access', 'taskspecif', 'distributionstrategi', 'session_config', 'entir', 'implement', 'defin', 'target', 'function', 'nonclient', 'In', 'flag', 'case', 'use', 'As', 'coordin', 'experimental_should_init', 'logic', 'context', 'host52222', 'task_typ', 'fall', 'give', 'start', 'impli', 'graph', 'done', 'manag', 'eval_strategi', 'right', 'way', 'brought', 'task_id', 'need', 'id', 'distribut', 'provid', 'If', 'thi', 'singl', 'chief', 'consist', 'intend', 'standard', 'multipl', 'differ', 'correspond', 'tensorflow', 'separ', 'standalone_cli', 'sinc', 'connect', 'oper', 'set', 'given', 'back', 'possibl', 'empti']}"
330,"{'func name': '_run_in_and_out_of_scope', 'comments': '', 'stemmed comments': []}"
331,"{'func name': '_from_proto_fn', 'comments': '', 'stemmed comments': []}"
332,"{'func name': '_functional_with_layer_reuse', 'comments': '', 'stemmed comments': []}"
333,"{'func name': '_nested_value', 'comments': '', 'stemmed comments': []}"
334,"{'func name': 'create_mirrored_variable', 'comments': '', 'stemmed comments': []}"
335,"{'func name': 'replicate', 'comments': 'A transformation that replicates `dataset` onto a list of devices.\n\n\n##### Args\n* **dataset**: A `tf.data.Dataset` object.\n\n* **devices**: A list of devices to replicate the dataset on.\n\n##### Returns\n', 'stemmed comments': ['return', 'A', 'arg', 'dataset', 'devic', 'tfdatadataset', 'replic', 'list', 'onto', 'transform', 'object']}"
336,"{'func name': 'remove_temp_dir_with_filepath', 'comments': 'Removes the temp path for file after writing is finished.\n\n\n##### Args\n* **filepath**: Original filepath that would be used without distribution.\n\n* **strategy**: The tf.distribute strategy object currently used.\n\n', 'stemmed comments': ['origin', 'write', 'strategi', 'would', 'current', 'the', 'distribut', 'temp', 'arg', 'use', 'path', 'without', 'remov', 'object', 'tfdistribut', 'filepath', 'finish', 'file']}"
337,"{'func name': 'concat_along_batch_dimension', 'comments': 'Concats prediction outputs along the batch dimension.\n\n\n', 'stemmed comments': ['predict', 'concat', 'along', 'dimens', 'batch', 'output']}"
338,"{'func name': '_get_default_replica_mode', 'comments': '', 'stemmed comments': []}"
339,"{'func name': '_convert_to_tensor', 'comments': 'Converts to tensor avoiding an eager bug that loses float precision.\n\n\n', 'stemmed comments': ['lose', 'avoid', 'bug', 'eager', 'precis', 'convert', 'float', 'tensor']}"
340,"{'func name': 'GetNamedTestParameters', 'comments': '', 'stemmed comments': []}"
341,"{'func name': 'from_dlpack', 'comments': 'Returns the Tensorflow eager tensor.\n\nThe returned tensor uses the memory shared by dlpack capsules from other framework.\n\n```python a = tf.experimental.dlpack.from_dlpack(dlcapsule) # `a` uses the memory shared by dlpack ```\n##### Args\n* **dlcapsule**: A PyCapsule named as dltensor\n\n##### Returns\n', 'stemmed comments': ['memori', 'the', 'arg', 'pycapsul', 'framework', 'return', '=', 'tfexperimentaldlpackfrom_dlpack', 'share', 'dlpack', 'dltensor', 'A', 'eager', 'capsul', 'tensor', 'tensorflow', 'dlcapsul', 'name', 'use', 'python']}"
342,"{'func name': 'should_skip_class_attr', 'comments': 'Returns true if docs should be skipped for this class attribute.\n\n\n##### Args\n* **cls**: The class the attribute belongs to.\n\n* **name**: The name of the attribute.\n\n##### Returns\n', 'stemmed comments': ['doc', 'return', 'class', 'attribut', 'the', 'cl', 'arg', 'name', 'true', 'skip', 'belong']}"
343,"{'func name': 'get_doc_sources', 'comments': 'Get a map from module to a DocSource object.\n\n\n##### Args\n* **api_name**: API you want to generate (e.g. `tensorflow` or `estimator`).\n\n##### Returns\n', 'stemmed comments': ['map', 'want', 'return', 'api_nam', 'api', 'estim', 'docsourc', 'arg', 'eg', 'get', 'modul', 'tensorflow', 'object', 'gener']}"
344,"{'func name': 'document', 'comments': 'Adds a docstring to typealias by overriding the `__doc__` attribute.\n\nNote: Overriding `__doc__` is only possible after python 3.7.\n##### Args\n* **obj**: Typealias object that needs to be documented.\n\n* **doc**: Docstring of the typealias. It should follow the standard pystyle\n  docstring rules.\n\n', 'stemmed comments': ['note', 'arg', 'document', 'object', 'add', '__doc__', 'attribut', 'obj', 'need', 'docstr', 'pystyl', 'It', 'rule', 'overrid', 'follow', 'typealia', 'standard', 'doc', '37', 'python', 'possibl']}"
345,"{'func name': '_is_numeric_dtype_enum', 'comments': '', 'stemmed comments': []}"
346,"{'func name': 'as_dtype', 'comments': 'Converts the given `type_value` to a `DType`.\n\nNote: `DType` values are interned. When passed a new `DType` object, `as_dtype` always returns the interned value.\n##### Args\n* **type_value**: A value that can be converted to a `tf.DType` object. This may\n  currently be a `tf.DType` object, a [`DataType`\n  enum](https\n\n##### Returns\n', 'stemmed comments': ['note', 'pass', '[', 'when', 'alway', 'arg', 'object', 'intern', 'tfdtype', 'return', 'as_dtyp', 'new', 'valu', 'thi', 'may', 'datatyp', ']', 'A', 'convert', 'http', 'dtype', 'current', 'type_valu', 'given', 'enum']}"
347,"{'func name': 'disable_dump_debug_info', 'comments': 'Disable the currently-enabled debugging dumping.\n\nIf the `enable_dump_debug_info()` method under the same Python namespace has been invoked before, calling this method disables it. If no call to `enable_dump_debug_info()` has been made, calling this method is a no-op. Calling this method more than once is idempotent.\n', 'stemmed comments': ['debug', 'idempot', 'enable_dump_debug_info', 'dump', 'method', 'namespac', 'call', 'invok', 'currentlyen', 'noop', 'python', 'made', 'If', 'disabl']}"
348,"{'func name': 'Test', 'comments': '', 'stemmed comments': []}"
349,"{'func name': '_run_benchmark', 'comments': '', 'stemmed comments': []}"
350,"{'func name': 'multiple_tpus', 'comments': '', 'stemmed comments': []}"
351,"{'func name': 'ConstantOf', 'comments': '', 'stemmed comments': []}"
352,"{'func name': 'check_match', 'comments': ""Check if the weights in h5 and ckpt match.\n\nwe match each name from keras_weight_names that is in keras_block and check if there is 1-1 correspondence to names from tf_weight_names that is in tf_block\n##### Args\n* **keras_block**: str, the block name for keras implementation (e.g. 'block1a')\n\n* **tf_block**: str, the block name for tf implementation (e.g. 'blocks_0')\n\n* **keras_weight_names**: list of str, weight names in keras implementation\n\n* **tf_weight_names**: list of str, weight names in tf implementation\n\n* **model_name_tf**: str, the name of model in ckpt.\n\n"", 'stemmed comments': ['arg', 'blocks_0', 'kera', 'match', 'block1a', 'check', 'ckpt', 'keras_block', '11', 'list', 'keras_weight_nam', 'tf_block', 'weight', 'str', 'eg', 'correspond', 'implement', 'tf_weight_nam', 'model_name_tf', 'model', 'tf', 'h5', 'name', 'block']}"
353,"{'func name': 'decode_predictions', 'comments': '', 'stemmed comments': []}"
354,"{'func name': '_GetEigGradTest', 'comments': '', 'stemmed comments': []}"
355,"{'func name': '_analyze_split_string', 'comments': 'Analyze an pre-split einsum string to find the weight shape.\n\n\n', 'stemmed comments': ['find', 'weight', 'string', 'einsum', 'shape', 'presplit', 'analyz']}"
356,"{'func name': 'make_square_tests', 'comments': 'Make a set of tests to do square.\n\n\n', 'stemmed comments': ['set', 'squar', 'make', 'test']}"
357,"{'func name': 'make_elu_tests', 'comments': 'Make a set of tests to do (float) tf.nn.elu.\n\n\n', 'stemmed comments': ['make', 'tfnnelu', 'set', 'float', 'test']}"
358,"{'func name': 'make_embedding_lookup_tests', 'comments': 'Make a set of tests to do gather.\n\n\n', 'stemmed comments': ['set', 'gather', 'make', 'test']}"
359,"{'func name': '_EmbeddingResult', 'comments': '', 'stemmed comments': []}"
360,"{'func name': '_prune_invalid_weights', 'comments': 'Prune invalid weights (< 0) from the input ids and weights.\n\n\n', 'stemmed comments': ['prune', 'weight', '<', 'id', 'invalid', '0', 'input']}"
361,"{'func name': 'enumerate_dataset', 'comments': ""A transformation that enumerates the elements of a dataset.\n\nIt is similar to python's `enumerate`. For example:\n\n```python # NOTE: The following examples use `{ ... }` to represent the # contents of a dataset. a = { 1, 2, 3 } b = { (7, 8), (9, 10) }\n\n# The nested structure of the `datasets` argument determines the # structure of elements in the resulting dataset. a.apply(tf.data.experimental.enumerate_dataset(start=5)) => { (5, 1), (6, 2), (7, 3) } b.apply(tf.data.experimental.enumerate_dataset()) => { (0, (7, 8)), (1, (9, 10)) } ```\n##### Args\n* **start**: A `tf.int64` scalar `tf.Tensor`, representing the start value for\n  enumeration.\n\n##### Returns\n"", 'stemmed comments': ['note', 'start', 'content', 'tftensor', 'the', '3', 'nest', 'arg', '{', 'result', 'for', 'determin', '6', 'argument', '>', 'aappli', 'enumer', 'return', '10', '9', 'valu', '=', '2', 'tfint64', '1', 'transform', '8', 'element', 'It', 'structur', 'A', 's', 'exampl', 'bappli', 'follow', 'dataset', '}', 'scalar', 'start=5', 'similar', 'b', 'repres', '7', 'use', '0', 'python', '5', 'tfdataexperimentalenumerate_dataset']}"
362,"{'func name': 'make_equal_tests', 'comments': 'Make a set of tests to do equal.\n\n\n', 'stemmed comments': ['set', 'equal', 'make', 'test']}"
363,"{'func name': '_modify_op_stack_with_filenames', 'comments': 'Replace op._traceback with a new traceback using special filenames.\n\n\n', 'stemmed comments': ['traceback', 'new', 'filenam', 'replac', 'special', 'op_traceback', 'use']}"
364,"{'func name': 'interpolate', 'comments': 'Interpolates an error message.\n\nThe error message can contain tags of the form `{{type name}}` which will be replaced. For example: ""{{node <name>}}"" would get expanded to: ""node <name>(defined at <path>)"".\n##### Args\n* **error_message**: A string to interpolate.\n\n* **graph**: ops.Graph object containing all nodes referenced in the error\n    message.\n\n##### Returns\n', 'stemmed comments': ['expand', 'graph', 'interpol', 'the', 'arg', '{', 'for', 'error', '>', 'object', 'return', 'messag', 'get', 'form', 'referenc', 'node', 'tag', 'type', 'A', 'opsgraph', 'exampl', 'string', '}', 'path', 'error_messag', 'defin', 'would', 'contain', '<', 'replac', 'name']}"
365,"{'func name': 'ignore_errors', 'comments': 'Creates a `Dataset` from another `Dataset` and silently ignores any errors.\n\nUse this transformation to produce a dataset that contains the same elements as the input, but silently drops any elements that caused an error. For example:\n\n```python dataset = tf.data.Dataset.from_tensor_slices([1., 2., 0., 4.])\n\n# Computing `tf.debugging.check_numerics(1. / 0.)` will raise an InvalidArgumentError. dataset = dataset.map(lambda x: tf.debugging.check_numerics(1. / x, ""error""))\n\n# Using `ignore_errors()` will drop the element that causes an error. dataset = dataset.apply(tf.data.experimental.ignore_errors())\n\n# ==> {1., 0.5, 0.2} ```\n##### Returns\n', 'stemmed comments': ['/', 'rais', '[', '02', 'datasetappli', '{', '4', 'for', '05', 'error', '>', 'tfdebuggingcheck_numer', 'return', 'lambda', 'caus', 'datasetmap', 'anoth', '=', '2', '1', 'transform', 'element', ']', 'exampl', 'dataset', 'produc', '}', 'input', 'ignor', 'ignore_error', 'creat', 'tfdataexperimentalignore_error', 'contain', 'x', '==', 'invalidargumenterror', 'use', '0', 'python', 'tfdatadatasetfrom_tensor_slic', 'drop', 'silent', 'comput']}"
366,"{'func name': '_stack_trace_inside_mapped_code', 'comments': 'Summarizes inner traceback frames up to the call to a given function.\n\nThis functions locates the innermost (i.e. most recent) frame that corresponds to code that can be mapped by source_map originated from, and returns a translated stack trace ending at that frame. If no such frame is found, the entire stack trace is summarized.\n\nFor example, the following code:\n\ndef f(): for i in tf.range(1): z = y + i\n\n# z only defined here\n\nWould generate this traceback:\n\n<converted code> ag__.for_stmt(...) <for_stmt> return _known_len_tf_for_stmt(iter_, extra_test, body, init_state) <_known_len_tf_for_stmt> _disallow_undefs_into_loop(*init_state) <_disallow_undefs_into_loop> raise ...\n\nWhich is then processed into:\n\n<f> for i in tf.range(1): <for_stmt> return _known_len_tf_for_stmt(iter_, extra_test, body, init_state) <_known_len_tf_for_stmt> _disallow_undefs_into_loop(*init_state) <_disallow_undefs_into_loop> raise ...\n##### Args\n* **tb**: traceback.FrameSummary, The traceback corresponding to an error.\n  Typically, the output of traceback.Summary.extract(capture_locals=True).\n\n* **source_map**: Dict[LineLocation, OriginInfo], a source map as created by\n  origin_info.create_source_map.\n\n* **converter_filename**: str, the file path of the converted module. Call frames\n  corresponding to this module are elided and their preceding frames are\n  marked as allowlisted. Note that frames enclosing converted code are\n  dropped using a different mechanism.\n\n##### Returns\n', 'stemmed comments': ['rais', 'the', 'arg', 'which', 'error', '>', 'inner', 'code', '_disallow_undefs_into_loop', 'ie', 'trace', 'origin', ']', 'tracebacksummaryextract', 'follow', '_known_len_tf_for_stmt', 'path', 'elid', 'file', 'origin_infocreate_source_map', 'would', '<', 'recent', 'traceback', 'for', 'mark', 'allowlist', 'return', 'def', 'dict', '=', 'locat', 'end', 'exampl', 'convert', 'bodi', 'sourc', 'creat', 'enclos', 'z', 'extra_test', 'modul', 'innermost', 'source_map', 'note', 'map', '[', 'preced', 'process', 'typic', 'capture_locals=tru', 'origininfo', 'lineloc', 'ag__for_stmt', 'tracebackframesummari', 'f', 'found', 'converter_filenam', 'call', 'entir', 'defin', 'function', 'tfrang', 'use', 'for_stmt', 'init_st', 'output', 'gener', 'summar', 'frame', 'translat', 'stack', '1', 'If', 'thi', 'tb', 'str', 'iter_', 'correspond', 'differ', 'given', 'mechan', 'drop']}"
367,"{'func name': '_make_specific_exception', 'comments': '', 'stemmed comments': []}"
368,"{'func name': 'estimator_evaluate', 'comments': ""Run distribute coordinator for Estimator's `evaluate` method.\n\n\n"", 'stemmed comments': ['estim', 'run', 'method', 's', 'distribut', 'evalu', 'coordin']}"
369,"{'func name': 'local_variable', 'comments': '', 'stemmed comments': []}"
370,"{'func name': '_evaluate_once', 'comments': 'Evaluates the model at the given checkpoint path.\n\nDuring a single evaluation, the `eval_ops` is run until the session is interrupted or requested to finish. This is typically requested via a `tf.contrib.training.StopAfterNEvalsHook` which results in `eval_ops` running the requested number of times.\n\nOptionally, a user can pass in `final_ops`, a single `Tensor`, a list of `Tensors` or a dictionary from names to `Tensors`. The `final_ops` is evaluated a single time after `eval_ops` has finished running and the fetched values of `final_ops` are returned. If `final_ops` is left as `None`, then `None` is returned.\n\nOne may also consider using a `tf.contrib.training.SummaryAtEndHook` to record summaries after the `eval_ops` have run. If `eval_ops` is `None`, the summaries run immediately after the model checkpoint has been restored.\n\nNote that `evaluate_once` creates a local variable used to track the number of evaluations run via `tf.contrib.training.get_or_create_eval_step`. Consequently, if a custom local init op is provided via a `scaffold`, the caller should ensure that the local init op also initializes the eval step.\n##### Args\n* **checkpoint_path**: The path to a checkpoint to use for evaluation.\n\n* **master**: The BNS address of the TensorFlow master.\n\n* **scaffold**: An tf.compat.v1.train.Scaffold instance for initializing variables\n  and restoring variables. Note that `scaffold.init_fn` is used by the\n  function to restore the checkpoint. If you supply a custom init_fn, then\n  it must also take care of restoring the model from its checkpoint.\n\n* **eval_ops**: A single `Tensor`, a list of `Tensors` or a dictionary of names to\n  `Tensors`, which is run until the session is requested to stop, commonly\n  done by a `tf.contrib.training.StopAfterNEvalsHook`.\n\n* **feed_dict**: The feed dictionary to use when executing the `eval_ops`.\n\n* **final_ops**: A single `Tensor`, a list of `Tensors` or a dictionary of names\n  to `Tensors`.\n\n* **final_ops_feed_dict**: A feed dictionary to use when evaluating `final_ops`.\n\n* **hooks**: List of `tf.estimator.SessionRunHook` callbacks which are run inside\n  the evaluation loop.\n\n* **config**: An instance of `tf.compat.v1.ConfigProto` that will be used to\n  configure the `Session`. If left as `None`, the default will be used.\n\n##### Returns\n', 'stemmed comments': ['tfestimatorsessionrunhook', 'the', 'dictionari', 'arg', 'track', 'tfcontribtrainingsummaryatendhook', 'configur', 'dure', 'user', 'none', 'interrupt', 'must', 'variabl', 'path', 'address', 'care', 'callback', 'custom', 'init_fn', 'fetch', 'caller', 'number', 'summari', 'loop', 'pass', 'instanc', 'result', 'also', 'initi', 'step', 'default', 'return', 'time', 'valu', 'option', 'consequ', 'list', 'eval', 'bn', 'consid', 'scaffoldinit_fn', 'A', 'tfcompatv1configproto', 'evalu', 'one', 'init', 'model', 'creat', 'execut', 'op', 'master', 'name', 'immedi', 'note', 'local', 'run', 'session', 'typic', 'take', 'scaffold', 'via', 'may', 'An', 'hook', 'checkpoint_path', 'restor', 'stop', 'evaluate_onc', 'function', 'use', 'record', 'finish', 'done', 'tfcompatv1trainscaffold', 'feed_dict', 'left', 'suppli', 'final_op', 'checkpoint', 'ensur', 'tfcontribtrainingget_or_create_eval_step', 'provid', 'If', 'thi', 'singl', 'eval_op', 'commonli', 'insid', 'tensor', 'tensorflow', 'tfcontribtrainingstopafternevalshook', 'feed', 'request', 'config', 'given', 'final_ops_feed_dict']}"
371,"{'func name': '_parse_debug_tensor_name', 'comments': ""Parse a debug tensor name in a to-be-evaluated expression.\n\n\n##### Args\n* **debug_tensor_name**: name of the debug tensor, with or without\n  device name as a prefix, with or without debug op, with or\n  without '[<exec_index>]' as a suffix.\n  E.g., without device name prefix, without debug op suffix\n\n##### Returns\n* **device_name**: If device name prefix exists, the device name; otherwise,\n  `None`.\n\n* **node_name**: Name of the node.\n\n* **output_slot**: Output slot index as an `int`.\n\n* **debug_op**: If the debug op suffix exists, the debug op name; otherwise,\n  `None`.\n\n* **exec_index**: Execution index (applicable to cases in which a debug tensor\n  is computed multiple times in a `tf.Session.run` call, e.g., due to\n  `tf.while_loop`). If the exec_index suffix does not exist, this value\n  defaults to `0`.\n\n"", 'stemmed comments': ['otherwis', ';', 'tobeevalu', '[', 'arg', 'index', 'Eg', '>', 'express', 'default', 'return', 'comput', 'time', 'applic', 'valu', 'device_nam', 'prefix', 'pars', 'none', 'If', 'node', 'debug_op', ']', 'tfsessionrun', 'call', 'suffix', 'eg', 'devic', 'multipl', 'due', 'tensor', 'slot', 'int', 'debug', 'execut', '<', 'exec_index', 'tfwhile_loop', 'op', 'debug_tensor_nam', 'name', 'exist', 'node_nam', 'output_slot', 'case', '0', 'output', 'without']}"
372,"{'func name': '_extract_from_parse_example_v2', 'comments': 'Extract ExampleParserConfig from ParseExampleV2 op.\n\n\n', 'stemmed comments': ['extract', 'parseexamplev2', 'exampleparserconfig', 'op']}"
373,"{'func name': '_py_assert_stmt', 'comments': 'Overload of assert_stmt that executes a Python assert statement.\n\n\n', 'stemmed comments': ['assert', 'statement', 'execut', 'overload', 'python', 'assert_stmt']}"
374,"{'func name': 'args_to_mixed_eager_tensors', 'comments': 'Converts a list of same-length lists of values to eager tensors.\n\n\n', 'stemmed comments': ['eager', 'samelength', 'valu', 'convert', 'list', 'tensor']}"
375,"{'func name': 'new_executor', 'comments': '', 'stemmed comments': []}"
376,"{'func name': 'make_exp_tests', 'comments': 'Make a set of tests to do exp.\n\n\n', 'stemmed comments': ['set', 'exp', 'make', 'test']}"
377,"{'func name': 'make_expand_dims_tests', 'comments': 'Make a set of tests to do expand_dims.\n\n\n', 'stemmed comments': ['expand_dim', 'set', 'make', 'test']}"
378,"{'func name': 'try_import', 'comments': '', 'stemmed comments': []}"
379,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
380,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
381,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
382,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
383,"{'func name': '_maybe_add_default_serving_output', 'comments': 'Add a default serving output to the export_outputs if not present.\n\n\n##### Args\n* **export_outputs**: Describes the output signatures to be exported to\n  `SavedModel` and used during serving. Should be a dict.\n\n##### Returns\n', 'stemmed comments': ['default', 'export_output', 'present', 'serv', 'add', 'signatur', 'should', 'return', 'describ', 'arg', 'use', 'dict', 'savedmodel', 'export', 'output']}"
384,"{'func name': 'make_eye_tests', 'comments': 'Make a set of tests for tf.eye op.\n\n\n', 'stemmed comments': ['tfey', 'make', 'op', 'set', 'test']}"
385,"{'func name': 'load_data', 'comments': 'Loads the Fashion-MNIST dataset.\n\nThis is a dataset of 60,000 28x28 grayscale images of 10 fashion categories, along with a test set of 10,000 images. This dataset can be used as a drop-in replacement for MNIST. The class labels are:\n\n| Label | Description | |:-----:|-------------| |\n\n 0\n\n | T-shirt/top | |\n\n 1\n\n | Trouser\n\n\n\n | |\n\n 2\n\n | Pullover\n\n\n\n| |\n\n 3\n\n | Dress\n\n\n\n\n\n | |\n\n 4\n\n | Coat\n\n\n\n\n\n\n\n| |\n\n 5\n\n | Sandal\n\n\n\n\n\n| |\n\n 6\n\n | Shirt\n\n\n\n\n\n | |\n\n 7\n\n | Sneaker\n\n\n\n | |\n\n 8\n\n | Bag\n\n\n\n\n\n\n\n | |\n\n 9\n\n | Ankle boot\n\n|\n##### Returns\n* **Tuple of Numpy arrays**: `(x_train, y_train), (x_test, y_test)`.\n\n* ****x_train, x_test****: uint8 arrays of grayscale image data with shape\n  (num_samples, 28, 28).\n\n* ****y_train, y_test****: uint8 arrays of labels (integers in range 0-9)\n  with shape (num_samples,).\n\n* **nse**: \n\n* **https**: //github.com/zalandoresearch/fashion-mnist/blob/master/LICENSE).\n\n', 'stemmed comments': ['tupl', 'array', 'y_test', 'imag', 'the', 'uint8', '3', 'nse', 'rang', 'boot', '|', '4', 'descript', '6', 'return', '09', 'x_train', 'grayscal', '28x28', '10', '//githubcom/zalandoresearch/fashionmnist/blob/master/licens', 'pullov', '9', '2', '10000', 'coat', 'dropin', '1', 'thi', 'trouser', '8', 'shirt', 'bag', 'integ', 'ankl', 'numpi', 'x_test', 'dress', 'dataset', 'shape', 'load', 'fashion', 'categori', 'sneaker', 'tshirt/top', 'test', 'data', 'http', '28', 'class', '7', 'along', 'replac', 'fashionmnist', 'mnist', 'y_train', 'set', 'use', '0', 'label', '5', 'sandal', '60000', 'num_sampl']}"
386,"{'func name': '_assert_sparse_tensor_value', 'comments': '', 'stemmed comments': []}"
387,"{'func name': '_initialized_session', 'comments': '', 'stemmed comments': []}"
388,"{'func name': '_assert_sparse_tensor_value', 'comments': '', 'stemmed comments': []}"
389,"{'func name': '_initialized_session', 'comments': '', 'stemmed comments': []}"
390,"{'func name': '_sanitize_column_name_for_variable_scope', 'comments': 'Sanitizes user-provided feature names for use as variable scopes.\n\n\n', 'stemmed comments': ['sanit', 'userprovid', 'featur', 'variabl', 'scope', 'name', 'use']}"
391,"{'func name': '_check_invalid_cases', 'comments': 'Checks for invalid embedding_lookup_device configurations.\n\n\n', 'stemmed comments': ['configur', 'invalid', 'embedding_lookup_devic', 'check']}"
392,"{'func name': '_verify_static_batch_size_equality', 'comments': 'Validates that the first dim (batch size) of all tensors are equal or None.\n\n\n##### Args\n* **tensors**: list of tensors to check.\n\n* **columns**: list of feature columns matching tensors. Will be used for error\n  messaging.\n\n', 'stemmed comments': ['batch', 'match', 'messag', 'dim', 'featur', 'equal', 'arg', 'column', 'use', 'first', 'size', 'none', 'list', 'will', 'tensor', 'valid', 'check', 'error']}"
393,"{'func name': 'split_sequence_columns', 'comments': 'Split a list of _TPUEmbeddingColumn into sequence and non-sequence columns.\n\nFor use in a TPUEstimator model_fn function. E.g.\n\ndef model_fn(features): sequence_columns, feature_columns = ( tf.tpu.feature_column.split_sequence_columns(feature_columns)) input = tf.feature_column.input_layer( features=features, feature_columns=feature_columns) sequence_features, sequence_lengths = ( tf.contrib.feature_column.sequence_input_layer( features=features, feature_columns=sequence_columns))\n##### Args\n* **feature_columns**: A list of _TPUEmbeddingColumns to split.\n\n##### Returns\n', 'stemmed comments': ['split', 'tfcontribfeature_columnsequence_input_lay', 'sequence_length', 'arg', 'column', 'tffeature_columninput_lay', 'sequence_featur', 'for', 'Eg', 'features=featur', 'return', 'tpuestim', 'def', '=', 'list', 'feature_columns=feature_column', 'nonsequ', 'sequenc', 'A', 'feature_columns=sequence_column', 'input', 'model_fn', 'tftpufeature_columnsplit_sequence_column', '_tpuembeddingcolumn', 'function', 'featur', 'use', 'feature_column', 'sequence_column']}"
394,"{'func name': 'ifftshift', 'comments': 'The inverse of fftshift.\n\nAlthough identical for even-length x, the functions differ by one sample for odd-length x.\n\n@compatibility(numpy) Equivalent to numpy.fft.ifftshift. https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.ifftshift.html @end_compatibility\n\nFor example:\n\n```python x = tf.signal.ifftshift([[ 0.,\n\n1.,\n\n2.],[ 3.,\n\n4., -4.],[-3., -2., -1.]]) x.numpy() # array([[ 4., -4.,\n\n3.],[-2., -1., -3.],[ 1.,\n\n2.,\n\n0.]]) ```\n##### Args\n* **x**: `Tensor`, input tensor.\n\n* **axes**: `int` or shape `tuple` Axes over which to calculate. Defaults to None,\n  which shifts all axes.\n\n* **name**: An optional name for the operation.\n\n##### Returns\n', 'stemmed comments': ['tupl', 'array', '[', 'the', '3', 'arg', 'shift', '4', 'for', 'default', '//docsscipyorg/doc/numpy/reference/generated/numpyfftifftshifthtml', 'return', 'sampl', 'invers', 'option', '=', 'tfsignalifftshift', '2', 'none', '1', 'compat', 'numpyfftifftshift', 'ident', 'evenlength', ']', 'calcul', 'numpi', 'xnumpi', 'An', 'exampl', 'although', 'equival', 'differ', 'fftshift', 'input', 'end_compat', 'one', 'tensor', 'axe', 'shape', 'oddlength', 'http', 'int', '@', 'function', 'x', 'oper', 'name', '0', 'python']}"
395,"{'func name': 'to_32bit', 'comments': '', 'stemmed comments': []}"
396,"{'func name': 'file_crc32', 'comments': 'Get the crc32 of the passed file.\n\nThe crc32 of a file can be used for error checking; two files with the same crc32 are considered equivalent. Note that the entire file must be read to produce the crc32.\n##### Args\n* **filename**: string, path to a file\n\n* **block_size**: Integer, process the files by reading blocks of `block_size`\n  bytes. Use -1 to read the file as once.\n\n##### Returns\n', 'stemmed comments': ['note', 'pass', ';', 'block_siz', 'the', 'arg', 'process', 'error', 'check', 'return', 'byte', 'get', '1', 'must', 'integ', 'consid', 'string', 'produc', 'path', 'crc32', 'equival', 'two', 'entir', 'file', 'filenam', 'use', 'read', 'block']}"
397,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
398,"{'func name': 'make_fill_tests', 'comments': 'Make a set of tests to do fill.\n\n\n', 'stemmed comments': ['set', 'fill', 'make', 'test']}"
399,"{'func name': '_test_combinations', 'comments': '', 'stemmed comments': []}"
400,"{'func name': '_test_combinations', 'comments': '', 'stemmed comments': []}"
401,"{'func name': 'parse_args', 'comments': 'Converts the raw arguments into accessible flags.\n\n\n', 'stemmed comments': ['raw', 'flag', 'convert', 'access', 'argument']}"
402,"{'func name': '_wrap_define_function', 'comments': ""Wraps absl.flags's define functions so tf.flags accepts old names.\n\n\n"", 'stemmed comments': ['wrap', 'accept', 'old', 'function', 's', 'name', 'abslflag', 'tfflag', 'defin']}"
403,"{'func name': 'randomize_weights', 'comments': 'Randomize weights in a model.\n\n\n##### Args\n* **model**: The model in which to randomize weights.\n\n* **random_seed**: The input to the random number generator (default value is 0).\n\n', 'stemmed comments': ['model', 'default', 'weight', 'the', 'arg', 'valu', 'random_se', '0', 'random', 'input', 'number', 'gener']}"
404,"{'func name': 'make_floor_tests', 'comments': 'Make a set of tests to do floor.\n\n\n', 'stemmed comments': ['set', 'floor', 'make', 'test']}"
405,"{'func name': '_add_n_flops', 'comments': 'Compute flops for AddN operation.\n\n\n', 'stemmed comments': ['oper', 'addn', 'comput', 'flop']}"
406,"{'func name': '_fprop_cond', 'comments': '', 'stemmed comments': []}"
407,"{'func name': '_test_gradients', 'comments': ""Tests forward/backward jacobians of `f`'s [0, `order`)-order gradients.\n\n\n"", 'stemmed comments': ['order', '[', 'f', 'gradient', 's', '0', 'forward/backward', 'test', 'jacobian']}"
408,"{'func name': 'push_forwardprop_state', 'comments': 'Temporarily push or pop transient state for accumulators in the active set.\n\nAllows an accumulator which is currently processing an operation to temporarily reset its state. This is useful when building forwardprop versions of functions, where an accumulator will trigger function building and then must process captured symbolic tensors while building it. Without pushing and popping, accumulators ignore operations executed as a direct result of their own jvp computations.\n\nYields: None (used for its side effect).\n', 'stemmed comments': ['symbol', 'activ', 'trigger', 'result', 'process', 'without', 'push', 'direct', 'accumul', 'yield', 'none', 'forwardprop', 'thi', 'transient', 'pop', 'allow', 'must', 'temporarili', 'state', 'captur', 'jvp', 'ignor', 'version', 'tensor', 'side', 'current', 'execut', 'function', 'reset', 'effect', 'oper', 'set', 'use', 'comput', 'build']}"
409,"{'func name': '_jvp_dispatch', 'comments': 'Determine which forwardprop function to call.\n\n\n', 'stemmed comments': ['determin', 'function', 'call', 'forwardprop']}"
410,"{'func name': '_is_public_method_name', 'comments': '', 'stemmed comments': []}"
411,"{'func name': '_check_type', 'comments': 'Check if an object is of the expected type.\n\n\n##### Args\n* **obj**: The object being checked.\n\n* **expected_types**: (`type` or an iterable of `type`s) The expected `type`(s)\n  of obj.\n\n', 'stemmed comments': ['expect', 'obj', 'type', 'the', 'arg', 'iter', 'object', 'expected_typ', 'check']}"
412,"{'func name': 'run_main', 'comments': 'Main function of freeze_graph.\n\n\n', 'stemmed comments': ['function', 'freeze_graph', 'main']}"
413,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
414,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
415,"{'func name': 'make_fully_connected_tests', 'comments': 'Make a set of tests to do fully_connected.\n\n\n', 'stemmed comments': ['set', 'fully_connect', 'make', 'test']}"
416,"{'func name': 'override_func_graph_name_scope', 'comments': '', 'stemmed comments': []}"
417,"{'func name': '_get_num_args', 'comments': '', 'stemmed comments': []}"
418,"{'func name': '_clean_function_name', 'comments': 'Vanity function to keep the function names comprehensible.\n\n\n', 'stemmed comments': ['keep', 'vaniti', 'function', 'comprehens', 'name']}"
419,"{'func name': 'wrap_cached_variables', 'comments': 'Wraps the concrete function if it uses cached read tensors.\n\nThis function creates a new concrete function that captures variables instead of the cached read tensors.\n##### Args\n* **concrete_function**: A Concrete function that maybe captures cached read\n  tensors.\n\n##### Returns\n', 'stemmed comments': ['wrap', 'creat', 'mayb', 'return', 'concrete_funct', 'new', 'function', 'A', 'cach', 'captur', 'variabl', 'concret', 'arg', 'use', 'read', 'thi', 'tensor', 'instead']}"
420,"{'func name': '_spec_for_value', 'comments': 'Returns the (nested) TypeSpec for a value.\n\n\n', 'stemmed comments': ['valu', 'return', 'typespec', 'nest']}"
421,"{'func name': '_OptimizerOptions', 'comments': '', 'stemmed comments': []}"
422,"{'func name': 'silly_example_function', 'comments': '', 'stemmed comments': []}"
423,"{'func name': 'get_disabled_rewriter_config', 'comments': '', 'stemmed comments': []}"
424,"{'func name': 'with_function_scope', 'comments': 'Inline version of the FunctionScope context manager.\n\n\n', 'stemmed comments': ['inlin', 'manag', 'functionscop', 'version', 'context']}"
425,"{'func name': '_contains_type_spec', 'comments': '', 'stemmed comments': []}"
426,"{'func name': 'function_def_from_tf_function', 'comments': 'Converts a SWIG-wrapped TF_Function* to a FunctionDef proto.\n\n\n', 'stemmed comments': ['swigwrap', 'proto', 'functiondef', 'convert', 'tf_function']}"
427,"{'func name': 'simple_scoped_fn', 'comments': 'Simple function: (a, x) -> 2(x+a), but with ""2"" as a variable in scope.\n\n\n', 'stemmed comments': ['function', 'variabl', 'x', 'scope', 'simpl', '2', 'xa', '>']}"
428,"{'func name': '_set_read_only_resource_inputs_attr', 'comments': 'Sets the list of resource inputs which are read-only.\n\nThis is used by AutomaticControlDependencies.\n##### Args\n* **op**: PartitionedCall Operation.\n\n* **func_graph**: FuncGraph.\n\n', 'stemmed comments': ['funcgraph', 'func_graph', 'automaticcontroldepend', 'op', 'arg', 'partitionedcal', 'set', 'use', 'oper', 'input', 'readonli', 'list', 'thi', 'resourc']}"
429,"{'func name': 'sharded_filename', 'comments': 'Append sharding information to a filename.\n\n\n##### Args\n* **filename_tensor**: A string tensor.\n\n* **shard**: Integer.  The shard for the filename.\n\n* **num_shards**: An int Tensor for the number of shards.\n\n##### Returns\n', 'stemmed comments': ['integ', 'int', 'An', 'return', 'A', 'filenam', 'the', 'append', 'string', 'arg', 'number', 'shard', 'filename_tensor', 'inform', 'tensor', 'num_shard']}"
430,"{'func name': 'get_network_config', 'comments': 'Builds the config, which consists of the node graph and serialized layers.\n\n\n##### Args\n* **network**: A Network object.\n\n* **serialize_layer_fn**: Function used to serialize layers.\n\n##### Returns\n', 'stemmed comments': ['node', 'serial', 'config', 'return', 'graph', 'A', 'function', 'arg', 'consist', 'use', 'serialize_layer_fn', 'object', 'network', 'layer', 'build']}"
431,"{'func name': 'transform', 'comments': '', 'stemmed comments': []}"
432,"{'func name': 'make_fused_batch_norm_tests', 'comments': 'Make a set of tests to do fused_batch_norm.\n\n\n', 'stemmed comments': ['set', 'make', 'fused_batch_norm', 'test']}"
433,"{'func name': 'try_import', 'comments': '', 'stemmed comments': []}"
434,"{'func name': '_kl_gamma_gamma', 'comments': 'Calculate the batched KL divergence KL(g0 || g1) with g0 and g1 Gamma.\n\n\n##### Args\n* **g0**: instance of a Gamma distribution object.\n\n* **g1**: instance of a Gamma distribution object.\n\n* **name**: (optional) Name to use for created operations.\n  Default is ""kl_gamma_gamma"".\n\n##### Returns\n* **kl_gamma_gamma**: `Tensor`. The batchwise KL(g0 || g1).\n\n', 'stemmed comments': ['instanc', '||', 'the', 'arg', 'object', 'KL', 'default', 'return', 'distribut', 'option', 'g0', 'calcul', 'gamma', 'kl_gamma_gamma', 'tensor', 'batch', 'batchwis', 'creat', 'oper', 'name', 'use', 'g1', 'diverg']}"
435,"{'func name': '_is_ellipsis_gast_3', 'comments': '', 'stemmed comments': []}"
436,"{'func name': 'make_gather_nd_tests', 'comments': 'Make a set of tests to do gather_nd.\n\n\n', 'stemmed comments': ['set', 'gather_nd', 'make', 'test']}"
437,"{'func name': '_to_str_elements', 'comments': 'Converts the inner list elements to strings.\n\n\n', 'stemmed comments': ['inner', 'string', 'convert', 'list', 'element']}"
438,"{'func name': 'make_gather_with_constant_tests', 'comments': 'Make a set of test which feed a constant to gather toco.\n\n\n', 'stemmed comments': ['feed', 'make', 'set', 'constant', 'gather', 'toco', 'test']}"
439,"{'func name': 'make_gather_tests', 'comments': 'Make a set of tests to do gather.\n\n\n', 'stemmed comments': ['set', 'gather', 'make', 'test']}"
440,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
441,"{'func name': 'write_build_info', 'comments': 'Writes a Python that describes the build.\n\n\n##### Args\n* **filename**: filename to write to.\n\n* **key_value_list**: A list of ""key=value"" strings that will be added to the\n  module\'s ""build_info"" dictionary as additional entries.\n\n', 'stemmed comments': ['write', 'build_info', 'addit', 'A', 'describ', 'filenam', 'ad', 's', 'string', 'arg', 'key_value_list', 'dictionari', 'entri', 'python', 'list', 'modul', 'key=valu', 'build']}"
442,"{'func name': 'raw_generate', 'comments': 'Simple generator used for cmake/make build systems.\n\nThis does not create any symlinks. It requires the build system to build unconditionally.\n##### Args\n* **output_file**: Output filename for the version info cc\n\n* **source_dir**: Base path of the source code\n\n* **git_tag_override**: Override the value for the git tag. This is useful for\n  releases where we want to build the release before the git tag is\n  created.\n\n', 'stemmed comments': ['want', 'arg', 'system', 'source_dir', 'code', 'valu', 'cc', 'releas', 'thi', 'build', 'git_tag_overrid', 'It', 'uncondit', 'tag', 'overrid', 'git', 'path', 'symlink', 'output_fil', 'version', 'info', 'base', 'sourc', 'creat', 'requir', 'filenam', 'cmake/mak', 'use', 'simpl', 'output', 'gener']}"
443,"{'func name': 'gen_conversion_log_html', 'comments': ""Generates an HTML report about the conversion process.\n\n\n##### Args\n* **conversion_log_dir**: A string specifying the file directory of the conversion\n  logs. It's required that before calling this function, the\n  `conversion_log_dir`\n  already contains the following files\n\n* **quantization_enabled**: A boolean, passed from the tflite converter to\n  indicate whether post-training quantization is enabled during conversion.\n\n* **tflite_graph_path**: A string, the filepath to the converted TFLite model.\n\n"", 'stemmed comments': ['pass', 'convers', 'arg', 'alreadi', 'html', 'process', 'tflite_graph_path', 'report', 'quantization_en', 'indic', 'boolean', 'filepath', 'It', 'whether', 'conversion_log_dir', 'A', 's', 'call', 'string', 'log', 'follow', 'convert', 'posttrain', 'specifi', 'tflite', 'file', 'model', 'requir', 'contain', 'function', 'enabl', 'directori', 'quantiz', 'gener']}"
444,"{'func name': 'GenerateModelV1', 'comments': 'Generate and convert a model using TFv1 API.\n\n\n', 'stemmed comments': ['model', 'tfv1', 'api', 'convert', 'use', 'gener']}"
445,"{'func name': 'generate_multi_set_examples', 'comments': 'Generate examples for test sets.\n\n\n##### Args\n* **options**: Options containing information to generate examples.\n\n* **test_sets**: List of the name of test sets to generate examples.\n\n', 'stemmed comments': ['gener', 'contain', 'exampl', 'arg', 'name', 'set', 'option', 'list', 'inform', 'test_set', 'test']}"
446,"{'func name': 'make_report_table', 'comments': 'Make an HTML report of the success/failure reports.\n\n\n##### Args\n* **fp**: File-like object in which to put the html.\n\n* **title**: ""Title of the zip file this pertains to.""\n\n* **reports**: a list of conversion attempts. (report_args, report_vals) i.e.\n  ({""shape""\n\n', 'stemmed comments': ['report_v', 'make', 'convers', 'arg', '{', 'html', 'object', 'report_arg', 'titl', 'report', 'ie', 'filelik', 'list', 'success/failur', 'put', 'attempt', 'shape', 'file', 'fp', 'zip', 'pertain']}"
447,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
448,"{'func name': 'parse_args', 'comments': 'Converts the raw arguments into accessible flags.\n\n\n', 'stemmed comments': ['raw', 'flag', 'convert', 'access', 'argument']}"
449,"{'func name': 'replace_refs', 'comments': 'Fix @ references in all files under `src_dir` matching `file_pattern`.\n\nA matching directory structure, with the modified files is written to `output_dir`.\n\n`{""__init__.py"",""OWNERS"",""README.txt""}` are skipped.\n\nFiles not matching `file_pattern` (using `fnmatch`) are copied with no change.\n\nAlso, files in the `api_guides/python` directory get explicit ids set on all heading-2s to ensure back-links work.\n##### Args\n* **src_dir**: The directory to convert files from.\n\n* **output_dir**: The root directory to write the resulting files to.\n\n* **reference_resolver**: A `parser.ReferenceResolver` to make the replacements.\n\n* **file_pattern**: Only replace references in files matching file_patters,\n  using fnmatch. Non-matching files are copied unchanged.\n\n* **api_docs_relpath**: Relative-path string to the api_docs, from the src_dir.\n\n', 'stemmed comments': ['file_patt', 'fix', 'backlink', 'the', 'make', 'api_doc', 'arg', 'api_guides/python', 'parserreferenceresolv', 'output_dir', '{', 'match', '__init__pi', 'also', 'result', 'heading2', 'id', 'copi', 'work', 'ensur', 'nonmatch', 'get', 'owner', 'modifi', 'fnmatch', 'structur', 'write', 'root', 'relativepath', 'A', 'written', 'explicit', 'string', 'chang', '}', 'convert', 'file', 'api_docs_relpath', 'reference_resolv', '@', 'unchang', 'onli', 'replac', 'directori', 'use', 'set', 'skip', 'refer', 'readmetxt', 'src_dir', 'file_pattern']}"
450,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
451,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
452,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
453,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
454,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
455,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
456,"{'func name': 'populate_dict_with_module_objects', 'comments': '', 'stemmed comments': []}"
457,"{'func name': 'get_layer_policy', 'comments': 'Returns the dtype policy of a layer.\n\n\n##### Args\n* **layer**: A `tf.keras.layers.Layer`.\n\n##### Returns\n', 'stemmed comments': ['return', 'dtype', 'A', 'tfkeraslayerslay', 'arg', 'polici', 'layer']}"
458,"{'func name': 'get_single_element', 'comments': 'Returns the single element in `dataset` as a nested structure of tensors.\n\nThis function enables you to use a `tf.data.Dataset` in a stateless ""tensor-in tensor-out"" expression, without creating an iterator. This can be useful when your preprocessing transformations are expressed as a `Dataset`, and you want to use the transformation at serving time.\n\nFor example:\n\n```python def preprocessing_fn(input_str): # ... return image, label\n\ninput_batch = ...\n\n# input batch of BATCH_SIZE elements dataset = (tf.data.Dataset.from_tensor_slices(input_batch) .map(preprocessing_fn, num_parallel_calls=BATCH_SIZE) .batch(BATCH_SIZE))\n\nimage_batch, label_batch = tf.data.experimental.get_single_element(dataset) ```\n##### Args\n* **dataset**: A `tf.data.Dataset` object containing a single element.\n\n##### Returns\n', 'stemmed comments': ['map', 'want', 'imag', 'nest', 'arg', 'preprocessing_fn', 'stateless', 'for', 'label_batch', 'express', 'object', 'return', 'time', 'preprocess', 'def', 'iter', 'tensorout', 'tfdatadataset', '=', 'transform', 'thi', 'input_str', 'element', 'singl', 'structur', 'image_batch', 'A', 'tensorin', 'exampl', 'dataset', 'input_batch', 'input', 'batch_siz', 'tensor', 'batch', 'tfdataexperimentalget_single_el', 'creat', 'serv', 'contain', 'function', 'enabl', 'num_parallel_calls=batch_s', 'use', 'python', 'label', 'tfdatadatasetfrom_tensor_slic', 'without']}"
459,"{'func name': 'make_global_batch_norm_tests', 'comments': 'Make a set of tests to do batch_norm_with_global_normalization.\n\n\n', 'stemmed comments': ['set', 'batch_norm_with_global_norm', 'make', 'test']}"
460,"{'func name': 'StatefulSessionAvailable', 'comments': '', 'stemmed comments': []}"
461,"{'func name': 'gather_gpu_devices', 'comments': 'Gather gpu device info.\n\n\n##### Returns\n', 'stemmed comments': ['return', 'info', 'devic', 'gather', 'gpu']}"
462,"{'func name': 'compute_capability_from_device_desc', 'comments': 'Returns the GpuInfo given a DeviceAttributes proto.\n\n\n##### Args\n* **device_attrs**: A DeviceAttributes proto.\n\n##### Returns\n', 'stemmed comments': ['gpuinfo', 'return', 'proto', 'A', 'deviceattribut', 'arg', 'given', 'device_attr']}"
463,"{'func name': '_nan_grad', 'comments': 'A gradient that returns NaN.\n\n\n', 'stemmed comments': ['A', 'gradient', 'nan', 'return']}"
464,"{'func name': '_random_complex', 'comments': '', 'stemmed comments': []}"
465,"{'func name': 'max_error', 'comments': 'Computes maximum elementwise gap.\n\nComputes the maximum elementwise gap between two lists of tensors of the same shape.\n##### Args\n* **grad1**: a lists of tensors.\n\n* **grad2**: a lists of tensors with the same shape as grad1.\n\n##### Returns\n', 'stemmed comments': ['return', 'grad1', 'maximum', 'grad2', 'arg', 'shape', 'two', 'list', 'gap', 'elementwis', 'tensor', 'comput']}"
466,"{'func name': 'compute_gradient_error', 'comments': 'Computes the gradient error.\n\nComputes the maximum error for dy/dx between the computed Jacobian and the numerically estimated Jacobian.\n\nThis function will modify the tensors passed in as it adds more operations and hence changing the consumers of the operations of the input tensors.\n\nThis function adds operations to the current session. To compute the error using a particular device, such as a GPU, use the standard methods for setting a device (e.g. using with sess.graph.device() or setting a device function in the session constructor).\n##### Args\n* **x**: a tensor or list of tensors\n\n* **x_shape**: the dimensions of x as a tuple or an array of ints. If x is a list,\n\n* **y**: a tensor\n\n* **y_shape**: the dimensions of y as a tuple or an array of ints.\n\n* **x_init_value**: (optional) a numpy array of the same shape as ""x""\n  representing the initial value of x. If x is a list, this should be a list\n  of numpy arrays.  If this is none, the function will pick a random tensor\n  as the initial value.\n\n* **delta**: (optional) the amount of perturbation.\n\n* **init_targets**: list of targets to run to initialize model params.\n\n* **extra_feed_dict**: dict that allows fixing specified tensor values\n  during the Jacobian calculation.\n\n##### Returns\n', 'stemmed comments': ['tupl', 'pass', 'array', 'fix', 'estim', 'dy/dx', 'run', 'session', 'arg', 'amount', 'sessgraphdevic', 'initi', 'error', 'dimens', 'particular', 'x_shape', 'add', 'consum', 'x_init_valu', 'pick', 'return', 'valu', 'dict', 'option', 'extra_feed_dict', 'none', 'list', 'If', 'thi', 'param', 'gpu', 'allow', 'modifi', 'calcul', 'y_shape', 'henc', 'numpi', 'gradient', 'method', 'chang', 'eg', 'devic', 'shape', 'standard', 'input', 'numer', 'specifi', 'tensor', 'constructor', 'model', 'target', 'int', 'repres', 'current', 'function', 'maximum', 'x', 'To', 'oper', 'perturb', 'use', 'set', 'init_target', 'random', 'delta', 'comput', 'jacobian']}"
467,"{'func name': '_train_with_recompute', 'comments': 'Trains a single large model with gradient checkpointing using tf.recompute_grad.\n\n\n', 'stemmed comments': ['model', 'train', 'larg', 'tfrecompute_grad', 'gradient', 'use', 'checkpoint', 'singl']}"
468,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
469,"{'func name': 'HessiansV2', 'comments': ""Constructs the Hessian of sum of `ys` with respect to `x` in `xs`.\n\n`hessians()` adds ops to the graph to output the Hessian matrix of `ys` with respect to `xs`.\n\nIt returns a list of `Tensor` of length `len(xs)` where each tensor is the Hessian of `sum(ys)`.\n\nThe Hessian is a matrix of second-order partial derivatives of a scalar tensor (see https://en.wikipedia.org/wiki/Hessian_matrix for more details).\n##### Args\n* **ys**: A `Tensor` or list of tensors to be differentiated.\n\n* **xs**: A `Tensor` or list of tensors to be used for differentiation.\n\n* **gate_gradients**: See `gradients()` documentation for details.\n\n* **aggregation_method**: See `gradients()` documentation for details.\n\n* **name**: Optional name to use for grouping all the gradient ops together.\n  defaults to 'hessians'.\n\n##### Returns\n"", 'stemmed comments': ['length', 'graph', 'gate_gradi', 'togeth', 'the', 'arg', 'hessian', 'differenti', 'document', 'default', 'see', 'return', 'add', 'sum', 'detail', 'option', 'list', 'len', 'respect', 'deriv', 'It', 'xs', 'partial', 'A', 'gradient', 'scalar', 'tensor', 'ys', 'http', 'matrix', 'x', 'op', 'aggregation_method', 'name', 'use', 'group', 'secondord', '//enwikipediaorg/wiki/hessian_matrix', 'output', 'construct']}"
470,"{'func name': 'create_fc_per_eg_jacobians', 'comments': '', 'stemmed comments': []}"
471,"{'func name': '_AggregatedGrads', 'comments': 'Get the aggregated gradients for op.\n\n\n##### Args\n* **grads**: The map of memoized gradients.\n\n* **op**: The op to get gradients for.\n\n* **gradient_uid**: A unique identifier within the graph indicating\n  which invocation of gradients is being executed. Used to cluster\n  ops for compilation.\n\n* **loop_state**: An object for maintaining the state of the while loops in the\n            graph. It is of type ControlFlowState. None if the graph\n            contains no while loops.\n\n* **aggregation_method**: Specifies the method used to combine gradient terms.\n  Accepted values are constants defined in the class `AggregationMethod`.\n\n##### Returns\n', 'stemmed comments': ['map', 'combin', 'grad', 'graph', 'the', 'arg', 'object', 'accept', 'return', 'invoc', 'valu', 'indic', 'loop_stat', 'get', 'none', 'aggreg', 'compil', 'controlflowst', 'gradient_uid', 'It', 'An', 'cluster', 'type', 'A', 'gradient', 'state', 'method', 'term', 'constant', 'specifi', 'aggregationmethod', 'loop', 'defin', 'identifi', 'execut', 'contain', 'class', 'memoiz', 'aggregation_method', 'op', 'uniqu', 'use', 'within', 'maintain']}"
472,"{'func name': 'batch_jacobian', 'comments': 'Computes and stacks jacobians of `output[i,...]` w.r.t. `input[i,...]`.\n\ne.g. x = tf.constant([[1, 2], [3, 4]], dtype=tf.float32) y = x * x jacobian = batch_jacobian(y, x) # => [[[2,\n\n0], [0,\n\n4]], [[6,\n\n0], [0,\n\n8]]]\n##### Args\n* **output**: A tensor with shape [b, y1, ..., y_n]. `output[i,...]` should\n  only depend on `inp[i,...]`.\n\n* **inp**: A tensor with shape [b, x1, ..., x_m]\n\n* **use_pfor**: If true, uses pfor for computing the Jacobian. Else uses a\n  tf.while_loop.\n\n* **parallel_iterations**: A knob to control how many iterations are vectorized\n  and dispatched in parallel. The default value of None, when use_pfor is\n  true, corresponds to vectorizing all the iterations. When use_pfor is\n  false, the default value of None corresponds to parallel_iterations=10.\n  This knob can be used to control the total memory usage.\n\n##### Returns\n', 'stemmed comments': ['mani', 'memori', '[', 'the', 'when', '3', 'arg', 'y_n', 'parallel', '4', 'control', '6', 'fals', 'wrt', '>', 'default', 'y1', 'x1', 'x_m', 'return', 'stack', 'parallel_iterations=10', 'inp', 'usag', 'vector', 'valu', '=', '2', 'iter', 'none', '1', 'pfor', 'If', 'thi', '8', ']', 'tfconstant', 'A', 'batch_jacobian', 'eg', 'shape', 'depend', 'input', 'correspond', 'dispatch', 'tensor', 'knob', 'parallel_iter', 'b', 'use_pfor', 'total', 'tfwhile_loop', 'x', 'use', 'output', '0', 'true', 'els', 'dtype=tffloat32', 'comput', 'jacobian']}"
473,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
474,"{'func name': 'run_benchmark', 'comments': '', 'stemmed comments': []}"
475,"{'func name': 'write_graph', 'comments': ""Writes a graph proto to a file.\n\nThe graph is written as a text proto unless `as_text` is `False`.\n\n```python v = tf.Variable(0, name='my_variable') sess = tf.compat.v1.Session() tf.io.write_graph(sess.graph_def, '/tmp/my-model', 'train.pbtxt') ```\n\nor\n\n```python v = tf.Variable(0, name='my_variable') sess = tf.compat.v1.Session() tf.io.write_graph(sess.graph, '/tmp/my-model', 'train.pbtxt') ```\n##### Args\n* **graph_or_graph_def**: A `Graph` or a `GraphDef` protocol buffer.\n\n* **logdir**: Directory where to write the graph. This can refer to remote\n  filesystems, such as Google Cloud Storage (GCS).\n\n* **name**: Filename for the graph.\n\n* **as_text**: If `True`, writes the graph as an ASCII proto.\n\n##### Returns\n"", 'stemmed comments': ['trainpbtxt', 'graph', 'the', 'arg', 'fals', 'filesystem', 'tfiowrite_graph', 'return', 'logdir', 'unless', '=', 'If', 'text', 'thi', 'graph_or_graph_def', 'cloud', 'write', 'proto', 'A', 'as_text', 'written', 'sessgraph', 'gc', 'tfcompatv1sess', 'protocol', 'buffer', 'v', 'googl', 'file', 'name=my_vari', 'sess', 'sessgraph_def', 'tfvariabl', '/tmp/mymodel', 'filenam', 'ascii', 'directori', 'name', '0', 'python', 'storag', 'true', 'refer', 'remot', 'graphdef']}"
476,"{'func name': 'graph_placeholder', 'comments': 'Graph-only version of tf.compat.v1.placeholder(), for internal use only.\n\n\n', 'stemmed comments': ['tfcompatv1placehold', 'use', 'graphonli', 'version', 'intern']}"
477,"{'func name': 'graph_to_function_def', 'comments': 'Returns `graph` as a `FunctionDef` protocol buffer.\n\nThis method creates a [`FunctionDef`]( https://www.tensorflow.org/code/tensorflow/core/framework/function.proto) protocol buffer that contains all the ops in `operations`.\n\nThe operations become the body of the function.\n\nThe arguments `inputs` and `outputs` will be listed as the inputs and outputs tensors of the function.\n\nThey must be lists of tensors present in the graph.\n\nThe lists can optionally be empty.\n##### Args\n* **graph**: Graph.\n\n* **operations**: the operations to put in the function. Must be a subset of\n the operations in the graph.\n\n* **inputs**: List of tensors. Inputs to the function.\n\n* **outputs**: List of tensors. Outputs of the function.\n\n* **out_names**: Optional list of string names for the outputs.\n\n##### Returns\n', 'stemmed comments': ['becom', 'graph', '[', 'the', 'arg', 'argument', 'return', 'out_nam', 'option', 'list', 'thi', 'must', ']', 'present', 'put', 'method', 'string', '//wwwtensorfloworg/code/tensorflow/core/framework/functionproto', 'bodi', 'protocol', 'buffer', 'input', 'tensor', 'they', 'http', 'creat', 'contain', 'function', 'subset', 'op', 'oper', 'functiondef', 'name', 'empti', 'output']}"
478,"{'func name': 'remove_training_nodes', 'comments': ""Prunes out nodes that aren't needed for inference.\n\nThere are nodes like Identity and CheckNumerics that are only useful during training, and can be removed in graphs that will be used for nothing but inference. Here we identify and remove them, returning an equivalent graph. To be specific, CheckNumerics nodes are always removed, and Identity nodes that aren't involved in control edges are spliced out so that their input and outputs are directly connected.\n##### Args\n* **input_graph**: Model to analyze and prune.\n\n* **protected_nodes**: An optional list of names of nodes to be kept\n  unconditionally. This is for example useful to preserve Identity output\n  nodes.\n\n##### Returns\n"", 'stemmed comments': ['graph', 'specif', 'alway', 'arg', 'remov', 'control', 'input_graph', 'analyz', 'nt', 'return', 'need', 'kept', 'option', 'here', 'list', 'there', 'ident', 'thi', 'node', 'train', 'An', 'uncondit', 'involv', 'exampl', 'noth', 'equival', 'input', 'infer', 'model', 'splice', 'like', 'identifi', 'directli', 'protected_nod', 'prune', 'preserv', 'To', 'connect', 'name', 'checknumer', 'use', 'edg', 'output']}"
479,"{'func name': 'test_device_func_pin_variable_to_cpu', 'comments': '', 'stemmed comments': []}"
480,"{'func name': '_serialize_slot_variables', 'comments': 'Gather and name slot variables.\n\n\n', 'stemmed comments': ['name', 'variabl', 'gather', 'slot']}"
481,"{'func name': 'make_greater_equal_tests', 'comments': 'Make a set of tests to do greater_equal.\n\n\n', 'stemmed comments': ['set', 'greater_equ', 'make', 'test']}"
482,"{'func name': 'make_greater_tests', 'comments': 'Make a set of tests to do greater.\n\n\n', 'stemmed comments': ['set', 'greater', 'make', 'test']}"
483,"{'func name': 'bucket_by_sequence_length', 'comments': 'A transformation that buckets elements in a `Dataset` by length.\n\nElements of the `Dataset` are grouped together by length and then are padded and batched.\n\nThis is useful for sequence tasks in which the elements have variable length. Grouping together elements that have similar lengths reduces the total fraction of padding in a batch which increases training step efficiency.\n##### Args\n* **element_length_func**: function from element in `Dataset` to `tf.int32`,\n  determines the length of the element, which will determine the bucket it\n  goes into.\n\n* **bucket_boundaries**: `list<int>`, upper length boundaries of the buckets.\n\n* **bucket_batch_sizes**: `list<int>`, batch size per bucket. Length should be\n  `len(bucket_boundaries) + 1`.\n\n* **padded_shapes**: Nested structure of `tf.TensorShape` to pass to\n  `tf.data.Dataset.padded_batch`. If not provided, will use\n  `dataset.output_shapes`, which will result in variable length dimensions\n  being padded out to the maximum length in each batch.\n\n* **padding_values**: Values to pad with, passed to\n  `tf.data.Dataset.padded_batch`. Defaults to padding with 0.\n\n* **pad_to_bucket_boundary**: bool, if `False`, will pad dimensions with unknown\n  size to maximum length in batch. If `True`, will pad dimensions with\n  unknown size to bucket boundary minus 1 (i.e., the maximum length in each\n  bucket), and caller must ensure that the source `Dataset` does not contain\n  any elements with length longer than `max(bucket_boundaries)`.\n\n* **no_padding**: `bool`, indicates whether to pad the batch features (features\n  need to be either of type `tf.sparse.SparseTensor` or of same shape).\n\n* **drop_remainder**: (Optional.) A `tf.bool` scalar `tf.Tensor`, representing\n  whether the last batch should be dropped in the case it has fewer than\n  `batch_size` elements; the default behavior is not to drop the smaller\n  batch.\n\n##### Returns\n', 'stemmed comments': ['tftensor', 'arg', 'tftensorshap', 'reduc', '>', 'ie', 'indic', 'max', 'transform', 'len', 'must', 'whether', 'type', 'tfsparsesparsetensor', 'variabl', 'scalar', 'batch', 'upper', '<', 'featur', 'last', 'per', 'caller', 'pad_to_bucket_boundari', 'pass', ';', 'togeth', 'nest', 'result', 'goe', 'step', 'determin', 'default', 'unknown', 'return', 'pad', 'datasetoutput_shap', 'valu', 'option', 'boundari', 'list', 'task', 'sequenc', 'A', 'sourc', 'similar', 'repres', 'fewer', 'maximum', 'either', 'no_pad', 'true', 'element_length_func', 'bucket', 'dimens', 'smaller', 'element', 'longer', 'train', 'tfdatadatasetpadded_batch', 'shape', 'batch_siz', 'int', 'bucket_boundari', 'contain', 'function', 'total', 'case', 'use', '0', 'group', 'bucket_batch_s', 'fraction', 'length', 'tfint32', 'fals', 'effici', 'behavior', 'need', 'increas', 'ensur', '1', 'provid', 'If', 'thi', 'structur', 'dataset', 'minu', 'tfbool', 'padding_valu', 'bool', 'size', 'padded_shap', 'drop_remaind', 'drop']}"
484,"{'func name': '_state_change', 'comments': '', 'stemmed comments': []}"
485,"{'func name': '_poll_server_till_success', 'comments': 'Poll server until success or exceeding max polling count.\n\n\n##### Args\n* **max_attempts**: (int) How many times to poll at maximum\n\n* **sleep_per_poll_sec**: (float) How many seconds to sleep for after each\n  unsuccessful poll.\n\n* **debug_server_url**: (str) gRPC URL to the debug server.\n\n* **dump_dir**: (str) Dump directory to look for files in. If None, will directly\n  check data from the server object.\n\n* **server**: The server object.\n\n* **gpu_memory_fraction**: (float) Fraction of GPU memory to be\n  allocated for the Session used in server polling.\n\n##### Returns\n', 'stemmed comments': ['mani', 'memori', 'the', 'session', 'arg', 'debug_server_url', 'float', 'sleep', 'url', 'check', 'object', 'sleep_per_poll_sec', 'unsuccess', 'return', 'time', 'alloc', 'none', 'max', 'poll', 'If', 'how', 'gpu', 'dump_dir', 'exceed', 'server', 'str', 'grpc', 'gpu_memory_fract', 'file', 'data', 'max_attempt', 'int', 'debug', 'directli', 'dump', 'maximum', 'directori', 'success', 'use', 'count', 'second', 'fraction', 'look']}"
486,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
487,"{'func name': 'register_signal_handler', 'comments': '', 'stemmed comments': []}"
488,"{'func name': 'make_hardswish_tests', 'comments': 'Make a set of tests to do hardswish.\n\n\n', 'stemmed comments': ['set', 'hardswish', 'make', 'test']}"
489,"{'func name': 'test', 'comments': '', 'stemmed comments': []}"
490,"{'func name': 'Test', 'comments': '', 'stemmed comments': []}"
491,"{'func name': 'word_gen', 'comments': '', 'stemmed comments': []}"
492,"{'func name': '_make_sequential_input_shape', 'comments': '', 'stemmed comments': []}"
493,"{'func name': '_legacy_weights', 'comments': 'DO NOT USE.\n\nFor legacy reason, the layer.weights was in the order of [self.trainable_weights + self.non_trainable_weights], and this order was used for preserving the weights in h5 format. The new order of layer.weights are the same as layer.get_weights() which is more intuitive for user. To keep supporting the existing saved h5 file, this method should be used to save/load weights. In future version, we will delete this method and introduce a breaking change for h5 and stay with the new order for weights.\n##### Args\n* **layer**: a `tf.keras.Model` or `tf.keras.layers.Layer` instance.\n\n##### Returns\n', 'stemmed comments': ['format', 'keep', 'instanc', '[', 'layerget_weight', 'the', 'delet', 'arg', 'for', 'legaci', 'order', 'layerweight', 'break', 'return', 'DO', 'new', 'save', 'user', 'introduc', 'tfkerasmodel', 'layer', ']', 'not', 'futur', 'weight', 'method', 'reason', 'support', 'chang', 'selftrainable_weight', 'save/load', 'selfnon_trainable_weight', 'version', 'stay', 'file', 'tfkeraslayerslay', 'preserv', 'To', 'In', 'h5', 'use', 'intuit', 'exist']}"
494,"{'func name': 'histogram_fixed_width', 'comments': ""Return histogram of values.\n\nGiven the tensor `values`, this operation returns a rank 1 histogram counting the number of entries in `values` that fell into every bin.\n\nThe bins are equal width and determined by the arguments `value_range` and `nbins`.\n##### Args\n* **values**: Numeric `Tensor`.\n\n* **value_range**: Shape [2] `Tensor` of same `dtype` as `values`.\n  values <= value_range[0] will be mapped to hist[0],\n  values >= value_range[1] will be mapped to hist[-1].\n\n* **nbins**: Scalar `int32 Tensor`.  Number of histogram bins.\n\n* **dtype**: dtype for returned histogram.\n\n* **name**: A name for this operation (defaults to 'histogram_fixed_width').\n\n##### Returns\n"", 'stemmed comments': ['value_rang', 'map', '[', 'the', 'nbin', 'arg', 'number', 'determin', 'histogram_fixed_width', 'argument', '>', 'default', 'fell', 'return', 'width', 'valu', '2', '=', '1', 'everi', 'histogram', 'rank', ']', 'A', 'equal', 'entri', 'int32', 'scalar', 'shape', 'numer', 'tensor', 'dtype', 'hist', '<', 'oper', 'name', 'given', '0', 'count', 'bin']}"
495,"{'func name': '_test_combinations', 'comments': '', 'stemmed comments': []}"
496,"{'func name': '_back_over_back_hvp', 'comments': '', 'stemmed comments': []}"
497,"{'func name': 'make_identity_tests', 'comments': 'Make a set of tests to do identity.\n\n\n', 'stemmed comments': ['set', 'ident', 'make', 'test']}"
498,"{'func name': 'path_to_image', 'comments': '', 'stemmed comments': []}"
499,"{'func name': '_RGBToHSVGrad', 'comments': 'The gradients for `rgb_to_hsv` operation.\n\nThis function is a piecewise continuous function as defined here: https://en.wikipedia.org/wiki/HSL_and_HSV#From_RGB We perform the multivariate derivative and compute all partial derivatives separately before adding them in the end. Formulas are given before each partial derivative calculation.\n##### Args\n* **op**: The `rgb_to_hsv` `Operation` that we are differentiating.\n\n* **grad**: Gradient with respect to the output of the `rgb_to_hsv` op.\n\n##### Returns\n', 'stemmed comments': ['We', 'grad', 'the', 'arg', 'differenti', '//enwikipediaorg/wiki/hsl_and_hsv', 'formula', 'return', 'ad', 'continu', 'from_rgb', 'piecewis', 'thi', 'end', 'respect', 'deriv', 'calcul', 'partial', 'gradient', 'rgb_to_hsv', 'multivari', 'defin', 'perform', 'http', 'separ', 'function', 'op', 'oper', 'given', 'output', 'comput']}"
500,"{'func name': 'generate_bounding_box_proposals', 'comments': ""Generate bounding box proposals from encoded bounding boxes.\n\n\n##### Returns\n* **rois**: Region of interest boxes sorted by their scores.\n\n* **roi_probabilities**: scores of the ROI boxes in the ROIs' tensor.\n\n"", 'stemmed comments': ['return', 'roi', 'roi_prob', 'propos', 'score', 'box', 'encod', 'region', 'interest', 'sort', 'tensor', 'bound', 'gener']}"
501,"{'func name': '_generate_numpy_random_rgb', 'comments': '', 'stemmed comments': []}"
502,"{'func name': '_SimpleColorRamp', 'comments': 'Build a simple color ramp RGB image.\n\n\n', 'stemmed comments': ['rgb', 'ramp', 'imag', 'color', 'simpl', 'build']}"
503,"{'func name': '_image_projective_transform_grad', 'comments': 'Computes the gradient for ImageProjectiveTransform.\n\n\n', 'stemmed comments': ['gradient', 'comput', 'imageprojectivetransform']}"
504,"{'func name': 'image_augmentation', 'comments': 'image augmentation.\n\n\n', 'stemmed comments': ['imag', 'augment']}"
505,"{'func name': 'get_numpy_center_crop', 'comments': '', 'stemmed comments': []}"
506,"{'func name': 'get_interpolation', 'comments': '', 'stemmed comments': []}"
507,"{'func name': '_generate_test_images', 'comments': '', 'stemmed comments': []}"
508,"{'func name': 'load_img', 'comments': 'Loads an image into PIL format.\n\nUsage:\n\n``` image = tf.keras.preprocessing.image.load_img(image_path) input_arr = keras.preprocessing.image.img_to_array(image) input_arr = np.array([input_arr])\n\n# Convert single image to a batch. predictions = model.predict(input_arr) ```\n\nArguments: path: Path to image file. grayscale: DEPRECATED use `color_mode=""grayscale""`. color_mode: One of ""grayscale"", ""rgb"", ""rgba"". Default: ""rgb"". The desired image format. target_size: Either `None` (default to original size) or tuple of ints `(img_height, img_width)`. interpolation: Interpolation method used to resample the image if the target size is different from that of the loaded image. Supported methods are ""nearest"", ""bilinear"", and ""bicubic"". If PIL version 1.1.3 or newer is installed, ""lanczos"" is also supported. If PIL version 3.4.0 or newer is installed, ""box"" and ""hamming"" are also supported. By default, ""nearest"" is used.\n##### Returns\n', 'stemmed comments': ['tupl', 'format', 'predict', '[', 'interpol', '113', 'imag', 'keraspreprocessingimageimg_to_array', 'the', 'resampl', 'modelpredict', 'tfkeraspreprocessingimageload_img', 'bilinear', 'also', 'image_path', 'instal', 'argument', 'default', 'nearest', 'rgb', 'return', 'usag', 'grayscal', 'color_mode=', 'pil', 'img_height', 'box', 'ham', '=', 'none', 'By', 'If', 'singl', 'origin', 'lanczo', ']', 'method', 'img_width', 'convert', 'support', 'path', 'newer', 'load', 'differ', 'color_mod', 'one', 'version', 'batch', '340', 'file', 'deprec', 'target', 'input_arr', 'int', 'rgba', 'either', 'desir', 'use', 'nparray', 'target_s', 'size', 'bicub']}"
509,"{'func name': 'validate_activation', 'comments': 'validates that the classifer_activation is compatible with the weights.\n\n\n##### Args\n* **classifier_activation**: str or callable activation function\n\n* **weights**: The pretrained weights to load.\n\n', 'stemmed comments': ['activ', 'callabl', 'classifier_activ', 'function', 'weight', 'the', 'arg', 'str', 'pretrain', 'classifer_activ', 'load', 'compat', 'valid']}"
510,"{'func name': 'get_word_index', 'comments': 'Retrieves a dict mapping words to their index in the IMDB dataset.\n\nArguments: path: where to cache the data (relative to `~/.keras/dataset`).\n##### Returns\n', 'stemmed comments': ['data', 'map', 'word', 'return', 'retriev', 'cach', '~/keras/dataset', 'rel', 'dict', 'index', 'dataset', 'path', 'imdb', 'argument']}"
511,"{'func name': 'imperative_grad', 'comments': ""Computes gradients from the imperatively defined tape on top of the stack.\n\nWorks by filtering the tape, computing how many downstream usages are of each tensor and entry, and repeatedly applying backward functions until we have gradients for all sources.\n##### Args\n* **tape**: the gradient tape which stores the trace.\n\n* **target**: either a Tensor or list of Tensors to be differentiated.\n\n* **sources**: list of Tensors for which we want gradients\n\n* **output_gradients**: if not None, a list of gradient provided for each Target,\n or None if we are to use the target's computed downstream gradient.\n\n* **sources_raw**: if not None, a list of the source python objects from which the\n sources were generated. Should have the same length as sources. Only needs\n to be populated if unconnected_gradients is 'zero'.\n\n* **unconnected_gradients**: determines the value returned if the target and\n sources are unconnected. When 'none' the value returned is None wheras when\n 'zero' a zero tensor in the same shape as the sources is returned.\n\n##### Returns\n"", 'stemmed comments': ['mani', 'length', 'want', 'when', 'whera', 'arg', 'differenti', 'determin', 'imper', 'appli', 'object', 'repeatedli', 'return', 'should', 'stack', 'usag', 'need', 'work', 'valu', 'unconnect', 'none', 'list', 'provid', 'top', 'trace', 'zero', 'gradient', 'filter', 's', 'unconnected_gradi', 'entri', 'sources_raw', 'store', 'backward', 'shape', 'tensor', 'sourc', 'downstream', 'defin', 'target', 'tape', 'onli', 'function', 'either', 'popul', 'use', 'python', 'output_gradi', 'comput', 'gener']}"
512,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
513,"{'func name': '_import_graph_def_internal', 'comments': 'Imports the graph from `graph_def` into the current default `Graph`.\n\nThis function provides a way to import a serialized TensorFlow [`GraphDef`](https://www.tensorflow.org/code/tensorflow/core/framework/graph.proto) protocol buffer, and extract individual objects in the `GraphDef` as `tf.Tensor` and `tf.Operation` objects. Once extracted, these objects are placed into the current default `Graph`. See `tf.Graph.as_graph_def` for a way to create a `GraphDef` proto.\n##### Args\n* **graph_def**: A `GraphDef` proto containing operations to be imported into the\n  default graph.\n\n* **input_map**: A dictionary mapping input names (as strings) in `graph_def` to\n  `Tensor` objects. The values of the named input tensors in the imported\n  graph will be re-mapped to the respective `Tensor` values.\n\n* **return_elements**: A list of strings containing operation names in `graph_def`\n  that will be returned as `Operation` objects; and/or tensor names in\n  `graph_def` that will be returned as `Tensor` objects.\n\n* **validate_colocation_constraints**: Whether to validate colocation constraints.\n\n* **name**: (Optional.) A prefix that will be prepended to the names in\n  `graph_def`. Note that this does not apply to imported function names.\n  Defaults to `""import""`.\n\n* **producer_op_list**: (Optional.) An `OpList` proto with the (possibly stripped)\n  list of `OpDef`s used by the producer of the graph. If provided,\n  unrecognized attrs for ops in `graph_def` that have their default value\n  according to `producer_op_list` will be removed. This will allow some more\n  `GraphDef`s produced by later binaries to be accepted by earlier binaries.\n\n##### Returns\n', 'stemmed comments': ['tftensor', 'the', 'dictionari', 'arg', 'appli', 'object', 'place', 'input_map', 'see', 'tfgraphas_graph_def', 'and/or', ']', 'whether', 'proto', 'import', '//wwwtensorfloworg/code/tensorflow/core/framework/graphproto', 'extract', 'http', 'current', 'graphdef', ';', 'opdef', 'default', 'accept', 'return', 'valu', 'option', 'prefix', 'binari', 'list', 'return_el', 'A', 'constraint', 'validate_colocation_constraint', 'protocol', 'buffer', 'creat', 'op', 'name', 'coloc', 'unrecogn', 'note', 'map', 'remap', '[', 'remov', 'strip', 'valid', 'allow', 'An', 'string', 'attr', 'individu', 'input', 'accord', 'contain', 'function', 'later', 'use', 'graph', 'prepend', 'way', 'onc', 'earlier', 'provid', 'If', 'thi', 'respect', 'serial', 'produc', 'oplist', 'tensor', 'tensorflow', 'tfoper', 'oper', 'graph_def', 'producer_op_list', 'possibl']}"
514,"{'func name': 'decode_predictions', 'comments': '', 'stemmed comments': []}"
515,"{'func name': 'decode_predictions', 'comments': '', 'stemmed comments': []}"
516,"{'func name': 'get_top_k', 'comments': 'Python implementation of vocabulary building using a defaultdict.\n\n\n', 'stemmed comments': ['defaultdict', 'use', 'python', 'implement', 'vocabulari', 'build']}"
517,"{'func name': 'get_layer_class', 'comments': '', 'stemmed comments': []}"
518,"{'func name': '_get_end_to_end_test_cases', 'comments': '', 'stemmed comments': []}"
519,"{'func name': '_indexed_slices_to_tensor', 'comments': 'Converts an IndexedSlices object `value` to a Tensor.\n\nNOTE(mrry): This function is potentially expensive.\n##### Args\n* **value**: An ops.IndexedSlices object.\n\n* **dtype**: The dtype of the Tensor to be returned.\n\n* **name**: Optional name to use for the returned Tensor.\n\n* **as_ref**: True if a ref is requested.\n\n##### Returns\n', 'stemmed comments': ['note', 'the', 'mrri', 'arg', 'opsindexedslic', 'ref', 'object', 'return', 'indexedslic', 'valu', 'option', 'thi', 'An', 'expens', 'convert', 'as_ref', 'potenti', 'tensor', 'request', 'dtype', 'function', 'name', 'use', 'true']}"
520,"{'func name': '_init_sampler', 'comments': 'Returns a func to generate a random tensor of shape [num].\n\n\n##### Args\n* **tc**: An instance of TensorFlowTestCase.\n\n* **init**: An Initializer that generates a tensor of a given shape\n\n* **num**: Size of 1D tensor to create.\n\n##### Returns\n', 'stemmed comments': ['instanc', '[', '1D', 'arg', 'initi', 'return', 'tensorflowtestcas', 'num', 'func', ']', 'An', 'shape', 'tc', 'init', 'tensor', 'creat', 'given', 'random', 'size', 'gener']}"
521,"{'func name': '_assert_float_dtype', 'comments': 'Validate and return floating point type based on `dtype`.\n\n`dtype` must be a floating point type.\n##### Args\n* **dtype**: The data type to validate.\n\n##### Returns\n', 'stemmed comments': ['must', 'data', 'return', 'dtype', 'type', 'point', 'the', 'arg', 'float', 'valid', 'base']}"
522,"{'func name': '_assert_float_dtype', 'comments': 'Validate and return floating point type based on `dtype`.\n\n`dtype` must be a floating point type.\n##### Args\n* **dtype**: The data type to validate.\n\n##### Returns\n', 'stemmed comments': ['must', 'data', 'return', 'dtype', 'type', 'point', 'the', 'arg', 'float', 'valid', 'base']}"
523,"{'func name': '_get_dtype', 'comments': '', 'stemmed comments': []}"
524,"{'func name': 'inplace_sub', 'comments': ""Applies an inplace sub on input x at index i with value v.\n\nNote that this function is not actually inplace\n\n- it allocates a copy of x.\n\nThe utility is not avoiding memory copies but rather specifying a sparse update.\n\nIf i is None, x and v must be the same shape. Computes y = x; y -= v; If i is a scalar, x has a rank 1 higher than v's. Computes y = x; y[i, :] -= v; Otherwise, x and v must have the same rank. Computes y = x; y[i, :] -= v;\n##### Args\n* **x**: A Tensor.\n\n* **i**: None, a scalar or a vector.\n\n* **v**: A Tensor.\n\n"", 'stemmed comments': ['note', 'otherwis', ';', 'memori', '[', 'inplac', 'the', 'arg', 'index', 'spars', 'appli', 'actual', 'copi', 'vector', 'valu', 'alloc', 'util', '=', 'none', '1', 'If', 'sub', 'must', 'rank', ']', 'higher', 'A', 's', 'scalar', 'rather', 'shape', 'v', 'input', 'specifi', 'tensor', 'avoid', 'function', 'x', 'updat', 'comput']}"
525,"{'func name': 'get_features_range', 'comments': 'Returns the expected min/max for generated features.\n\n\n##### Args\n* **model_settings**: Information about the current model being trained.\n\n##### Returns\n', 'stemmed comments': ['expect', 'model', 'train', 'return', 'current', 'min/max', 'model_set', 'featur', 'arg', 'inform', 'gener']}"
526,"{'func name': 'read_data_sets', 'comments': '', 'stemmed comments': []}"
527,"{'func name': 'Input', 'comments': ""`Input()` is used to instantiate a Keras tensor.\n\nA Keras tensor is a TensorFlow symbolic tensor object, which we augment with certain attributes that allow us to build a Keras model just by knowing the inputs and outputs of the model.\n\nFor instance, if `a`, `b` and `c` are Keras tensors, it becomes possible to do: `model = Model(input=[a, b], output=c)`\n\nArguments: shape: A shape tuple (integers), not including the batch size. For instance, `shape=(32,)` indicates that the expected input will be batches of 32-dimensional vectors. Elements of this tuple can be None; 'None' elements represent dimensions where the shape is not known. batch_size: optional static batch size (integer). name: An optional name string for the layer. Should be unique in a model (do not reuse the same name twice). It will be autogenerated if it isn't provided. dtype: The data type expected by the input, as a string (`float32`, `float64`, `int32`...) sparse: A boolean specifying whether the placeholder to be created is sparse. Only one of 'ragged' and 'sparse' can be True. Note that, if `sparse` is False, sparse tensors can still be passed into the input\n\n- they will be densified with a default value of 0. tensor: Optional existing tensor to wrap into the `Input` layer. If set, the layer will not create a placeholder tensor. ragged: A boolean specifying whether the placeholder to be created is ragged. Only one of 'ragged' and 'sparse' can be True. In this case, values of 'None' in the 'shape' argument represent ragged dimensions. For more information about RaggedTensors, see [this guide](https://www.tensorflow.org/guide/ragged_tensors). **kwargs: deprecated arguments support. Supports `batch_shape` and `batch_input_shape`.\n##### Returns\n* **ample**: \n\n* **nsorFlow ops, as such**: \n\n"", 'stemmed comments': ['tupl', 'batch_input_shap', 'the', 'autogener', 'kera', 'static', 'object', 'see', 'attribut', 'indic', 'float64', 'none', 'integ', 'It', ']', 'whether', 'type', '32', 'int32', 'c', 'batch', 'still', 'http', '//wwwtensorfloworg/guide/ragged_tensor', 'expect', 'becom', 'symbol', 'instanc', ';', 'pass', 'wrap', '32dimension', 'spars', 'for', 'rag', 'default', 'return', 'should', 'vector', 'shape=', 'valu', 'option', '=', 'placehold', 'A', 'specifi', 'one', 'us', 'model', 'data', 'creat', 'b', 'repres', 'op', 'name', 'exist', 'true', 'note', '[', 'includ', 'dimens', 'argument', 'nt', 'nsorflow', 'output=c', 'inform', 'element', 'layer', 'allow', 'An', 'raggedtensor', 'kwarg', 'string', 'shape', 'input', 'instanti', 'float32', 'batch_siz', 'reus', 'onli', 'case', 'In', 'use', '0', 'output', 'fals', 'know', 'augment', 'twice', 'input=', 'densifi', 'provid', 'boolean', 'If', 'certain', 'batch_shap', 'support', 'ampl', 'tensor', 'tensorflow', 'deprec', 'dtype', 'uniqu', 'set', 'guid', 'size', 'known', 'possibl', 'build']}"
528,"{'func name': '_check_type_spec_structure', 'comments': 'Verifies that `x` has the same structure as its `TypeSpec`.\n\n\n', 'stemmed comments': ['structur', 'verifi', 'typespec', 'x']}"
529,"{'func name': '_replace_per_replica_spec', 'comments': 'If `spec` is a `PerReplicaSpec`, then return its `i`th value_spec.\n\n\n', 'stemmed comments': ['perreplicaspec', 'return', 'th', 'value_spec', 'If', 'spec']}"
530,"{'func name': '_clone_helper', 'comments': 'Helper method that recursively clones `op_to_clone`.\n\n\n##### Args\n* **op_to_clone**: The op we want to clone.\n\n* **variant_tensor_ops**: A list of ops that we have to clone along the way.\n\n##### Returns\n', 'stemmed comments': ['clone', 'want', 'helper', 'return', 'op_to_clon', 'A', 'method', 'the', 'along', 'op', 'arg', 'list', 'variant_tensor_op', 'recurs', 'way']}"
531,"{'func name': 'to_tensor_spec', 'comments': 'Converts a Keras InputSpec object to a TensorSpec.\n\n\n', 'stemmed comments': ['tensorspec', 'convert', 'kera', 'inputspec', 'object']}"
532,"{'func name': 'maybe_shuffle_batch_join', 'comments': 'Create batches by randomly shuffling conditionally-enqueued tensors.\n\nSee docstring in `shuffle_batch_join` for more details.\n##### Args\n* **tensors_list**: A list of tuples or dictionaries of tensors to enqueue.\n\n* **batch_size**: An integer. The new batch size pulled from the queue.\n\n* **capacity**: An integer. The maximum number of elements in the queue.\n\n* **min_after_dequeue**: Minimum number elements in the queue after a\n  dequeue, used to ensure a level of mixing of elements.\n\n* **keep_input**: A `bool` Tensor.  This tensor controls whether the input is\n  added to the queue or not.  If it is a scalar and evaluates `True`, then\n  `tensors` are all added to the queue. If it is a vector and `enqueue_many`\n  is `True`, then each example is added to the queue only if the\n  corresponding value in `keep_input` is `True`. This tensor essentially\n  acts as a filtering mechanism.\n\n* **seed**: Seed for the random shuffling within the queue.\n\n* **enqueue_many**: Whether each tensor in `tensor_list_list` is a single\n  example.\n\n* **shapes**: (Optional) The shapes for each example.  Defaults to the\n  inferred shapes for `tensors_list[i]`.\n\n* **allow_smaller_final_batch**: (Optional) Boolean. If `True`, allow the final\n  batch to be smaller if there are insufficient items left in the queue.\n\n* **shared_name**: (optional). If set, this queue will be shared under the given\n  name across multiple sessions.\n\n* **name**: (Optional) A name for the operations.\n\n##### Returns\n', 'stemmed comments': ['tupl', 'tensor_list_list', 'the', 'dictionari', 'arg', 'act', 'dequeu', 'see', 'allow_smaller_final_batch', 'shared_nam', 'integ', ']', 'whether', 'filter', 'scalar', 'batch', 'across', 'number', 'final', 'mix', 'min_after_dequeu', 'default', 'enqueu', 'return', 'new', 'detail', 'ad', 'vector', 'valu', 'option', 'list', 'A', 'exampl', 'evalu', 'queue', 'creat', 'maximum', 'name', 'shuffle_batch_join', 'true', 'level', 'minimum', '[', 'session', 'keep_input', 'docstr', 'smaller', 'share', 'element', 'allow', 'An', 'shuffl', 'shape', 'input', 'batch_siz', 'infer', 'use', 'randomli', 'random', 'tensors_list', 'enqueue_mani', 'control', 'essenti', 'conditionallyenqueu', 'left', 'ensur', 'pull', 'insuffici', 'boolean', 'If', 'thi', 'singl', 'capac', 'item', 'correspond', 'multipl', 'tensor', 'seed', 'oper', 'set', 'given', 'bool', 'size', 'mechan', 'within']}"
533,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
534,"{'func name': 'free_factory', 'comments': '', 'stemmed comments': []}"
535,"{'func name': 'getfutureimports', 'comments': 'Detects what future imports are necessary to safely execute entity source.\n\n\n##### Args\n* **entity**: Any object\n\n##### Returns\n', 'stemmed comments': ['return', 'execut', 'futur', 'import', 'arg', 'entiti', 'safe', 'ani', 'detect', 'necessari', 'object', 'sourc']}"
536,"{'func name': '_get_end_to_end_test_cases', 'comments': '', 'stemmed comments': []}"
537,"{'func name': 'MaybeRunScriptInstead', 'comments': '', 'stemmed comments': []}"
538,"{'func name': 'choose_from_datasets_v1', 'comments': '', 'stemmed comments': []}"
539,"{'func name': '_repeat', 'comments': 'Produces a list of lists suitable for testing interleave.\n\n\n##### Args\n* **values**: for each element `x` the result contains `[x] * x`\n\n* **count**: determines how many times to repeat `[x] * x` in the result\n\n##### Returns\n', 'stemmed comments': ['mani', '[', 'arg', 'repeat', 'result', 'determin', 'return', 'time', 'interleav', 'valu', 'list', 'element', ']', 'suitabl', 'produc', 'test', 'contain', 'x', 'count']}"
540,"{'func name': 'load_delegate', 'comments': 'Returns loaded Delegate object.\n\n\n##### Args\n* **library**: Name of shared library containing the\n  [TfLiteDelegate](https\n\n* **options**: Dictionary of options that are required to load the delegate. All\n  keys and values in the dictionary should be convertible to str. Consult\n  the documentation of the specific delegate for required and legal options.\n  (default None)\n\n##### Returns\n', 'stemmed comments': ['[', 'dictionari', 'specif', 'arg', 'document', 'object', 'default', 'return', 'consult', 'valu', 'option', 'deleg', 'none', 'share', ']', 'tflitedeleg', 'legal', 'convert', 'str', 'load', 'http', 'requir', 'contain', 'key', 'name', 'all', 'librari']}"
541,"{'func name': '_inverse_householder', 'comments': '', 'stemmed comments': []}"
542,"{'func name': '_restore_slice', 'comments': 'Restore a tensor slice from a set of files with a given pattern.\n\nExample usage: RestoreSlice(""/foo/bar-?????-of-?????"", ""w"", ""10 10 0,2:-"", DT_FLOAT)\n##### Args\n* **file_pattern**: the file pattern used to match a set of checkpoint files.\n\n* **tensor_name**: the name of the tensor to restore.\n\n* **shape_and_slice**: the shape-and-slice spec of the slice.\n\n* **tensor_type**: the type of the tensor to restore.\n\n* **name**: string.  Optional name for the op.\n\n* **preferred_shard**: Int. Optional shard to open first in the checkpoint file.\n\n##### Returns\n', 'stemmed comments': ['of', '02', 'preferred_shard', '/foo/bar', 'arg', 'shapeandslic', 'shard', 'slice', 'match', 'return', '?', 'usag', '10', 'option', 'checkpoint', 'type', 'exampl', 'string', 'w', 'restor', 'tensor_typ', 'spec', 'tensor', 'restoreslic', 'file', 'tensor_nam', 'int', 'dt_float', 'pattern', 'op', 'name', 'set', 'given', 'use', 'shape_and_slic', 'open', 'first', 'file_pattern']}"
543,"{'func name': 'create_dataset', 'comments': '', 'stemmed comments': []}"
544,"{'func name': 'ask_to_proceed_with_overwrite', 'comments': 'Produces a prompt asking about overwriting a file.\n\nArguments: filepath: the path to the file to be overwritten.\n##### Returns\n', 'stemmed comments': ['overwrit', 'return', 'prompt', 'ask', 'produc', 'path', 'overwritten', 'filepath', 'argument', 'file']}"
545,"{'func name': 'load', 'comments': 'Loads a previously saved dataset.\n\nExample usage:\n\n>>> import tempfile >>> path = os.path.join(tempfile.gettempdir(), ""saved_data"") >>> # Save a dataset >>> dataset = tf.data.Dataset.range(2) >>> tf.data.experimental.save(dataset, path) >>> new_dataset = tf.data.experimental.load(path, ...\n\n\n\n tf.TensorSpec(shape=(), dtype=tf.int64)) >>> for elem in new_dataset: ...\n\n print(elem) tf.Tensor(0, shape=(), dtype=int64) tf.Tensor(1, shape=(), dtype=int64)\n\n Note that to load a previously saved dataset, you need to specify `element_spec` -- a type signature of the elements of the saved dataset, which can be obtained via `tf.data.Dataset.element_spec`. This requirement exists so that shape inference of the loaded dataset does not need to perform I/O.\n\nIf the default option of sharding the saved dataset was used, the element order of the saved dataset will be preserved when loading it.\n\nThe `reader_func` argument can be used to specify a custom order in which elements should be loaded from the individual shards. The `reader_func` is expected to take a single argument -- a dataset of datasets, each containing elements of one of the shards -- and return a dataset of elements. For example, the order of shards can be shuffled when loading them as follows:\n\n```python def custom_reader_func(datasets): datasets = datasets.shuffle(NUM_SHARDS) return datasets.interleave(lambda x: x, num_parallel_calls=AUTOTUNE)\n\ndataset = tf.data.experimental.load( path=""/path/to/data"", ..., reader_func=custom_reader_func) ```\n##### Args\n* **path**: Required. A path pointing to a previously saved dataset.\n\n* **element_spec**: Required. A nested structure of `tf.TypeSpec` objects matching\n  the structure of an element of the saved dataset and specifying the type\n  of individual element components.\n\n* **compression**: Optional. The algorithm to use to decompress the data when\n  reading it. Supported options are `GZIP` and `NONE`. Defaults to `NONE`.\n\n* **reader_func**: Optional. A function to control how to read data from shards.\n  If present, the function will be traced and executed as graph computation.\n\n##### Returns\n', 'stemmed comments': ['elem', 'tfdatadatasetrang', 'tftensor', 'compon', 'custom_reader_func', 'tfdataexperimentalsav', 'the', 'arg', 'match', '>', 'object', 'dtype=int64', 'lambda', 'decompress', 'reader_func', 'none', 'trace', 'type', '/path/to/data', 'import', 'follow', 'path', 'custom', 'perform', 'expect', 'tfdataexperimentalload', 'nest', 'shard', 'for', 'algorithm', 'default', 'saved_data', 'return', 'shape=', 'def', 'option', '=', '2', 'tempfil', 'A', 'exampl', 'datasetsinterleav', 'dtype=tfint64', 'specifi', 'one', 'data', 'requir', 'execut', 'i/o', 'exist', 'read', 'python', 'reader_func=custom_reader_func', 'tftensorspec', 'num_shard', 'note', 'compress', 'num_parallel_calls=autotun', 'new_dataset', 'tfdatadatasetelement_spec', 'argument', 'take', 'tftypespec', 'comput', 'usag', 'datasetsshuffl', 'ospathjoin', 'via', 'element', 'signatur', 'shuffl', 'shape', 'individu', 'infer', 'previous', 'contain', 'element_spec', 'function', 'x', 'use', '0', 'gzip', 'graph', 'point', 'control', 'order', 'need', 'save', '1', 'If', 'thi', 'singl', 'structur', 'present', 'support', 'dataset', 'load', 'path=', 'preserv', 'print', 'tempfilegettempdir', 'obtain']}"
546,"{'func name': '_update_notebook', 'comments': 'Updates notebook, once migration is done.\n\n\n', 'stemmed comments': ['done', 'notebook', 'migrat', 'updat']}"
547,"{'func name': 'is_mlir_bridge_enabled', 'comments': 'Returns true to if MLIR bridge should be enabled for tests.\n\n\n', 'stemmed comments': ['return', 'enabl', 'bridg', 'true', 'mlir', 'test']}"
548,"{'func name': 'is_tfrt_enabled', 'comments': 'Returns true to state TFRT should be enabled for Tensorflow tests.\n\n\n', 'stemmed comments': ['return', 'state', 'enabl', 'true', 'tfrt', 'tensorflow', 'test']}"
549,"{'func name': 'is_xla_enabled', 'comments': 'Returns true to state XLA should be enabled for Tensorflow tests.\n\n\n', 'stemmed comments': ['xla', 'return', 'state', 'enabl', 'true', 'tensorflow', 'test']}"
550,"{'func name': 'make_saveable_from_iterator', 'comments': ""Returns a SaveableObject for saving/restoring iterator state using Saver.\n\n\n##### Args\n* **iterator**: Iterator.\n\n* **external_state_policy**: A string that identifies how to handle input\n  pipelines that depend on external state. Possible values are\n  'ignore'\n\n##### Returns\n"", 'stemmed comments': ['arg', 'handl', 'return', 'pipelin', 'valu', 'iter', 'extern', 'saving/restor', 'state', 'A', 'external_state_polici', 'string', 'depend', 'input', 'ignor', 'saver', 'identifi', 'saveableobject', 'use', 'possibl']}"
551,"{'func name': 'get_next_as_optional', 'comments': 'Returns a `tf.experimental.Optional` with the next element of the iterator.\n\nIf the iterator has reached the end of the sequence, the returned `tf.experimental.Optional` will have no value.\n##### Args\n* **iterator**: A `tf.data.Iterator`.\n\n##### Returns\n', 'stemmed comments': ['return', 'sequenc', 'A', 'tfdataiter', 'arg', 'valu', 'next', 'reach', 'iter', 'If', 'end', 'element', 'tfexperimentalopt']}"
552,"{'func name': 'MetadataHasXlaRunOp', 'comments': ""Returns true if there are XlaRun kernels in run_metadata's timeline.\n\n\n"", 'stemmed comments': ['xlarun', 'return', 'run_metadata', 's', 'true', 'kernel', 'timelin']}"
553,"{'func name': 'enable_jit_nonstateful', 'comments': '', 'stemmed comments': []}"
554,"{'func name': 'experimental_jit_scope', 'comments': ""Enable or disable JIT compilation of operators within the scope.\n\nNOTE: This is an experimental feature.\n\nThe compilation is a hint and only supported on a best-effort basis.\n\nExample usage:\n\n```python with tf.xla.experimental.jit_scope(): c = tf.matmul(a, b)\n\n# compiled with tf.xla.experimental.jit_scope(compile_ops=False): d = tf.matmul(a, c)\n\n# not compiled with tf.xla.experimental.jit_scope( compile_ops=lambda node_def: 'matmul' in node_def.op.lower()): e = tf.matmul(a, b) + d\n\n# matmul is compiled, the addition is not. ```\n\nExample of `separate_compiled_gradients`:\n\n```python # In the example below, the computations for f, g and h will all be compiled # in separate scopes. with tf.xla.experimental.jit_scope( separate_compiled_gradients=True): f = tf.matmul(a, b) g = tf.gradients([f], [a, b], name='mygrads1') h = tf.gradients([f], [a, b], name='mygrads2') ```\n##### Args\n* **compile_ops**: Whether to enable or disable compilation in the scope.\n  Either a Python bool, or a callable that accepts the parameter\n  `node_def` and returns a python bool.\n\n* **separate_compiled_gradients**: If true put each gradient subgraph into a\n  separate compilation scope. This gives fine-grained control over which\n  portions of the graph will be compiled as a single unit. Compiling\n  gradients separately may yield better performance for some graphs.\n  The scope is named based on the scope of the forward computation as well\n  as the name of the gradients. As a result, the gradients will be compiled\n  in a scope that is separate from both the forward computation, and from\n  other gradients.\n\n"", 'stemmed comments': ['note', 'experiment', 'give', 'addit', 'graph', '[', 'the', 'arg', 'node_defoplow', 'result', 'jit', 'control', 'unit', 'forward', 'accept', 'return', 'compile_ops=lambda', 'usag', 'yield', 'separate_compiled_gradi', 'well', 'besteffort', 'h', '=', 'finegrain', 'basi', 'thi', 'name=mygrads1', 'compile_op', 'compil', 'If', 'singl', 'tfgradient', ']', 'callabl', 'whether', 'put', 'f', 'paramet', 'hint', 'gradient', 'may', 'scope', 'exampl', 'g', 'better', 'support', 'tfxlaexperimentaljit_scop', 'name=mygrads2', 'separate_compiled_gradients=tru', 'c', 'tfmatmul', 'portion', 'compile_ops=fals', 'base', 'perform', 'b', 'node_def', 'separ', 'matmul', 'either', 'enabl', 'featur', 'oper', 'In', 'name', 'e', 'python', 'bool', 'true', 'subgraph', 'As', 'within', 'comput', 'disabl']}"
555,"{'func name': '_decode_helper', 'comments': '', 'stemmed comments': []}"
556,"{'func name': 'should_skip_tpu_with_eager', 'comments': '', 'stemmed comments': []}"
557,"{'func name': 'is_default_strategy', 'comments': '', 'stemmed comments': []}"
558,"{'func name': 'tpu_combinations', 'comments': '', 'stemmed comments': []}"
559,"{'func name': '_replica_id', 'comments': '', 'stemmed comments': []}"
560,"{'func name': '_test_or_class_decorator', 'comments': 'Decorate a test or class with a decorator intended for one method.\n\nIf the test_or_class is a class: This will apply the decorator to all test methods in the class.\n\nIf the test_or_class is an iterable of already-parameterized test cases: This will apply the decorator to all the cases, and then flatten the resulting cross-product of test cases. This allows stacking the Keras parameterized decorators w/ each other, and to apply them to test methods that have already been marked with an absl parameterized decorator.\n\nOtherwise, treat the obj as a single method and apply the decorator directly.\n##### Args\n* **test_or_class**: A test method (that may have already been decorated with a\n  parameterized decorator, or a test class that extends\n  keras_parameterized.TestCase\n\n* **single_method_decorator**: A parameterized decorator intended for a single test method.\n\n##### Returns\n', 'stemmed comments': ['otherwis', 'single_method_decor', 'arg', 'alreadi', 'kera', 'result', 'mark', 'parameter', 'appli', 'crossproduct', 'return', 'flatten', 'stack', 'absl', 'obj', 'iter', 'If', 'thi', 'singl', 'allow', 'may', 'A', 'method', 'treat', 'alreadyparameter', 'intend', 'one', 'extend', 'decor', 'test', 'class', 'directli', 'test_or_class', 'case', 'keras_parameterizedtestcas', 'w/']}"
561,"{'func name': 'get_dataset', 'comments': '', 'stemmed comments': []}"
562,"{'func name': 'test_combinations_for_stateful_embedding_model', 'comments': '', 'stemmed comments': []}"
563,"{'func name': 'keras_tensor_from_tensor', 'comments': 'Convert a traced (composite)tensor to a representative KerasTensor.\n\n\n', 'stemmed comments': ['composit', 'repres', 'convert', 'kerastensor', 'trace', 'tensor']}"
564,"{'func name': 'create_central_storage_strategy', 'comments': 'Create a CentralStorageStrategy, using a GPU if it is available.\n\n\n', 'stemmed comments': ['creat', 'centralstoragestrategi', 'avail', 'use', 'gpu']}"
565,"{'func name': 'mnist_model', 'comments': 'Creates a MNIST model.\n\n\n', 'stemmed comments': ['model', 'creat', 'mnist']}"
566,"{'func name': '_exact_laplacian', 'comments': '', 'stemmed comments': []}"
567,"{'func name': '_exact_laplacian', 'comments': '', 'stemmed comments': []}"
568,"{'func name': 'exact_laplacian_kernel', 'comments': ""Computes exact Laplacian kernel value(s) for tensors x and y using stddev.\n\nThe Laplacian kernel for vectors u, v is defined as follows: K(u, v) = exp(-||u-v|| / stddev) where the norm is the l1-norm. x, y can be either vectors or matrices. If they are vectors, they must have the same dimension. If they are matrices, they must have the same number of columns. In the latter case, the method returns (as a matrix) K(u, v) values for all pairs (u, v) where u is a row from x and v is a row from y.\n##### Args\n* **x**: a tensor of rank 1 or 2. It's shape should be either [dim] or [m, dim].\n\n* **y**: a tensor of rank 1 or 2. It's shape should be either [dim] or [n, dim].\n\n* **stddev**: The width of the Gaussian kernel.\n\n##### Returns\n"", 'stemmed comments': ['/', '[', 'matric', 'the', 'pair', 'arg', 'column', 'norm', 'dimens', 'l1norm', 'return', 'laplacian', 'dim', 'width', 'exp', 'vector', 'valu', 'gaussian', 'kernel', '=', '||uv||', '2', '1', 'If', 'latter', 'must', 'rank', 'It', ']', 'method', 's', 'n', 'follow', 'shape', 'v', 'u', 'tensor', 'defin', 'K', 'matrix', 'either', 'x', 'case', 'In', 'use', 'stddev', 'row', 'number', 'exact', 'comput']}"
569,"{'func name': '_get_default_scale', 'comments': '', 'stemmed comments': []}"
570,"{'func name': 'get_registered_kernels_for_op', 'comments': 'Returns a KernelList proto of registered kernels for a given op.\n\n\n##### Args\n* **name**: A string representing the name of the op whose kernels to retrieve.\n\n', 'stemmed comments': ['whose', 'return', 'repres', 'regist', 'proto', 'A', 'retriev', 'op', 'arg', 'name', 'string', 'given', 'kernel', 'kernellist']}"
571,"{'func name': 'keyword_args_only', 'comments': 'Decorator for marking specific function accepting keyword args only.\n\nThis decorator raises a `ValueError` if the input `func` is called with any non-keyword args. This prevents the caller from providing the arguments in wrong order.\n##### Args\n* **func**: The function or method needed to be decorated.\n\n##### Returns\n', 'stemmed comments': ['rais', 'the', 'specif', 'arg', 'wrong', 'mark', 'argument', 'order', 'accept', 'return', 'need', 'nonkeyword', 'provid', 'thi', 'func', 'valueerror', 'method', 'call', 'input', 'decor', 'function', 'keyword', 'caller', 'prevent']}"
572,"{'func name': '_create_pod_list', 'comments': '', 'stemmed comments': []}"
573,"{'func name': 'cross_entropy', 'comments': 'Computes the (Shannon) cross entropy.\n\nDenote two distributions by `P` (`ref`) and `Q` (`other`). Assuming `P, Q` are absolutely continuous with respect to one another and permit densities `p(x) dr(x)` and `q(x) dr(x)`, (Shanon) cross entropy is defined as:\n\n```none H[P, Q] = E_p[-log q(X)] = -int_F p(x) log q(x) dr(x) ```\n\nwhere `F` denotes the support of the random variable `X ~ P`.\n##### Args\n* **ref**: `tfd.Distribution` instance.\n\n* **other**: `tfd.Distribution` instance.\n\n* **allow_nan_stats**: Python `bool`, default `True`. When `True`,\n  statistics (e.g., mean, mode, variance) use the value ""`NaN`"" to\n  indicate the result is undefined. When `False`, an exception is raised\n  if one or more of the statistic\'s batch members are undefined.\n\n* **name**: Python `str` prepended to names of ops created by this function.\n\n##### Returns\n* **cross_entropy**: `ref.dtype` `Tensor` with shape `[B1, ..., Bn]`\n  representing `n` different calculations of (Shanon) cross entropy.\n\n', 'stemmed comments': ['rais', 'B1', 'arg', 'densiti', 'mean', 'p', 'q', 'indic', 'P', 'none', ']', 'Q', 'variabl', 'log', 'member', 'two', 'batch', 'X', 'varianc', 'allow_nan_stat', 'instanc', 'when', 'mode', 'result', 'tfddistribut', 'cross_entropi', 'default', 'return', 'assum', 'valu', 'anoth', '=', 'F', 'calcul', '~', 'e_p', 'one', 'creat', 'repres', 'op', 'name', 'denot', 'python', 'true', '[', 'entropi', 'ref', 'undefin', 'n', 's', 'eg', 'shape', 'H', 'defin', 'statist', 'function', 'x', 'use', 'random', 'nan', 'shannon', 'shanon', 'permit', 'prepend', 'except', 'fals', 'continu', 'distribut', 'absolut', 'respect', 'dr', 'int_f', 'support', 'str', 'differ', 'tensor', 'cross', 'refdtyp', 'bool', 'Bn', 'comput']}"
574,"{'func name': 'make_l2norm_shared_epsilon_tests', 'comments': 'Regression test for a bug (b/122651451).\n\n\n', 'stemmed comments': ['bug', 'b/122651451', 'regress', 'test']}"
575,"{'func name': 'make_l2norm_tests', 'comments': 'Make a set of tests to do l2norm.\n\n\n', 'stemmed comments': ['set', 'l2norm', 'make', 'test']}"
576,"{'func name': 'load_labels', 'comments': '', 'stemmed comments': []}"
577,"{'func name': 'load_labels', 'comments': '', 'stemmed comments': []}"
578,"{'func name': 'main', 'comments': 'Entry point for script, converts flags to arguments.\n\n\n', 'stemmed comments': ['script', 'point', 'flag', 'entri', 'convert', 'argument']}"
579,"{'func name': 'main', 'comments': 'Entry point for script, converts flags to arguments.\n\n\n', 'stemmed comments': ['script', 'point', 'flag', 'entri', 'convert', 'argument']}"
580,"{'func name': 'try_import', 'comments': '', 'stemmed comments': []}"
581,"{'func name': 'create_mirrored_strategy', 'comments': '', 'stemmed comments': []}"
582,"{'func name': 'get_config', 'comments': '', 'stemmed comments': []}"
583,"{'func name': 'is_builtin_layer', 'comments': '', 'stemmed comments': []}"
584,"{'func name': 'gather_non_trainable_weights', 'comments': 'Lists the non-trainable weights for an object with sub-layers.\n\n\n##### Args\n* **trainable**: Whether the object collecting the variables is trainable.\n\n* **sub_layers**: A flat list of Layer objects owned by this object, to collect\n  variables from.\n\n* **extra_variables**: Any extra variables to include. Their `.trainable` property\n  is used to categorize them.\n\n##### Returns\n', 'stemmed comments': ['arg', 'includ', 'ani', 'sublay', 'object', 'properti', 'return', 'own', 'list', 'trainabl', 'layer', 'whether', 'extra_vari', 'A', 'weight', 'variabl', 'categor', 'their', 'flat', 'extra', 'collect', 'sub_lay', 'use', 'nontrain']}"
585,"{'func name': '_is_permute', 'comments': '', 'stemmed comments': []}"
586,"{'func name': 'make_leaky_relu_tests', 'comments': 'Make a set of tests to do LeakyRelu.\n\n\n', 'stemmed comments': ['set', 'leakyrelu', 'make', 'test']}"
587,"{'func name': '_maybe_serialized', 'comments': '', 'stemmed comments': []}"
588,"{'func name': 'deserialize', 'comments': '', 'stemmed comments': []}"
589,"{'func name': 'noisy_linear_cosine_decay', 'comments': ""Applies noisy linear cosine decay to the learning rate.\n\nNote that linear cosine decay is more aggressive than cosine decay and larger initial learning rates can typically be used.\n\nWhen training a model, it is often recommended to lower the learning rate as the training progresses.\n\nThis function applies a noisy linear cosine decay function to a provided initial learning rate. It requires a `global_step` value to compute the decayed learning rate. You can just pass a TensorFlow variable that you increment at each training step.\n\nThe function returns the decayed learning rate.\n\nIt is computed as: ```python global_step = min(global_step, decay_steps) linear_decay = (decay_steps\n\n- global_step) / decay_steps) cosine_decay = 0.5 * ( 1 + cos(pi * 2 * num_periods * global_step / decay_steps)) decayed = (alpha + linear_decay + eps_t) * cosine_decay + beta decayed_learning_rate = learning_rate * decayed ``` where eps_t is 0-centered gaussian noise with variance initial_variance / (1 + global_step) ** variance_decay\n\nExample usage: ```python decay_steps = 1000 lr_decayed = noisy_linear_cosine_decay( learning_rate, global_step, decay_steps) ```\n##### Args\n* **learning_rate**: A scalar `float32` or `float64` Tensor or a Python number.\n  The initial learning rate.\n\n* **global_step**: A scalar `int32` or `int64` `Tensor` or a Python number. Global\n  step to use for the decay computation.\n\n* **decay_steps**: A scalar `int32` or `int64` `Tensor` or a Python number. Number\n  of steps to decay over.\n\n* **initial_variance**: initial variance for the noise. See computation above.\n\n* **variance_decay**: decay for the noise's variance. See computation above.\n\n* **num_periods**: Number of periods in the cosine part of the decay. See\n  computation above.\n\n* **alpha**: See computation above.\n\n* **beta**: See computation above.\n\n* **name**: String.  Optional name of the operation.  Defaults to\n  'NoisyLinearCosineDecay'.\n\n##### Returns\n"", 'stemmed comments': ['the', 'arg', 'appli', 'see', 'gaussian', 'global', 'float64', 'often', 'It', 'variabl', 'initial_vari', 'co', 'int32', 'scalar', 'varianc', 'number', '/', 'pass', 'when', 'initi', 'step', 'default', 'return', 'global_step', 'valu', 'option', '=', '2', 'noisy_linear_cosine_decay', 'decay_step', 'A', 'decay', 'exampl', 'eps_t', 'learn', 'period', 'model', 'requir', 'name', 'python', 'int64', 'note', 'aggress', 'variance_decay', 'typic', 'usag', 'learning_r', 'train', 'progress', 's', 'string', 'pi', 'float32', 'you', 'function', 'use', 'lower', 'min', '1000', 'rate', 'linear_decay', 'nois', 'noisylinearcosinedecay', '05', 'noisi', 'decayed_learning_r', 'larger', 'recommend', 'beta', 'provid', '1', 'thi', '0center', 'alpha', 'lr_decay', 'cosin', 'cosine_decay', 'tensor', 'tensorflow', 'part', 'increment', 'num_period', 'oper', 'linear', 'comput']}"
590,"{'func name': 'get_test_data', 'comments': '', 'stemmed comments': []}"
591,"{'func name': 'make_less_equal_tests', 'comments': 'Make a set of tests to do less_equal.\n\n\n', 'stemmed comments': ['set', 'make', 'less_equ', 'test']}"
592,"{'func name': 'make_less_tests', 'comments': 'Make a set of tests to do less.\n\n\n', 'stemmed comments': ['set', 'less', 'make', 'test']}"
593,"{'func name': 'lift_to_graph', 'comments': ""Copies the tensor and all its inputs recursively to the outer graph.\n\n\n##### Args\n* **tensors**: The Tensors to lift.\n\n* **graph**: The graph to lift to.\n\n* **sources**: Optional sequence of nodes to start from. If omitted the whole\n  subgraph which feeds into `init_tensor` is lifted.\n\n* **disallowed_placeholders**: An optional set of ops which may not appear in the\n  lifted graph. Defaults to all placeholders.\n\n* **add_sources**: A boolean indicating whether placeholders which are not in\n  sources should be allowed.\n\n* **handle_captures**: A boolean indicating whether to re-capture s in the new\n  graph or simply create a vanilla placeholder.\n\n* **base_graph**: The graph from which to lift ops. This will be inferred if not\n  specified.\n\n* **op_map**: A map contains all the existing nodes that have been lifted to the\n  destination graph, so they won't be lifted and copied again.\n\n##### Returns\n"", 'stemmed comments': ['start', 'map', 'add_sourc', 'base_graph', 'graph', 'simpli', 'the', 'destin', 'arg', 'omit', 'default', 'nt', 'return', 'new', 'copi', 'op_map', 'option', 'indic', 'whole', 'boolean', 'recurs', 'If', 'thi', 'allow', 'node', 'disallowed_placehold', 'An', 'may', 'sequenc', 'placehold', 'A', 'whether', 'wo', 'appear', 'handle_captur', 'recaptur', 'input', 'specifi', 'tensor', 'outer', 'sourc', 'infer', 'feed', 'lift', 'creat', 'contain', 'vanilla', 'op', 'set', 'exist', 'subgraph', 'init_tensor']}"
594,"{'func name': '_GetBandedTriangularSolveGradientTest', 'comments': '', 'stemmed comments': []}"
595,"{'func name': '_MatmulExtractingThreeDiagonals', 'comments': 'Multiplies matrices and extracts three diagonals from the product.\n\nWith sizes M x K and K x M, this function takes O(MK) time and O(M) space, while using math_ops.matmul, and then extracting the diagonals would take O(M^2 K) time and O(M^2) space.\n##### Args\n* **x**: first matrix\n\n* **y_tr**: second matrix transposed\n\n##### Returns\n', 'stemmed comments': ['O', 'matric', 'arg', 'multipli', 'take', 'return', 'time', 'with', 'three', 'space', 'y_tr', 'm^2', 'transpos', 'math_opsmatmul', 'extract', 'M', 'K', 'would', 'matrix', 'function', 'diagon', 'x', 'use', 'product', 'size', 'first', 'MK', 'second']}"
596,"{'func name': '_lu_solve_assertions', 'comments': 'Returns list of assertions related to `lu_solve` assumptions.\n\n\n', 'stemmed comments': ['assert', 'return', 'relat', 'assumpt', 'lu_solv', 'list']}"
597,"{'func name': 'eye', 'comments': 'Construct an identity matrix, or a batch of matrices.\n\nSee `linalg_ops.eye`.\n', 'stemmed comments': ['linalg_opsey', 'see', 'matrix', 'matric', 'ident', 'batch', 'construct']}"
598,"{'func name': 'make_tensor_hiding_attributes', 'comments': '', 'stemmed comments': []}"
599,"{'func name': 'norm', 'comments': ""Computes the norm of vectors, matrices, and tensors.\n\nThis function can compute several different vector norms (the 1-norm, the Euclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0) and matrix norms (Frobenius, 1-norm, 2-norm and inf-norm).\n##### Args\n* **tensor**: `Tensor` of types `float32`, `float64`, `complex64`, `complex128`\n\n* **ord**: Order of the norm. Supported values are 'fro', 'euclidean',\n  `1`, `2`, `np.inf` and any positive real number yielding the corresponding\n  p-norm. Default is 'euclidean' which is equivalent to Frobenius norm if\n  `tensor` is a matrix and equivalent to 2-norm for vectors.\n  Some restrictions apply\n\n* **axis**: If `axis` is `None` (the default), the input is considered a vector\n  and a single vector norm is computed over the entire set of values in the\n  tensor, i.e. `norm(tensor, ord=ord)` is equivalent to\n  `norm(reshape(tensor, [-1]), ord=ord)`.\n  If `axis` is a Python integer, the input is considered a batch of vectors,\n  and `axis` determines the axis in `tensor` over which to compute vector\n  norms.\n  If `axis` is a 2-tuple of Python integers it is considered a batch of\n  matrices and `axis` determines the axes in `tensor` over which to compute\n  a matrix norm.\n  Negative indices are supported. Example\n\n* **keepdims**: If True, the axis indicated in `axis` are kept with size 1.\n  Otherwise, the dimensions in `axis` are removed from the output shape.\n\n* **name**: The name of the op.\n\n* **keep_dims**: Deprecated alias for `keepdims`.\n\n##### Returns\n* **output**: A `Tensor` of the same type as tensor, containing the vector or\n  matrix norms. If `keepdims` is True then the rank of output is equal to\n  the rank of `tensor`. Otherwise, if `axis` is none the output is a scalar,\n  if `axis` is an integer, the rank of `output` is one less than the rank\n  of `tensor`, if `axis` is a 2-tuple the rank of `output` is two less\n  than the rank of `tensor`.\n\n"", 'stemmed comments': ['restrict', 'the', 'arg', 'appli', '>', 'p', 'kept', 'yield', 'keep_dim', 'ie', 'float64', 'indic', 'none', 'ord=ord', 'integ', 'rank', ']', 'alia', 'type', 'scalar', 'equival', 'two', 'batch', 'npinf', 'sever', 'complex128', 'number', 'norm', 'matric', 'determin', 'less', 'default', 'return', 'vector', 'valu', '2', 'some', 'euclidean', 'consid', 'A', 'exampl', 'complex64', 'infnorm', 'one', 'axe', 'real', 'axi', 'posit', 'op', 'name', 'python', 'true', 'otherwis', '[', 'remov', 'dimens', 'fro', '2tupl', 'pnorm', '2norm', 'equal', 'shape', 'frobeniu', 'float32', 'input', 'entir', 'contain', 'function', '1norm', '0', 'ord', 'neg', 'output', 'gener', 'order', '1', 'If', 'thi', 'singl', 'support', 'correspond', 'differ', 'tensor', 'keepdim', 'deprec', 'matrix', 'reshap', 'set', 'size', 'comput']}"
600,"{'func name': '_type', 'comments': 'Returns the type name constant (e.g. _TRIL) for operator.\n\n\n', 'stemmed comments': ['return', 'type', '_tril', 'oper', 'name', 'eg', 'constant']}"
601,"{'func name': 'inverse', 'comments': 'Get the Inverse associated to lin_op_a.\n\n\n##### Args\n* **lin_op_a**: The LinearOperator to decompose.\n\n* **name**: Name to use for this operation.\n\n##### Returns\n', 'stemmed comments': ['decompos', 'return', 'linearoper', 'the', 'arg', 'invers', 'name', 'use', 'associ', 'oper', 'get', 'lin_op_a']}"
602,"{'func name': '_block_diag_dense', 'comments': 'Convert a list of blocks, into a dense block diagonal matrix.\n\n\n', 'stemmed comments': ['dens', 'matrix', 'diagon', 'convert', 'block', 'list']}"
603,"{'func name': '_block_lower_triangular_dense', 'comments': 'Convert a list of blocks into a dense blockwise lower-triangular matrix.\n\n\n', 'stemmed comments': ['dens', 'lowertriangular', 'matrix', 'convert', 'blockwis', 'block', 'list']}"
604,"{'func name': '_to_complex', 'comments': '', 'stemmed comments': []}"
605,"{'func name': '_kronecker_dense', 'comments': 'Convert a list of factors, into a dense Kronecker product.\n\n\n', 'stemmed comments': ['dens', 'kroneck', 'factor', 'convert', 'product', 'list']}"
606,"{'func name': '_rotate_last_dim', 'comments': 'Rotate the last dimension either left or right.\n\n\n', 'stemmed comments': ['left', 'either', 'last', 'rotat', 'dimens', 'right']}"
607,"{'func name': 'random_normal_correlated_columns', 'comments': 'Batch matrix with (possibly complex) Gaussian entries and correlated cols.\n\n\n##### Args\n* **shape**: Python list of integers.\n  Shape of the returned tensor.  Must be at least length two.\n\n* **mean**: `Tensor` giving mean of normal to sample from.\n\n* **stddev**: `Tensor` giving stdev of normal to sample from.\n\n* **dtype**: `TensorFlow` `dtype` or numpy dtype\n\n* **eps**: Distance each column is perturbed from the low-dimensional subspace.\n\n* **seed**: Python integer seed for the RNG.\n\n##### Returns\n', 'stemmed comments': ['give', 'length', 'stdev', 'complex', 'arg', 'column', 'mean', 'return', 'sampl', 'correl', 'gaussian', 'list', 'subspac', 'integ', 'must', 'numpi', 'entri', 'lowdimension', 'least', 'shape', 'rng', 'two', 'ep', 'tensor', 'batch', 'tensorflow', 'distanc', 'seed', 'col', 'matrix', 'dtype', 'perturb', 'python', 'stddev', 'normal', 'possibl']}"
608,"{'func name': '_to_complex', 'comments': '', 'stemmed comments': []}"
609,"{'func name': 'split_arg_into_blocks', 'comments': ""Split `x` into blocks matching `operators`'s `domain_dimension`.\n\nSpecifically, if we have a blockwise lower-triangular matrix, with block sizes along the diagonal `[M_j, M_j] j = 0,1,2..J`,\n\nthis method splits `arg` on `axis` into `J` tensors, whose shape at `axis` is `M_j`.\n##### Args\n* **block_dims**: Iterable of `TensorShapes`.\n\n* **block_dims_fn**: Callable returning an iterable of `Tensor`s.\n\n* **arg**: `Tensor`. `arg` is split into `J` tensors.\n\n* **axis**: Python `Integer` representing the axis to split `arg` on.\n\n##### Returns\n"", 'stemmed comments': ['whose', 'lowertriangular', 'j', 'split', '[', 'specif', 'arg', 'match', 'return', 'tensorshap', '=', 'iter', 'integ', ']', 'callabl', 'method', 's', 'domain_dimens', 'shape', 'block_dims_fn', 'tensor', 'J', 'axi', 'matrix', 'm_j', '012', 'along', 'block_dim', 'repres', 'x', 'diagon', 'oper', 'blockwis', 'python', 'block', 'size']}"
610,"{'func name': '_trace', 'comments': '', 'stemmed comments': []}"
611,"{'func name': 'transform', 'comments': '', 'stemmed comments': []}"
612,"{'func name': '_build_element_shape', 'comments': ""Converts shape to a format understood by list_ops for element_shape.\n\nIf `shape` is already a `Tensor` it is returned as-is. We do not perform a type check here.\n\nIf shape is None or a TensorShape with unknown rank, -1 is returned.\n\nIf shape is a scalar, an int32 tensor with empty list is returned. Note we do directly return an empty list since ops.convert_to_tensor would conver it to a float32 which is not a valid type for element_shape.\n\nIf shape is a sequence of dims, None's in the list are replaced with -1. We do not check the dtype of the other dims.\n##### Args\n* **shape**: Could be None, Tensor, TensorShape or a list of dims (each dim could\n  be a None, scalar or Tensor).\n\n##### Returns\n"", 'stemmed comments': ['note', 'format', 'We', 'arg', 'list_op', 'alreadi', 'check', 'element_shap', 'return', 'unknown', 'dim', 'tensorshap', 'none', '1', 'list', 'If', 'conver', 'valid', 'rank', 'sequenc', 'type', 's', 'convert', 'int32', 'scalar', 'shape', 'asi', 'understood', 'float32', 'tensor', 'perform', 'could', 'would', 'dtype', 'directli', 'opsconvert_to_tensor', 'replac', 'sinc', 'empti']}"
613,"{'func name': 'transform', 'comments': '', 'stemmed comments': []}"
614,"{'func name': 'resolve', 'comments': 'Resolves the live symbols at the exit of control flow statements.\n\n\n##### Args\n* **node**: ast.AST\n\n* **source_info**: transformer.SourceInfo\n\n* **graphs**: Dict[ast.FunctionDef, cfg.Graph]\n\n* **include_annotations**: Bool, whether type annotations should be included in\n  the analysis.\n\n##### Returns\n', 'stemmed comments': ['symbol', 'annot', 'analysi', 'graph', '[', 'arg', 'includ', 'live', 'control', 'astfunctiondef', 'source_info', 'statement', 'astast', 'return', 'include_annot', 'dict', 'node', ']', 'whether', 'cfggraph', 'type', 'exit', 'flow', 'transformersourceinfo', 'resolv', 'bool']}"
615,"{'func name': 'load_library', 'comments': 'Loads a TensorFlow plugin.\n\n""library_location"" can be a path to a specific shared object, or a folder. If it is a folder, all shared objects that are named ""libtfkernel*"" will be loaded. When the library is loaded, kernels registered in the library via the `REGISTER_*` macros are made available in the TensorFlow process.\n##### Args\n* **library_location**: Path to the plugin or the folder of plugins.\n  Relative or absolute filesystem path to a dynamic library file or folder.\n\n##### Returns\n', 'stemmed comments': ['library_loc', 'regist', 'when', 'specif', 'arg', 'made', 'register_', 'process', 'filesystem', 'object', 'dynam', 'return', 'rel', 'kernel', 'macro', 'If', 'share', 'via', 'absolut', 'path', 'load', 'tensorflow', 'file', 'libtfkernel', 'avail', 'name', 'librari', 'folder', 'plugin']}"
616,"{'func name': 'cycle', 'comments': '', 'stemmed comments': []}"
617,"{'func name': 'load', 'comments': 'Load a v1-style SavedModel as an object.\n\n\n', 'stemmed comments': ['v1style', 'savedmodel', 'load', 'object']}"
618,"{'func name': '_get_keras_attr', 'comments': '', 'stemmed comments': []}"
619,"{'func name': 'load_internal', 'comments': 'Loader implementation.\n\n\n', 'stemmed comments': ['loader', 'implement']}"
620,"{'func name': 'load_ast', 'comments': 'Loads the given AST as a Python module.\n\nCompiling the AST code this way ensures that the source code is readable by e.g. `pdb` or `inspect`.\n##### Args\n* **nodes**: Union[ast.AST, Iterable[ast.AST]], the code to compile, as an AST\n  object.\n\n* **indentation**: Text, the string to use for indentation.\n\n* **include_source_map**: bool, whether return a source map.\n\n* **delete_on_exit**: bool, whether to delete the temporary file used for\n  compilation on exit.\n\n##### Returns\n* **Tuple[module, Text, Dict[LineLocation, OriginInfo]], containing**: \n\n', 'stemmed comments': ['map', 'tupl', '[', 'inspect', 'delet', 'arg', 'delete_on_exit', 'union', 'temporari', 'way', 'object', 'origininfo', 'return', 'code', 'astast', 'lineloc', 'dict', 'ensur', 'iter', 'text', 'compil', 'node', ']', 'whether', 'readabl', 'exit', 'string', 'eg', 'load', 'ast', 'include_source_map', 'sourc', 'file', 'contain', 'indent', 'use', 'given', 'python', 'pdb', 'bool', 'modul']}"
621,"{'func name': 'load', 'comments': ""Loads the model from a SavedModel as specified by tags.\n\n\n##### Args\n* **sess**: The TensorFlow session to restore the variables.\n\n* **tags**: Set of string tags to identify the required MetaGraphDef. These should\n    correspond to the tags used when saving the variables using the\n    SavedModel `save()` API.\n\n* **export_dir**: Directory in which the SavedModel protocol buffer and variables\n    to be loaded are located.\n\n* **import_scope**: Optional `string` -- if specified, prepend this string\n    followed by '/' to all loaded tensor names. This scope is applied to\n    tensor instances loaded into the passed session, but it is *not* written\n    through to the static `MetaGraphDef` protocol buffer that is returned.\n\n* ****saver_kwargs**: Optional keyword arguments passed through to Saver.\n\n##### Returns\n"", 'stemmed comments': ['/', 'instanc', 'pass', 'the', 'session', 'arg', 'prepend', 'appli', 'static', 'argument', 'return', 'import_scop', 'save', 'option', 'export_dir', 'locat', 'thi', 'saver_kwarg', 'tag', 'these', 'api', 'variabl', 'written', 'scope', 'string', 'follow', 'restor', 'load', 'correspond', 'protocol', 'specifi', 'buffer', 'saver', 'tensor', 'tensorflow', 'model', 'sess', 'requir', 'identifi', 'directori', 'name', 'set', 'metagraphdef', 'use', 'savedmodel', 'keyword']}"
622,"{'func name': 'build_graph_helper', 'comments': '', 'stemmed comments': []}"
623,"{'func name': 'load_ast', 'comments': 'Loads the given AST as a Python module.\n\nCompiling the AST code this way ensures that the source code is readable by e.g. `pdb` or `inspect`.\n##### Args\n* **nodes**: Union[ast.AST, Iterable[ast.AST]], the code to compile, as an AST\n  object.\n\n* **indentation**: Text, the string to use for indentation.\n\n* **include_source_map**: bool, whether return a source map.\n\n* **delete_on_exit**: bool, whether to delete the temporary file used for\n  compilation on exit.\n\n##### Returns\n* **Tuple[module, Text, Dict[LineLocation, OriginInfo]], containing**: \n\n', 'stemmed comments': ['map', 'tupl', '[', 'inspect', 'delet', 'arg', 'delete_on_exit', 'union', 'temporari', 'way', 'object', 'origininfo', 'return', 'code', 'astast', 'lineloc', 'dict', 'ensur', 'iter', 'text', 'compil', 'node', ']', 'whether', 'readabl', 'exit', 'string', 'eg', 'load', 'ast', 'include_source_map', 'sourc', 'file', 'contain', 'indent', 'use', 'given', 'python', 'pdb', 'bool', 'modul']}"
624,"{'func name': 'make_local_response_norm_tests', 'comments': 'Make a set of tests to do local_response_norm.\n\n\n', 'stemmed comments': ['set', 'make', 'local_response_norm', 'test']}"
625,"{'func name': 'copy_model_weights', 'comments': '', 'stemmed comments': []}"
626,"{'func name': 'make_2d', 'comments': 'Reshapes an N-dimensional tensor into a 2D tensor.\n\nDimensions before (excluding) and after (including) `split_dim` are grouped together.\n\nArguments: tensor: a tensor of shape `(d0, ..., d(N-1))`. split_dim: an integer from 1 to N-1, index of the dimension to group dimensions before (excluding) and after (including).\n##### Returns\n', 'stemmed comments': ['integ', 'ndimension', '1', 'return', 'dimens', 'd0', 'split_dim', 'togeth', 'reshap', 'index', 'exclud', 'includ', 'group', 'shape', 'N1', 'tensor', 'argument', '2D']}"
627,"{'func name': 'make_log_softmax_tests', 'comments': 'Make a set of tests to do log_softmax.\n\n\n', 'stemmed comments': ['set', 'log_softmax', 'make', 'test']}"
628,"{'func name': 'scalar_summary', 'comments': ""Outputs a `Summary` protocol buffer with scalar values.\n\nThis ops is deprecated. Please switch to tf.summary.scalar. For an explanation of why this op was deprecated, and information on how to migrate, look ['here'](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/deprecated/__init__.py)\n\nThe input `tags` and `values` must have the same shape.\n\nThe generated summary has a summary value for each tag-value pair in `tags` and `values`.\n##### Args\n* **tags**: A `string` `Tensor`.  Tags for the summaries.\n\n* **values**: A real numeric Tensor.  Values for the summaries.\n\n* **collections**: Optional list of graph collections keys. The new summary op is\n  added to these collections. Defaults to `[GraphKeys.SUMMARIES]`.\n\n* **name**: A name for the operation (optional).\n\n##### Returns\n"", 'stemmed comments': ['graphkeyssummari', 'graph', '[', 'pair', 'the', 'arg', 'switch', 'for', 'tagvalu', 'default', 'return', 'tfsummaryscalar', 'new', 'ad', 'valu', 'option', 'here', 'list', 'inform', 'thi', 'must', ']', 'tag', 'gener', 'A', 'string', 'migrat', 'scalar', 'protocol', 'buffer', 'input', 'shape', 'numer', 'tensor', 'deprec', 'real', 'http', '//githubcom/tensorflow/tensorflow/blob/master/tensorflow/contrib/deprecated/__init__pi', 'collect', 'key', 'op', 'oper', 'name', 'pleas', 'explan', 'summari', 'output', 'look']}"
629,"{'func name': 'make_logical_xor_tests', 'comments': 'Make a set of tests to do logical_xor, test logical_not as well.\n\n\n', 'stemmed comments': ['make', 'well', 'set', 'logical_xor', 'logical_not', 'test']}"
630,"{'func name': 'transform', 'comments': '', 'stemmed comments': []}"
631,"{'func name': 'not_eq', 'comments': 'Functional form of ""not-equal"".\n\n\n', 'stemmed comments': ['form', 'function', 'notequ']}"
632,"{'func name': 'index_to_string_table_from_tensor', 'comments': 'Returns a lookup table that maps a `Tensor` of indices into strings.\n\nThis operation constructs a lookup table to map int64 indices into string values. The mapping is initialized from a string `vocabulary_list` 1-D `Tensor` where each element is a value and the corresponding index within the tensor is the key.\n\nAny input which does not have a corresponding index in \'vocabulary_list\' (an out-of-vocabulary entry) is assigned the `default_value`\n\nThe underlying table must be initialized by calling `session.run(tf.compat.v1.tables_initializer())` or `session.run(table.init())` once.\n\nElements in `vocabulary_list` cannot have duplicates, otherwise when executing the table initializer op, it will throw a `FailedPreconditionError`.\n\nSample Usages:\n\n```python vocabulary_list = tf.constant([""emerson"", ""lake"", ""palmer""]) indices = tf.constant([1, 5], tf.int64) table = tf.lookup.index_to_string_table_from_tensor( vocabulary_list, default_value=""UNKNOWN"") values = table.lookup(indices) ... tf.compat.v1.tables_initializer().run()\n\nvalues.eval() ==> [""lake"", ""UNKNOWN""] ```\n##### Args\n* **vocabulary_list**: A 1-D string `Tensor` that specifies the strings to map\n  from indices.\n\n* **default_value**: The value to use for out-of-vocabulary indices.\n\n* **name**: A name for this op (optional).\n\n##### Returns\n', 'stemmed comments': ['map', 'otherwis', 'valuesev', '[', '1D', 'run', 'the', 'sessionrun', 'tableinit', 'palmer', 'arg', 'index', 'underli', 'lookup', 'ani', 'initi', 'tflookupindex_to_string_table_from_tensor', '>', 'return', 'unknown', 'tablelookup', 'usag', 'sampl', 'duplic', 'valu', 'indic', '=', 'lake', 'tfint64', 'option', '1', 'emerson', 'thi', 'tfcompatv1tables_initi', 'element', 'throw', 'must', ']', 'tfconstant', 'A', 'assign', 'call', 'string', 'entri', 'failedpreconditionerror', 'default_value=', 'vocabulary_list', 'correspond', 'input', 'specifi', 'outofvocabulari', 'tensor', 'execut', 'tabl', 'key', 'oper', 'default_valu', 'op', '==', 'python', 'use', '5', 'name', 'within', 'int64', 'construct']}"
633,"{'func name': '_get_strategy', 'comments': '', 'stemmed comments': []}"
634,"{'func name': 'create_mirrored_strategy', 'comments': '', 'stemmed comments': []}"
635,"{'func name': 'create_identity_with_grad_check_fn', 'comments': ""Returns a function that asserts it's gradient has a certain value.\n\nThis serves as a hook to assert intermediate gradients have a certain value. This returns an identity function. The identity's gradient function is also the identity function, except it asserts that the gradient equals `expected_gradient` and has dtype `expected_dtype`.\n##### Args\n* **expected_gradient**: The gradient function asserts that the gradient is this\n  value.\n\n* **expected_dtype**: The gradient function asserts the gradient has this dtype.\n\n##### Returns\n"", 'stemmed comments': ['the', 'arg', 'expected_gradi', 'intermedi', 'except', 'also', 'assert', 'return', 'valu', 'ident', 'thi', 'certain', 'hook', 'gradient', 's', 'equal', 'expected_dtyp', 'serv', 'dtype', 'function']}"
636,"{'func name': 'strategy_supports_loss_scaling', 'comments': 'Returns True if the current Strategy supports loss scaling.\n\n\n', 'stemmed comments': ['return', 'strategi', 'current', 'loss', 'support', 'true', 'scale']}"
637,"{'func name': '_get_example_iter', 'comments': '', 'stemmed comments': []}"
638,"{'func name': 'get', 'comments': '', 'stemmed comments': []}"
639,"{'func name': 'get', 'comments': 'Get a loss scale object.\n\n\n', 'stemmed comments': ['scale', 'get', 'loss', 'object']}"
640,"{'func name': 'create_mirrored_strategy', 'comments': '', 'stemmed comments': []}"
641,"{'func name': '_compute_gradients_until_finite', 'comments': 'Compute gradients and update the loss scale until the gradients are finite.\n\nThis must be called in a cross-replica context.\n\nThis is a function instead of a method of LossScaleGradientTape, as the `self` parameter would be meaningless. There is one LossScaleGradientTape per replica, but this function is called once total (not per replica), so there cannot be a singular `self` parameter.\n##### Args\n* **distribution**: The distribution strategy in effect.\n\n* **loss_scale_gradient_tapes**: A PerReplica value of LossScaleGradientTapes.\n  Contains the LossScaleGradientTape of each replica.\n\n* **loss_scale**: The loss scale to use to scale the loss and unscale the\n  gradient.\n\n* **target**: a list or nested structure of Tensors or Variables to be\n  differentiated.\n\n* **sources**: a list or nested structure of Tensors or Variables. `target` will\n  be differentiated against elements in `sources`.\n\n* **output_gradients**: Passed to GradientTape.gradient\n\n* **unconnected_gradients**: Pass to GradientTape.gradient.\n\n##### Returns\n', 'stemmed comments': ['pass', 'strategi', 'the', 'loss', 'arg', 'nest', 'differenti', 'loss_scal', 'return', 'gradienttapegradi', 'self', 'distribut', 'valu', 'crossreplica', 'list', 'there', 'thi', 'scale', 'loss_scale_gradient_tap', 'instead', 'unscal', 'must', 'element', 'structur', 'A', 'gradient', 'method', 'call', 'lossscalegradienttap', 'paramet', 'variabl', 'unconnected_gradi', 'singular', 'meaningless', 'one', 'tensor', 'sourc', 'target', 'would', 'contain', 'output_gradi', 'function', 'total', 'effect', 'updat', 'use', 'per', 'replica', 'finit', 'perreplica', 'context', 'comput']}"
642,"{'func name': 'sparse_softmax_cross_entropy', 'comments': 'Cross-entropy loss using `tf.nn.sparse_softmax_cross_entropy_with_logits`.\n\n`weights` acts as a coefficient for the loss. If a scalar is provided, then the loss is simply scaled by the given value. If `weights` is a tensor of shape `[batch_size]`, then the loss weights apply to each corresponding sample.\n##### Args\n* **labels**: `Tensor` of shape `[d_0, d_1, ..., d_{r-1}]` (where `r` is rank of\n  `labels` and result) and dtype `int32` or `int64`. Each entry in `labels`\n  must be an index in `[0, num_classes)`. Other values will raise an\n  exception when this op is run on CPU, and return `NaN` for corresponding\n  loss and gradient rows on GPU.\n\n* **logits**: Unscaled log probabilities of shape\n  `[d_0, d_1, ..., d_{r-1}, num_classes]` and dtype `float16`, `float32` or\n  `float64`.\n\n* **weights**: Coefficients for the loss. This must be scalar or broadcastable to\n  `labels` (i.e. same rank and each dimension is either 1 or the same).\n\n* **scope**: the scope for the operations performed in computing the loss.\n\n* **loss_collection**: collection to which the loss will be added.\n\n* **reduction**: Type of reduction to apply to loss.\n\n##### Returns\n', 'stemmed comments': ['nan', 'rais', 'simpli', '[', 'run', 'loss', 'arg', 'each', 'index', 'd_1', '{', 'result', 'except', 'd_0', 'act', 'num_class', 'appli', 'dimens', 'loss_collect', 'return', 'comput', 'sampl', 'd_', 'ad', 'valu', 'ie', 'float64', 'probabl', 'provid', '1', 'If', 'thi', 'scale', 'r1', 'gpu', 'unscal', 'must', 'rank', ']', 'type', 'gradient', 'weight', 'scope', 'log', 'entri', 'reduct', '}', 'scalar', 'int32', 'shape', 'correspond', 'float32', 'batch_siz', 'tensor', 'perform', 'coeffici', 'collect', 'crossentropi', 'dtype', 'float16', 'either', 'other', 'r', 'op', 'oper', 'cpu', 'use', 'given', 'tfnnsparse_softmax_cross_entropy_with_logit', 'label', '0', 'broadcast', 'row', 'logit', 'int64']}"
643,"{'func name': '_get_multi_io_model', 'comments': '', 'stemmed comments': []}"
644,"{'func name': 'cast_losses_to_common_dtype', 'comments': 'Cast a list of losses to a common dtype.\n\nIf any loss is floating-point, they will all be casted to the most-precise floating-point loss. Otherwise the losses are not casted. We also skip casting losses if there are any complex losses.\n##### Args\n* **losses**: A list of losses.\n\n##### Returns\n', 'stemmed comments': ['otherwis', 'mostprecis', 'We', 'dtype', 'return', 'A', 'floatingpoint', 'complex', 'loss', 'arg', 'common', 'skip', 'list', 'also', 'If', 'cast']}"
645,"{'func name': 'get', 'comments': 'Retrieves a Keras loss as a `function`/`Loss` class instance.\n\nThe `identifier` may be the string name of a loss function or `Loss` class.\n\n>>> loss = tf.keras.losses.get(""categorical_crossentropy"") >>> type(loss) <class \'function\'> >>> loss = tf.keras.losses.get(""CategoricalCrossentropy"") >>> type(loss) <class \'...tensorflow.python.keras.losses.CategoricalCrossentropy\'>\n\nYou can also specify `config` of the loss to this function by passing dict containing `class_name` and `config` as an identifier. Also note that the `class_name` must map to a `Loss` class\n\n>>> identifier = {""class_name"": ""CategoricalCrossentropy"", ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n ""config"": {""from_logits"": True}} >>> loss = tf.keras.losses.get(identifier) >>> type(loss) <class \'...tensorflow.python.keras.losses.CategoricalCrossentropy\'>\n\nArguments: identifier: A loss identifier. One of None or string name of a loss function/class or loss configuration dictionary or a loss function or a loss class instance\n##### Returns\n', 'stemmed comments': ['note', 'map', '/', 'instanc', 'pass', 'retriev', 'function/class', 'the', 'dictionari', 'loss', 'kera', '{', 'also', 'categoricalcrossentropi', 'tfkeraslossesget', '>', 'argument', 'return', 'configur', 'dict', '=', 'none', 'categorical_crossentropi', 'must', 'may', 'type', 'A', 'string', '}', 'specifi', 'one', 'you', 'config', 'class', 'identifi', 'contain', 'function', '<', 'class_nam', 'from_logit', 'name', 'true', 'tensorflowpythonkeraslossescategoricalcrossentropi']}"
646,"{'func name': '_Clip', 'comments': '', 'stemmed comments': []}"
647,"{'func name': 'BuildLSTMLayer', 'comments': 'Builds a single LSTM layer with random weights and inputs.\n\n\n##### Args\n* **batch_size**: Inputs are fed in batches of this size.\n\n* **seq_length**: The sequence length to unroll the LSTM layer.\n\n* **num_inputs**: Dimension of inputs that are fed into each LSTM cell.\n\n* **num_nodes**: The number of nodes in each LSTM cell.\n\n##### Returns\n', 'stemmed comments': ['length', 'cell', 'the', 'arg', 'dimens', 'seq_length', 'return', 'layer', 'singl', 'node', 'sequenc', 'weight', 'lstm', 'input', 'batch_siz', 'batch', 'fed', 'unrol', 'num_input', 'num_nod', 'random', 'size', 'number', 'build']}"
648,"{'func name': 'make_lstm_tests', 'comments': 'Make a set of tests to do basic Lstm cell.\n\n\n', 'stemmed comments': ['cell', 'make', 'set', 'lstm', 'basic', 'test']}"
649,"{'func name': 'main_op_with_restore', 'comments': 'Returns a main op to init variables, tables and restore the graph.\n\n\n##### Args\n* **restore_op_name**: Name of the op to use to restore the graph.\n\n##### Returns\n', 'stemmed comments': ['return', 'graph', 'variabl', 'tabl', 'op', 'arg', 'restore_op_nam', 'name', 'use', 'restor', 'main', 'init']}"
650,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
651,"{'func name': '_RollGrad', 'comments': '', 'stemmed comments': []}"
652,"{'func name': 'roll', 'comments': '', 'stemmed comments': []}"
653,"{'func name': '_test_combinations', 'comments': '', 'stemmed comments': []}"
654,"{'func name': '_test_combinations', 'comments': '', 'stemmed comments': []}"
655,"{'func name': 'map_defun', 'comments': 'Map a function on the list of tensors unpacked from `elems` on dimension 0.\n\n\n##### Args\n* **fn**: A function (`function.defun`) that takes a list of tensors and returns\n  another list of tensors. The output list has the same types as\n  output_dtypes. The elements of the output list have the same dimension 0\n  as `elems`, and the remaining dimensions correspond to those of\n  `fn_output_shapes`.\n\n* **elems**: A list of tensors.\n\n* **output_dtypes**: A list of dtypes corresponding to the output types of the\n  function.\n\n* **output_shapes**: A list of `TensorShape`s corresponding to the output shapes\n  from each invocation of the function on slices of inputs.\n\n* **max_intra_op_parallelism**: An integer. If positive, sets the max parallelism\n  limit of each function call to this.\n\n##### Returns\n', 'stemmed comments': ['map', 'elem', 'functiondefun', 'the', 'unpack', 'fn_output_shap', 'arg', 'slice', 'parallel', 'max_intra_op_parallel', 'dimens', 'remain', 'take', 'return', 'output_shap', 'invoc', 'tensorshap', 'anoth', 'max', 'list', 'If', 'element', 'integ', 'output_dtyp', 'An', 'type', 'A', 'call', 'shape', 'correspond', 'input', 'tensor', 'fn', 'dtype', 'function', 'limit', 'posit', 'set', '0', 'output']}"
656,"{'func name': 'simple_scoped_fn', 'comments': 'Simple function: (a, x) -> 2(x+a), but with ""2"" as a variable in scope.\n\n\n', 'stemmed comments': ['function', 'variabl', 'x', 'scope', 'simpl', '2', 'xa', '>']}"
657,"{'func name': 'map_fn_v2', 'comments': 'Transform `elems` by applying `fn` to each element unstacked on axis 0.\n\n\n', 'stemmed comments': ['fn', 'elem', 'unstack', '0', 'transform', 'appli', 'element', 'axi']}"
658,"{'func name': '_test_combinations', 'comments': '', 'stemmed comments': []}"
659,"{'func name': '_test_combinations', 'comments': '', 'stemmed comments': []}"
660,"{'func name': '_make_coordinated_sloppy_dataset', 'comments': 'Produces a dataset iterator and events to control the order of elements.\n\n\n##### Args\n* **apply_map**: method that applies the `map` transformation\n\n* **num_elements**: the number of input elements\n\n* **num_parallel_calls**: the degree of map parallelism\n\n##### Returns\n', 'stemmed comments': ['map', 'arg', 'parallel', 'control', 'appli', 'order', 'return', 'event', 'iter', 'degre', 'transform', 'num_parallel_cal', 'element', 'num_el', 'method', 'dataset', 'produc', 'apply_map', 'input', 'number']}"
661,"{'func name': '_generate_parse_single_example_test_case', 'comments': 'Generates a `parse_single_example()` test case.\n\n\n', 'stemmed comments': ['case', 'parse_single_exampl', 'test', 'gener']}"
662,"{'func name': '_binary_real_test_combinations', 'comments': '', 'stemmed comments': []}"
663,"{'func name': '_NextAfterGrad', 'comments': 'Returns gradient of nextafter(x1, x2) with respect to x1 and x2.\n\n\n', 'stemmed comments': ['respect', 'x1', 'return', 'x2', 'gradient', 'nextaft']}"
664,"{'func name': 'rsqrt', 'comments': 'Computes reciprocal of square root of x element-wise.\n\nFor example:\n\n>>> x = tf.constant([2., 0., -2.]) >>> tf.math.rsqrt(x) <tf.Tensor: shape=(3,), dtype=float32, numpy=array([0.707, inf, nan], dtype=float32)>\n##### Args\n* **x**: A `tf.Tensor`. Must be one of the following types\n\n* **name**: A name for the operation (optional).\n\n##### Returns\n', 'stemmed comments': ['dtype=float32', 'nan', 'tftensor', '[', 'reciproc', '3', 'arg', 'for', 'inf', '>', 'return', 'shape=', 'numpy=array', 'option', '=', '2', 'must', ']', 'tfconstant', 'root', 'type', 'A', 'exampl', 'follow', 'one', '0707', '<', 'x', 'oper', 'name', '0', 'tfmathrsqrt', 'squar', 'elementwis', 'comput']}"
665,"{'func name': 'build_graph', 'comments': ""Build a graph containing a sequence of matmul operations.\n\n\n##### Args\n* **device**: String, the device to run on.\n\n* **n**: tensor A's first dimension size.\n\n* **m**: tensor A's second dimension size.\n\n* **k**: tensor B's second dimension size.\n\n* **transpose_a**: boolean value to show if tensor A is transposed.\n\n* **transpose_b**: boolean value to show if tensor B is transposed.\n\n* **dtype**: numpy data type of the input tensor.\n\n##### Returns\n"", 'stemmed comments': ['graph', 'run', 'arg', 'show', 'dimens', 'return', 'B', 'valu', 'boolean', 'numpi', 'sequenc', 'type', 'A', 'n', 's', 'string', 'devic', 'transpos', 'transpose_a', 'input', 'tensor', 'data', 'dtype', 'contain', 'matmul', 'k', 'oper', 'first', 'size', 'second', 'transpose_b', 'build']}"
666,"{'func name': '_GetMatMulGradientTest', 'comments': '', 'stemmed comments': []}"
667,"{'func name': '_matmul_linear_operator_circulant_circulant', 'comments': '', 'stemmed comments': []}"
668,"{'func name': '_GetMatrixBandPartGradTest', 'comments': '', 'stemmed comments': []}"
669,"{'func name': 'all_tests', 'comments': '', 'stemmed comments': []}"
670,"{'func name': 'make_matrix_diag_tests', 'comments': 'Make a set of tests for tf.linalg.diag op.\n\n\n', 'stemmed comments': ['make', 'op', 'tflinalgdiag', 'set', 'test']}"
671,"{'func name': '_TestL1Norms', 'comments': '', 'stemmed comments': []}"
672,"{'func name': 'make_matrix_set_diag_tests', 'comments': 'Make a set of tests for tf.linalg.set_diag op.\n\n\n', 'stemmed comments': ['tflinalgset_diag', 'make', 'op', 'set', 'test']}"
673,"{'func name': '_GetLargeMatrixSolveLsOpTests', 'comments': '', 'stemmed comments': []}"
674,"{'func name': 'MakePlaceholder', 'comments': '', 'stemmed comments': []}"
675,"{'func name': 'make_maximum_tests', 'comments': 'Make a set of tests to do maximum.\n\n\n', 'stemmed comments': ['set', 'maximum', 'make', 'test']}"
676,"{'func name': 'spectrogram_to_mel_matrix', 'comments': 'Return a matrix that can post-multiply spectrogram rows to make mel.\n\nCopied from https://github.com/tensorflow/models/blob/master/research/audioset/mel_features.py.\n##### Args\n* **num_mel_bins**: How many bands in the resulting mel spectrum.  This is\n  the number of columns in the output matrix.\n\n* **num_spectrogram_bins**: How many bins there are in the source spectrogram\n  data, which is understood to be fft_size/2 + 1, i.e. the spectrogram\n  only contains the nonredundant FFT bins.\n\n* **audio_sample_rate**: Samples per second of the audio at the input to the\n  spectrogram. We need this to figure out the actual frequencies for\n  each spectrogram bin, which dictates how they are mapped into mel.\n\n* **lower_edge_hertz**: Lower bound on the frequencies to be included in the mel\n  spectrum.  This corresponds to the lower edge of the lowest triangular\n  band.\n\n* **upper_edge_hertz**: The desired top edge of the highest frequency band.\n\n##### Returns\n', 'stemmed comments': ['upper_edge_hertz', 'mani', 'map', 'We', 'lower_edge_hertz', 'dictat', 'lowest', 'make', 'figur', 'arg', 'the', 'column', 'edg', 'band', 'includ', 'result', 'postmultipli', 'fft_size/2', 'return', 'audio', 'need', 'mel', '//githubcom/tensorflow/models/blob/master/research/audioset/mel_featurespi', 'sampl', 'frequenc', 'copi', 'spectrum', 'actual', 'ie', 'num_mel_bin', '1', 'top', 'thi', 'bound', 'how', 'num_spectrogram_bin', 'fft', 'bin', 'correspond', 'understood', 'input', 'triangular', 'highest', 'sourc', 'data', 'http', 'matrix', 'contain', 'audio_sample_r', 'nonredund', 'desir', 'lower', 'per', 'row', 'number', 'spectrogram', 'second', 'output']}"
677,"{'func name': 'linear_to_mel_weight_matrix', 'comments': 'Returns a matrix to warp linear scale spectrograms to the [mel scale][mel].\n\n\n##### Args\n* **num_mel_bins**: Python int. How many bands in the resulting mel spectrum.\n\n* **num_spectrogram_bins**: An integer `Tensor`. How many bins there are in the\n  source spectrogram data, which is understood to be `fft_size // 2 + 1`,\n  i.e. the spectrogram only contains the nonredundant FFT bins.\n\n* **sample_rate**: An integer or float `Tensor`. Samples per second of the input\n  signal used to create the spectrogram. Used to figure out the frequencies\n  corresponding to each spectrogram bin, which dictates how they are mapped\n  into the mel scale.\n\n* **lower_edge_hertz**: Python float. Lower bound on the frequencies to be\n  included in the mel spectrum. This corresponds to the lower edge of the\n  lowest triangular band.\n\n* **upper_edge_hertz**: Python float. The desired top edge of the highest\n  frequency band.\n\n* **dtype**: The `DType` of the result matrix. Must be a floating point type.\n\n* **name**: An optional name for the operation.\n\n##### Returns\n', 'stemmed comments': ['upper_edge_hertz', 'mani', 'map', '[', 'point', 'lower_edge_hertz', 'dictat', '//', 'figur', 'lowest', 'arg', 'the', 'edg', 'band', 'includ', 'result', 'float', 'fft_size', 'signal', 'return', 'mel', 'sampl', 'frequenc', 'spectrum', 'ie', 'num_mel_bin', '2', 'option', '1', 'top', 'thi', 'scale', 'how', 'num_spectrogram_bin', 'bound', 'integ', 'must', ']', 'An', 'fft', 'type', 'correspond', 'understood', 'input', 'triangular', 'highest', 'tensor', 'sourc', 'data', 'creat', 'int', 'matrix', 'dtype', 'contain', 'sample_r', 'warp', 'nonredund', 'desir', 'use', 'lower', 'python', 'name', 'linear', 'per', 'oper', 'bin', 'spectrogram', 'second']}"
678,"{'func name': '_get_test_name_best_effort', 'comments': 'If available, return the current test name. Otherwise, `None`.\n\n\n', 'stemmed comments': ['otherwis', 'return', 'current', 'avail', 'name', 'none', 'If', 'test']}"
679,"{'func name': 'memory_profiler_is_available', 'comments': '', 'stemmed comments': []}"
680,"{'func name': 'dismantle_ordered_dict', 'comments': ""Remove reference cycle in OrderedDict `ordered_dict`.\n\nHelpful for making sure the garbage collector doesn't need to run after using an OrderedDict.\n##### Args\n* **ordered_dict**: A `OrderedDict` object to destroy. This object is unusable\n  after this function runs.\n\n"", 'stemmed comments': ['cycl', 'run', 'make', 'arg', 'remov', 'object', 'nt', 'ordered_dict', 'need', 'destroy', 'thi', 'collector', 'garbag', 'A', 'unus', 'help', 'function', 'sure', 'use', 'refer', 'ordereddict']}"
681,"{'func name': 'parse_args', 'comments': 'Converts the raw arguments into accessible flags.\n\n\n', 'stemmed comments': ['raw', 'flag', 'convert', 'access', 'argument']}"
682,"{'func name': 'dot', 'comments': 'Functional interface to the `Dot` layer.\n\nArguments: inputs: A list of input tensors (at least 2). axes: Integer or tuple of integers, axis or axes along which to take the dot product. normalize: Whether to L2-normalize samples along the dot product axis before taking the dot product. If set to True, then the output of the dot product is the cosine proximity between the two samples. **kwargs: Standard layer keyword arguments.\n##### Returns\n', 'stemmed comments': ['tupl', 'argument', 'take', 'return', 'dot', 'sampl', '2', 'list', 'If', 'layer', 'integ', 'proxim', 'whether', 'A', 'kwarg', 'least', 'cosin', 'input', 'two', 'standard', 'interfac', 'axe', 'tensor', 'axi', 'l2normal', 'along', 'function', 'set', 'true', 'product', 'keyword', 'normal', 'output']}"
683,"{'func name': '_TestDir', 'comments': '', 'stemmed comments': []}"
684,"{'func name': 'copy_scoped_meta_graph', 'comments': 'Copies a sub-meta_graph from one scope to another.\n\n\n##### Args\n* **from_scope**: `String` name scope containing the subgraph to be copied.\n\n* **to_scope**: `String` name scope under which the copied subgraph will reside.\n\n* **from_graph**: Optional `Graph` from which to copy the subgraph. If `None`, the\n  default graph is use.\n\n* **to_graph**: Optional `Graph` to which to copy the subgraph. If `None`, the\n  default graph is used.\n\n##### Returns\n', 'stemmed comments': ['graph', 'to_graph', 'submeta_graph', 'arg', 'default', 'return', 'from_scop', 'copi', 'anoth', 'to_scop', 'option', 'none', 'If', 'resid', 'from_graph', 'scope', 'string', 'one', 'contain', 'name', 'use', 'subgraph']}"
685,"{'func name': 'custom_generator_multi_io', 'comments': '', 'stemmed comments': []}"
686,"{'func name': 'specificity_at_sensitivity', 'comments': 'Computes the specificity at a given sensitivity.\n\nThe `specificity_at_sensitivity` function creates four local variables, `true_positives`, `true_negatives`, `false_positives` and `false_negatives` that are used to compute the specificity at the given sensitivity value. The threshold for the given sensitivity value is computed and used to evaluate the corresponding specificity.\n\nFor estimation of the metric over a stream of data, the function creates an `update_op` operation that updates these variables and returns the `specificity`. `update_op` increments the `true_positives`, `true_negatives`, `false_positives` and `false_negatives` counts with the weight of each case found in the `predictions` and `labels`.\n\nIf `weights` is `None`, weights default to 1. Use weights of 0 to mask values.\n\nFor additional information about specificity and sensitivity, see the following: https://en.wikipedia.org/wiki/Sensitivity_and_specificity\n##### Args\n* **labels**: The ground truth values, a `Tensor` whose dimensions must match\n  `predictions`. Will be cast to `bool`.\n\n* **predictions**: A floating point `Tensor` of arbitrary shape and whose values\n  are in the range `[0, 1]`.\n\n* **sensitivity**: A scalar value in range `[0, 1]`.\n\n* **weights**: Optional `Tensor` whose rank is either 0, or the same rank as\n  `labels`, and must be broadcastable to `labels` (i.e., all dimensions must\n  be either `1`, or the same as the corresponding `labels` dimension).\n\n* **num_thresholds**: The number of thresholds to use for matching the given\n  sensitivity.\n\n* **metrics_collections**: An optional list of collections that `specificity`\n  should be added to.\n\n* **updates_collections**: An optional list of collections that `update_op` should\n  be added to.\n\n* **name**: An optional variable_scope name.\n\n##### Returns\n* **specificity**: A scalar `Tensor` representing the specificity at the given\n  `sensitivity` value.\n\n* **update_op**: An operation that increments the `true_positives`,\n  `true_negatives`, `false_positives` and `false_negatives` variables\n  appropriately and whose value matches `specificity`.\n\n', 'stemmed comments': ['the', 'arg', 'match', 'see', 'false_posit', 'ie', 'none', 'will', 'must', 'rank', ']', 'variabl', 'update_op', 'true_neg', 'follow', 'scalar', 'true_posit', 'http', 'appropri', 'specificity_at_sensit', 'number', 'predict', 'false_neg', 'specif', 'four', 'for', 'default', 'return', 'ad', 'valu', 'option', 'list', 'mask', 'variable_scop', 'A', 'threshold', 'evalu', 'stream', 'data', 'creat', 'repres', 'either', 'name', 'label', 'count', 'cast', 'metrics_collect', 'updates_collect', 'sensit', 'local', 'whose', 'addit', '[', 'float', 'dimens', 'comput', 'inform', 'An', 'found', 'weight', 'shape', 'function', 'case', 'broadcast', 'use', '0', 'estim', 'point', 'rang', '//enwikipediaorg/wiki/sensitivity_and_specif', '1', 'If', 'arbitrari', 'metric', 'correspond', 'tensor', 'collect', 'ground', 'increment', 'truth', 'oper', 'updat', 'given', 'bool', 'num_threshold']}"
687,"{'func name': '_get_multi_io_model', 'comments': '', 'stemmed comments': []}"
688,"{'func name': '_get_model', 'comments': '', 'stemmed comments': []}"
689,"{'func name': '_reweight', 'comments': '', 'stemmed comments': []}"
690,"{'func name': 'ragged_assert_compatible_and_get_flat_values', 'comments': 'If ragged, it checks the compatibility and then returns the flat_values.\n\nNote: If two tensors are dense, it does not check their compatibility. Note: Although two ragged tensors with different ragged ranks could have identical overall rank and dimension sizes and hence be compatible, we do not support those cases.\n##### Args\n* **values**: A list of potentially ragged tensor of the same ragged_rank.\n\n* **mask**: A potentially ragged tensor of the same ragged_rank as elements in\n  Values.\n\n##### Returns\n', 'stemmed comments': ['note', 'dens', 'flat_valu', 'arg', 'dimens', 'check', 'rag', 'return', 'valu', 'list', 'compat', 'If', 'ident', 'mask', 'element', 'rank', 'henc', 'A', 'support', 'although', 'differ', 'two', 'potenti', 'tensor', 'ragged_rank', 'could', 'overal', 'case', 'size']}"
691,"{'func name': 'tpu_combinations', 'comments': '', 'stemmed comments': []}"
692,"{'func name': 'is_built_in', 'comments': '', 'stemmed comments': []}"
693,"{'func name': 'mfccs_from_log_mel_spectrograms', 'comments': ""Computes [MFCCs][mfcc] of `log_mel_spectrograms`.\n\nImplemented with GPU-compatible ops and supports gradients.\n\n[Mel-Frequency Cepstral Coefficient (MFCC)][mfcc] calculation consists of taking the DCT-II of a log-magnitude mel-scale spectrogram. [HTK][htk]'s MFCCs use a particular scaling of the DCT-II which is almost orthogonal normalization. We follow this convention.\n\nAll `num_mel_bins` MFCCs are returned and it is up to the caller to select a subset of the MFCCs based on their application. For example, it is typical to only use the first few for speech recognition, as this results in an approximately pitch-invariant representation of the signal.\n\nFor example:\n\n```python batch_size, num_samples, sample_rate = 32, 32000, 16000.0 # A Tensor of [batch_size, num_samples] mono PCM samples in the range [-1, 1]. pcm = tf.random.normal([batch_size, num_samples], dtype=tf.float32)\n\n# A 1024-point STFT with frames of 64 ms and 75% overlap. stfts = tf.signal.stft(pcm, frame_length=1024, frame_step=256, fft_length=1024) spectrograms = tf.abs(stfts)\n\n# Warp the linear scale spectrograms into the mel-scale. num_spectrogram_bins = stfts.shape[-1].value lower_edge_hertz, upper_edge_hertz, num_mel_bins = 80.0, 7600.0, 80 linear_to_mel_weight_matrix = tf.signal.linear_to_mel_weight_matrix( num_mel_bins, num_spectrogram_bins, sample_rate, lower_edge_hertz, upper_edge_hertz) mel_spectrograms = tf.tensordot( spectrograms, linear_to_mel_weight_matrix, 1) mel_spectrograms.set_shape(spectrograms.shape[:-1].concatenate( linear_to_mel_weight_matrix.shape[-1:]))\n\n# Compute a stabilized log to get log-magnitude mel-scale spectrograms. log_mel_spectrograms = tf.math.log(mel_spectrograms + 1e-6)\n\n# Compute MFCCs from log_mel_spectrograms and take the first 13. mfccs = tf.signal.mfccs_from_log_mel_spectrograms( log_mel_spectrograms)[..., :13] ```\n##### Args\n* **log_mel_spectrograms**: A `[..., num_mel_bins]` `float32`/`float64` `Tensor`\n  of log-magnitude mel-scale spectrograms.\n\n* **name**: An optional name for the operation.\n\n##### Returns\n"", 'stemmed comments': ['stftsshape', 'arg', '32000', 'pcm', 'select', 'tfsignalstft', 'float64', 'tfrandomnorm', 'get', ']', '32', 'log', 'follow', '80', 'linear_to_mel_weight_matrix', 'subset', 'sample_r', 'first', 'caller', '800', 'dtype=tffloat32', '/', 'lower_edge_hertz', 'result', 'for', 'cepstral', 'return', 'pitchinvari', 'valu', 'ms', 'option', 'num_mel_bin', '=', 'melscal', 'tfmathlog', 'calcul', '%', '160000', 'A', 'exampl', '64', '1024point', 'mono', 'recognit', 'frame_step=256', 'mel_spectrogramsset_shap', 'op', 'warp', 'name', 'python', 'tfab', 'normal', 'upper_edge_hertz', 'stabil', '75', 'represent', '[', 'gpucompat', 'spectrogramsshap', 'log_mel_spectrogram', 'orthogon', 'frame_length=1024', 'mfcc', 'typic', 'take', 'htk', 'logmagnitud', 'melfrequ', 'scale', 'tfsignallinear_to_mel_weight_matrix', 'An', '1e6', 's', 'dctii', 'float32', 'batch_siz', 'linear_to_mel_weight_matrixshap', 'implement', 'coeffici', 'use', 'all', 'spectrogram', 'num_sampl', 'We', 'frame', 'overlap', 'mel_spectrogram', 'rang', 'approxim', 'signal', 'stft', 'tfsignalmfccs_from_log_mel_spectrogram', 'particular', 'convent', 'sampl', 'applic', 'concaten', '1', '76000', 'tftensordot', 'num_spectrogram_bin', 'almost', '13', 'gradient', 'support', 'consist', 'tensor', 'base', 'fft_length=1024', 'oper', 'linear', 'speech', 'comput']}"
694,"{'func name': 'make_minimum_tests', 'comments': 'Make a set of tests to do minimum.\n\n\n', 'stemmed comments': ['set', 'minimum', 'make', 'test']}"
695,"{'func name': 'make_mirror_pad_tests', 'comments': 'Make a set of tests to do mirror_pad.\n\n\n', 'stemmed comments': ['set', 'mirror_pad', 'make', 'test']}"
696,"{'func name': '_unwrap_tensors', 'comments': '', 'stemmed comments': []}"
697,"{'func name': '_call_for_each_replica', 'comments': 'Run `fn` in separate threads, once per replica/worker device.\n\n\n##### Args\n* **distribution**: the DistributionStrategy object.\n\n* **fn**: function to run (will be run once per replica, each in its own thread).\n\n* **args**: positional arguments for `fn`\n\n* **kwargs**: keyword arguments for `fn`.\n\n##### Returns\n', 'stemmed comments': ['fn', 'return', 'separ', 'distributionstrategi', 'run', 'function', 'kwarg', 'distribut', 'arg', 'posit', 'replica/work', 'devic', 'keyword', 'per', 'replica', 'thread', 'object', 'argument']}"
698,"{'func name': '_replica_id_as_int', 'comments': '', 'stemmed comments': []}"
699,"{'func name': 'all_devices', 'comments': '', 'stemmed comments': []}"
700,"{'func name': '_mimic_two_cpus', 'comments': '', 'stemmed comments': []}"
701,"{'func name': '_mimic_two_cpus', 'comments': '', 'stemmed comments': []}"
702,"{'func name': 'get_range_len', 'comments': '', 'stemmed comments': []}"
703,"{'func name': 'disable_mixed_precision_graph_rewrite_v1', 'comments': 'Disables the mixed precision graph rewrite.\n\nAfter this is called, the mixed precision graph rewrite will no longer run for new Sessions, and so float32 operations will no longer be converted to float16 in such Sessions. However, any existing Sessions will continue to have the graph rewrite enabled if they were created after `enable_mixed_precision_graph_rewrite` was called but before `disable_mixed_precision_graph_rewrite` was called.\n\nThis does not undo the effects of loss scaling. Any optimizers wrapped with a LossScaleOptimizer will continue to do loss scaling, although this loss scaling will no longer be useful if the optimizer is used in new Sessions, as the graph rewrite no longer converts the graph to use float16.\n\nThis function is useful for unit testing. A unit tests can test using the mixed precision graph rewrite, then disable it so future unit tests continue using float32. If this is done, unit tests should not share a single session, as `enable_mixed_precision_graph_rewrite` and `disable_mixed_precision_graph_rewrite` have no effect on existing sessions.\n', 'stemmed comments': ['wrap', 'lossscaleoptim', 'graph', 'done', 'run', 'session', 'loss', 'optim', 'mix', 'after', 'ani', 'unit', 'new', 'continu', 'If', 'thi', 'scale', 'share', 'longer', 'singl', 'futur', 'A', 'rewrit', 'call', 'precis', 'enable_mixed_precision_graph_rewrit', 'convert', 'although', 'float32', 'howev', 'test', 'undo', 'creat', 'float16', 'function', 'enabl', 'effect', 'oper', 'exist', 'use', 'disable_mixed_precision_graph_rewrit', 'disabl']}"
704,"{'func name': 'mlir_gen_from_source', 'comments': 'Parse a function as either a string or from a supplied file path and return a TFProgram.\n\n\n', 'stemmed comments': ['return', 'function', 'either', 'suppli', 'string', 'path', 'pars', 'tfprogram', 'file']}"
705,"{'func name': 'convert_graph_def', 'comments': 'Import a GraphDef and convert it to a textual MLIR module.\n\n\n##### Args\n* **graph_def**: An object of type graph_pb2.GraphDef or a textual proto\n  representation of a valid GraphDef.\n\n* **pass_pipeline**: A textual description of an MLIR Pass Pipeline to run on the\n  module, see MLIR documentation for the\n  [textual pass pipeline syntax](https\n\n##### Returns\n', 'stemmed comments': ['pass', 'represent', '[', 'run', 'arg', 'document', 'syntax', 'descript', 'mlir', 'object', 'see', 'return', 'textual', 'pipelin', 'graph_pb2graphdef', 'valid', ']', 'An', 'type', 'proto', 'A', 'import', 'convert', 'pass_pipelin', 'http', 'graph_def', 'modul', 'graphdef']}"
706,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
707,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
708,"{'func name': '_prepare_label', 'comments': 'Conerts labels to one-hot encoding.\n\n\n', 'stemmed comments': ['encod', 'label', 'conert', 'onehot']}"
709,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
710,"{'func name': 'load_data', 'comments': 'Loads the [MNIST dataset](http://yann.lecun.com/exdb/mnist/).\n\nThis is a dataset of 60,000 28x28 grayscale images of the 10 digits, along with a test set of 10,000 images. More info can be found at the [MNIST homepage](http://yann.lecun.com/exdb/mnist/).\n\n Arguments: path: path where to cache the dataset locally (relative to `~/.keras/datasets`).\n##### Returns\n* **Tuple of Numpy arrays**: `(x_train, y_train), (x_test, y_test)`.\n\n* ****x_train, x_test****: uint8 arrays of grayscale image data with shapes\n  (num_samples, 28, 28).\n\n* ****y_train, y_test****: uint8 arrays of digit labels (integers in range 0-9)\n  with shapes (num_samples,).\n\n* **nse**: \n\n* **https**: //creativecommons.org/licenses/by-sa/3.0/)\n\n', 'stemmed comments': ['local', 'tupl', 'array', '[', 'y_test', 'imag', 'cach', 'uint8', 'nse', 'rang', 'argument', 'return', '09', 'x_train', 'grayscal', '28x28', '10', 'rel', '//creativecommonsorg/licenses/bysa/30/', '10000', 'thi', 'integ', ']', 'numpi', 'x_test', 'found', '~/keras/dataset', 'dataset', 'path', 'shape', 'load', '//yannlecuncom/exdb/mnist/', 'more', 'test', 'info', 'http', 'data', '28', 'along', 'digit', 'homepag', 'mnist', 'y_train', 'set', 'label', '60000', 'num_sampl']}"
711,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
712,"{'func name': 'evaluation', 'comments': 'Evaluate the quality of the logits at predicting the label.\n\n\n##### Args\n* **logits**: Logits tensor, float - [batch_size, NUM_CLASSES].\n\n* **labels**: Labels tensor, int32 - [batch_size], with values in the\n  range [0, NUM_CLASSES).\n\n##### Returns\n', 'stemmed comments': [']', 'predict', 'return', '[', 'arg', 'valu', 'batch_siz', 'int32', 'label', 'evalu', 'rang', 'qualiti', 'float', '0', 'tensor', 'logit', 'num_class']}"
713,"{'func name': 'decode_predictions', 'comments': '', 'stemmed comments': []}"
714,"{'func name': 'decode_predictions', 'comments': '', 'stemmed comments': []}"
715,"{'func name': 'is_train', 'comments': '', 'stemmed comments': []}"
716,"{'func name': 'CheckAndRemoveDoc', 'comments': '', 'stemmed comments': []}"
717,"{'func name': 'GenerateModelReport', 'comments': ""Report what's known statically about each node in the provided metagraph.\n\n\n##### Args\n* **metagraph**: A TensorFlow MetaGraphDef.\n\n* **assume_valid_feeds**: If True, assume that the shape of the fed nodes is valid\n\n* **debug**: Add some information useful for debugging.\n\n##### Returns\n"", 'stemmed comments': ['arg', 'static', 'return', 'add', 'report', 'metagraph', 'assum', 'assume_valid_fe', 'provid', 'If', 'inform', 'valid', 'node', 'A', 's', 'shape', 'tensorflow', 'fed', 'debug', 'use', 'metagraphdef', 'true', 'known']}"
718,"{'func name': 'advise', 'comments': 'Auto profile and advise.\n\nBuilds profiles and automatically check anomalies of various aspects. For more details: https://github.com/tensorflow/tensorflow/tree/master/tensorflow/core/profiler/README.md\n##### Args\n* **graph**: tf.Graph. If None and eager execution is not enabled, use\n    default graph.\n\n* **run_meta**: optional tensorflow.RunMetadata proto. It is necessary to\n    to support run time information profiling, such as time and memory.\n\n* **options**: see ALL_ADVICE example above. Default checks everything.\n\n', 'stemmed comments': ['aspect', 'memori', 'graph', 'run', 'arg', 'tfgraph', 'for', 'check', 'default', 'see', 'advis', 'time', 'detail', 'variou', 'anomali', 'option', 'none', 'automat', 'If', 'inform', 'tensorflowrunmetadata', 'It', 'proto', 'run_meta', 'exampl', 'eager', '//githubcom/tensorflow/tensorflow/tree/master/tensorflow/core/profiler/readmemd', 'all_advic', 'support', 'everyth', 'necessari', 'profil', 'http', 'execut', 'enabl', 'use', 'auto', 'build']}"
719,"{'func name': 'get_models', 'comments': 'Get all models excluding the specificed ones.\n\n\n', 'stemmed comments': ['model', 'specif', 'get', 'one', 'exclud']}"
720,"{'func name': 'run_benchmark', 'comments': '', 'stemmed comments': []}"
721,"{'func name': 'model_from_json', 'comments': 'Parses a JSON model configuration string and returns a model instance.\n\nUsage:\n\n>>> model = tf.keras.Sequential([ ...\n\n\n\n tf.keras.layers.Dense(5, input_shape=(3,)), ...\n\n\n\n tf.keras.layers.Softmax()]) >>> config = model.to_json() >>> loaded_model = tf.keras.models.model_from_json(config)\n\nArguments: json_string: JSON string encoding a model configuration. custom_objects: Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization.\n##### Returns\n', 'stemmed comments': ['map', 'instanc', '[', 'dictionari', '3', 'tfkerasmodelsmodel_from_json', 'deseri', '>', 'argument', 'return', 'configur', 'usag', 'tfkeraslayersdens', 'modelto_json', '=', 'pars', 'option', 'custom_object', ']', 'consid', 'json', 'string', 'tfkerassequenti', 'tfkeraslayerssoftmax', 'custom', 'model', 'config', 'class', 'input_shape=', 'loaded_model', 'function', 'encod', 'name', '5', 'json_str']}"
722,"{'func name': 'test_keras_model_v2', 'comments': ""Validates the tf.keras model converts to a TFLite model.\n\nConverts the tf.keras model to TFLite and checks the accuracy of the model on random data.\n##### Args\n* **filename**: Full filepath of HDF5 file containing the tf.keras model.\n\n* **input_shapes**: List of list of integers representing input shapes in the\n  order of the tf.keras model's .input attribute (e.g., [[1, 16, 16, 3]]).\n  (default None)\n\n* **input_data**: np.ndarray to pass into models during inference. (default None).\n\n* **input_data_range**: A map where the key is the input tensor name and\n  the value is a tuple (min_val, max_val) which specifies the value range of\n  the corresponding input tensor. For example, '{'input1'\n\n* ****kwargs**: Additional arguments to be passed into the converter.\n\n"", 'stemmed comments': ['map', 'tupl', 'pass', 'addit', '[', 'input1', 'input_data', 'arg', '3', 'rang', '{', 'for', 'check', 'order', 'default', 'argument', 'input_shap', 'attribut', 'valu', 'full', 'none', '16', 'list', '1', 'hdf5', 'filepath', 'valid', 'npndarray', 'integ', ']', 'A', 'tfkera', 's', 'kwarg', 'exampl', 'convert', 'eg', 'shape', 'correspond', 'input', 'input_data_rang', 'tflite', 'specifi', 'tensor', 'file', 'model', 'data', 'accuraci', 'infer', 'max_val', 'repres', 'contain', 'min_val', 'filenam', 'key', 'name', 'random']}"
723,"{'func name': 'get_nested_model_3', 'comments': '', 'stemmed comments': []}"
724,"{'func name': '_has_placeholder', 'comments': '', 'stemmed comments': []}"
725,"{'func name': 'create_tiny_embedding_conv_model', 'comments': ""Builds a convolutional model aimed at microcontrollers.\n\nDevices like DSPs and microcontrollers can have very small amounts of memory and limited processing power. This model is designed to use less than 20KB of working RAM, and fit within 32KB of read-only (flash) memory.\n\nHere's the layout of the graph:\n\n(fingerprint_input) v [Conv2D]<-(weights) v [BiasAdd]<-(bias) v [Relu] v [Conv2D]<-(weights) v [BiasAdd]<-(bias) v [Relu] v [Conv2D]<-(weights) v [BiasAdd]<-(bias) v [Relu] v [MatMul]<-(weights) v [BiasAdd]<-(bias) v\n\nThis doesn't produce particularly accurate results, but it's designed to be used as the first stage of a pipeline, running on a low-energy piece of hardware that can always be on, and then wake higher-power chips when a possible utterance has been found, so that more accurate analysis can be done.\n\nDuring training, a dropout node is introduced after the relu, controlled by a placeholder.\n##### Args\n* **fingerprint_input**: TensorFlow node that will output audio feature vectors.\n\n* **model_settings**: Dictionary of information about the model.\n\n* **is_training**: Whether the model is going to be used for training.\n\n##### Returns\n"", 'stemmed comments': ['memori', 'dictionari', 'convolut', 'alway', 'arg', 'dropout', 'pipelin', 'dure', ']', 'whether', 'devic', 'v', 'layout', '<', 'featur', 'first', 'piec', 'relu', 'dsp', 'is_train', 'result', 'less', 'aim', 'return', 'vector', 'design', 'placehold', 'bia', 'model', 'like', 'matmul', 'higherpow', '[', 'run', 'biasadd', 'power', 'process', 'nt', 'conv2d', 'model_set', 'hardwar', 'stage', 'introduc', 'fingerprint_input', 'accur', 'inform', 'node', 'train', 'found', 'weight', 's', 'flash', 'small', '20kb', 'particularli', 'use', 'fit', 'output', 'analysi', 'graph', 'done', 'amount', 'control', 'wake', 'audio', 'work', 'microcontrol', 'here', 'utter', 'thi', '32kb', 'produc', 'tensorflow', 'limit', 'lowenergi', 'chip', 'go', 'readonli', 'ram', 'within', 'possibl', 'build']}"
726,"{'func name': 'clone_and_build_model', 'comments': 'Clone a `Model` and build/compile it with the same settings used before.\n\nThis function can be be run in the same graph or in a separate graph from the model. When using a separate graph, `in_place_reset` must be `False`.\n\nNote that, currently, the clone produced from this function may not work with TPU DistributionStrategy. Try at your own risk.\n##### Args\n* **model**: `tf.keras.Model` object. Can be Functional, Sequential, or\n  sub-classed.\n\n* **input_tensors**: Optional list or dictionary of input tensors to build the\n  model upon. If not provided, placeholders will be created.\n\n* **target_tensors**: Optional list of target tensors for compiling the model. If\n  not provided, placeholders will be created.\n\n* **custom_objects**: Optional dictionary mapping string names to custom classes\n  or functions.\n\n* **compile_clone**: Boolean, whether to compile model clone (default `True`).\n\n* **in_place_reset**: Boolean, whether to reset the model in place. Only used if\n  the model is a subclassed model. In the case of a subclassed model,\n  this argument must be set to `True` (default `False`). To restore the\n  original model, use the function\n  `in_place_subclassed_model_state_restoration(model)`.\n\n* **optimizer_iterations**: An iterations variable that will be incremented by the\n  optimizer if the clone is compiled. This argument is used when a Keras\n  model is cloned into an Estimator model function, because Estimators\n  create their own global step variable.\n\n* **optimizer_config**: Optimizer config dictionary or list of dictionary\n  returned from `get_config()`. This argument should be defined if\n  `clone_and_build_model` is called in a different graph or session from\n  the original model, and the optimizer is an instance of `OptimizerV2`.\n\n##### Returns\n', 'stemmed comments': ['dictionari', 'risk', 'arg', 'input_tensor', 'kera', 'object', 'place', 'subclass', 'global', 'tfkerasmodel', 'must', 'custom_object', 'origin', 'whether', 'variabl', 'custom', 'current', 'To', 'in_place_reset', 'instanc', 'when', 'target_tensor', 'step', 'get_config', 'default', 'return', 'option', 'iter', 'list', 'placehold', 'tpu', 'model', 'creat', 'compile_clon', 'name', 'true', 'note', 'map', 'run', 'session', 'optim', 'in_place_subclassed_model_state_restor', 'argument', 'compil', 'may', 'An', 'call', 'string', 'restor', 'input', 'distributionstrategi', 'clone_and_build_model', 'optimizerv2', 'defin', 'target', 'onli', 'function', 'tri', 'sequenti', 'case', 'In', 'use', 'upon', 'graph', 'estim', 'fals', 'optimizer_iter', 'clone', 'work', 'provid', 'boolean', 'If', 'thi', 'produc', 'differ', 'build/compil', 'tensor', 'config', 'separ', 'class', 'increment', 'optimizer_config', 'reset', 'can', 'set', 'build']}"
727,"{'func name': 'build_tflite_model_with_full_integer_quantization', 'comments': '', 'stemmed comments': []}"
728,"{'func name': 'modify_model_interface', 'comments': ""Modify a quantized model's interface (input/output) from float to integer.\n\n\n##### Args\n* **input_file**: Full path name to the input tflite file.\n\n* **output_file**: Full path name to the output tflite file.\n\n* **input_type**: Final input interface type.\n\n* **output_type**: Final output interface type.\n\n"", 'stemmed comments': ['arg', 'final', 'output_typ', 'float', 'input_fil', 'full', 'integ', 'modifi', 'type', 's', 'path', 'input', 'tflite', 'interfac', 'output_fil', 'file', 'model', 'input/output', 'input_typ', 'name', 'quantiz', 'output']}"
729,"{'func name': 'main', 'comments': 'Application run loop.\n\n\n', 'stemmed comments': ['run', 'applic', 'loop']}"
730,"{'func name': 'get_name_scope', 'comments': '', 'stemmed comments': []}"
731,"{'func name': 'get_parent_dir_for_name', 'comments': 'Get parent directory for module with the given name.\n\n\n##### Args\n* **module_name**: Module name for e.g.\n  tensorflow_estimator.python.estimator.api._v1.estimator.\n\n##### Returns\n* **Given example above, it should return**: /pathtoestimator/tensorflow_estimator/python/estimator/api/_v1.\n\n', 'stemmed comments': ['return', 'module_nam', '/pathtoestimator/tensorflow_estimator/python/estimator/api/_v1', 'directori', 'exampl', 'arg', 'name', 'given', 'eg', 'parent', 'get', 'modul', 'tensorflow_estimatorpythonestimatorapi_v1estim']}"
732,"{'func name': 'has_deprecation_decorator', 'comments': 'Checks if given object has a deprecation decorator.\n\nWe check if deprecation decorator is in decorators as well as whether symbol is a class whose __init__ method has a deprecation decorator.\n##### Args\n* **symbol**: Python object.\n\n##### Returns\n', 'stemmed comments': ['whose', 'symbol', 'We', 'return', '__init__', 'whether', 'class', 'method', 'well', 'check', 'arg', 'given', 'python', 'object', 'decor', 'deprec']}"
733,"{'func name': '_flatten_module', 'comments': 'Implementation of `flatten`.\n\n\n', 'stemmed comments': ['flatten', 'implement']}"
734,"{'func name': 'busy_wait_for_coord_stop', 'comments': '', 'stemmed comments': []}"
735,"{'func name': 'MonitoredTrainingSession', 'comments': ""Creates a `MonitoredSession` for training.\n\nFor a chief, this utility sets proper session initializer/restorer. It also creates hooks related to checkpoint and summary saving. For workers, this utility sets proper session creator which waits for the chief to initialize/restore. Please check `tf.compat.v1.train.MonitoredSession` for more information.\n##### Args\n* **master**: `String` the TensorFlow master to use.\n\n* **is_chief**: If `True`, it will take care of initialization and recovery the\n  underlying TensorFlow session. If `False`, it will wait on a chief to\n  initialize or recover the TensorFlow session.\n\n* **checkpoint_dir**: A string.  Optional path to a directory where to restore\n  variables.\n\n* **scaffold**: A `Scaffold` used for gathering or building supportive ops. If not\n  specified, a default one is created. It's used to finalize the graph.\n\n* **hooks**: Optional list of `SessionRunHook` objects.\n\n* **chief_only_hooks**: list of `SessionRunHook` objects. Activate these hooks if\n  `is_chief==True`, ignore otherwise.\n\n* **save_checkpoint_secs**: The frequency, in seconds, that a checkpoint is saved\n  using a default checkpoint saver. If both `save_checkpoint_steps` and\n  `save_checkpoint_secs` are set to `None`, then the default checkpoint\n  saver isn't used. If both are provided, then only `save_checkpoint_secs`\n  is used. Default 600.\n\n* **save_summaries_steps**: The frequency, in number of global steps, that the\n  summaries are written to disk using a default summary saver. If both\n  `save_summaries_steps` and `save_summaries_secs` are set to `None`, then\n  the default summary saver isn't used. Default 100.\n\n* **save_summaries_secs**: The frequency, in secs, that the summaries are written\n  to disk using a default summary saver.  If both `save_summaries_steps` and\n  `save_summaries_secs` are set to `None`, then the default summary saver\n  isn't used. Default not enabled.\n\n* **config**: an instance of `tf.compat.v1.ConfigProto` proto used to configure\n  the session. It's the `config` argument of constructor of\n  `tf.compat.v1.Session`.\n\n* **stop_grace_period_secs**: Number of seconds given to threads to stop after\n  `close()` has been called.\n\n* **log_step_count_steps**: The frequency, in number of global steps, that the\n  global step/sec is logged.\n\n* **max_wait_secs**: Maximum time workers should wait for the session to become\n  available. This should be kept relatively short to help detect incorrect\n  code, but sometimes may need to be increased if the chief takes a while to\n  start up.\n\n* **save_checkpoint_steps**: The frequency, in number of global steps, that a\n  checkpoint is saved using a default checkpoint saver. If both\n  `save_checkpoint_steps` and `save_checkpoint_secs` are set to `None`, then\n  the default checkpoint saver isn't used. If both are provided, then only\n  `save_checkpoint_secs` is used. Default not enabled.\n\n* **summary_dir**: A string.  Optional path to a directory where to save\n  summaries. If None, checkpoint_dir is used instead.\n\n* **save_graph_def**: Whether to save the GraphDef and MetaGraphDef to\n  `checkpoint_dir`. The GraphDef is saved after the session is created as\n  `graph.pbtxt`. MetaGraphDefs are saved out for every checkpoint as\n  `model.ckpt-*.meta`.\n\n##### Returns\n"", 'stemmed comments': ['disk', 'the', '600', 'arg', 'close', 'underli', 'object', 'initializer/restor', 'recoveri', 'tfcompatv1trainmonitoredsess', 'code', 'configur', 'kept', 'global', 'relat', 'none', 'It', 'whether', 'proto', 'variabl', 'written', 'log', 'sec', 'path', 'care', '100', 'graphpbtxt', 'number', 'summari', 'graphdef', 'sometim', 'becom', 'activ', 'instanc', 'worker', 'final', 'also', 'for', 'initi', 'step', 'default', 'return', 'modelckpt', 'time', 'short', 'rel', 'option', 'save_summaries_step', 'list', 'A', 'tfcompatv1configproto', 'specifi', 'ignor', 'one', 'thread', 'creat', 'is_chief', 'maximum', 'is_chief==tru', 'enabl', 'meta', 'op', 'master', 'chief_only_hook', 'true', 'proper', 'otherwis', 'wait', 'session', 'summary_dir', 'check', 'argument', 'nt', 'take', 'frequenc', 'scaffold', 'save_graph_def', 'util', 'everi', 'inform', 'initialize/restor', 'train', 'may', 'hook', 'step/sec', 's', 'call', 'string', 'incorrect', 'restor', 'stop', 'constructor', 'use', 'creator', 'detect', 'recov', 'sessionrunhook', 'checkpoint_dir', 'start', 'graph', 'save_checkpoint_sec', 'fals', 'need', 'increas', 'save', 'checkpoint', 'gather', 'save_checkpoint_step', 'provid', 'If', 'thi', 'instead', 'max_wait_sec', 'chief', 'support', 'tfcompatv1sess', 'saver', 'tensorflow', 'help', 'save_summaries_sec', 'config', 'log_step_count_step', 'monitoredsess', 'avail', 'directori', 'set', 'given', 'pleas', 'metagraphdef', 'second', 'stop_grace_period_sec', 'build']}"
736,"{'func name': 'monitored_timer', 'comments': 'A function decorator for adding MonitoredTimer support.\n\nArguments: cell: the cell associated with the time metric that will be inremented.\n##### Returns\n', 'stemmed comments': ['return', 'time', 'A', 'function', 'cell', 'ad', 'support', 'metric', 'associ', 'inrement', 'monitoredtim', 'decor', 'argument']}"
737,"{'func name': '_Repeat', 'comments': '', 'stemmed comments': []}"
738,"{'func name': '_zero_debias', 'comments': 'Compute the delta required for a debiased Variable.\n\nAll exponential moving averages initialized with Tensors are initialized to 0, and therefore are biased to 0. Variables initialized to 0 and used as EMAs are similarly biased. This function creates the debias updated amount according to a scale factor, as in (Kingma et al., 2015).\n\nTo demonstrate the bias the results from 0-initialization, take an EMA that was initialized to `0` with decay `b`. After `t` timesteps of seeing the constant `c`, the variable have the following value:\n\n``` EMA = 0*b^(t) + c*(1\n\n- b)*b^(t-1) + c*(1\n\n- b)*b^(t-2) + ... = c*(1\n\n- b^t) ```\n\nTo have the true value `c`, we would divide by the scale factor `1\n\n- b^t`.\n\nIn order to perform debiasing, we use two shadow variables. One keeps track of the biased estimate, and the other keeps track of the number of updates that have occurred.\n##### Args\n* **strategy**: `Strategy` used to create and update variables.\n\n* **unbiased_var**: A Variable representing the current value of the unbiased EMA.\n\n* **value**: A Tensor representing the most recent value.\n\n* **decay**: A Tensor representing `1-decay` for the EMA.\n\n##### Returns\n* **ferences**: \n\n* **Adam - A Method for Stochastic Optimization**: [Kingma et al., 2015](https\n\n', 'stemmed comments': ['strategi', 'b^t', 'arg', 'occur', 'unbiased_var', 'track', 'see', 'adam', ']', 'shadow', 'variabl', 'follow', 'two', 'c', 'perform', 'http', 'would', 'current', 'To', 'averag', 'kingma', 'recent', 'number', 'ferenc', '2015', 'therefor', '0initi', 'result', 'after', 'initi', 'ema', 'debia', 'return', 'debias', 'valu', '=', 'stochast', 'A', 'decay', 'bia', 'constant', 'exponenti', 'one', 'requir', 'creat', 'b', 'repres', 'true', 'delta', 'unbias', '[', 't1', 'optim', 'take', 'scale', 'method', 'move', 'accord', 'timestep', 'function', 'In', 'use', '0', 'all', 'b^', 'keep', '1decay', 'estim', 'amount', 'order', '1', 'bias', 'thi', 'factor', 'et', 'al', 'tensor', 't2', 'demonstr', 'updat', 'divid', 'similarli', 'comput']}"
739,"{'func name': 'Test', 'comments': '', 'stemmed comments': []}"
740,"{'func name': '_create_device_dataset', 'comments': 'Uses _prototype_device_datasets[i] to build a dataset for the device.\n\n\n', 'stemmed comments': [']', '[', 'use', 'dataset', '_prototype_device_dataset', 'devic', 'build']}"
741,"{'func name': 'skip_v2_test_combinations', 'comments': '', 'stemmed comments': []}"
742,"{'func name': 'check_if_compatible_devices', 'comments': '', 'stemmed comments': []}"
743,"{'func name': 'multi_gpu_model', 'comments': ""Replicates a model on different GPUs.\n\nSpecifically, this function implements single-machine multi-GPU data parallelism. It works in the following way:\n\n- Divide the model's input(s) into multiple sub-batches.\n\n- Apply a model copy on each sub-batch. Every model copy is executed on a dedicated GPU.\n\n- Concatenate the results (on CPU) into one big batch.\n\nE.g. if your `batch_size` is 64 and you use `gpus=2`, then we will divide the input into 2 sub-batches of 32 samples, process each sub-batch on one GPU, then return the full batch of 64 processed samples.\n\nThis induces quasi-linear speedup on up to 8 GPUs.\n\nThis function is only available with the TensorFlow backend for the time being.\n\nArguments: model: A Keras model instance. To avoid OOM errors, this model could have been built on CPU, for instance (see usage example below). gpus: Integer >= 2, number of on GPUs on which to create model replicas. cpu_merge: A boolean value to identify whether to force merging model weights under the scope of the CPU or not. cpu_relocation: A boolean value to identify whether to create the model's weights under the scope of the CPU. If the model is not defined under any preceding device scope, you can still rescue it by activating this option.\n##### Returns\n* **ple 1**: Training models with weights merge on CPU\n\n* **with tf.device('/cpu**: 0')\n\n* **# Save model via the template model (which shares the same weights)**: \n\n* **ple 2**: Training models with weights merge on CPU using cpu_relocation\n\n* **ython\n ..\n # Not needed to change the device scope for model definition**: model = Xception(weights=None, ..)\n try\n\n* **ple 3**: Training models with weights merge on GPU (recommended for NV-link)\n\n"", 'stemmed comments': ['built', 'weights=non', 'kera', 'Eg', 'error', 'appli', 'gpus=2', '>', 'see', 'rescu', 'dedic', 'replic', 'speedup', 'tfdevic', 'integ', 'It', 'whether', '32', 'follow', 'chang', 'devic', 'batch', 'still', 'xception', 'forc', 'To', 'number', 'cpu_reloc', 'instanc', 'activ', 'quasilinear', 'specif', '3', 'parallel', 'result', 'big', 'return', 'time', 'copi', 'induc', 'valu', 'oom', '2', 'full', '=', 'option', '8', 'A', 'exampl', 'one', '64', 'model', 'data', 'creat', 'execut', 'identifi', 'backend', 'definit', 'preced', 'merg', 'process', 'argument', 'usag', 'ple', 'ython', 'everi', 'share', 'via', 'subbatch', 'train', 'not', 'weight', 's', 'scope', 'input', 'batch_siz', 'implement', 'defin', 'function', 'tri', 'cpu_merg', 'use', '0', 'replica', 'nvlink', 'way', 'need', 'sampl', 'concaten', 'recommend', 'work', 'save', 'singlemachin', '1', 'boolean', 'If', 'thi', 'gpu', 'templat', 'multigpu', 'multipl', 'differ', 'tensorflow', 'could', 'avoid', 'avail', '/cpu', 'divid', 'cpu']}"
744,"{'func name': 'initialized', 'comments': 'Returns whether the module is initialized.\n\n\n', 'stemmed comments': ['modul', 'initi', 'return', 'whether']}"
745,"{'func name': 'proc_func_that_sets_global', 'comments': '', 'stemmed comments': []}"
746,"{'func name': 'test_main', 'comments': 'Main function to be called within `__main__` of a test file.\n\n\n', 'stemmed comments': ['function', 'call', '__main__', 'main', 'within', 'file', 'test']}"
747,"{'func name': 'Test', 'comments': '', 'stemmed comments': []}"
748,"{'func name': '_get_task_config', 'comments': '', 'stemmed comments': []}"
749,"{'func name': 'is_chief', 'comments': '', 'stemmed comments': []}"
750,"{'func name': '_clone_and_build_model', 'comments': '', 'stemmed comments': []}"
751,"{'func name': 'get_mnist_model', 'comments': 'Define a deterministically-initialized CNN model for MNIST testing.\n\n\n', 'stemmed comments': ['model', 'deterministicallyiniti', 'mnist', 'cnn', 'test', 'defin']}"
752,"{'func name': 'has_worker_context', 'comments': 'Returns whether a worker context has been entered.\n\n\n', 'stemmed comments': ['return', 'whether', 'worker', 'enter', 'context']}"
753,"{'func name': 'native_op_vs_composed_ops', 'comments': '', 'stemmed comments': []}"
754,"{'func name': 'nadam_update_numpy', 'comments': '', 'stemmed comments': []}"
755,"{'func name': 'decode_predictions', 'comments': '', 'stemmed comments': []}"
756,"{'func name': '_NcclBroadcast', 'comments': '', 'stemmed comments': []}"
757,"{'func name': '_check_device', 'comments': '', 'stemmed comments': []}"
758,"{'func name': 'make_nearest_upsample_tests', 'comments': 'Make a set of tests to do nearest_upsample.\n\n\n', 'stemmed comments': ['nearest_upsampl', 'set', 'make', 'test']}"
759,"{'func name': 'make_neg_tests', 'comments': 'Make a set of tests to do neg.\n\n\n', 'stemmed comments': ['neg', 'set', 'make', 'test']}"
760,"{'func name': 'CheckGradConfigsToTest', 'comments': 'Iterator for different convolution shapes, strides and paddings.\n\ncompute_gradient_error() is very expensive. So the configs should be relatively small.\n\nYields: Tuple (input_size, filter_size, out_size, stride, padding), the depthwise convolution parameters.\n', 'stemmed comments': ['tupl', 'convolut', 'out_siz', 'compute_gradient_error', 'pad', 'yield', 'filter_s', 'rel', 'iter', 'paramet', 'input_s', 'expens', 'shape', 'differ', 'small', 'config', 'depthwis', 'So', 'stride']}"
761,"{'func name': 'map_structure_up_to', 'comments': 'Applies a function or op to a number of partially flattened inputs.\n\nThe `inputs` are flattened up to `shallow_tree` before being mapped.\n\nUse Case:\n\nSometimes we wish to apply a function to a partially flattened sequence (for example when the function itself takes sequence inputs). We achieve this by specifying a shallow structure, `shallow_tree` we wish to flatten up to.\n\nThe `inputs`, can be thought of as having the same structure as `shallow_tree`, but with leaf nodes that are themselves tree structures.\n\nThis function, therefore, will return something with the same base structure as `shallow_tree`.\n\nExamples:\n\n```python ab_tuple = collections.namedtuple(""ab_tuple"", ""a, b"") op_tuple = collections.namedtuple(""op_tuple"", ""add, mul"") inp_val = ab_tuple(a=2, b=3) inp_ops = ab_tuple(a=op_tuple(add=1, mul=2), b=op_tuple(add=2, mul=3)) out = map_structure_up_to(inp_val, lambda val, ops: (val + ops.add) * ops.mul, inp_val, inp_ops)\n\n# Output is: ab_tuple(a=6, b=15) ```\n\n```python data_list = [[2, 4, 6, 8], [[1, 3, 5, 7, 9], [3, 5, 7]]] name_list = [\'evens\', [\'odds\', \'primes\']] out = map_structure_up_to( name_list, lambda name, sec: ""first__"".format(len(sec), name), name_list, data_list)\n\n# Output is: [\'first_4_evens\', [\'first_5_odds\', \'first_3_primes\']] ```\n##### Args\n* **shallow_tree**: a shallow tree, common to all the inputs.\n\n* **func**: callable which will be applied to each input individually.\n\n* ***inputs**: arbitrarily nested combination of objects that are compatible with\n    shallow_tree. The function `func` is applied to corresponding\n    partially flattened elements of each input, so the function must support\n    arity of `len(inputs)`.\n\n##### Returns\n', 'stemmed comments': ['combin', 'format', 'the', 'arg', '4', 'appli', 'op_tupl', 'object', 'a=6', 'lambda', 'first_5_odd', 'mul=3', 'b=op_tupl', 'wish', 'len', 'func', 'must', 'shallow_tre', ']', 'callabl', 'sec', 'arbitrarili', 'someth', 'even', '7', 'opsadd', 'opsmul', 'number', 'collectionsnamedtupl', 'first_3_prim', 'sometim', 'inp_op', 'val', 'name_list', 'mul', '3', 'nest', 'therefor', 'b=3', 'return', 'leaf', '=', '2', 'ariti', 'thought', '8', 'shallow', 'prime', 'sequenc', 'exampl', 'first__', 'b=15', 'specifi', 'b', 'inp_val', 'op', 'name', 'python', '5', 'map', '[', 'map_structure_up_to', 'mul=2', '6', 'take', 'flatten', 'a=op_tupl', 'compat', 'element', 'node', 'add=2', 'individu', 'input', 'function', 'case', 'use', 'common', 'output', 'We', 'odd', 'tree', 'ab_tupl', 'add', 'data_list', '9', '1', 'thi', 'structur', 'partial', 'first_4_even', 'support', 'correspond', 'base', 'a=2', 'achiev', 'add=1']}"
762,"{'func name': 'list_to_tuple', 'comments': 'Replace all lists with tuples.\n\nThe fork of nest that tf.data uses treats lists as single elements, while tf.nest treats them as structures to recurse into. Keras has chosen to adopt the latter convention, and must therefore deeply replace all lists with tuples before passing structures to Dataset.from_generator.\n##### Args\n* **structure**: A nested structure to be remapped.\n\n##### Returns\n', 'stemmed comments': ['tupl', 'tfnest', 'pass', 'remap', 'the', 'chosen', 'nest', 'arg', 'therefor', 'deepli', 'kera', 'convent', 'return', 'adopt', 'list', 'recurs', 'latter', 'element', 'fork', 'singl', 'must', 'structur', 'A', 'tfdata', 'treat', 'datasetfrom_gener', 'replac', 'use']}"
763,"{'func name': '_is_named_tuple', 'comments': 'Returns True iff `instance` is a `namedtuple`.\n\n\n##### Args\n* **instance**: An instance of a Python object.\n\n##### Returns\n', 'stemmed comments': ['iff', 'instanc', 'return', 'An', 'arg', 'namedtupl', 'true', 'python', 'object']}"
764,"{'func name': '_NthElementGrad', 'comments': 'Return the gradients for NthElement.\n\n\n##### Args\n* **op**: The NthElementOp for which we need to generate gradients.\n\n* **grad**: Tensor. The gradients passed to the NthElementOp\n\n##### Returns\n', 'stemmed comments': ['nthelement', 'pass', 'return', 'nthelementop', 'need', 'grad', 'gradient', 'the', 'op', 'arg', 'tensor', 'gener']}"
765,"{'func name': 'sampled_softmax_loss', 'comments': 'Computes and returns the sampled softmax training loss.\n\nThis is a faster way to train a softmax classifier over a huge number of classes.\n\nThis operation is for training only.\n\nIt is generally an underestimate of the full softmax loss.\n\nA common use case is to use this method for training, and calculate the full softmax loss for evaluation or inference. In this case, you must set `partition_strategy=""div""` for the two losses to be consistent, as in the following example:\n\n```python if mode == ""train"": loss = tf.nn.sampled_softmax_loss( weights=weights, biases=biases, labels=labels, inputs=inputs, ..., partition_strategy=""div"") elif mode == ""eval"": logits = tf.matmul(inputs, tf.transpose(weights)) logits = tf.nn.bias_add(logits, biases) labels_one_hot = tf.one_hot(labels, n_classes) loss = tf.nn.softmax_cross_entropy_with_logits( labels=labels_one_hot, logits=logits) ```\n\nSee our Candidate Sampling Algorithms Reference ([pdf](https://www.tensorflow.org/extras/candidate_sampling.pdf)). Also see Section 3 of (Jean et al., 2014) for the math.\n##### Args\n* **weights**: A `Tensor` of shape `[num_classes, dim]`, or a list of `Tensor`\n    objects whose concatenation along dimension 0 has shape\n    [num_classes, dim].  The (possibly-sharded) class embeddings.\n\n* **biases**: A `Tensor` of shape `[num_classes]`.  The class biases.\n\n* **labels**: A `Tensor` of type `int64` and shape `[batch_size,\n    num_true]`. The target classes.  Note that this format differs from\n    the `labels` argument of `nn.softmax_cross_entropy_with_logits`.\n\n* **inputs**: A `Tensor` of shape `[batch_size, dim]`.  The forward\n    activations of the input network.\n\n* **num_sampled**: An `int`.  The number of classes to randomly sample per batch.\n\n* **num_classes**: An `int`. The number of possible classes.\n\n* **num_true**: An `int`.  The number of target classes per training example.\n\n* **sampled_values**: a tuple of (`sampled_candidates`, `true_expected_count`,\n    `sampled_expected_count`) returned by a `*_candidate_sampler` function.\n    (if None, we default to `log_uniform_candidate_sampler`)\n\n* **remove_accidental_hits**: A `bool`.  whether to remove ""accidental hits""\n    where a sampled class equals one of the target classes.  Default is\n    True.\n\n* **partition_strategy**: A string specifying the partitioning strategy, relevant\n    if `len(weights) > 1`. Currently `""div""` and `""mod""` are supported.\n    Default is `""mod""`. See `tf.nn.embedding_lookup` for more details.\n\n* **name**: A name for the operation (optional).\n\n* **seed**: random seed for candidate sampling. Default to None, which doesn\'t set\n    the op-level random seed for candidate sampling.\n\n##### Returns\n* **ferences**: \n\n* **On Using Very Large Target Vocabulary for Neural Machine Translation**: [Jean et al., 2014]\n  (https\n\n', 'stemmed comments': ['tupl', 'format', 'strategi', 'machin', 'the', 'veri', 'arg', 'partit', 'mod', 'neural', 'num_class', 'object', '>', 'see', 'labels=labels_one_hot', 'underestim', 'none', 'jean', 'relev', 'len', 'must', 'It', ']', 'whether', 'type', 'follow', 'two', 'batch', 'num_tru', 'weights=weight', 'http', 'current', 'along', 'partition_strategy=', 'refer', 'per', 'number', 'labels=label', 'activ', 'ferenc', '3', 'partition_strategi', 'softmax', 'mode', 'also', 'sampled_candid', 'algorithm', 'default', 'return', 'tfnnembedding_lookup', 'detail', 'On', 'tfnnsampled_softmax_loss', 'option', '=', 'full', 'accident', 'list', 'eval', 'calcul', 'section', 'A', 'exampl', 'embed', 'evalu', '//wwwtensorfloworg/extras/candidate_samplingpdf', 'specifi', 'one', 'div', 'biases=bias', 'hit', '_candidate_sampl', 'name', 'python', 'label', 'true', 'faster', 'int64', 'note', 'whose', 'nnsoftmax_cross_entropy_with_logit', '[', 'possibl', 'candid', 'loss', 'remov', 'forward', 'dimens', 'argument', 'nt', 'huge', 'possiblyshard', 'vocabulari', 'train', 'larg', 'An', 'method', 'weight', 'true_expected_count', 'equal', 'string', 'shape', 'input', 'batch_siz', 'inputs=input', 'pdf', 'infer', 'logits=logit', 'target', 'int', 'remove_accidental_hit', 'classifi', 'function', 'case', 'In', 'labels_one_hot', 'use', '0', 'common', 'randomli', 'random', 'n_class', 'network', '2014', 'num_sampl', 'gener', 'tftranspos', 'tfnnsoftmax_cross_entropy_with_logit', 'elif', 'translat', 'log_uniform_candidate_sampl', 'way', 'tfnnbias_add', 'math', 'sampled_valu', 'sampl', 'dim', 'concaten', 'sampled_expected_count', '1', 'bias', 'thi', 'consist', 'et', 'al', 'support', 'differ', 'tfmatmul', 'tensor', 'seed', 'class', '==', 'oper', 'tfone_hot', 'set', 'bool', 'logit', 'comput', 'oplevel']}"
766,"{'func name': 'in_top_k_v2', 'comments': '', 'stemmed comments': []}"
767,"{'func name': '_serialize_keras_tensor', 'comments': 'Serializes a single Tensor passed to `call`.\n\n\n', 'stemmed comments': ['serial', 'pass', 'call', 'tensor', 'singl']}"
768,"{'func name': '_test_combinations', 'comments': '', 'stemmed comments': []}"
769,"{'func name': '_GetNormOpTest', 'comments': '', 'stemmed comments': []}"
770,"{'func name': 'try_import', 'comments': '', 'stemmed comments': []}"
771,"{'func name': '_kl_normal_normal', 'comments': 'Calculate the batched KL divergence KL(n_a || n_b) with n_a and n_b Normal.\n\n\n##### Args\n* **n_a**: instance of a Normal distribution object.\n\n* **n_b**: instance of a Normal distribution object.\n\n* **name**: (optional) Name to use for created operations.\n  default is ""kl_normal_normal"".\n\n##### Returns\n', 'stemmed comments': ['instanc', '||', 'arg', 'object', 'KL', 'default', 'return', 'distribut', 'option', 'calcul', 'n_a', 'kl_normal_norm', 'batch', 'creat', 'n_b', 'oper', 'name', 'use', 'normal', 'diverg']}"
772,"{'func name': 'reduce_fn', 'comments': 'tf.data.Dataset-friendly implementation of mean and variance.\n\n\n', 'stemmed comments': ['tfdatadatasetfriendli', 'mean', 'implement', 'varianc']}"
773,"{'func name': '_get_layer_computation_test_cases', 'comments': '', 'stemmed comments': []}"
774,"{'func name': '_run_layernorm_correctness_test', 'comments': '', 'stemmed comments': []}"
775,"{'func name': '_get_layer_computation_test_cases', 'comments': '', 'stemmed comments': []}"
776,"{'func name': '_get_layer_computation_test_cases', 'comments': '', 'stemmed comments': []}"
777,"{'func name': 'replace_in_base_docstring', 'comments': '', 'stemmed comments': []}"
778,"{'func name': 'batch_normalization', 'comments': 'Functional interface for the batch normalization layer from_config(Ioffe et al., 2015).\n\nNote: when training, the moving_mean and moving_variance need to be updated. By default the update ops are placed in `tf.GraphKeys.UPDATE_OPS`, so they need to be executed alongside the `train_op`. Also, be sure to add any batch_normalization ops before getting the update_ops collection. Otherwise, update_ops will be empty, and training/inference will not work properly. For example:\n\n```python x_norm = tf.compat.v1.layers.batch_normalization(x, training=training)\n\n# ...\n\nupdate_ops = tf.compat.v1.get_collection(tf.GraphKeys.UPDATE_OPS) train_op = optimizer.minimize(loss) train_op = tf.group([train_op, update_ops]) ```\n\nArguments: inputs: Tensor input. axis: An `int`, the axis that should be normalized (typically the features axis). For instance, after a `Convolution2D` layer with `data_format=""channels_first""`, set `axis=1` in `BatchNormalization`. momentum: Momentum for the moving average. epsilon: Small float added to variance to avoid dividing by zero. center: If True, add offset of `beta` to normalized tensor. If False, `beta` is ignored. scale: If True, multiply by `gamma`. If False, `gamma` is not used. When the next layer is linear (also e.g. `nn.relu`), this can be disabled since the scaling can be done by the next layer. beta_initializer: Initializer for the beta weight. gamma_initializer: Initializer for the gamma weight. moving_mean_initializer: Initializer for the moving mean. moving_variance_initializer: Initializer for the moving variance. beta_regularizer: Optional regularizer for the beta weight. gamma_regularizer: Optional regularizer for the gamma weight. beta_constraint: An optional projection function to be applied to the `beta` weight after being updated by an `Optimizer` (e.g. used to implement norm constraints or value constraints for layer weights). The function must take as input the unprojected variable and must return the projected variable (which must have the same shape). Constraints are not safe to use when doing asynchronous distributed training. gamma_constraint: An optional projection function to be applied to the `gamma` weight after being updated by an `Optimizer`. training: Either a Python boolean, or a TensorFlow boolean scalar tensor (e.g. a placeholder). Whether to return the output in training mode (normalized with statistics of the current batch) or in inference mode (normalized with moving statistics). **NOTE**: make sure to set this parameter correctly, or else your training/inference will not work properly. trainable: Boolean, if `True` also add variables to the graph collection `GraphKeys.TRAINABLE_VARIABLES` (see tf.Variable). name: String, the name of the layer. reuse: Boolean, whether to reuse the weights of a previous layer by the same name. renorm: Whether to use Batch Renormalization (Ioffe, 2017). This adds extra variables during training. The inference is the same for either value of this parameter. renorm_clipping: A dictionary that may map keys \'rmax\', \'rmin\', \'dmax\' to scalar `Tensors` used to clip the renorm correction. The correction `(r, d)` is used as `corrected_value = normalized_value * r + d`, with `r` clipped to [rmin, rmax], and `d` to [-dmax, dmax]. Missing rmax, rmin, dmax are set to inf, 0, inf, respectively. renorm_momentum: Momentum used to update the moving means and standard deviations with renorm. Unlike `momentum`, this affects training and should be neither too small (which would add noise) nor too large (which would give stale estimates). Note that `momentum` is still applied to get the means and variances for inference. fused: if `None` or `True`, use a faster, fused implementation if possible. If `False`, use the system recommended implementation. virtual_batch_size: An `int`. By default, `virtual_batch_size` is `None`, which means batch normalization is performed across the whole batch. When `virtual_batch_size` is not `None`, instead perform ""Ghost Batch Normalization"", which creates virtual sub-batches which are each normalized separately (with shared gamma, beta, and moving statistics). Must divide the actual batch size during execution. adjustment: A function taking the `Tensor` containing the (dynamic) shape of the input tensor and returning a pair (scale, bias) to apply to the normalized values (before gamma and beta), only during training. For example, if axis==-1, `adjustment = lambda shape: ( tf.random.uniform(shape[-1:], 0.93, 1.07), tf.random.uniform(shape[-1:], -0.1, 0.1))` will scale the normalized value by up to 7% up or down, then shift the result by up to 0.1 (with independent scaling and bias for each feature but shared across all examples), and finally apply gamma and/or beta. If `None`, no adjustment is applied. Cannot be specified if virtual_batch_size is specified.\n##### Returns\n', 'stemmed comments': ['virtual_batch_s', 'neither', 'the', 'axis=1', 'make', '2017', 'dictionari', 'mean', 'virtual', 'appli', 'place', 'see', 'lambda', 'get', 'beta_initi', 'none', 'momentum', 'and/or', 'renorm_momentum', 'must', ']', 'whether', 'variabl', 'update_op', 'from_config', 'scalar', 'batch_norm', 'batch', 'moving_mean', 'varianc', 'extra', 'still', 'perform', 'would', 'current', '7', 'featur', 'unproject', 'properli', 'key', 'r', 'averag', 'moving_vari', 'across', 'previou', 'norm', 'gamma_regular', 'instanc', '2015', 'when', 'regular', 'final', 'mode', 'shift', 'result', 'also', 'for', 'initi', 'alongsid', 'default', 'tfrandomuniform', 'return', 'dynam', 'ad', 'valu', 'option', '=', 'offset', 'trainabl', 'zero', 'nnrelu', '107', 'placehold', '%', 'A', 'constraint', 'paramet', 'rmax', 'exampl', 'bia', 'next', 'unlik', 'ignor', 'specifi', 'axi', 'creat', 'tfvariabl', 'execut', 'either', 'tfgroup', '093', 'batchnorm', 'op', 'independ', 'name', 'python', 'true', 'fuse', 'x_norm', 'beta_regular', 'faster', 'normal', 'center', 'note', 'otherwis', 'disabl', 'training/infer', 'map', 'adjust', '[', 'epsilon', 'loss', 'optim', 'float', 'inf', 'argument', 'typic', 'multipli', 'asynchron', 'take', 'beta_constraint', 'deviat', 'tfcompatv1get_collect', 'actual', 'corrected_valu', 'convolution2d', 'correctli', 'By', 'whole', 'gamma_constraint', 'scale', 'share', 'layer', 'graphkeystrainable_vari', 'train', 'may', 'An', 'larg', 'subbatch', 'weight', 'string', 'eg', 'move', 'shape', 'safe', 'input', 'axis==1', 'small', 'implement', 'tfcompatv1layersbatch_norm', 'infer', 'reus', 'dmax', 'int', 'gamma_initi', 'statist', 'stale', 'contain', 'function', 'sure', 'ghost', 'normalized_valu', 'x', 'use', 'moving_variance_initi', '0', 'els', 'train_op', 'affect', 'output', 'project', 'give', 'done', 'graph', 'estim', 'pair', 'optimizerminim', 'rmin', 'nois', 'fals', 'tfgraphkeysupdate_op', 'system', 'moving_mean_initi', 'need', 'add', 'distribut', 'work', 'beta', 'recommend', '1', 'boolean', 'If', 'thi', 'training=train', 'correct', 'respect', 'instead', 'miss', 'ioff', 'gamma', 'channels_first', 'renorm', 'et', 'al', 'standard', 'interfac', 'data_format=', 'tensor', 'tensorflow', 'renorm_clip', 'collect', 'separ', 'avoid', 'can', 'sinc', 'updat', 'divid', 'set', 'clip', '01', 'linear', 'size', 'possibl', 'empti']}"
779,"{'func name': '_GetNormalizeOpTest', 'comments': '', 'stemmed comments': []}"
780,"{'func name': 'make_not_equal_tests', 'comments': 'Make a set of tests to do not equal.\n\n\n', 'stemmed comments': ['set', 'equal', 'make', 'test']}"
781,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
782,"{'func name': '_getitem', 'comments': 'Implementation of ndarray.__getitem__.\n\n\n', 'stemmed comments': ['ndarray__getitem__', 'implement']}"
783,"{'func name': 'ndarray_to_tensor', 'comments': '', 'stemmed comments': []}"
784,"{'func name': 'default_float_type', 'comments': 'Gets the default float type.\n\n\n##### Returns\n', 'stemmed comments': ['default', 'return', 'type', 'get', 'float']}"
785,"{'func name': 'np_export_constant', 'comments': '', 'stemmed comments': []}"
786,"{'func name': 'make_numpy_compatible', 'comments': '', 'stemmed comments': []}"
787,"{'func name': 'einsum', 'comments': '', 'stemmed comments': []}"
788,"{'func name': 'randint', 'comments': '', 'stemmed comments': []}"
789,"{'func name': 'normalize', 'comments': 'Normalizes a Numpy array.\n\nArguments: x: Numpy array to normalize. axis: axis along which to normalize. order: Normalization order (e.g. `order=2` for L2 norm).\n##### Returns\n', 'stemmed comments': ['order', 'return', 'array', 'numpi', 'L2', 'along', 'order=2', 'x', 'eg', 'normal', 'norm', 'argument', 'axi']}"
790,"{'func name': 'tf_rank', 'comments': '', 'stemmed comments': []}"
791,"{'func name': 'add_check_numerics_ops', 'comments': 'Connect a `tf.debugging.check_numerics` to every floating point tensor.\n\n`check_numerics` operations themselves are added for each `half`, `float`, or `double` tensor in the current default graph. For all ops in the graph, the `check_numerics` op for all of its (`half`, `float`, or `double`) inputs is guaranteed to run before the `check_numerics` op on any of its outputs.\n\nNote: This API is not compatible with the use of `tf.cond` or `tf.while_loop`, and will raise a `ValueError` if you attempt to call it in such a graph.\n##### Returns\n', 'stemmed comments': ['note', 'graph', 'point', 'rais', 'run', 'float', 'for', 'guarante', 'tfdebuggingcheck_numer', 'default', 'return', 'ad', 'everi', 'compat', 'thi', 'valueerror', 'doubl', 'api', 'call', 'attempt', 'half', 'input', 'tfcond', 'tensor', 'current', 'tfwhile_loop', 'check_numer', 'connect', 'oper', 'op', 'use', 'output']}"
792,"{'func name': 'one_host_numpy_dataset', 'comments': 'Create a dataset on `colocate_with` from `numpy_input`.\n\n\n', 'stemmed comments': ['dataset', 'creat', 'colocate_with', 'numpy_input']}"
793,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
794,"{'func name': 'make_one_hot_tests', 'comments': 'Make a set of tests to do one_hot.\n\n\n', 'stemmed comments': ['set', 'one_hot', 'make', 'test']}"
795,"{'func name': 'invoke_op_callbacks', 'comments': 'Invoke the callbacks that exist in the current scope (if any).\n\nIf no callbacks are present in the current scope, this method returns immediately.\n##### Args\n* **op_type**: Type of the operation (e.g., ""MatMul"").\n\n* **inputs**: Input tensors to the op. These are `EagerTensor`s in the case of\n  eager execution of ops or `FuncGraph`s, and are non-eager `Tensor`s in the\n  case of graph construction.\n\n* **attrs**: Attributes of the op, as `tuple` of alternating keys and values.\n\n* **outputs**: Output tensors from the op. These are `EagerTensor`s in the case of\n  eager execution and are non-eager `Tensor`s in the case of graph\n  construction.\n\n* **op_name**: Name of the op. Applicable if and only if this method is invoked\n  due to the graph construction of an op or the eager execution of of a\n  `FuncGraph`.\n\n* **graph**: The graph involved (if any).\n  - In the case if the eager execution of an op or FuncGraph, this is\n    `None`.\n  - In the case of the graph construction of an op, this is the `tf.Graph`\n    object being built.\n\n##### Returns\n', 'stemmed comments': ['tupl', 'graph', 'the', 'built', 'arg', 'tfgraph', 'object', 'funcgraph', 'op_typ', 'return', 'attribut', 'applic', 'valu', 'none', 'If', 'noneag', 'present', 'these', 'type', 'eagertensor', 'method', 'involv', 'scope', 'invok', 'eager', 'eg', 'attr', 'altern', 'input', 'callback', 'due', 'tensor', 'current', 'execut', 'matmul', 'key', 'op', 'oper', 'immedi', 'exist', 'case', 'op_nam', 'name', 'In', 'output', 'construct']}"
796,"{'func name': '_apply_op_helper', 'comments': 'Implementation of apply_op that returns output_structure, op.\n\n\n', 'stemmed comments': ['return', 'output_structur', 'op', 'apply_op', 'implement']}"
797,"{'func name': 'sync', 'comments': 'No-op. Used to synchronize the contents of the Python registry with C++.\n\n\n', 'stemmed comments': ['content', 'C', 'use', 'noop', 'python', 'synchron', 'registri']}"
798,"{'func name': 'convert_op_hints_to_stubs', 'comments': 'Converts a graphdef with LiteOp hints into stub operations.\n\nThis is used to prepare for toco conversion of complex intrinsic usages. Note: only one of session or graph_def should be used, not both.\n##### Args\n* **session**: A TensorFlow session that contains the graph to convert.\n\n* **graph_def**: A graph def that we should convert.\n\n* **write_callback**: A function pointer that can be used to write intermediate\n  steps of graph transformation (optional).\n\n##### Returns\n', 'stemmed comments': ['note', 'graph', 'complex', 'convers', 'session', 'arg', 'prepar', 'intrins', 'intermedi', 'step', 'return', 'usag', 'def', 'option', 'stub', 'transform', 'thi', 'pointer', 'write_callback', 'write', 'A', 'hint', 'convert', 'one', 'tensorflow', 'contain', 'function', 'oper', 'use', 'graph_def', 'graphdef', 'toco', 'liteop']}"
799,"{'func name': 'map_subgraph', 'comments': 'Walk a Graph and capture the subgraph between init_tensor and sources.\n\nNote: This function mutates visited_ops and op_outputs.\n\nArguments: init_tensor:\n\nA Tensor or Operation where the subgraph terminates. sources:\n\nA set of Tensors where subgraph extraction should stop. disallowed_placeholders: An optional set of ops which may not appear in the lifted graph. Defaults to all placeholders. visited_ops: A set of operations which were visited in a prior pass. op_outputs: A defaultdict containing the outputs of an op which are to be copied into the new subgraph. add_sources: A boolean indicating whether placeholders which are not in sources should be allowed.\n##### Returns\n', 'stemmed comments': ['note', 'pass', 'add_sourc', 'graph', 'mutat', 'visited_op', 'argument', 'default', 'return', 'prior', 'defaultdict', 'new', 'copi', 'option', 'termin', 'indic', 'boolean', 'thi', 'visit', 'allow', 'disallowed_placehold', 'An', 'may', 'placehold', 'whether', 'A', 'captur', 'appear', 'walk', 'extract', 'tensor', 'stop', 'sourc', 'lift', 'contain', 'function', 'op', 'oper', 'set', 'output', 'subgraph', 'init_tensor', 'op_output']}"
800,"{'func name': '_calc_a_forward_flops', 'comments': '', 'stemmed comments': []}"
801,"{'func name': 'get_potentially_supported_ops', 'comments': ""Returns operations potentially supported by TensorFlow Lite.\n\nThe potentially support list contains a list of ops that are partially or fully supported, which is derived by simply scanning op names to check whether they can be handled without real conversion and specific parameters.\n\nGiven that some ops may be partially supported, the optimal way to determine if a model's operations are supported is by converting using the TensorFlow Lite converter.\n##### Returns\n"", 'stemmed comments': ['simpli', 'the', 'convers', 'specif', 'optim', 'handl', 'determin', 'fulli', 'check', 'way', 'return', 'list', 'deriv', 'may', 'whether', 'partial', 'paramet', 's', 'support', 'convert', 'lite', 'potenti', 'tensorflow', 'real', 'model', 'contain', 'op', 'oper', 'name', 'use', 'given', 'scan', 'without']}"
802,"{'func name': 'set_int_list_attr', 'comments': 'TF internal method used to set a list(int) attribute in the node_def.\n\n\n', 'stemmed comments': ['int', 'node_def', 'attribut', 'method', 'use', 'set', 'TF', 'list', 'intern']}"
803,"{'func name': 'optimize', 'comments': 'A transformation that applies optimizations.\n\n\n##### Args\n* **optimizations**: (Optional.) A `tf.string` vector `tf.Tensor` identifying\n  optimizations to use. If not specified, the default set of optimizations\n  is applied.\n\n##### Returns\n', 'stemmed comments': ['If', 'default', 'return', 'tftensor', 'identifi', 'A', 'tfstring', 'vector', 'arg', 'optim', 'use', 'option', 'set', 'specifi', 'transform', 'appli']}"
804,"{'func name': '_captured_refvar_test_combinations', 'comments': '', 'stemmed comments': []}"
805,"{'func name': 'fuse_resize_and_conv', 'comments': ""Merges preceding resize and mirror pad ops into a specialized convolution.\n\nThere's a common pattern of enlarging the input to a convolution using a resize operation, and also using MirrorPad to extend the boundaries to that zero edge pixels don't bleed inwards when convolving. This routine looks for that pattern of operations, and fuses them together into a Conv2DWithResizeOp.\n##### Args\n* **input_graph_def**: A GraphDef containing a model.\n\n* **output_node_names**: A list of names of the nodes that produce the final\n  results.\n\n##### Returns\n"", 'stemmed comments': ['inward', 'togeth', 'output_node_nam', 'resiz', 'preced', 'convolut', 'merg', 'special', 'enlarg', 'arg', 'final', 'result', 'also', 'mirrorpad', 'nt', 'return', 'pad', 'boundari', 'bleed', 'list', 'there', 'thi', 'zero', 'routin', 'graphdef', 'node', 'A', 's', 'produc', 'input', 'extend', 'input_graph_def', 'model', 'conv2dwithresizeop', 'contain', 'convolv', 'pattern', 'op', 'oper', 'mirror', 'use', 'name', 'common', 'fuse', 'edg', 'pixel', 'look']}"
806,"{'func name': 'parse_args', 'comments': 'Parses command line arguments.\n\n\n', 'stemmed comments': ['line', 'command', 'pars', 'argument']}"
807,"{'func name': 'distributions_and_v1_and_v2_optimizers', 'comments': 'A common set of combination with DistributionStrategies and Optimizers.\n\n\n', 'stemmed comments': ['combin', 'A', 'optim', 'set', 'common', 'distributionstrategi']}"
808,"{'func name': 'make_model', 'comments': 'Constructs a simple ensemble of weak learners model.\n\n---------\n\n\n\n---------\n\n\n\n\n\n\n\n\n\n\n\n ---------\n\n\n\n--------- | Input |\n\n\n\n| Input |\n\n\n\n ...\n\n\n\n | Input |\n\n\n\n| Input | ---------\n\n\n\n---------\n\n\n\n\n\n\n\n\n\n\n\n ---------\n\n\n\n--------- |\n\n\n\n\n\n\n\n\n\n\n\n|\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n |\n\n\n\n\n\n\n\n\n\n\n\n| V\n\n\n\n\n\n\n\n\n\n\n\nV\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n V\n\n\n\n\n\n\n\n\n\n\n\nV ---------\n\n\n\n---------\n\n\n\n\n\n\n\n\n\n\n\n ---------\n\n\n\n--------- | Embed |\n\n\n\n| Embed |\n\n\n\n ...\n\n\n\n | Embed |\n\n\n\n| Embed | ---------\n\n\n\n---------\n\n\n\n\n\n\n\n\n\n\n\n ---------\n\n\n\n--------- |\n\n\n\n\n\n\n\n\n\n\n\n|\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n |\n\n\n\n\n\n\n\n\n\n\n\n| V\n\n\n\n\n\n\n\n\n\n\n\nV\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n V\n\n\n\n\n\n\n\n\n\n\n\nV ---------\n\n\n\n---------\n\n\n\n\n\n\n\n\n\n\n\n ---------\n\n\n\n--------- | Dense |\n\n\n\n| Dense |\n\n\n\n ...\n\n\n\n | Dense |\n\n\n\n| Dense | ---------\n\n\n\n---------\n\n\n\n\n\n\n\n\n\n\n\n ---------\n\n\n\n--------- \\\n\n\n\n\n\n\n\n\n\n\n\n|\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n |\n\n\n\n\n\n\n\n\n\n\n\n/ \\\n\n\n\n\n\n\n\n\n\n |\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n |\n\n\n\n\n\n\n\n\n\n / --------------------------------------------- | --------- | Dense | ---------\n\nThis topology is chosen because it exercises both dense and sparse update paths.\n##### Returns\n', 'stemmed comments': ['dens', '/', 'ensembl', 'topolog', 'chosen', 'V', 'emb', 'spars', '|', 'return', 'weak', 'exercis', '\\', 'thi', 'path', 'input', 'learner', 'model', 'updat', 'simpl', 'construct']}"
809,"{'func name': '_get_slot_key_from_var', 'comments': 'Get the slot key for the variable: var_name/slot_name.\n\n\n', 'stemmed comments': ['variabl', 'key', 'get', 'var_name/slot_nam', 'slot']}"
810,"{'func name': '_get_processor', 'comments': 'The processor of v.\n\n\n', 'stemmed comments': ['the', 'processor', 'v']}"
811,"{'func name': '_get_model', 'comments': '', 'stemmed comments': []}"
812,"{'func name': 'get', 'comments': 'Retrieves a Keras Optimizer instance.\n\nArguments: identifier: Optimizer identifier, one of\n\n- String: name of an optimizer\n\n- Dictionary: configuration dictionary.\n\n- Keras Optimizer instance (it will be returned unchanged).\n\n- TensorFlow Optimizer instance (it will be wrapped as a Keras Optimizer).\n##### Returns\n', 'stemmed comments': ['wrap', 'instanc', 'return', 'unchang', 'retriev', 'identifi', 'configur', 'dictionari', 'string', 'optim', 'name', 'kera', 'one', 'tensorflow', 'argument']}"
813,"{'func name': '_OptionalGetValueGrad', 'comments': '', 'stemmed comments': []}"
814,"{'func name': '_get_next_as_optional_test_combinations', 'comments': '', 'stemmed comments': []}"
815,"{'func name': 'merge_options', 'comments': 'Merges the given options, returning the result as a new options object.\n\nThe input arguments are expected to have a matching type that derives from `OptionsBase` (and thus each represent a set of options). The method outputs an object of the same type created by merging the sets of options represented by the input arguments.\n\nThe sets of options can be merged as long as there does not exist an option with different non-default values.\n\nIf an option is an instance of `OptionsBase` itself, then this method is applied recursively to the set of options represented by this option.\n##### Args\n* ***options_list**: options to merge\n\n##### Returns\n', 'stemmed comments': ['expect', 'instanc', 'the', 'arg', 'merg', 'long', 'match', 'result', 'appli', 'object', 'argument', 'optionsbas', 'options_list', 'return', 'new', 'valu', 'option', 'recurs', 'If', 'deriv', 'type', 'thu', 'method', 'input', 'differ', 'nondefault', 'creat', 'repres', 'set', 'given', 'exist', 'output']}"
816,"{'func name': 'resolve_entity', 'comments': 'Like resolve, but extracts the context information from an entity.\n\n\n', 'stemmed comments': ['like', 'resolv', 'entiti', 'extract', 'inform', 'context']}"
817,"{'func name': '_module_to_paths', 'comments': 'Get all API __init__.py file paths for the given module.\n\n\n##### Args\n* **module**: Module to get file paths for.\n\n##### Returns\n', 'stemmed comments': ['return', 'api', 'arg', 'given', 'path', 'get', '__init__pi', 'modul', 'file']}"
818,"{'func name': 'make_pack_tests', 'comments': 'Make a set of tests to do stack.\n\n\n', 'stemmed comments': ['set', 'make', 'stack', 'test']}"
819,"{'func name': '_tensor_conversion_packed_var_and_device', 'comments': '', 'stemmed comments': []}"
820,"{'func name': 'make_pad_tests', 'comments': 'Make a set of tests to do pad.\n\n\n', 'stemmed comments': ['pad', 'set', 'make', 'test']}"
821,"{'func name': 'make_padv2_tests', 'comments': 'Make a set of tests to do padv2.\n\n\n', 'stemmed comments': ['set', 'padv2', 'make', 'test']}"
822,"{'func name': '_collective_sum', 'comments': '', 'stemmed comments': []}"
823,"{'func name': '_make_fake_dataset_fn', 'comments': 'Returns a dataset that emulates a remote storage data source.\n\n\n##### Args\n* **initial_delay_us**: How long to wait before producing the first element.\n\n* **remainder_delay_us**: How long to wait before producing subsequent elements.\n\n##### Returns\n', 'stemmed comments': ['data', 'return', 'remainder_delay_u', 'wait', 'subsequ', 'arg', 'emul', 'initial_delay_u', 'dataset', 'storag', 'long', 'produc', 'remot', 'first', 'how', 'element', 'sourc']}"
824,"{'func name': 'create_test_objects', 'comments': '', 'stemmed comments': []}"
825,"{'func name': 'randn_sampler_switchover', 'comments': '', 'stemmed comments': []}"
826,"{'func name': '_compare_output_to_expected', 'comments': '', 'stemmed comments': []}"
827,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
828,"{'func name': 'generate_global_index', 'comments': 'Given a dict of full names to python objects, generate an index page.\n\nThe index page generated contains a list of links for all symbols in `index` that have their own documentation page.\n##### Args\n* **library_name**: The name for the documented library to use in the title.\n\n* **index**: A dict mapping full names to python objects.\n\n* **reference_resolver**: An instance of ReferenceResolver.\n\n##### Returns\n', 'stemmed comments': ['map', 'symbol', 'page', 'instanc', 'the', 'arg', 'link', 'index', 'document', 'object', 'referenceresolv', 'return', 'titl', 'dict', 'library_nam', 'full', 'list', 'An', 'A', 'reference_resolv', 'contain', 'name', 'use', 'given', 'python', 'librari', 'gener']}"
829,"{'func name': '_build_ragged_tensors', 'comments': 'Builds RaggedTensors from the outputs of a parse op.\n\n\n', 'stemmed comments': ['raggedtensor', 'op', 'pars', 'output', 'build']}"
830,"{'func name': '_compare_output_to_expected', 'comments': '', 'stemmed comments': []}"
831,"{'func name': 'parse_example_dataset', 'comments': 'A transformation that parses `Example` protos into a `dict` of tensors.\n\nParses a number of serialized `Example` protos given in `serialized`. We refer to `serialized` as a batch with `batch_size` many entries of individual `Example` protos.\n\nThis op parses serialized examples into a dictionary mapping keys to `Tensor`, `SparseTensor`, and `RaggedTensor` objects. `features` is a dict from keys to `VarLenFeature`, `RaggedFeature`, `SparseFeature`, and `FixedLenFeature` objects. Each `VarLenFeature` and `SparseFeature` is mapped to a `SparseTensor`; each `RaggedFeature` is mapped to a `RaggedTensor`; and each `FixedLenFeature` is mapped to a `Tensor`. See `tf.io.parse_example` for more details about feature dictionaries.\n##### Args\n* **features**: A `dict` mapping feature keys to `FixedLenFeature`,\n  `VarLenFeature`, `RaggedFeature`, and `SparseFeature` values.\n\n* **num_parallel_calls**: (Optional.) A `tf.int32` scalar `tf.Tensor`,\n   representing the number of parsing processes to call in parallel.\n\n* **deterministic**: (Optional.) A boolean controlling whether determinism\n   should be traded for performance by allowing elements to be produced out\n   of order if some parsing calls complete faster than others. If\n   `deterministic` is `None`, the\n   `tf.data.Options.experimental_deterministic` dataset option (`True` by\n   default) is used to decide whether to produce elements\n   deterministically.\n\n##### Returns\n', 'stemmed comments': ['mani', 'map', 'We', ';', 'tftensor', 'sparsefeatur', 'dictionari', 'each', 'arg', 'complet', 'varlenfeatur', 'parallel', 'tfint32', 'control', 'determin', 'process', 'trade', 'object', 'order', 'default', 'see', 'return', 'detail', 'valu', 'dict', 'option', 'pars', 'none', 'boolean', 'transform', 'thi', 'num_parallel_cal', 'If', 'element', 'allow', 'serial', 'raggedtensor', 'whether', 'proto', 'A', 'call', 'raggedfeatur', 'exampl', 'sparsetensor', 'entri', 'produc', 'scalar', 'dataset', 'individu', 'decid', 'tfioparse_exampl', 'batch_siz', 'tensor', 'batch', 'perform', 'repres', 'featur', 'other', 'key', 'op', 'fixedlenfeatur', 'use', 'given', 'true', 'tfdataoptionsexperimental_determinist', 'refer', 'faster', 'number', 'determinist']}"
832,"{'func name': '_assert_scalar', 'comments': 'Asserts that `value` is scalar, and returns `value`.\n\n\n', 'stemmed comments': ['valu', 'scalar', 'assert', 'return']}"
833,"{'func name': '_IotaInitializer', 'comments': '', 'stemmed comments': []}"
834,"{'func name': 'create_partitioned_variables', 'comments': 'Create a list of partitioned variables according to the given `slicing`.\n\nCurrently only one dimension of the full variable can be sliced, and the full variable can be reconstructed by the concatenation of the returned list along that dimension.\n##### Args\n* **shape**: List of integers.  The shape of the full variable.\n\n* **slicing**: List of integers.  How to partition the variable.\n  Must be of the same length as `shape`.  Each value\n  indicate how many slices to create in the corresponding\n  dimension.  Presently only one of the values can be more than 1;\n  that is, the variable can only be sliced along one dimension.\n  For convenience, The requested number of partitions does not have to\n  divide the corresponding dimension evenly.  If it does not, the\n  shapes of the partitions are incremented by 1 starting from partition\n  0 until all slack is absorbed.  The adjustment rules may change in the\n  future, but as you can save/restore these variables with different\n  slicing specifications this should not be a problem.\n\n* **initializer**: A `Tensor` of shape `shape` or a variable initializer\n  function.  If a function, it will be called once for each slice,\n  passing the shape and data type of the slice as parameters.  The\n  function must return a tensor with the same shape as the slice.\n\n* **dtype**: Type of the variables. Ignored if `initializer` is a `Tensor`.\n\n* **trainable**: If True also add all the variables to the graph collection\n  `GraphKeys.TRAINABLE_VARIABLES`.\n\n* **collections**: List of graph collections keys to add the variables to.\n  Defaults to `[GraphKeys.GLOBAL_VARIABLES]`.\n\n* **name**: Optional name for the full variable.  Defaults to\n  `""PartitionedVariable""` and gets uniquified automatically.\n\n* **reuse**: Boolean or `None`; if `True` and name is set, it would reuse\n  previously created variables. if `False` it will create new variables.\n  if `None`, it would inherit the parent scope reuse.\n\n##### Returns\n', 'stemmed comments': ['mani', 'the', 'arg', 'conveni', 'partit', 'evenli', 'partitionedvari', 'indic', 'get', 'none', 'how', 'integ', 'must', ']', 'type', 'variabl', 'chang', 'would', 'current', 'along', 'key', 'number', ';', 'pass', 'each', 'specif', 'for', 'initi', 'also', 'default', 'return', 'new', 'valu', 'option', 'full', 'list', 'automat', 'trainabl', 'futur', 'A', 'paramet', 'ignor', 'one', 'data', 'creat', 'name', 'true', 'adjust', '[', 'dimens', 'reconstruct', 'inherit', 'save/restor', 'graphkeystrainable_vari', 'may', 'call', 'scope', 'uniquifi', 'parent', 'shape', 'accord', 'reus', 'previous', 'function', '0', 'start', 'length', 'graphkeysglobal_vari', 'graph', 'slice', 'fals', 'add', 'problem', 'concaten', '1', 'boolean', 'If', 'present', 'rule', 'correspond', 'differ', 'tensor', 'absorb', 'collect', 'request', 'dtype', 'increment', 'divid', 'set', 'given', 'slack']}"
835,"{'func name': '_convert_rfft', 'comments': '', 'stemmed comments': []}"
836,"{'func name': 'main', 'comments': 'This script runs the pip smoke test.\n\n\n', 'stemmed comments': ['script', 'pip', 'smoke', 'run', 'thi', 'test']}"
837,"{'func name': 'make_placeholder_with_default_tests', 'comments': 'Make a set of tests to test placeholder_with_default.\n\n\n', 'stemmed comments': ['placeholder_with_default', 'set', 'make', 'test']}"
838,"{'func name': 'get_all_plugin_assets', 'comments': 'Retrieve all PluginAssets stored in the graph collection.\n\n\n##### Args\n* **graph**: Optionally, the graph to get assets from. If unspecified, the default\n  graph is used.\n\n##### Returns\n', 'stemmed comments': ['asset', 'default', 'collect', 'pluginasset', 'return', 'graph', 'retriev', 'arg', 'use', 'option', 'store', 'get', 'If', 'unspecifi']}"
839,"{'func name': 'deserialize', 'comments': '', 'stemmed comments': []}"
840,"{'func name': 'pool_direct', 'comments': 'Numpy implementation of pooling.\n\nThis is intended for testing only, and therefore isn\'t particularly efficient.\n\nSee tensorflow.nn.pool.\n##### Args\n* **input**: numpy array of rank N+2.\n\n* **window_shape**: Sequence of N ints >= 1.\n\n* **pooling_type**: either ""MAX"" or ""AVG"".\n\n* **padding**: either ""SAME"" or ""VALID"".\n\n* **dilation_rate**: Sequence of N ints >= 1.\n\n* **strides**: Sequence of N ints >= 1.\n\n* **data_format**: If specified and starts with ""NC"", indicates that second\n  dimension, rather than the last dimension, specifies the channel.\n\n##### Returns\n', 'stemmed comments': ['start', 'N2', 'array', 'channel', 'arg', 'therefor', 'pool', 'pooling_typ', 'data_format', 'effici', 'window_shap', 'dimens', '>', 'nt', 'N', 'see', 'return', 'pad', 'indic', '=', 'max', '1', 'dilation_r', 'If', 'thi', 'valid', 'same', 'rank', 'numpi', 'sequenc', 'avg', 'intend', 'rather', 'input', 'specifi', 'implement', 'test', 'particularli', 'int', 'NC', 'either', 'last', 'second', 'tensorflownnpool', 'stride']}"
841,"{'func name': 'make_max_pool_tests', 'comments': '', 'stemmed comments': []}"
842,"{'func name': '_AvgPoolGrad', 'comments': '', 'stemmed comments': []}"
843,"{'func name': 'GetTestConfigs', 'comments': 'Get all the valid tests configs to run.\n\n\n##### Returns\n', 'stemmed comments': ['config', 'return', 'run', 'get', 'valid', 'test']}"
844,"{'func name': 'GetTestConfigs', 'comments': 'Get all the valid tests configs to run.\n\n\n##### Returns\n', 'stemmed comments': ['config', 'return', 'run', 'get', 'valid', 'test']}"
845,"{'func name': 'GetMaxPoolGradGradTest', 'comments': '', 'stemmed comments': []}"
846,"{'func name': 'max_pooling3d', 'comments': ""Max pooling layer for 3D inputs (e.g.\n\nvolumes).\n\nArguments: inputs: The tensor over which to pool. Must have rank 5. pool_size: An integer or tuple/list of 3 integers: (pool_depth, pool_height, pool_width) specifying the size of the pooling window. Can be a single integer to specify the same value for all spatial dimensions. strides: An integer or tuple/list of 3 integers, specifying the strides of the pooling operation. Can be a single integer to specify the same value for all spatial dimensions. padding: A string. The padding method, either 'valid' or 'same'. Case-insensitive. data_format: A string. The ordering of the dimensions in the inputs. `channels_last` (default) and `channels_first` are supported. `channels_last` corresponds to inputs with shape `(batch, depth, height, width, channels)` while `channels_first` corresponds to inputs with shape `(batch, channels, depth, height, width)`. name: A string, the name of the layer.\n##### Returns\n"", 'stemmed comments': ['the', 'channel', '3', 'pool', 'pool_depth', 'height', 'data_format', 'pool_siz', 'dimens', 'argument', 'order', 'default', '3D', 'return', 'window', 'pad', 'width', 'valu', 'max', 'spatial', 'valid', 'layer', 'singl', 'must', 'rank', 'integ', 'same', 'An', 'depth', 'A', 'method', 'string', 'channels_first', 'pool_width', 'support', 'eg', 'shape', 'correspond', 'input', 'specifi', 'tuple/list', 'tensor', 'batch', 'either', 'can', 'oper', 'caseinsensit', 'pool_height', 'name', '5', 'size', 'volum', 'channels_last', 'stride']}"
847,"{'func name': 'profile', 'comments': 'Generate profiles in pprof format.\n\nSee https://github.com/google/pprof/blob/master/proto/profile.proto for pprof proto format.\n##### Args\n* **graph**: A `Graph` object.\n\n* **run_metadata**: A `RunMetadata` proto.\n\n* **output_dir**: (string) Directory to output pprof profile to.\n  Profile files for each device will be stored in compressed\n  serialized proto format. If output_dir is None, profile protos\n  will be printed to stdout instead.\n\n##### Returns\n* **(Note**: this list will be empty if output_dir is None)\n\n', 'stemmed comments': ['note', 'format', 'graph', 'compress', 'arg', 'output_dir', 'object', 'see', 'return', 'none', 'list', 'pprof', 'If', '//githubcom/google/pprof/blob/master/proto/profileproto', 'instead', 'stdout', 'serial', 'proto', 'A', 'run_metadata', 'string', 'devic', 'store', 'runmetadata', 'profil', 'file', 'http', 'directori', 'print', 'empti', 'output', 'gener']}"
848,"{'func name': 'map_on_gpu', 'comments': 'Maps `map_func` across the elements of this dataset.\n\nNOTE: This is a highly experimental version of `tf.data.Dataset.map` that runs `map_func` on GPU. It must be used after applying the `tf.data.experimental.copy_to_device` transformation with a GPU device argument.\n##### Args\n* **map_func**: A function mapping a nested structure of tensors (having shapes\n  and types defined by `self.output_shapes` and `self.output_types`) to\n  another nested structure of tensors.\n\n##### Returns\n', 'stemmed comments': ['note', 'map', 'experiment', 'map_func', 'run', 'arg', 'nest', 'appli', 'argument', 'return', 'anoth', 'selfoutput_typ', 'transform', 'thi', 'gpu', 'element', 'must', 'highli', 'It', 'selfoutput_shap', 'structur', 'type', 'A', 'dataset', 'devic', 'shape', 'tfdataexperimentalcopy_to_devic', 'version', 'tensor', 'defin', 'tfdatadatasetmap', 'function', 'use', 'across']}"
849,"{'func name': 'make_prelu_tests', 'comments': 'Make a set of tests to do PReLU.\n\n\n', 'stemmed comments': ['prelu', 'set', 'make', 'test']}"
850,"{'func name': '_build_aliases', 'comments': '', 'stemmed comments': []}"
851,"{'func name': 'fmt', 'comments': '', 'stemmed comments': []}"
852,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
853,"{'func name': '_assert_no_lines_match', 'comments': '', 'stemmed comments': []}"
854,"{'func name': 'create_profiler_ui', 'comments': 'Create an instance of CursesUI based on a `tf.Graph` and `RunMetadata`.\n\n\n##### Args\n* **graph**: Python `Graph` object.\n\n* **run_metadata**: A `RunMetadata` protobuf object.\n\n* **ui_type**: (str) requested UI type, e.g., ""curses"", ""readline"".\n\n* **on_ui_exit**: (`Callable`) the callback to be called when the UI exits.\n\n* **config**: An instance of `cli_config.CLIConfig`.\n\n##### Returns\n', 'stemmed comments': ['instanc', 'graph', 'curs', 'UI', 'arg', 'tfgraph', 'ui_typ', 'object', 'readlin', 'return', 'An', 'callabl', 'type', 'A', 'run_metadata', 'on_ui_exit', 'call', 'exit', 'str', 'eg', 'runmetadata', 'callback', 'cursesui', 'base', 'protobuf', 'creat', 'request', 'config', 'cli_configcliconfig', 'python']}"
855,"{'func name': '_profiled_run', 'comments': 'Overwrites the session.run().\n\n\n', 'stemmed comments': ['sessionrun', 'overwrit']}"
856,"{'func name': 'add_ProfileAnalysisServicer_to_server', 'comments': '', 'stemmed comments': []}"
857,"{'func name': 'monitor', 'comments': 'Sends grpc requests to profiler server to perform on-demand monitoring.\n\nThis method will block caller thread until receives monitoring result.\n##### Args\n* **service_addr**: Address of profiler service e.g. localhost\n\n* **duration_ms**: Duration of tracing or monitoring in ms.\n\n* **monitoring_level**: Choose a monitoring level between 1 and 2 to monitor your\n  job. Level 2 is more verbose than level 1 and shows more metrics.\n\n* **display_timestamp**: Set to true to display timestamp in monitoring result.\n\n##### Returns\n', 'stemmed comments': ['service_addr', 'send', 'timestamp', 'arg', 'ondemand', 'result', 'show', 'display', 'return', 'servic', 'ms', '2', '1', 'durat', 'trace', 'thi', 'monitoring_level', 'monitor', 'receiv', 'method', 'server', 'grpc', 'eg', 'verbos', 'metric', 'address', 'thread', 'profil', 'duration_m', 'perform', 'request', 'display_timestamp', 'choos', 'set', 'true', 'block', 'job', 'localhost', 'caller', 'level']}"
858,"{'func name': '_strip_prefix', 'comments': '', 'stemmed comments': []}"
859,"{'func name': 'start_server', 'comments': ""Start a profiler grpc server that listens to given port.\n\nThe profiler server will exit when the process finishes. The service is defined in tensorflow/core/profiler/profiler_service.proto.\n##### Args\n* **port**: port profiler server listens to.\n\n* **ample usage**: ```python tf.profiler.experimental.server.start('6009') # do\n\n"", 'stemmed comments': ['start', 'the', 'arg', 'process', 'usag', 'servic', 'port', 'exit', 'server', 'grpc', 'ampl', 'profil', 'defin', 'tensorflow/core/profiler/profiler_serviceproto', 'tfprofilerexperimentalserverstart', 'listen', 'given', 'python', '6009', 'finish']}"
860,"{'func name': 'start_profiler_server', 'comments': 'Start a profiler grpc server that listens to given port.\n\nThe profiler server will keep the program running even the training finishes. Please shutdown the server with CTRL-C. It can be used in both eager mode and graph mode. The service defined in tensorflow/core/profiler/profiler_service.proto. Please use tensorflow/contrib/tpu/profiler/capture_tpu_profile to capture tracable file following https://cloud.google.com/tpu/docs/cloud-tpu-tools#capture_trace\n##### Args\n* **port**: port profiler server listens to.\n\n', 'stemmed comments': ['start', 'keep', 'graph', 'run', 'the', 'tracabl', 'arg', 'mode', 'program', 'servic', 'capture_trac', 'shutdown', 'port', 'train', 'It', '//cloudgooglecom/tpu/docs/cloudtputool', 'captur', 'server', 'eager', 'follow', 'grpc', 'ctrlc', 'even', 'profil', 'defin', 'tensorflow/core/profiler/profiler_serviceproto', 'file', 'http', 'listen', 'use', 'given', 'pleas', 'tensorflow/contrib/tpu/profiler/capture_tpu_profil', 'finish']}"
861,"{'func name': '_tensor_conversion_aggregate', 'comments': '', 'stemmed comments': []}"
862,"{'func name': '_py_sorted', 'comments': '', 'stemmed comments': []}"
863,"{'func name': 'NewCheckpointReader', 'comments': 'A function that returns a CheckPointReader.\n\n\n##### Args\n* **filepattern**: The filename.\n\n##### Returns\n', 'stemmed comments': ['return', 'A', 'function', 'filenam', 'checkpointread', 'the', 'arg', 'filepattern']}"
864,"{'func name': 'matmul', 'comments': '', 'stemmed comments': []}"
865,"{'func name': 'wrap_py_func', 'comments': ""Helper that wraps a callable to py_func.\n\nThe helper passes tensor arguments through the py_func interface. Non-tensor arguments are allowed, and will be passed to f directly. Note that non-tensor arguments are captured by f will not update every time the wrapper is called (this is consistent with its argument list, which only includes the tensor arguments). In general, it's safest not to reuse this wrapper.\n##### Args\n* **f**: Callable\n\n* **return_dtypes**: None, individual of tuple/list of DType or MatchDType, the\n    data type for each of f's return value(s). Set to None if f has no\n    return values or use_dummy_return is True. Use MatchDType to define a\n    dtype identical to that of `i`th argument (argument 0 is the first);\n    an argument must of Tensor type if it is to be used with MatchDType.\n\n* **args**: Positional arguments for f, as list or tuple.\n\n* **kwargs**: Keyword arguments for f, as dict with string keys. May be None.\n\n* **use_dummy_return**: If True, the function will return a dummy value of 1\n    and discard its actual return value.\n\n##### Returns\n"", 'stemmed comments': ['wrap', 'note', 'tupl', 'pass', ';', 'helper', 'the', 'nontensor', 'arg', 'includ', 'argument', 'return', 'time', 'actual', 'valu', 'dict', 'none', 'list', '1', 'everi', 'return_dtyp', 'ident', 'safest', 'If', 'discard', 'allow', 'must', 'may', 'callabl', 'type', 'f', 'call', 'captur', 's', 'kwarg', 'string', 'consist', 'individu', 'use_dummy_return', 'interfac', 'tuple/list', 'tensor', 'wrapper', 'reus', 'data', 'defin', 'dtype', 'directli', 'th', 'function', 'key', 'posit', 'updat', 'In', 'set', 'use', 'true', '0', 'first', 'keyword', 'py_func', 'dummi', 'matchdtyp', 'gener']}"
866,"{'func name': 'md_files_in_dir', 'comments': 'Returns a list of filename (full_path, base) pairs for guide files.\n\n\n', 'stemmed comments': ['return', 'filenam', 'pair', 'guid', 'full_path', 'list', 'file', 'base']}"
867,"{'func name': '_snapshot_diff', 'comments': '', 'stemmed comments': []}"
868,"{'func name': '_IsProtoClass', 'comments': 'Returns whether the passed obj is a Protocol Buffer class.\n\n\n', 'stemmed comments': ['pass', 'return', 'obj', 'whether', 'class', 'protocol', 'buffer']}"
869,"{'func name': 'reset_dlopen_flags', 'comments': '', 'stemmed comments': []}"
870,"{'func name': 'experimental_run_pass_pipeline', 'comments': '', 'stemmed comments': []}"
871,"{'func name': 'TF_Reset', 'comments': '', 'stemmed comments': []}"
872,"{'func name': '_GetQrGradOpTest', 'comments': '', 'stemmed comments': []}"
873,"{'func name': 'from_str', 'comments': '', 'stemmed comments': []}"
874,"{'func name': '_GetParams', 'comments': '', 'stemmed comments': []}"
875,"{'func name': 'do_quantize_training_on_graphdef', 'comments': 'A general quantization scheme is being developed in `tf.contrib.quantize`.\n\nConsider using that instead, though since it is in the tf.contrib namespace, it is not subject to backward compatibility guarantees.\n##### Args\n* **input_graph**: A `GraphDef`.\n\n* **num_bits**: The number of bits for quantize training.\n\n##### Returns\n', 'stemmed comments': ['subject', 'the', 'arg', 'number', 'input_graph', 'guarante', 'return', 'compat', 'tfcontribquant', 'develop', 'instead', 'train', 'consid', 'A', 'namespac', 'bit', 'backward', 'num_bit', 'tfcontrib', 'though', 'sinc', 'use', 'quantiz', 'graphdef', 'scheme', 'gener']}"
876,"{'func name': 'start_queue_runners', 'comments': ""Starts all queue runners collected in the graph.\n\nThis is a companion method to `add_queue_runner()`.\n\nIt just starts threads for all queue runners collected in the graph.\n\nIt returns the list of all threads.\n##### Args\n* **sess**: `Session` used to run the queue ops.  Defaults to the\n  default session.\n\n* **coord**: Optional `Coordinator` for coordinating the started threads.\n\n* **daemon**: Whether the threads should be marked as `daemons`, meaning\n  they don't block program exit.\n\n* **start**: Set to `False` to only create the threads, not start them.\n\n* **collection**: A `GraphKey` specifying the graph collection to\n  get the queue runners from.  Defaults to `GraphKeys.QUEUE_RUNNERS`.\n\n##### Returns\n"", 'stemmed comments': ['start', 'graph', 'run', 'daemon', 'session', 'arg', 'mean', 'coord', 'mark', 'fals', 'default', 'nt', 'program', 'return', 'add_queue_runn', 'option', 'get', 'list', 'thi', 'runner', 'It', 'whether', 'A', 'method', 'graphkeysqueue_runn', 'exit', 'queue', 'thread', 'specifi', 'collect', 'sess', 'creat', 'companion', 'graphkey', 'op', 'use', 'set', 'block', 'coordin']}"
877,"{'func name': '_cross_internal', 'comments': 'Generates feature cross from a list of ragged and dense tensors.\n\n\n', 'stemmed comments': ['dens', 'cross', 'featur', 'list', 'tensor', 'rag', 'gener']}"
878,"{'func name': 'batch_gather', 'comments': 'Gathers slices from `params` according to `indices` with batch dims.\n\nThis operation is similar to `gather`, but it assumes that the leading `N` dimensions of `indices` and `params` are batch dimensions, and performs a gather within each batch.\n\nIn particular, when using this operation with `N` batch dimensions `B1...BN`:\n\n* `indices` has shape `[B1...BN, I]` * `params` has shape `[B1...BN, P1...PM]`. * `result` has shape `[B1...BN, I, P2...PM]`. * `result[b1...bN, i, p2...pM] = params[b1...bN, indices[b1...bN, i], p2...pM]`\n##### Args\n* **params**: A potentially ragged tensor with shape `[B1...BN, P1...PM]` (`N>=0`,\n  `M>0`).\n\n* **indices**: A potentially ragged tensor with shape `[B1...BN, I]` (`N>=0`).\n\n* **name**: A name for the operation (optional).\n\n##### Returns\n* **## Example**: \n\n', 'stemmed comments': ['P1', '[', 'B1', 'arg', 'slice', 'result', 'dimens', 'rag', '>', 'N', 'particular', 'b1', 'return', 'dim', 'PM', 'assum', 'p2', 'indic', '=', 'option', 'gather', 'bN', 'thi', 'param', 'I', ']', 'P2', 'A', 'exampl', 'shape', 'accord', 'potenti', 'tensor', 'batch', 'M', 'similar', 'perform', '=0', 'oper', 'In', 'use', 'lead', 'BN', 'pM', '0', 'name', 'within']}"
879,"{'func name': '_get_pad_shape', 'comments': 'Gets the RaggedTensorDynamicShape for the pad tensor.\n\n\n', 'stemmed comments': ['pad', 'tensor', 'raggedtensordynamicshap', 'get']}"
880,"{'func name': '_concat_ragged_splits', 'comments': 'Concatenates a list of RaggedTensor splits to form a single splits.\n\n\n', 'stemmed comments': ['raggedtensor', 'split', 'concaten', 'list', 'form', 'singl']}"
881,"{'func name': 'auto_cast_partition_dtype', 'comments': 'Whether incompatible row-partitioning dtypes should be auto-converted.\n\nIf true, then operations that combine RaggedTensors but have different row-partitioning tensor dtypes will be automatically cast to a compatible dtype (`tf.int64`).\n\nIf false, then such operations will result in an error.\n##### Returns\n', 'stemmed comments': ['combin', 'autoconvert', 'result', 'fals', 'incompat', 'error', 'return', 'tfint64', 'automat', 'compat', 'If', 'raggedtensor', 'whether', 'differ', 'tensor', 'dtype', 'oper', 'true', 'rowpartit', 'cast']}"
882,"{'func name': '_normalize_pylist', 'comments': 'Convert all (possibly nested) np.arrays contained in item to list.\n\n\n', 'stemmed comments': ['contain', 'nest', 'convert', 'nparray', 'item', 'list', 'possibl']}"
883,"{'func name': '_normalize_pylist', 'comments': 'Convert all (possibly nested) np.arrays contained in item to list.\n\n\n', 'stemmed comments': ['contain', 'nest', 'convert', 'nparray', 'item', 'list', 'possibl']}"
884,"{'func name': 'from_sparse', 'comments': '', 'stemmed comments': []}"
885,"{'func name': 'sparse_const', 'comments': '', 'stemmed comments': []}"
886,"{'func name': 'ragged_op_list', 'comments': 'Returns a string listing operators that have dispathers registered.\n\n\n', 'stemmed comments': ['dispath', 'return', 'regist', 'string', 'oper', 'list']}"
887,"{'func name': 'placeholder', 'comments': 'Creates a placeholder for a `tf.RaggedTensor` that will always be fed.\n\n**Important**: This ragged tensor will produce an error if evaluated. Its value must be fed using the `feed_dict` optional argument to `Session.run()`, `Tensor.eval()`, or `Operation.run()`.\n\n@compatibility{eager} Placeholders are not compatible with eager execution.\n##### Args\n* **dtype**: The data type for the `RaggedTensor`.\n\n* **ragged_rank**: The ragged rank for the `RaggedTensor`\n\n* **value_shape**: The shape for individual flat values in the `RaggedTensor`.\n\n* **name**: A name for the operation (optional).\n\n##### Returns\n', 'stemmed comments': ['it', 'value_shap', 'sessionrun', 'the', 'alway', 'arg', '{', 'error', 'tfraggedtensor', 'argument', 'rag', 'feed_dict', 'return', 'valu', 'option', 'compat', 'thi', 'operationrun', 'must', 'rank', 'placehold', 'raggedtensor', 'type', 'A', 'import', 'eager', 'produc', 'tensorev', 'evalu', '}', 'shape', 'individu', 'flat', 'tensor', 'ragged_rank', 'data', 'creat', '@', 'fed', 'execut', 'dtype', 'oper', 'name', 'use']}"
888,"{'func name': '_replace_ragged_with_flat_values', 'comments': 'Replace RaggedTensors with their flat_values, and record their splits.\n\n\n##### Args\n* **value**: The value that should be transformed by replacing `RaggedTensors`.\n\n* **nested_splits_lists**: An output parameter used to record the `nested_splits`\n  for any `RaggedTensors` that were replaced.\n\n##### Returns\n', 'stemmed comments': ['An', 'raggedtensor', 'return', 'split', 'paramet', 'replac', 'the', 'flat_valu', 'arg', 'valu', 'nested_splits_list', 'use', 'record', 'nested_split', 'transform', 'output']}"
889,"{'func name': '_ragged_gather_grad', 'comments': 'Gradient for RaggedGather op.\n\n\n', 'stemmed comments': ['gradient', 'raggedgath', 'op']}"
890,"{'func name': '_make_tensor_slice_spec', 'comments': 'Wraps all integers in an extended slice spec w/ a tensor.\n\nThis function is used to help test slicing when the slice spec contains tensors, rather than integers.\n##### Args\n* **slice_spec**: The extended slice spec.\n\n* **use_constant**: If true, then wrap each integer with a tf.constant.  If false,\n  then wrap each integer with a tf.placeholder.\n\n##### Returns\n', 'stemmed comments': ['wrap', 'the', 'arg', 'slice', 'fals', 'return', 'tfplacehold', 'slice_spec', 'If', 'thi', 'integ', 'tfconstant', 'use_const', 'rather', 'spec', 'tensor', 'extend', 'help', 'test', 'contain', 'function', 'use', 'true', 'w/']}"
891,"{'func name': '_if_ge_zero', 'comments': 'Returns `true_fn() if value >= 0 else false_fn()`.\n\n\n', 'stemmed comments': ['return', 'els', 'valu', 'false_fn', '0', '=', 'true_fn', '>']}"
892,"{'func name': '_ragged_type_to_spec', 'comments': '', 'stemmed comments': []}"
893,"{'func name': '_set_ragged_reduce_docstring', 'comments': '', 'stemmed comments': []}"
894,"{'func name': '_dummy_bool', 'comments': 'Dummy method to prevent a RaggedTensor from being used as a Python bool.\n\n\n', 'stemmed comments': ['raggedtensor', 'method', 'use', 'python', 'bool', 'dummi', 'prevent']}"
895,"{'func name': 'mean', 'comments': '', 'stemmed comments': []}"
896,"{'func name': 'sqrt_n', 'comments': '', 'stemmed comments': []}"
897,"{'func name': 'squeeze', 'comments': 'Ragged compatible squeeze.\n\nIf `input` is a `tf.Tensor`, then this calls `tf.squeeze`.\n\nIf `input` is a `tf.RaggedTensor`, then this operation takes `O(N)` time, where `N` is the number of elements in the squeezed dimensions.\n##### Args\n* **input**: A potentially ragged tensor. The input to squeeze.\n\n* **axis**: An optional list of ints. Defaults to `None`. If the `input` is\n  ragged, it only squeezes the dimensions listed. It fails if `input` is\n  ragged and axis is []. If `input` is not ragged it calls tf.squeeze. Note\n  that it is an error to squeeze a dimension that is not 1. It must be in\n  the range of [-rank(input), rank(input)).\n\n* **ame**: A name for the operation (optional).\n\n##### Returns\n', 'stemmed comments': ['note', 'O', 'tftensor', '[', 'the', 'arg', 'rang', 'dimens', 'tfraggedtensor', 'rag', 'error', 'default', 'N', 'take', 'fail', 'return', 'time', 'option', 'none', 'list', '1', 'compat', 'If', 'element', 'must', 'rank', 'It', ']', 'An', 'squeez', 'A', 'call', 'input', 'potenti', 'tensor', 'ame', 'axi', 'int', 'oper', 'name', 'tfsqueez', 'number']}"
898,"{'func name': '_nrows', 'comments': '', 'stemmed comments': []}"
899,"{'func name': '_ragged_tile_axis', 'comments': 'Tile a dimension of a RaggedTensor to match a ragged shape.\n\n\n', 'stemmed comments': ['raggedtensor', 'dimens', 'shape', 'match', 'tile', 'rag']}"
900,"{'func name': 'int32array', 'comments': '', 'stemmed comments': []}"
901,"{'func name': '_get_optional_partition_dtype', 'comments': 'Returns the partition dtype, or None if None exists.\n\n\n', 'stemmed comments': ['return', 'dtype', 'exist', 'none', 'partit']}"
902,"{'func name': 'rebuild_ragged_tensor_with_value_rowids', 'comments': 'Returns a copy of `rt`, built using `from_value_rowids`.\n\nThis ensures that RaggedTensor._cached_value_rowids is populated, which triggers a different code-path for converting ragged tensors to tensors.\n\nIf `feed_dict` and `sess` are specified, then build the new `RaggedTensor` using placeholder tensors, and populate a feed dictionary that can be used to feed the placeholders.\n##### Args\n* **rt**: The RaggedTensor to copy.\n\n* **feed_dict**: If specified, then build the new `RaggedTensor` using\n  placeholders, and populate this dict with entries to feed those\n  placeholders.\n\n* **sess**: A session used to evaluate tensors; required if feed_dict is\n  specified.\n\n##### Returns\n', 'stemmed comments': ['rt', ';', 'trigger', 'codepath', 'built', 'dictionari', 'the', 'session', 'arg', 'rag', 'feed_dict', 'return', 'new', 'copi', 'from_value_rowid', 'dict', 'ensur', 'If', 'thi', 'raggedtensor', 'placehold', 'A', 'entri', 'convert', 'evalu', 'raggedtensor_cached_value_rowid', 'differ', 'specifi', 'tensor', 'feed', 'sess', 'requir', 'popul', 'use', 'build']}"
903,"{'func name': 'repeat_ranges', 'comments': 'Repeats each range of `params` (as specified by `splits`) `repeats` times.\n\nLet the `i`th range of `params` be defined as `params[splits[i]:splits[i + 1]]`.\n\nThen this function returns a tensor containing range 0 repeated `repeats[0]` times, followed by range 1 repeated `repeats[1]`, ..., followed by the last range repeated `repeats[-1]` times.\n##### Args\n* **params**: The `Tensor` whose values should be repeated.\n\n* **splits**: A splits tensor indicating the ranges of `params` that should be\n  repeated.\n\n* **repeats**: The number of times each range should be repeated.  Supports\n  broadcasting from a scalar value.\n\n##### Returns\n* **## Example**: \n\n', 'stemmed comments': ['whose', 'split', '[', 'the', 'arg', 'rang', 'repeat', 'return', 'time', 'let', 'valu', 'indic', '1', 'param', ']', 'A', 'exampl', 'follow', 'support', 'scalar', 'specifi', 'tensor', 'then', 'defin', 'th', 'contain', 'function', 'last', 'broadcast', '0', 'number']}"
904,"{'func name': '_nrows', 'comments': '', 'stemmed comments': []}"
905,"{'func name': '_StatelessParameterizedTruncatedNormalGrad', 'comments': 'Returns the gradient of a TruncatedNormal sample w.r.t. parameters.\n\nThe gradient is computed using implicit differentiation (Figurnov et al., 2018).\n##### Args\n* **op**: A `StatelessParameterizedTruncatedNormal` operation. We assume that the\n  inputs to the operation are `shape`, `seed`, `mean`, `stddev`, `minval`,\n  and `maxval` tensors, and the output is the `sample` tensor.\n\n* **grad**: The incoming gradient `dloss / dsample` of the same shape as\n  `op.outputs[0]`.\n\n##### Returns\n* **ferences**: \n\n* **Implicit Reparameterization Gradients**: [Figurnov et al., 2018]\n  (http\n\n', 'stemmed comments': ['/', 'We', 'grad', 'ferenc', 'dsampl', '[', 'the', 'arg', 'differenti', 'mean', 'figurnov', 'implicit', 'wrt', 'truncatednorm', 'incom', 'return', 'minval', 'sampl', 'assum', 'reparameter', 'statelessparameterizedtruncatednorm', ']', 'A', 'gradient', 'paramet', 'opoutput', 'et', 'al', 'shape', 'input', 'tensor', 'seed', 'http', 'maxval', 'dloss', 'op', 'oper', 'use', 'output', '0', 'stddev', '2018', 'comput']}"
906,"{'func name': 'random_poisson_v2', 'comments': 'Draws `shape` samples from each of the given Poisson distribution(s).\n\n`lam` is the rate parameter describing the distribution(s).\n\nExample:\n\n```python samples = tf.random.poisson([10], [0.5, 1.5]) # samples has shape [10, 2], where each slice [:, 0] and [:, 1] represents # the samples drawn from each distribution\n\nsamples = tf.random.poisson([7, 5], [12.2, 3.3]) # samples has shape [7, 5, 2], where each slice [:, :, 0] and [:, :, 1] # represents the 7x5 samples drawn from each of the two distributions ```\n##### Args\n* **shape**: A 1-D integer Tensor or Python array. The shape of the output samples\n  to be drawn per ""rate""-parameterized distribution.\n\n* **lam**: A Tensor or Python value or N-D array of type `dtype`.\n  `lam` provides the rate parameter(s) describing the poisson\n  distribution(s) to sample.\n\n* **dtype**: The type of the output\n\n* **seed**: A Python integer. Used to create a random seed for the distributions.\n  See\n  `tf.random.set_seed`\n  for behavior.\n\n* **name**: Optional name for the operation.\n\n##### Returns\n* **samples**: a `Tensor` of shape `tf.concat([shape, tf.shape(lam)], axis=0)`\n  with values of type `dtype`.\n\n', 'stemmed comments': ['axis=0', 'array', '[', '1D', 'the', '33', 'arg', 'rate', 'slice', 'behavior', '05', 'parameter', 'ND', 'see', 'lam', '122', 'return', 'sampl', 'describ', 'draw', '10', 'distribut', 'tfrandompoisson', 'valu', '7x5', 'option', '=', '2', 'poisson', 'tfshape', '1', 'provid', 'tfrandomset_se', 'integ', ']', 'type', 'A', 'paramet', 'exampl', 'shape', 'two', 'tensor', 'tfconcat', 'seed', 'drawn', 'creat', 'repres', '7', 'dtype', 'oper', 'name', 'use', 'given', 'python', '0', '5', 'per', 'random', '15', 'output']}"
907,"{'func name': 'get_seed', 'comments': 'Returns the local seeds an operation should use given an op-specific seed.\n\nSee `random_seed.get_seed` for more details. This wrapper adds support for the case where `seed` may be a tensor.\n##### Args\n* **seed**: An integer or a `tf.int64` scalar tensor.\n\n##### Returns\n', 'stemmed comments': ['local', 'arg', 'see', 'return', 'add', 'detail', 'random_seedget_se', 'tfint64', 'thi', 'integ', 'may', 'An', 'support', 'scalar', 'tensor', 'seed', 'wrapper', 'opspecif', 'case', 'oper', 'use', 'given']}"
908,"{'func name': 'set_seed', 'comments': ""Sets the global random seed.\n\nOperations that rely on a random seed actually derive it from two seeds: the global and operation-level seeds. This sets the global seed.\n\nIts interactions with operation-level seeds is as follows:\n\n1. If neither the global seed nor the operation seed is set: A randomly picked seed is used for this op. 2. If the graph-level seed is set, but the operation seed is not: The system deterministically picks an operation seed in conjunction with the graph-level seed so that it gets a unique random sequence. Within the same version of tensorflow and user code, this sequence is deterministic. However across different versions, this sequence might change. If the code depends on particular seeds to work, specify both graph-level and operation-level seeds explicitly. 3. If the operation seed is set, but the global seed is not set: A default global seed and the specified operation seed are used to determine the random sequence. 4. If both the global and the operation seed are set: Both seeds are used in conjunction to determine the random sequence.\n\nTo illustrate the user-visible effects, consider these examples:\n\nIf neither the global seed nor the operation seed is set, we get different results for every call to the random op and every re-run of the program:\n\n```python print(tf.random.uniform([1]))\n\n# generates 'A1' print(tf.random.uniform([1]))\n\n# generates 'A2' ```\n\n(now close the program and run it again)\n\n```python print(tf.random.uniform([1]))\n\n# generates 'A3' print(tf.random.uniform([1]))\n\n# generates 'A4' ```\n\nIf the global seed is set but the operation seed is not set, we get different results for every call to the random op, but the same sequence for every re-run of the program:\n\n```python tf.random.set_seed(1234) print(tf.random.uniform([1]))\n\n# generates 'A1' print(tf.random.uniform([1]))\n\n# generates 'A2' ```\n\n(now close the program and run it again)\n\n```python tf.random.set_seed(1234) print(tf.random.uniform([1]))\n\n# generates 'A1' print(tf.random.uniform([1]))\n\n# generates 'A2' ```\n\nThe reason we get 'A2' instead 'A1' on the second call of `tf.random.uniform` above is because the second call uses a different operation seed.\n\nNote that `tf.function` acts like a re-run of a program in this case. When the global seed is set but operation seeds are not set, the sequence of random numbers are the same for each `tf.function`. For example:\n\n```python tf.random.set_seed(1234)\n\n@tf.function def f(): a = tf.random.uniform([1]) b = tf.random.uniform([1]) return a, b\n\n@tf.function def g(): a = tf.random.uniform([1]) b = tf.random.uniform([1]) return a, b\n\nprint(f())\n\n# prints '(A1, A2)' print(g())\n\n# prints '(A1, A2)' ```\n\nIf the operation seed is set, we get different results for every call to the random op, but the same sequence for every re-run of the program:\n\n```python print(tf.random.uniform([1], seed=1))\n\n# generates 'A1' print(tf.random.uniform([1], seed=1))\n\n# generates 'A2' ```\n\n(now close the program and run it again)\n\n```python print(tf.random.uniform([1], seed=1))\n\n# generates 'A1' print(tf.random.uniform([1], seed=1))\n\n# generates 'A2' ```\n\nThe reason we get 'A2' instead 'A1' on the second call of `tf.random.uniform` above is because the same `tf.random.uniform` kernel (i.e. internal representation) is used by TensorFlow for all calls of it with the same arguments, and the kernel maintains an internal counter which is incremented every time it is executed, generating different results.\n\nCalling `tf.random.set_seed` will reset any such counters:\n\n```python tf.random.set_seed(1234) print(tf.random.uniform([1], seed=1))\n\n# generates 'A1' print(tf.random.uniform([1], seed=1))\n\n# generates 'A2' tf.random.set_seed(1234) print(tf.random.uniform([1], seed=1))\n\n# generates 'A1' print(tf.random.uniform([1], seed=1))\n\n# generates 'A2' ```\n\nWhen multiple identical random ops are wrapped in a `tf.function`, their behaviors change because the ops no long share the same counter. For example:\n\n```python @tf.function def foo(): a = tf.random.uniform([1], seed=1) b = tf.random.uniform([1], seed=1) return a, b print(foo())\n\n# prints '(A1, A1)' print(foo())\n\n# prints '(A2, A2)'\n\n@tf.function def bar(): a = tf.random.uniform([1]) b = tf.random.uniform([1]) return a, b print(bar())\n\n# prints '(A1, A2)' print(bar())\n\n# prints '(A3, A4)' ```\n\nThe second call of `foo` returns '(A2, A2)' instead of '(A1, A1)' because `tf.random.uniform` maintains an internal counter. If you want `foo` to return '(A1, A1)' every time, use the stateless random ops such as `tf.random.stateless_uniform`. Also see `tf.random.experimental.Generator` for a new set of stateful random ops that use external variables to manage their states.\n##### Args\n* **seed**: integer.\n\n"", 'stemmed comments': ['neither', 'the', 'close', 'arg', '1234', '4', 'act', 'see', 'program', 'code', 'global', 'user', 'reli', 'ie', 'get', 'bar', 'extern', 'integ', ']', 'variabl', 'follow', 'chang', 'depend', 'two', 'howev', 'To', 'both', 'rerun', 'across', 'number', 'determinist', 'wrap', 'A3', 'want', 'uservis', 'when', '3', 'result', 'determin', 'for', 'tfrandomstateless_uniform', 'also', 'intern', 'default', 'tfrandomuniform', 'return', 'pick', 'time', 'new', 'def', '2', '=', 'tfrandomset_se', 'seed=1', 'sequenc', 'consid', 'A', 'state', 'reason', 'exampl', 'g', 'explicitli', 'specifi', 'illustr', 'b', 'like', 'execut', 'foo', 'effect', 'op', 'A2', 'python', 'it', 'note', 'represent', '[', 'run', 'long', 'stateless', 'argument', 'tffunction', 'A1', 'actual', 'everi', 'share', 'deriv', 'f', 'call', 'A4', 'version', '@', 'case', 'use', 'randomli', 'random', 'tfrandomexperimentalgener', 'gener', 'maintain', 'manag', 'interact', 'might', 'behavior', 'system', 'graphlevel', 'particular', 'work', 'kernel', '1', 'If', 'thi', 'conjunct', 'ident', 'instead', 'multipl', 'differ', 'counter', 'tensorflow', 'seed', 'operationlevel', 'increment', 'reset', 'oper', 'uniqu', 'set', 'print', 'within', 'second']}"
909,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
910,"{'func name': 'make_range_tests', 'comments': 'Make a set of tests to do range.\n\n\n', 'stemmed comments': ['set', 'rang', 'make', 'test']}"
911,"{'func name': 'make_rank_tests', 'comments': 'Make a set of tests to do rank.\n\n\n', 'stemmed comments': ['rank', 'set', 'make', 'test']}"
912,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
913,"{'func name': 'resolve', 'comments': 'Resolves reaching definitions for each symbol.\n\n\n##### Args\n* **node**: ast.AST\n\n* **source_info**: transformer.SourceInfo\n\n* **graphs**: Dict[ast.FunctionDef, cfg.Graph]\n\n* **definition_factory**: Callable[[], Definition]\n\n##### Returns\n', 'stemmed comments': ['node', 'symbol', 'definit', 'source_info', 'astast', 'transformersourceinfo', 'graph', '[', 'cfggraph', ']', 'callabl', 'return', 'arg', 'resolv', 'reach', 'dict', 'definition_factori', 'astfunctiondef']}"
914,"{'func name': 'resolve', 'comments': 'Resolves reaching definitions for each symbol.\n\n\n##### Args\n* **node**: ast.AST\n\n* **source_info**: transformer.SourceInfo\n\n* **graphs**: Dict[ast.FunctionDef, cfg.Graph]\n\n##### Returns\n', 'stemmed comments': ['node', 'symbol', 'definit', 'source_info', 'astast', 'transformersourceinfo', 'graph', '[', 'cfggraph', ']', 'return', 'arg', 'resolv', 'reach', 'dict', 'astfunctiondef']}"
915,"{'func name': '_get_file_names', 'comments': 'Parse list of file names from pattern, optionally shuffled.\n\n\n##### Args\n* **file_pattern**: File glob pattern, or list of glob patterns.\n\n* **shuffle**: Whether to shuffle the order of file names.\n\n##### Returns\n', 'stemmed comments': ['file_pattern', 'return', 'whether', 'shuffl', 'pattern', 'arg', 'name', 'option', 'pars', 'list', 'glob', 'order', 'file']}"
916,"{'func name': '_create_dataset_reader', 'comments': 'Creates a dataset that reads the given files using the given reader.\n\n\n##### Args\n* **dataset_creator**: A function that takes in a single file name and returns a\n  dataset.\n\n* **filenames**: A `tf.data.Dataset` containing one or more filenames.\n\n* **num_parallel_reads**: The number of parallel reads we should do.\n\n##### Returns\n', 'stemmed comments': ['the', 'arg', 'parallel', 'take', 'return', 'dataset_cr', 'tfdatadataset', 'num_parallel_read', 'reader', 'singl', 'A', 'dataset', 'one', 'file', 'creat', 'contain', 'function', 'filenam', 'name', 'read', 'given', 'use', 'number']}"
917,"{'func name': '_flat_shapes', 'comments': '', 'stemmed comments': []}"
918,"{'func name': 'overlap_and_add', 'comments': 'Reconstructs a signal from a framed representation.\n\nAdds potentially overlapping frames of a signal with shape `[..., frames, frame_length]`, offsetting subsequent frames by `frame_step`. The resulting tensor has shape `[..., output_size]` where\n\noutput_size = (frames\n\n- 1) * frame_step + frame_length\n##### Args\n* **signal**: A [..., frames, frame_length] `Tensor`. All dimensions may be\n  unknown, and rank must be at least 2.\n\n* **frame_step**: An integer or scalar `Tensor` denoting overlap offsets. Must be\n  less than or equal to `frame_length`.\n\n* **name**: An optional name for the operation.\n\n##### Returns\n', 'stemmed comments': ['frame', 'represent', '[', 'the', 'overlap', 'arg', 'result', 'less', 'dimens', 'signal', 'unknown', 'add', 'return', 'reconstruct', 'option', '=', '2', 'offset', '1', 'must', 'rank', 'frame_step', ']', 'may', 'An', 'integ', 'A', 'subsequ', 'equal', 'output_s', 'least', 'frame_length', 'scalar', 'shape', 'potenti', 'tensor', 'oper', 'name', 'denot', 'all']}"
919,"{'func name': '_read_variable_value', 'comments': 'Read the value of a resource variable if it is variable.\n\n\n', 'stemmed comments': ['valu', 'read', 'variabl', 'resourc']}"
920,"{'func name': '_config_for_enable_caching_device', 'comments': ""Return the dict config for RNN cell wrt to enable_caching_device field.\n\nSince enable_caching_device is a internal implementation detail for speed up the RNN variable read when running on the multi remote worker setting, we don't want this config to be serialized constantly in the JSON. We will only serialize this field when a none default value is used to create the cell.\n##### Args\n* **rnn_cell**: the RNN cell for serialize.\n\n##### Returns\n"", 'stemmed comments': ['want', 'We', 'cell', 'run', 'worker', 'arg', 'wrt', 'intern', 'field', 'nt', 'default', 'return', 'multi', 'detail', 'valu', 'dict', 'none', 'serial', 'constantli', 'json', 'enable_caching_devic', 'variabl', 'implement', 'speed', 'creat', 'config', 'sinc', 'read', 'rnn', 'set', 'use', 'remot', 'rnn_cell']}"
921,"{'func name': '_joined_array', 'comments': 'Creates an ndarray with the result from reduce_join on input_array.\n\n\n##### Args\n* **num_dims**: The number of dimensions of the original input array.\n\n* **reduce_dim**: The dimension to reduce.\n\n##### Returns\n', 'stemmed comments': ['origin', 'creat', 'input_array', 'num_dim', 'array', 'return', 'ndarray', 'reduce_dim', 'the', 'input', 'arg', 'reduce_join', 'reduc', 'result', 'number', 'dimens']}"
922,"{'func name': 'make_reduce_any_tests', 'comments': 'Make a set of tests to do any.\n\n\n', 'stemmed comments': ['set', 'make', 'test']}"
923,"{'func name': '_powerset', 'comments': 'Helper for generating all possible reduction_axes arguments.\n\nExample: powerset([0,1,2]): () (0,) (1,) (2,) (0,1) (0,2) (1,2) (0,1,2)\n##### Args\n* **iterable**: An iterable of items to generate the powerset of.\n\n##### Returns\n', 'stemmed comments': ['helper', 'reduction_ax', '[', '02', 'arg', 'argument', 'return', 'powerset', '2', 'iter', '1', ']', 'An', 'exampl', 'item', '012', '01', '0', '12', 'possibl', 'gener']}"
924,"{'func name': 'get_reduce_op', 'comments': 'Translate a reduction string name to a reduction op.\n\n\n', 'stemmed comments': ['string', 'op', 'name', 'reduct', 'translat']}"
925,"{'func name': 'as_tensor', 'comments': '', 'stemmed comments': []}"
926,"{'func name': 'combined_non_singular_hint', 'comments': 'Get combined hint for when .\n\n\n', 'stemmed comments': ['combin', 'hint', 'get']}"
927,"{'func name': 'bar', 'comments': '', 'stemmed comments': []}"
928,"{'func name': 'get', 'comments': 'Retrieve a regularizer instance from a config or identifier.\n\n\n', 'stemmed comments': ['instanc', 'config', 'identifi', 'retriev', 'regular']}"
929,"{'func name': '_time_resampling', 'comments': '', 'stemmed comments': []}"
930,"{'func name': '_elu_grad_grad', 'comments': '', 'stemmed comments': []}"
931,"{'func name': 'make_relu_tests', 'comments': 'Make a set of tests to do relu.\n\n\n', 'stemmed comments': ['set', 'relu', 'make', 'test']}"
932,"{'func name': 'make_relu1_tests', 'comments': 'Make a set of tests to do relu1.\n\n\n', 'stemmed comments': ['set', 'make', 'relu1', 'test']}"
933,"{'func name': 'make_relu6_tests', 'comments': 'Make a set of tests to do relu6.\n\n\n', 'stemmed comments': ['set', 'make', 'relu6', 'test']}"
934,"{'func name': 'run_benchmark', 'comments': '', 'stemmed comments': []}"
935,"{'func name': 'get_server_def', 'comments': 'Returns a server def with a single job + multiple tasks.\n\n\n', 'stemmed comments': ['return', 'server', 'def', 'job', 'multipl', 'task', 'singl']}"
936,"{'func name': 'get_server_def', 'comments': 'Returns a server def with a single job + multiple tasks.\n\n\n', 'stemmed comments': ['return', 'server', 'def', 'job', 'multipl', 'task', 'singl']}"
937,"{'func name': 'get_gpus', 'comments': '', 'stemmed comments': []}"
938,"{'func name': '_strip_prefix', 'comments': '', 'stemmed comments': []}"
939,"{'func name': 'get_default_communication_protocol', 'comments': '', 'stemmed comments': []}"
940,"{'func name': '_strip_prefix', 'comments': '', 'stemmed comments': []}"
941,"{'func name': 'Test', 'comments': '', 'stemmed comments': []}"
942,"{'func name': '_get_server_def', 'comments': 'Returns a server def with a single job + multiple tasks.\n\n\n', 'stemmed comments': ['return', 'server', 'def', 'job', 'multipl', 'task', 'singl']}"
943,"{'func name': '_calculate_acceptance_probs_with_mixing', 'comments': 'Calculates the acceptance probabilities and mixing ratio.\n\nIn this case, we assume that we can *either* sample from the original data distribution with probability `m`, or sample from a reshaped distribution that comes from rejection sampling on the original distribution. This rejection sampling is done on a per-class basis, with `a_i` representing the probability of accepting data from class `i`.\n\nThis method is based on solving the following analysis for the reshaped distribution:\n\nLet F be the probability of a rejection (on any example). Let p_i be the proportion of examples in the data in class i (init_probs) Let a_i is the rate the rejection sampler should *accept* class i Let t_i is the target proportion in the minibatches for class i (target_probs)\n\n``` F = sum_i(p_i * (1-a_i)) = 1\n\n- sum_i(p_i * a_i)\n\n\n\n using sum_i(p_i) = 1 ```\n\nAn example with class `i` will be accepted if `k` rejections occur, then an example with class `i` is seen by the rejector, and it is accepted. This can be written as follows:\n\n``` t_i = sum_k=0^inf(F^k * p_i * a_i) = p_i * a_j / (1\n\n- F)\n\n\n\nusing geometric series identity, since 0 <= F < 1 = p_i * a_i / sum_j(p_j * a_j)\n\n\n\n\n\n\n\nusing F from above ```\n\nNote that the following constraints hold: ``` 0 <= p_i <= 1, sum_i(p_i) = 1 0 <= a_i <= 1 0 <= t_i <= 1, sum_i(t_i) = 1 ```\n\nA solution for a_i in terms of the other variables is the following: ```a_i = (t_i / p_i) / max_i[t_i / p_i]```\n\nIf we try to minimize the amount of data rejected, we get the following:\n\nM_max = max_i [ t_i / p_i ] M_min = min_i [ t_i / p_i ]\n\nThe desired probability of accepting data if it comes from class `i`:\n\na_i = (t_i/p_i\n\n- m) / (M_max\n\n- m)\n\nThe desired probability of pulling a data element from the original dataset, rather than the filtered one:\n\nm = M_min\n##### Args\n* **initial_probs**: A Tensor of the initial probability distribution, given or\n  estimated.\n\n* **target_probs**: A Tensor of the corresponding classes.\n\n##### Returns\n', 'stemmed comments': ['the', 'arg', 'seri', 'occur', 'ratio', 'get', 'reject', 'origin', ']', 'written', 'variabl', 'filter', 'follow', 'f^k', 'rather', 'k', '<', 'sum_j', 'p_j', 'proport', '/', 'solut', 'mix', 'm_min', 'initi', 'accept', 'return', 'min_i', 'let', 'assum', 'init_prob', '=', 'F', 'basi', 'calcul', 'A', 'constraint', 'term', 'exampl', 'seen', 'one', 'minibatch', 'solv', 'initial_prob', 'data', '1a_i', 'repres', 'max_i', 'either', 'sampler', 'a_j', 'note', 't_i/p_i', '[', 'a_i', 'target_prob', 'probabl', 'element', 'An', 'method', 't_i', 'target', 'tri', 'case', 'In', 'desir', 'use', '0', 'minim', 'analysi', 'done', 'estim', 'rejector', 'amount', 'rate', 'sampl', 'distribut', 'hold', 'pull', '1', 'If', 'thi', 'ident', 'sum_k=0^inf', 'come', 'sum_i', 'dataset', 'correspond', 'tensor', 'base', 'geometr', 'class', 'perclass', 'sinc', 'reshap', 'given', 'm_max', 'p_i']}"
944,"{'func name': 'make_reshape_tests', 'comments': 'Make a set of tests to do reshape.\n\n\n', 'stemmed comments': ['set', 'make', 'reshap', 'test']}"
945,"{'func name': 'make_resize_bilinear_tests', 'comments': 'Make a set of tests to do resize_bilinear.\n\n\n', 'stemmed comments': ['set', 'make', 'resize_bilinear', 'test']}"
946,"{'func name': 'make_resize_nearest_neighbor_tests', 'comments': 'Make a set of tests to do resize_nearest_neighbor.\n\n\n', 'stemmed comments': ['resize_nearest_neighbor', 'set', 'make', 'test']}"
947,"{'func name': 'decode_predictions', 'comments': '', 'stemmed comments': []}"
948,"{'func name': 'decode_predictions', 'comments': '', 'stemmed comments': []}"
949,"{'func name': 'random_batch', 'comments': '', 'stemmed comments': []}"
950,"{'func name': 'report', 'comments': '', 'stemmed comments': []}"
951,"{'func name': 'events_from_logdir', 'comments': 'Returns all events in the single eventfile in logdir.\n\n\n##### Args\n* **logdir**: The directory in which the single event file is sought.\n\n##### Returns\n', 'stemmed comments': ['sought', 'return', 'event', 'logdir', 'the', 'directori', 'arg', 'eventfil', 'file', 'singl']}"
952,"{'func name': 'make_resolve_constant_strided_slice_tests', 'comments': 'Make a set of tests to show strided_slice yields incorrect results.\n\n\n', 'stemmed comments': ['yield', 'make', 'incorrect', 'set', 'strided_slic', 'result', 'show', 'test']}"
953,"{'func name': 'readahead_file_path', 'comments': 'Readahead files not implemented; simply returns given path.\n\n\n', 'stemmed comments': [';', 'return', 'simpli', 'readahead', 'given', 'path', 'implement', 'file']}"
954,"{'func name': 'copy_to_graph_uninitialized', 'comments': 'Copies an existing variable to a new graph, with no initializer.\n\n\n', 'stemmed comments': ['graph', 'new', 'variabl', 'copi', 'exist', 'initi']}"
955,"{'func name': 'initialize_resources', 'comments': 'Initializes the resources in the given list.\n\n\n##### Args\n* **resource_list**: list of resources to initialize.\n\n* **name**: name of the initialization op.\n\n##### Returns\n', 'stemmed comments': ['return', 'resource_list', 'op', 'arg', 'name', 'given', 'list', 'initi', 'resourc']}"
956,"{'func name': 'transform', 'comments': 'Ensure a function has only a single return, at the end.\n\n\n', 'stemmed comments': ['return', 'function', 'ensur', 'end', 'singl']}"
957,"{'func name': 'get_word_index', 'comments': 'Retrieves a dict mapping words to their index in the Reuters dataset.\n\nArguments: path: where to cache the data (relative to `~/.keras/dataset`).\n##### Returns\n', 'stemmed comments': ['data', 'map', 'word', 'return', 'retriev', 'cach', '~/keras/dataset', 'rel', 'dict', 'index', 'dataset', 'path', 'reuter', 'argument']}"
958,"{'func name': 'make_reverse_sequence_tests', 'comments': 'Make a set of tests to do reverse_sequence.\n\n\n', 'stemmed comments': ['set', 'reverse_sequ', 'make', 'test']}"
959,"{'func name': 'make_reverse_v2_tests', 'comments': 'Make a set of tests to do reverse_v2.\n\n\n', 'stemmed comments': ['set', 'reverse_v2', 'make', 'test']}"
960,"{'func name': 'get_setter', 'comments': '', 'stemmed comments': []}"
961,"{'func name': 'make_rfft2d_tests', 'comments': 'Make a set of tests to do rfft2d.\n\n\n', 'stemmed comments': ['rfft2d', 'set', 'make', 'test']}"
962,"{'func name': '_check_supported_dtypes', 'comments': '', 'stemmed comments': []}"
963,"{'func name': '_enumerated_map_structure_up_to', 'comments': '', 'stemmed comments': []}"
964,"{'func name': 'icfo_to_ifco', 'comments': ""Convert gates' weights and biases from ICFO to IFCO layout.\n\n\n"", 'stemmed comments': ['gate', 'ifco', 'weight', 'icfo', 'convert', 'layout', 'bias']}"
965,"{'func name': '_block_lstm_grad', 'comments': 'Gradient for the BlockLSTM op.\n\n\n', 'stemmed comments': ['gradient', 'blocklstm', 'op']}"
966,"{'func name': 'rnn_long_sequence_benchmark', 'comments': '', 'stemmed comments': []}"
967,"{'func name': 'bidirectional_dynamic_rnn', 'comments': 'Creates a dynamic version of bidirectional recurrent neural network.\n\nTakes input and builds independent forward and backward RNNs. The input_size of forward and backward cell must match. The initial state for both directions is zero by default (but can be set optionally) and no intermediate states are ever returned -- the network is fully unrolled for the given (passed in) length(s) of the sequence(s) or completely unrolled if length(s) is not given.\n##### Args\n* **cell_fw**: An instance of RNNCell, to be used for forward direction.\n\n* **cell_bw**: An instance of RNNCell, to be used for backward direction.\n\n* **inputs**: The RNN inputs.\n  If time_major == False (default), this must be a tensor of shape\n\n* **sequence_length**: (optional) An int32/int64 vector, size `[batch_size]`,\n  containing the actual lengths for each of the sequences in the batch. If\n  not provided, all batch entries are assumed to be full sequences; and time\n  reversal is applied from time `0` to `max_time` for each sequence.\n\n* **initial_state_fw**: (optional) An initial state for the forward RNN. This must\n  be a tensor of appropriate type and shape `[batch_size,\n  cell_fw.state_size]`. If `cell_fw.state_size` is a tuple, this should be a\n  tuple of tensors having shapes `[batch_size, s] for s in\n  cell_fw.state_size`.\n\n* **initial_state_bw**: (optional) Same as for `initial_state_fw`, but using the\n  corresponding properties of `cell_bw`.\n\n* **dtype**: (optional) The data type for the initial states and expected output.\n  Required if initial_states are not provided or RNN states have a\n  heterogeneous dtype.\n\n* **parallel_iterations**: (Default\n\n* **swap_memory**: Transparently swap the tensors produced in forward inference\n  but needed for back prop from GPU to CPU.  This allows training RNNs which\n  would typically not fit on a single GPU, with very minimal (or no)\n  performance penalty.\n\n* **time_major**: The shape format of the `inputs` and `outputs` Tensors. If true,\n  these `Tensors` must be shaped `[max_time, batch_size, depth]`. If false,\n  these `Tensors` must be shaped `[batch_size, max_time, depth]`. Using\n  `time_major = True` is a bit more efficient because it avoids transposes\n  at the beginning and end of the RNN calculation.  However, most TensorFlow\n  data is batch-major, so by default this function accepts input and emits\n  output in batch-major form.\n\n* **scope**: VariableScope for the created subgraph; defaults to\n  ""bidirectional_rnn""\n\n##### Returns\n* **A tuple (outputs, output_states) where**: outputs\n\n', 'stemmed comments': ['tupl', 'format', 'the', 'arg', 'match', 'neural', 'appli', 'properti', 'max_tim', 'must', ']', 'bidirect', 'revers', 'type', 'swap', 'cell_bw', 'batch', 'howev', 'perform', 'would', 'appropri', 'variablescop', 'heterogen', 'expect', 'pass', 'instanc', ';', 'sequence_length', 'cell_fw', 'initi', 'batchmajor', 'default', 'accept', 'dynam', 'return', 'time', 'vector', 'assum', 'recurr', 'option', '=', 'full', 'zero', 'end', 'calcul', 'sequenc', 'depth', 'state', 'A', 'ever', 'backward', 'data', 'creat', 'requir', 'independ', 'true', 'subgraph', 'rnncell', 'begin', 'penalti', '[', 'cell', 'fulli', 'forward', 'typic', 'take', 'direct', 'actual', 'bidirectional_rnn', 'same', 'allow', 'train', 'An', 'initial_state_bw', 'scope', 'initial_state_fw', 'bit', 'shape', 'input', 'version', 'batch_siz', 'infer', 'emit', 'int32/int64', 'contain', 'function', 'unrol', 'use', 'rnn', '0', 'fit', 'network', 'cell_fwstate_s', 'output', 'length', 'minim', 'prop', 'complet', 'intermedi', 'fals', 'effici', 'need', 'swap_memori', 'provid', 'form', 'If', 'thi', 'gpu', 'singl', 'initial_st', 'input_s', 'transpar', 'entri', 'time_major', 'produc', 'output_st', 'correspond', 'transpos', 'tensor', 'tensorflow', 'parallel_iter', 'dtype', 'avoid', '==', 'cpu', 'set', 'given', 'size', 'back', 'build']}"
968,"{'func name': 'static_bidirectional_rnn', 'comments': 'Creates a bidirectional recurrent neural network.\n\nSimilar to the unidirectional case above (rnn) but takes input and builds independent forward and backward RNNs with the final forward and backward outputs depth-concatenated, such that the output will have the format [time][batch][cell_fw.output_size + cell_bw.output_size]. The input_size of forward and backward cell must match. The initial state for both directions is zero by default (but can be set optionally) and no intermediate states are ever returned -- the network is fully unrolled for the given (passed in) length(s) of the sequence(s) or completely unrolled if length(s) is not given.\n##### Args\n* **cell_fw**: An instance of RNNCell, to be used for forward direction.\n\n* **cell_bw**: An instance of RNNCell, to be used for backward direction.\n\n* **inputs**: A length T list of inputs, each a tensor of shape [batch_size,\n  input_size], or a nested tuple of such elements.\n\n* **initial_state_fw**: (optional) An initial state for the forward RNN. This must\n  be a tensor of appropriate type and shape `[batch_size,\n  cell_fw.state_size]`. If `cell_fw.state_size` is a tuple, this should be a\n  tuple of tensors having shapes `[batch_size, s] for s in\n  cell_fw.state_size`.\n\n* **initial_state_bw**: (optional) Same as for `initial_state_fw`, but using the\n  corresponding properties of `cell_bw`.\n\n* **dtype**: (optional) The data type for the initial state.  Required if either\n  of the initial states are not provided.\n\n* **sequence_length**: (optional) An int32/int64 vector, size `[batch_size]`,\n  containing the actual lengths for each of the sequences.\n\n* **scope**: VariableScope for the created subgraph; defaults to\n  ""bidirectional_rnn""\n\n##### Returns\n* **A tuple (outputs, output_state_fw, output_state_bw) where**: outputs is a length `T` list of outputs (one for each input), which\n    are depth-concatenated forward and backward outputs.\n  output_state_fw is the final state of the forward rnn.\n  output_state_bw is the final state of the backward rnn.\n\n', 'stemmed comments': ['tupl', 'format', 'the', 'arg', 'match', 'neural', 'properti', 'must', ']', 'bidirect', 'type', 'output_state_fw', 'cell_bw', 'batch', 'appropri', 'variablescop', 'pass', 'instanc', ';', 'sequence_length', 'cell_fw', 'nest', 'final', 'initi', 'output_state_bw', 'default', 'return', 'time', 'vector', 'recurr', 'option', 'cell_fwoutput_s', 'list', 'zero', 'sequenc', 'state', 'A', 'ever', 'backward', 'one', 'similar', 'data', 'creat', 'requir', 'depthconcaten', 'either', 'independ', 'subgraph', 'rnncell', '[', 'cell', 'fulli', 'forward', 'take', 'direct', 'actual', 'cell_bwoutput_s', 'bidirectional_rnn', 'element', 'same', 'An', 'initial_state_bw', 'scope', 'initial_state_fw', 'shape', 'input', 'batch_siz', 'int32/int64', 'contain', 'unrol', 'case', 'use', 'rnn', 'network', 'cell_fwstate_s', 'output', 'length', 'complet', 'intermedi', 'unidirect', 'provid', 'If', 'thi', 'input_s', 'correspond', 'tensor', 'T', 'dtype', 'set', 'given', 'size', 'build']}"
969,"{'func name': 'make_round_tests', 'comments': 'Build the round op testing graph.\n\n\n', 'stemmed comments': ['graph', 'op', 'round', 'build', 'test']}"
970,"{'func name': '_assert_row_partition_equal', 'comments': '', 'stemmed comments': []}"
971,"{'func name': '_merge_tensors', 'comments': 'Merge two optional Tensors with equal values into a single Tensor.\n\n\n##### Args\n* **t1**: tf.Tensor or None\n\n* **t2**: tf.Tensor or None\n\n* **name**: A name for the tensors (for error messages)\n\n* **validate**: If true, then check that `t1` is compatible with `t2` (if both are\n  non-None).\n\n##### Returns\n* **A pair `(merged_value, validated)`**: * `merged_value` is `t1` if it is not None; or `t2` otherwise.\n  * `validated` is true if we validated that t1 and t2 are equal (either\n    by adding a check, or because t1 is t2).\n\n', 'stemmed comments': ['otherwis', ';', 'tftensor', 'pair', 't1', 'arg', 'merg', 'error', 'check', 'return', 'messag', 'ad', 'valu', 'option', 'none', 'compat', 'If', 'merged_valu', 'valid', 'singl', 'A', 'equal', 'two', 'nonnon', 'tensor', 't2', 'either', 'name', 'true']}"
972,"{'func name': 'run_and_gather_logs', 'comments': 'Run the bazel test given by test_name.  Gather and return the logs.\n\n\n##### Args\n* **name**: Benchmark target identifier.\n\n* **test_name**: A unique bazel target, e.g. ""//path/to\n\n* **test_args**: A string containing all arguments to run the target with.\n\n* **benchmark_type**: A string representing the BenchmarkType enum; the\n  benchmark type for this target.\n\n##### Returns\n* **test_results**: A test_log_pb2.TestResults proto\n\n* **test_adjusted_name**: Unique benchmark name that consists of\n  benchmark name optionally followed by GPU type.\n\n', 'stemmed comments': [';', 'benchmark', 'run', 'test_log_pb2testresult', 'bazel', 'arg', '//path/to', 'benchmarktyp', 'argument', 'test_result', 'return', 'test_adjusted_nam', 'option', 'gather', 'gpu', 'type', 'A', 'proto', 'log', 'string', 'consist', 'eg', 'follow', 'test', 'target', 'benchmark_typ', 'repres', 'identifi', 'contain', 'name', 'uniqu', 'given', 'test_arg', 'test_nam', 'enum']}"
973,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
974,"{'func name': '_run_loop_model', 'comments': '', 'stemmed comments': []}"
975,"{'func name': 'in_save_context', 'comments': 'Returns whether under a save context.\n\n\n', 'stemmed comments': ['save', 'context', 'return', 'whether']}"
976,"{'func name': '_get_layer_call_method', 'comments': '', 'stemmed comments': []}"
977,"{'func name': '_validate_namespace_whitelist', 'comments': 'Validates namespace whitelist argument.\n\n\n', 'stemmed comments': ['namespac', 'whitelist', 'valid', 'argument']}"
978,"{'func name': '_import_and_infer', 'comments': 'Import a SavedModel into a TF 1.x-style graph and run `signature_key`.\n\n\n', 'stemmed comments': ['1xstyle', 'graph', 'run', 'import', 'TF', 'savedmodel', 'signature_key']}"
979,"{'func name': 'load_model', 'comments': 'Loads a model saved via `model.save()`.\n\nUsage:\n\n>>> model = tf.keras.Sequential([ ...\n\n\n\n tf.keras.layers.Dense(5, input_shape=(3,)), ...\n\n\n\n tf.keras.layers.Softmax()]) >>> model.save(\'/tmp/model\') >>> loaded_model = tf.keras.models.load_model(\'/tmp/model\') >>> x = tf.random.uniform((10, 3)) >>> assert np.allclose(model.predict(x), loaded_model.predict(x))\n\nNote that the model weights may have different scoped names after being loaded. Scoped names include the model/layer names, such as `""dense_1/kernel:0""`. It is recommended that you use the layer properties to access specific variables, e.g. `model.get_layer(""dense_1"").kernel`.\n\nArguments: filepath: One of the following:\n\n- String or `pathlib.Path` object, path to the saved model\n\n- `h5py.File` object from which to load the model custom_objects: Optional dictionary mapping names (strings) to custom classes or functions to be considered during deserialization. compile: Boolean, whether to compile the model after loading. options: Optional `tf.saved_model.LoadOptions` object that specifies options for loading from SavedModel.\n##### Returns\n', 'stemmed comments': ['note', 'map', 'dense_1', '[', 'dictionari', 'specif', '3', 'modelpredict', 'h5pyfil', 'loaded_modelpredict', 'includ', 'deseri', 'pathlibpath', '>', 'argument', 'object', 'tfrandomuniform', 'tfsaved_modelloadopt', 'assert', 'properti', 'return', 'usag', '10', '/tmp/model', 'recommend', 'save', 'tfkeraslayersdens', 'modelget_lay', '=', 'kernel', 'option', 'boolean', 'filepath', 'via', 'modelsav', 'layer', 'compil', 'custom_object', 'It', ']', 'may', 'consid', 'whether', 'weight', 'variabl', 'scope', 'string', 'model/lay', 'tfkerassequenti', 'tfkeraslayerssoftmax', 'eg', 'dense_1/kernel0', 'follow', 'load', 'differ', 'access', 'path', 'specifi', 'one', 'custom', 'model', 'tfkerasmodelsload_model', 'class', 'input_shape=', 'loaded_model', 'function', 'x', 'npallclos', 'name', 'use', '5', 'savedmodel']}"
980,"{'func name': 'save', 'comments': ""Saves a model as a SavedModel to the filepath.\n\n\n##### Args\n* **model**: Keras model instance to be saved.\n\n* **filepath**: String path to save the model.\n\n* **overwrite**: whether to overwrite the existing filepath.\n\n* **include_optimizer**: If True, save the model's optimizer state.\n\n* **signatures**: Signatures to save with the SavedModel. Applicable to the 'tf'\n  format only. Please see the `signatures` argument in `tf.saved_model.save`\n  for details.\n\n* **options**: Optional `tf.saved_model.SaveOptions` object that specifies\n  options for saving to SavedModel.\n\n"", 'stemmed comments': ['instanc', 'format', 'arg', 'optim', 'kera', 'argument', 'object', 'see', 'tfsaved_modelsav', 'detail', 'applic', 'save', 'option', 'tfsaved_modelsaveopt', 'If', 'filepath', 'include_optim', 'signatur', 'whether', 'state', 's', 'string', 'path', 'specifi', 'model', 'overwrit', 'tf', 'exist', 'true', 'pleas', 'savedmodel']}"
981,"{'func name': '_build_meta_graph', 'comments': 'Creates a MetaGraph under a SaveContext.\n\n\n', 'stemmed comments': ['metagraph', 'creat', 'savecontext']}"
982,"{'func name': 'is_factory_for_restored_saveable_object', 'comments': '', 'stemmed comments': []}"
983,"{'func name': '_signature_to_tf2xla_config', 'comments': 'Convert `signature_def` to tf2xla config.  Returns a `tf2xla.Config` proto.\n\n\n##### Args\n* **signature_def**: Instance of `SignatureDef`.\n\n* **variable_nodes_to_feed**: List of tuples of form `(node_def, modified)`\n  corresponding to VarHandleOp, and a boolean `modified` that describes\n  whether the variable was modified during execution.\n\n##### Returns\n', 'stemmed comments': ['tupl', 'instanc', 'arg', 'varhandleop', 'tf2xlaconfig', 'return', 'describ', 'signaturedef', 'variable_nodes_to_fe', 'tf2xla', 'boolean', 'form', 'list', 'modifi', 'whether', 'proto', 'variabl', 'convert', 'correspond', 'config', 'node_def', 'execut', 'signature_def']}"
984,"{'func name': 'save_and_load_benchmark', 'comments': 'Util for saved model benchmarks.\n\n\n', 'stemmed comments': ['save', 'util', 'benchmark', 'model']}"
985,"{'func name': 'captured_output', 'comments': '', 'stemmed comments': []}"
986,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
987,"{'func name': 'main', 'comments': 'test driver method writes the error message to stdout.\n\n\n', 'stemmed comments': ['write', 'messag', 'method', 'driver', 'stdout', 'error', 'test']}"
988,"{'func name': 'load_model', 'comments': '', 'stemmed comments': []}"
989,"{'func name': 'load_from_saved_model', 'comments': ""Loads a keras Model from a SavedModel created by `export_saved_model()`.\n\nThis function reinstantiates model state by: 1) loading model topology from json (this will eventually come from metagraph). 2) loading model weights from checkpoint.\n\nExample:\n\n```python import tensorflow as tf\n\n# Create a tf.keras model. model = tf.keras.Sequential() model.add(tf.keras.layers.Dense(1, input_shape=[10])) model.summary()\n\n# Save the tf.keras model in the SavedModel format. path = '/tmp/simple_keras_model' tf.keras.experimental.export_saved_model(model, path)\n\n# Load the saved keras model back. new_model = tf.keras.experimental.load_from_saved_model(path) new_model.summary() ```\n##### Args\n* **saved_model_path**: a string specifying the path to an existing SavedModel.\n\n* **custom_objects**: Optional dictionary mapping names\n    (strings) to custom classes or functions to be\n    considered during deserialization.\n\n##### Returns\n"", 'stemmed comments': ['map', 'format', '[', 'topolog', 'dictionari', 'arg', 'new_modelsummari', 'tfkerasexperimentalexport_saved_model', 'kera', 'deseri', 'return', 'metagraph', '10', 'eventu', 'tfkeraslayersdens', 'export_saved_model', '2', 'checkpoint', '=', 'save', '1', 'option', 'thi', 'tfkerasexperimentalload_from_saved_model', 'custom_object', ']', 'consid', 'state', 'json', 'weight', 'import', 'tfkera', 'exampl', '/tmp/simple_keras_model', 'come', 'new_model', 'tfkerassequenti', 'saved_model_path', 'path', 'string', 'load', 'specifi', 'tensorflow', 'custom', 'model', 'modeladd', 'creat', 'modelsummari', 'tf', 'class', 'input_shape=', 'function', 'reinstanti', 'name', 'exist', 'python', 'savedmodel', 'back']}"
990,"{'func name': 'load_and_run_with_saved_model_api', 'comments': 'Loads a saved_model using tf.saved_model API, and runs it.\n\n\n', 'stemmed comments': ['api', 'saved_model', 'run', 'use', 'load', 'tfsaved_model']}"
991,"{'func name': '_run_signature', 'comments': '', 'stemmed comments': []}"
992,"{'func name': 'tearDownModule', 'comments': '', 'stemmed comments': []}"
993,"{'func name': 'tearDownModule', 'comments': '', 'stemmed comments': []}"
994,"{'func name': 'get_meta_graph_def', 'comments': ""Gets MetaGraphDef from SavedModel.\n\n\n##### Args\n* **saved_model_dir**: Directory containing the SavedModel to inspect.\n\n* **tag_set**: Group of tag(s) of the MetaGraphDef to load, in string format,\n    separated by ','. The empty string tag is ignored so that passing ''\n    means the empty tag set. For tag-set contains multiple tags, all tags\n    must be passed in.\n\n##### Returns\n"", 'stemmed comments': ['format', 'tag_set', 'pass', 'inspect', 'the', 'arg', 'mean', 'tagset', 'for', 'return', 'get', 'must', 'tag', 'string', 'saved_model_dir', 'load', 'multipl', 'ignor', 'separ', 'contain', 'directori', 'set', 'metagraphdef', 'group', 'savedmodel', 'empti']}"
995,"{'func name': 'saver_from_object_based_checkpoint', 'comments': ""Return a `Saver` which reads from an object-based checkpoint.\n\nThis function validates that all variables in the variables list are remapped in the object-based checkpoint (or `names_to_keys` dict if provided). A saver will be created with the list of remapped variables.\n\nThe `cached_saver` argument allows the user to pass in a previously created saver, so multiple `saver.restore()` calls don't pollute the graph when graph building. This assumes that keys are consistent, meaning that the 1) `checkpoint_path` checkpoint, and 2) checkpoint used to create the `cached_saver` are the same type of object-based checkpoint. If this argument is set, this function will simply validate that all variables have been remapped by the checkpoint at `checkpoint_path`.\n\nNote that in general, `tf.train.Checkpoint` should be used to restore/save an object-based checkpoint.\n##### Args\n* **checkpoint_path**: string, path to object-based checkpoint\n\n* **var_list**: list of `Variables` that appear in the checkpoint. If `None`,\n  `var_list` will be set to all saveable objects.\n\n* **builder**: a `BaseSaverBuilder` instance. If `None`, a new `BulkSaverBuilder`\n  will be created.\n\n* **names_to_keys**: dict mapping string tensor names to checkpoint keys. If\n  `None`, this dict will be generated from the checkpoint file.\n\n* **cached_saver**: Cached `Saver` object with remapped variables.\n\n##### Returns\n"", 'stemmed comments': ['note', 'map', 'remap', 'pass', 'instanc', 'graph', 'simpli', 'var_list', 'the', 'cach', 'arg', 'bulksaverbuild', 'mean', 'argument', 'object', 'nt', 'return', 'cached_sav', 'builder', 'new', 'assum', 'dict', 'user', 'checkpoint', '2', 'restore/sav', 'none', 'provid', 'list', '1', 'If', 'thi', 'valid', 'allow', 'saveabl', 'type', 'A', 'gener', 'variabl', 'call', 'checkpoint_path', 'string', 'appear', 'consist', 'path', 'pollut', 'multipl', 'saver', 'basesaverbuild', 'tensor', 'file', 'previous', 'tftraincheckpoint', 'names_to_key', 'creat', 'function', 'key', 'name', 'read', 'objectbas', 'use', 'set', 'saverrestor', 'build']}"
996,"{'func name': '_import_and_infer', 'comments': 'Import a SavedModel into a TF 1.x-style graph and run `signature_key`.\n\n\n', 'stemmed comments': ['1xstyle', 'graph', 'run', 'import', 'TF', 'savedmodel', 'signature_key']}"
997,"{'func name': 'try_build_compiled_arguments', 'comments': '', 'stemmed comments': []}"
998,"{'func name': 'independent_buffers', 'comments': 'Context manager which saves parallel buffers independently.\n\nCreates a ParallelDevice-aware variable subclass which saves buffers for each device separately.\n##### Args\n* **parallel_device**: A ParallelDevice object on which variables are placed.\n\n* **elds**: \n\n', 'stemmed comments': ['manag', 'arg', 'parallel', 'paralleldeviceawar', 'place', 'object', 'subclass', 'save', 'paralleldevic', 'A', 'eld', 'variabl', 'devic', 'buffer', 'creat', 'separ', 'parallel_devic', 'independ', 'context']}"
999,"{'func name': 'handle_options', 'comments': 'Adds tf options to numpy scan ops.\n\n\n', 'stemmed comments': ['tf', 'numpi', 'add', 'op', 'option', 'scan']}"
1000,"{'func name': 'handle_options', 'comments': 'Adds tf options to numpy scan ops.\n\n\n', 'stemmed comments': ['tf', 'numpi', 'add', 'op', 'option', 'scan']}"
1001,"{'func name': 'scan', 'comments': 'A transformation that scans a function across an input dataset.\n\nThis transformation is a stateful relative of `tf.data.Dataset.map`. In addition to mapping `scan_func` across the elements of the input dataset, `scan()` accumulates one or more state tensors, whose initial values are `initial_state`.\n##### Args\n* **initial_state**: A nested structure of tensors, representing the initial state\n  of the accumulator.\n\n* **scan_func**: A function that maps `(old_state, input_element)` to\n  `(new_state, output_element)`. It must take two arguments and return a\n  pair of nested structures of tensors. The `new_state` must match the\n  structure of `initial_state`.\n\n##### Returns\n', 'stemmed comments': ['map', 'whose', 'addit', 'pair', 'the', 'arg', 'nest', 'new_stat', 'match', 'initi', 'argument', 'take', 'return', 'accumul', 'rel', 'valu', 'output_el', 'transform', 'thi', 'element', 'must', 'initial_st', 'It', 'structur', 'A', 'state', 'dataset', 'old_stat', 'input', 'two', 'one', 'tensor', 'repres', 'scan_func', 'input_el', 'tfdatadatasetmap', 'function', 'In', 'scan', 'across']}"
1002,"{'func name': '_NumpyUpdate', 'comments': '', 'stemmed comments': []}"
1003,"{'func name': '_NumpyMax', 'comments': '', 'stemmed comments': []}"
1004,"{'func name': 'make_scatter_nd_tests', 'comments': 'Make a set of tests to do scatter_nd.\n\n\n', 'stemmed comments': ['set', 'scatter_nd', 'make', 'test']}"
1005,"{'func name': '_NumpyUpdateScalar', 'comments': '', 'stemmed comments': []}"
1006,"{'func name': 'assert_regression_works', 'comments': '', 'stemmed comments': []}"
1007,"{'func name': 'numpy_function', 'comments': 'Wraps a python function and uses it as a TensorFlow op.\n\nGiven a python function `func` wrap this function as an operation in a TensorFlow function. `func` must take numpy arrays as its arguments and return numpy arrays as its outputs.\n\nThe following example creates a TensorFlow graph with `np.sinh()` as an operation in the graph:\n\n>>> def my_numpy_func(x): ...\n\n # x will be a numpy array with the contents of the input to the ...\n\n # tf.function ...\n\n return np.sinh(x) >>> @tf.function(input_signature=[tf.TensorSpec(None, tf.float32)]) ... def tf_function(input): ...\n\n y = tf.numpy_function(my_numpy_func, [input], tf.float32) ...\n\n return y * y >>> tf_function(tf.constant(1.)) <tf.Tensor: shape=(), dtype=float32, numpy=1.3810978>\n\nComparison to `tf.py_function`: `tf.py_function` and `tf.numpy_function` are very similar, except that `tf.numpy_function` takes numpy arrays, and not `tf.Tensor`s. If you want the function to contain `tf.Tensors`, and have any TensorFlow operations executed in the function be differentiable, please use `tf.py_function`.\n\nNote: The `tf.numpy_function` operation has the following known limitations:\n\n* The body of the function (i.e. `func`) will not be serialized in a `tf.SavedModel`. Therefore, you should not use this function if you need to serialize your model and restore it in a different environment.\n\n* The operation must run in the same address space as the Python program that calls `tf.numpy_function()`. If you are using distributed TensorFlow, you must run a `tf.distribute.Server` in the same process as the program that calls `tf.numpy_function`\n\nyou must pin the created operation to a device in that server (e.g. using `with tf.device():`).\n\n* Since the function takes numpy arrays, you cannot take gradients through a numpy_function. If you require something that is differentiable, please consider using tf.py_function.\n\n* The resulting function is assumed stateful and will never be optimized.\n##### Args\n* **func**: A Python function, which accepts `numpy.ndarray` objects as arguments\n  and returns a list of `numpy.ndarray` objects (or a single\n  `numpy.ndarray`). This function must accept as many arguments as there are\n  tensors in `inp`, and these argument types will match the corresponding\n  `tf.Tensor` objects in `inp`. The returns `numpy.ndarray`s must match the\n  number and types defined `Tout`.\n  Important Note\n\n* **inp**: A list of `tf.Tensor` objects.\n\n* **Tout**: A list or tuple of tensorflow data types or a single tensorflow data\n  type if there is only one, indicating what `func` returns.\n\n* **name**: (Optional) A name for the operation.\n\n##### Returns\n', 'stemmed comments': ['mani', 'tupl', 'array', 'tftensor', 'the', 'arg', 'tffloat32', 'match', '>', 'object', 'program', 'ie', 'indic', 'none', 'func', 'numpyndarray', 'tfdevic', 'must', ']', 'environ', 'type', 'import', 'follow', 'someth', 'devic', 'address', 'npsinh', '<', 'number', 'wrap', 'want', 'differenti', 'therefor', 'result', 'my_numpy_func', 'accept', 'return', 'shape=', 'assum', 'def', 'option', '=', 'list', 'consid', 'state', 'space', 'A', 'exampl', 'server', 'bodi', 'one', 'similar', 'model', 'creat', 'pin', 'requir', 'never', 'execut', 'data', 'op', 'tfdistributeserv', 'name', 'python', 'tftensorspec', 'note', 'content', '[', 'run', 'optim', 'process', 'argument', 'tffunction', 'take', 'tf_function', 'numpi', 'call', 'eg', 'restor', 'input', 'defin', '@', 'contain', 'function', 'x', 'input_signature=', 'tfsavedmodel', 'use', 'tout', 'dtype=float32', 'numpy_funct', 'inp', 'output', 'tfpy_funct', 'graph', 'except', 'need', 'distribut', '1', 'If', 'thi', 'comparison', 'singl', 'serial', 'tfconstant', 'gradient', 'numpy=13810978', 'correspond', 'differ', 'tensor', 'tensorflow', 'limit', 'sinc', 'oper', 'tfnumpy_funct', 'given', 'pleas', 'known']}"
1008,"{'func name': 'segment_ids_to_row_splits', 'comments': 'Generates the RaggedTensor `row_splits` corresponding to a segmentation.\n\n\n##### Args\n* **segment_ids**: A 1-D integer Tensor.\n\n* **num_segments**: A scalar integer indicating the number of segments.  Defaults\n  to `max(segment_ids) + 1` (or zero if `segment_ids` is empty).\n\n* **out_type**: The dtype for the return value.  Defaults to `segment_ids.dtype`,\n  or `tf.int64` if `segment_ids` does not have a dtype.\n\n* **name**: A name prefix for the returned tensor (optional).\n\n##### Returns\n', 'stemmed comments': ['segment_idsdtyp', 'segment_id', '1D', 'the', 'arg', 'row_split', 'default', 'return', 'valu', 'indic', 'prefix', 'option', 'tfint64', 'max', '1', 'zero', 'integ', 'raggedtensor', 'A', 'scalar', 'out_typ', 'correspond', 'tensor', 'dtype', 'name', 'num_seg', 'number', 'segment', 'empti', 'gener']}"
1009,"{'func name': 'get_header', 'comments': ""Computes a header for use with tensorflow SELECTIVE_REGISTRATION.\n\n\n##### Args\n* **graphs**: a list of paths to GraphDef files to include.\n\n* **proto_fileformat**: optional format of proto file, either 'textproto',\n  'rawproto' (default) or ops_list. The ops_list is the file contain the\n  list of ops in JSON format, Ex\n\n* **default_ops**: optional comma-separated string of operator\n\n##### Returns\n"", 'stemmed comments': ['format', 'graph', 'textproto', 'the', 'arg', 'includ', 'Ex', 'rawproto', 'ops_list', 'default', 'commasepar', 'return', 'default_op', 'option', 'list', 'selective_registr', 'proto', 'proto_fileformat', 'json', 'string', 'path', 'tensorflow', 'file', 'contain', 'either', 'op', 'oper', 'use', 'header', 'graphdef', 'comput']}"
1010,"{'func name': '_GetSelfAdjointEigGradTest', 'comments': '', 'stemmed comments': []}"
1011,"{'func name': 'preload_check', 'comments': 'Raises an exception if the environment is not correctly configured.\n\n\n', 'stemmed comments': ['environ', 'configur', 'rais', 'correctli', 'except']}"
1012,"{'func name': '_make_sequence_example', 'comments': '', 'stemmed comments': []}"
1013,"{'func name': '_make_sequence_example', 'comments': '', 'stemmed comments': []}"
1014,"{'func name': '_get_sparse_tensors', 'comments': '', 'stemmed comments': []}"
1015,"{'func name': '_initialized_session', 'comments': '', 'stemmed comments': []}"
1016,"{'func name': '_assert_all_equal_and_return', 'comments': 'Asserts that all tensors are equal and returns the first one.\n\n\n', 'stemmed comments': ['assert', 'return', 'equal', 'first', 'one', 'tensor']}"
1017,"{'func name': '_assert_all_equal_and_return', 'comments': 'Asserts that all tensors are equal and returns the first one.\n\n\n', 'stemmed comments': ['assert', 'return', 'equal', 'first', 'one', 'tensor']}"
1018,"{'func name': 'pad_sequences', 'comments': ""Pads sequences to the same length.\n\nThis function transforms a list (of length `num_samples`) of sequences (lists of integers) into a 2D Numpy array of shape `(num_samples, num_timesteps)`. `num_timesteps` is either the `maxlen` argument if provided, or the length of the longest sequence in the list.\n\nSequences that are shorter than `num_timesteps` are padded with `value` until they are `num_timesteps` long.\n\nSequences longer than `num_timesteps` are truncated so that they fit the desired length.\n\nThe position where padding or truncation happens is determined by the arguments `padding` and `truncating`, respectively. Pre-padding or removing values from the beginning of the sequence is the default.\n\n>>> sequence = [[1], [2, 3], [4, 5, 6]] >>> tf.keras.preprocessing.sequence.pad_sequences(sequence) array([[0, 0, 1], [0, 2, 3], [4, 5, 6]], dtype=int32)\n\n>>> tf.keras.preprocessing.sequence.pad_sequences(sequence, value=-1) array([[-1, -1,\n\n1], [-1,\n\n2,\n\n3], [ 4,\n\n5,\n\n6]], dtype=int32)\n\n>>> tf.keras.preprocessing.sequence.pad_sequences(sequence, padding='post') array([[1, 0, 0], [2, 3, 0], [4, 5, 6]], dtype=int32)\n\n>>> tf.keras.preprocessing.sequence.pad_sequences(sequence, maxlen=2) array([[0, 1], [2, 3], [5, 6]], dtype=int32)\n\nArguments: sequences: List of sequences (each sequence is a list of integers). maxlen: Optional Int, maximum length of all sequences. If not provided, sequences will be padded to the length of the longest individual sequence. dtype: (Optional, defaults to int32). Type of the output sequences. To pad sequences with variable length strings, you can use `object`. padding: String, 'pre' or 'post' (optional, defaults to 'pre'): pad either before or after each sequence. truncating: String, 'pre' or 'post' (optional, defaults to 'pre'): remove values from sequences larger than `maxlen`, either at the beginning or at the end of the sequences. value: Float or String, padding value. (Optional, defaults to 0.)\n##### Returns\n"", 'stemmed comments': ['length', 'array', '[', 'pre', 'the', '3', 'post', 'long', 'remov', 'maxlen=2', '4', 'determin', '6', 'float', 'argument', 'longest', 'num_timestep', 'default', '>', 'object', 'return', 'pad', 'larger', 'tfkeraspreprocessingsequencepad_sequ', 'valu', 'option', '=', '2', 'dtype=int32', 'provid', 'list', 'truncat', 'transform', 'thi', '1', 'If', 'longer', 'end', 'integ', 'respect', 'maxlen', ']', 'numpi', 'sequenc', 'type', 'variabl', 'string', 'int32', 'shape', 'shorter', 'individu', 'happen', '2D', 'int', 'dtype', 'function', 'either', 'prepad', 'maximum', 'posit', 'desir', 'To', 'use', '0', 'output', 'fit', '5', 'begin', 'padding=post', 'num_sampl', 'value=1']}"
1019,"{'func name': 'track_nodes_created_by_last_call', 'comments': 'Adds to `created_nodes` the nodes created by the last call to `layer`.\n\n\n', 'stemmed comments': ['node', 'creat', 'add', 'call', 'last', 'layer', 'created_nod']}"
1020,"{'func name': '_get_registered_object', 'comments': '', 'stemmed comments': []}"
1021,"{'func name': 'deserialize', 'comments': ""Instantiates a layer from a config dictionary.\n\nArguments: config: dict of the form {'class_name': str, 'config': dict} custom_objects: dict mapping class names (or function names) of custom (non-Keras) objects to class/functions\n##### Returns\n"", 'stemmed comments': ['map', 'dictionari', '{', 'class/funct', 'object', 'argument', 'return', 'dict', 'nonkera', 'form', 'layer', 'custom_object', 'str', '}', 'instanti', 'custom', 'config', 'class', 'class_nam', 'function', 'name']}"
1022,"{'func name': 'get_json_type', 'comments': 'Serializes any object to a JSON-serializable structure.\n\nArguments: obj: the object to serialize\n##### Returns\n', 'stemmed comments': ['serial', 'structur', 'return', 'obj', 'jsonserializ', 'object', 'argument']}"
1023,"{'func name': '_make_server_def', 'comments': 'Creates a `tf.train.ServerDef` protocol buffer.\n\n\n##### Args\n* **server_or_cluster_def**: A `tf.train.ServerDef` or `tf.train.ClusterDef`\n  protocol buffer, or a `tf.train.ClusterSpec` object, describing the server\n  to be defined and/or the cluster of which it is a member.\n\n* **job_name**: (Optional.) Specifies the name of the job of which the server is a\n  member. Defaults to the value in `server_or_cluster_def`, if specified.\n\n* **task_index**: (Optional.) Specifies the task index of the server in its job.\n  Defaults to the value in `server_or_cluster_def`, if specified. Otherwise\n  defaults to 0 if the server\'s job has only one task.\n\n* **protocol**: (Optional.) Specifies the protocol to be used by the server.\n  Acceptable values include `""grpc"", ""grpc+verbs""`. Defaults to the value in\n  `server_or_cluster_def`, if specified. Otherwise defaults to `""grpc""`.\n\n* **config**: (Options.) A `tf.compat.v1.ConfigProto` that specifies default\n  configuration options for all sessions that run on this server.\n\n##### Returns\n', 'stemmed comments': ['otherwis', 'run', 'session', 'arg', 'index', 'includ', 'object', 'default', 'accept', 'return', 'configur', 'describ', 'valu', 'job_nam', 'option', 'task_index', 'and/or', 'task', 'tftrainclusterspec', 'cluster', 'A', 's', 'tfcompatv1configproto', 'server', 'member', 'tftrainclusterdef', 'grpc', 'grpcverb', 'protocol', 'buffer', 'specifi', 'server_or_cluster_def', 'one', 'defin', 'creat', 'config', 'tftrainserverdef', 'name', 'use', '0', 'job']}"
1024,"{'func name': 'no_rewrite_session_config', 'comments': '', 'stemmed comments': []}"
1025,"{'func name': '_ready', 'comments': 'Checks if the model is ready or not, as determined by op.\n\n\n##### Args\n* **op**: An op, either _ready_op or _ready_for_local_init_op, which defines the\n  readiness of the model.\n\n* **sess**: A `Session`.\n\n* **msg**: A message to log to warning if not ready\n\n##### Returns\n', 'stemmed comments': ['session', 'arg', 'readi', '_ready_op', 'determin', 'check', 'return', 'messag', 'An', 'A', 'msg', 'log', '_ready_for_local_init_op', 'defin', 'model', 'sess', 'either', 'op', 'warn']}"
1026,"{'func name': '_get_handle_deleter', 'comments': 'Return a deletion subgraph for this handle.\n\n\n', 'stemmed comments': ['handl', 'subgraph', 'return', 'delet']}"
1027,"{'func name': 'stop_worker_watchdog', 'comments': 'Stop global worker watchdog.\n\n\n', 'stemmed comments': ['watchdog', 'global', 'worker', 'stop']}"
1028,"{'func name': '_name_list', 'comments': 'Utility function for transitioning to the new session API.\n\n\n##### Args\n* **tensor_list**: a list of `Tensor`s.\n\n##### Returns\n', 'stemmed comments': ['return', 'api', 'tensor_list', 'new', 'function', 'session', 'arg', 'util', 'transit', 'list', 'tensor']}"
1029,"{'func name': 'set_union', 'comments': 'Compute set union of elements in last dimension of `a` and `b`.\n\nAll but the last dimension of `a` and `b` must match.\n\nExample:\n\n```python import tensorflow as tf import collections\n\n# [[{1, 2}, {3}], [{4}, {5, 6}]] a = collections.OrderedDict([ ((0, 0, 0), 1), ((0, 0, 1), 2), ((0, 1, 0), 3), ((1, 0, 0), 4), ((1, 1, 0), 5), ((1, 1, 1), 6), ]) a = tf.sparse.SparseTensor(list(a.keys()), list(a.values()), dense_shape=[2, 2, 2])\n\n# [[{1, 3}, {2}], [{4, 5}, {5, 6, 7, 8}]] b = collections.OrderedDict([ ((0, 0, 0), 1), ((0, 0, 1), 3), ((0, 1, 0), 2), ((1, 0, 0), 4), ((1, 0, 1), 5), ((1, 1, 0), 5), ((1, 1, 1), 6), ((1, 1, 2), 7), ((1, 1, 3), 8), ]) b = tf.sparse.SparseTensor(list(b.keys()), list(b.values()), dense_shape=[2, 2, 4])\n\n# `set_union` is applied to each aligned pair of sets. tf.sets.union(a, b)\n\n# The result will be a equivalent to either of: # # np.array([[{1, 2, 3}, {2, 3}], [{4, 5}, {5, 6, 7, 8}]]) # # collections.OrderedDict([ #\n\n\n\n ((0, 0, 0), 1), #\n\n\n\n ((0, 0, 1), 2), #\n\n\n\n ((0, 0, 2), 3), #\n\n\n\n ((0, 1, 0), 2), #\n\n\n\n ((0, 1, 1), 3), #\n\n\n\n ((1, 0, 0), 4), #\n\n\n\n ((1, 0, 1), 5), #\n\n\n\n ((1, 1, 0), 5), #\n\n\n\n ((1, 1, 1), 6), #\n\n\n\n ((1, 1, 2), 7), #\n\n\n\n ((1, 1, 3), 8), # ]) ```\n##### Args\n* **a**: `Tensor` or `SparseTensor` of the same type as `b`. If sparse, indices\n    must be sorted in row-major order.\n\n* **b**: `Tensor` or `SparseTensor` of the same type as `a`. If sparse, indices\n    must be sorted in row-major order.\n\n* **validate_indices**: Whether to validate the order and range of sparse indices\n   in `a` and `b`.\n\n##### Returns\n', 'stemmed comments': ['[', 'pair', 'set_union', 'the', '3', 'arg', 'spars', 'rang', '{', 'match', 'union', '4', '6', 'result', 'dimens', 'bvalu', 'appli', 'tfsetsunion', 'order', 'return', 'sort', 'indic', '2', '=', '1', 'list', 'If', '8', 'element', 'validate_indic', 'must', 'dense_shape=', 'valid', ']', 'whether', 'tfsparsesparsetensor', 'type', 'import', 'bkey', 'exampl', 'sparsetensor', '}', 'collectionsordereddict', 'equival', 'tensor', 'tensorflow', 'collect', 'b', 'tf', 'rowmajor', '7', 'align', 'either', 'last', 'set', '0', 'all', 'python', '5', 'avalu', 'nparray', 'comput', 'akey']}"
1030,"{'func name': '_dense_to_sparse', 'comments': '', 'stemmed comments': []}"
1031,"{'func name': 'get_pybind_include', 'comments': 'pybind11 include directory is not correctly resolved.\n\nThis fixes include directory to /usr/local/pythonX.X\n##### Returns\n', 'stemmed comments': ['return', 'fix', 'directori', 'correctli', 'resolv', 'includ', 'thi', '/usr/local/pythonxx', 'pybind11']}"
1032,"{'func name': 'find_files', 'comments': 'Return all the files matching pattern below root dir.\n\n\n', 'stemmed comments': ['return', 'root', 'dir', 'pattern', 'match', 'file']}"
1033,"{'func name': '_sparsify', 'comments': '', 'stemmed comments': []}"
1034,"{'func name': 'frame', 'comments': ""Expands `signal`'s `axis` dimension into frames of `frame_length`.\n\nSlides a window of size `frame_length` over `signal`'s `axis` dimension with a stride of `frame_step`, replacing the `axis` dimension with `[frames, frame_length]` frames.\n\nIf `pad_end` is True, window positions that are past the end of the `axis` dimension are padded with `pad_value` until the window moves fully past the end of the dimension. Otherwise, only window positions that fully overlap the `axis` dimension are produced.\n\nFor example:\n\n>>> # A batch size 3 tensor of 9152 audio samples. >>> audio = tf.random.normal([3, 9152]) >>> >>> # Compute overlapping frames of length 512 with a step of 180 (frames overlap >>> # by 332 samples). By default, only 49 frames are generated since a frame >>> # with start position j*180 for j > 48 would overhang the end. >>> frames = tf.signal.frame(audio, 512, 180) >>> frames.shape.assert_is_compatible_with([3, 49, 512]) >>> >>> # When pad_end is enabled, the final two frames are kept (padded with zeros). >>> frames = tf.signal.frame(audio, 512, 180, pad_end=True) >>> frames.shape.assert_is_compatible_with([3, 51, 512])\n\nIf the dimension along `axis` is N, and `pad_end=False`, the number of frames can be computed by: ```python num_frames = 1 + (N\n\n- frame_size) // frame_step ``` If `pad_end=True`, the number of frames can be computed by: ```python num_frames = -(-N // frame_step) # ceiling division ```\n##### Args\n* **signal**: A `[..., samples, ...]` `Tensor`. The rank and dimensions\n  may be unknown. Rank must be at least 1.\n\n* **frame_length**: The frame length in samples. An integer or scalar `Tensor`.\n\n* **frame_step**: The frame hop size in samples. An integer or scalar `Tensor`.\n\n* **pad_end**: Whether to pad the end of `signal` with `pad_value`.\n\n* **pad_value**: An optional scalar `Tensor` to use where the input signal\n  does not exist when `pad_end` is True.\n\n* **axis**: A scalar integer `Tensor` indicating the axis to frame. Defaults to\n  the last axis. Supports negative values for indexing from the end.\n\n* **name**: An optional name for the operation.\n\n##### Returns\n"", 'stemmed comments': ['the', '//', 'arg', '51', '>', 'N', 'window', 'kept', 'indic', 'tfrandomnorm', 'slide', 'must', 'rank', 'integ', ']', 'whether', 'pad_valu', 'frame_length', 'scalar', 'two', 'batch', 'would', 'along', 'last', 'overhang', 'number', 'when', '3', 'final', 'for', 'step', 'default', 'unknown', 'return', 'pad', 'valu', 'option', '=', '180', 'zero', 'end', 'A', 'exampl', 'axi', '512', '48', 'enabl', 'posit', 'name', 'exist', 'true', 'python', 'stride', 'otherwis', '[', 'pad_end', 'frame_s', 'fulli', '49', 'dimens', 'By', 'pad_end=fals', 'may', 'An', 'framesshapeassert_is_compatible_with', 's', 'least', 'move', 'input', 'ceil', 'replac', 'use', 'neg', 'pad_end=tru', 'divis', 'past', 'gener', 'start', 'length', 'expand', 'frame', 'j', 'overlap', 'hop', 'index', 'signal', '9152', 'audio', 'sampl', '1', 'If', 'frame_step', '332', 'tfsignalfram', 'support', 'produc', 'num_fram', 'tensor', 'sinc', 'oper', 'size', 'comput']}"
1035,"{'func name': 'make_shape_tests', 'comments': 'Make a set of tests to do shape.\n\n\n', 'stemmed comments': ['set', 'shape', 'make', 'test']}"
1036,"{'func name': '_load_and_run', 'comments': 'Load a SavedModel into a TF 1.x-style graph and run `signature_key`.\n\n\n', 'stemmed comments': ['1xstyle', 'graph', 'run', 'TF', 'savedmodel', 'load', 'signature_key']}"
1037,"{'func name': 'make_fn', 'comments': 'Construct the variable creator function for device `device_id`.\n\nConstructs custom variable creator functions for the given device. On first device (device_id == 0), it creates the variable using the `next_creator`, and stores it in the provided `shared_variable_store`. On all other devices (device_id > 0), it tries to re-use the variable already created with the same name. If no such variable exists, it throws an error. Additionally, we de-uniquify variable names before checking for matches. This helps re-use variables which are intended to be the same but have different names due to variable uniquification happening upstream. Since this might mean we may have multiple variables with the same canonical name, we store them in a list per canonical name and return them in the same order as well.\n##### Args\n* **shared_variable_store**: A dictionary that we will use to store variables\n  created on the first device, and re-used by creators for other devices.\n\n* **device_id**: Integer index of the device whose creator should be\n  constructed.\n\n##### Returns\n', 'stemmed comments': ['whose', 'addit', 'shared_variable_stor', 'deuniquifi', 'dictionari', 'arg', 'device_id', 'alreadi', 'mean', 'index', 'match', 'might', 'error', '>', 'check', 'order', 'return', 'On', 'well', 'provid', 'list', 'If', 'thi', 'throw', 'integ', 'may', 'A', 'variabl', 'next_creat', 'intend', 'upstream', 'canon', 'devic', 'store', 'multipl', 'differ', 'due', 'happen', 'custom', 'help', 'reus', 'creat', 'uniquif', 'function', 'tri', 'sinc', '==', 'name', 'use', 'given', '0', 'first', 'exist', 'creator', 'per', 'construct']}"
1038,"{'func name': 'Test', 'comments': '', 'stemmed comments': []}"
1039,"{'func name': 'shuffle_and_repeat', 'comments': 'Shuffles and repeats a Dataset, reshuffling with each repetition.\n\n>>> d = tf.data.Dataset.from_tensor_slices([1, 2, 3]) >>> d = d.apply(tf.data.experimental.shuffle_and_repeat(2, count=2)) >>> [elem.numpy() for elem in d] # doctest: +SKIP [2, 3, 1, 1, 3, 2]\n\n```python dataset.apply( tf.data.experimental.shuffle_and_repeat(buffer_size, count, seed)) ```\n\nproduces the same output as\n\n```python dataset.shuffle( buffer_size, seed=seed, reshuffle_each_iteration=True).repeat(count) ```\n\nIn each repetition, this dataset fills a buffer with `buffer_size` elements, then randomly samples elements from this buffer, replacing the selected elements with new elements. For perfect shuffling, set the buffer size equal to the full size of the dataset.\n\nFor instance, if your dataset contains 10,000 elements but `buffer_size` is set to 1,000, then `shuffle` will initially select a random element from only the first 1,000 elements in the buffer. Once an element is selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element, maintaining the 1,000 element buffer.\n##### Args\n* **buffer_size**: A `tf.int64` scalar `tf.Tensor`, representing the maximum\n  number elements that will be buffered when prefetching.\n\n* **count**: (Optional.) A `tf.int64` scalar `tf.Tensor`, representing the number\n  of times the dataset should be repeated. The default behavior (if `count`\n  is `None` or `-1`) is for the dataset be repeated indefinitely.\n\n* **seed**: (Optional.) A `tf.int64` scalar `tf.Tensor`, representing the random\n  seed that will be used to create the distribution. See\n  `tf.random.set_seed` for behavior.\n\n##### Returns\n', 'stemmed comments': ['elem', 'tftensor', 'elemnumpi', 'the', 'arg', '>', 'see', 'select', 'ie', '10000', 'none', ']', 'scalar', 'first', 'tfdatadatasetfrom_tensor_slic', 'number', 'tfdataexperimentalshuffle_and_repeat', 'instanc', 'seed=se', '3', 'repetit', 'repeat', 'datasetappli', 'for', 'initi', 'default', 'return', 'time', 'new', 'prefetch', 'option', '=', '2', 'full', 'tfint64', 'tfrandomset_se', '1001st', 'A', 'space', 'next', 'buffer', 'creat', 'datasetshuffl', 'repres', 'maximum', 'reshuffle_each_iteration=tru', 'python', 'count', 'dappli', 'fill', '[', 'element', 'shuffl', 'equal', 'contain', 'replac', 'In', 'use', 'randomli', 'random', 'indefinit', 'reshuffl', 'output', 'maintain', '1000', 'behavior', 'onc', 'buffer_s', 'sampl', 'doctest', 'distribut', '1', 'perfect', 'dataset', 'produc', 'seed', 'count=2', 'set', 'skip', 'size']}"
1040,"{'func name': 'make_sigmoid_tests', 'comments': 'Make a set of tests to do sigmoid.\n\n\n', 'stemmed comments': ['set', 'sigmoid', 'make', 'test']}"
1041,"{'func name': 'load_op_from_signature_def', 'comments': 'Load an Op from a SignatureDef created by op_signature_def().\n\n\n##### Args\n* **signature_def**: a SignatureDef proto\n\n* **key**: string key to op in the SignatureDef outputs.\n\n* **import_scope**: Scope used to import the op\n\n##### Returns\n', 'stemmed comments': ['creat', 'return', 'proto', 'signature_def', 'import', 'import_scop', 'key', 'string', 'arg', 'signaturedef', 'op', 'output', 'scope', 'use', 'load', 'op_signature_def', 'Op']}"
1042,"{'func name': '_make_signature', 'comments': '', 'stemmed comments': []}"
1043,"{'func name': 'clear_signature_defs', 'comments': 'Clears SignatureDefs from the Metadata of a TfLite flatbuffer buffer.\n\n\n##### Args\n* **tflite_model**: TFLite model buffer to remove signature_defs.\n\n##### Returns\n* **buffer**: A TFLite model binary identical to model buffer with\n  no SignatureDef metadata.\n\n', 'stemmed comments': ['model', 'clear', 'return', 'A', 'signature_def', 'arg', 'signaturedef', 'binari', 'tflite_model', 'buffer', 'remov', 'tflite', 'ident', 'flatbuff', 'metadata']}"
1044,"{'func name': 'validate_saveable_view', 'comments': 'Performs signature-related sanity checks on `saveable_view`.\n\n\n', 'stemmed comments': ['perform', 'signaturerel', 'saveable_view', 'saniti', 'check']}"
1045,"{'func name': 'main', 'comments': 'Run an interactive console.\n\n\n', 'stemmed comments': ['run', 'consol', 'interact']}"
1046,"{'func name': 'main', 'comments': 'Run an interactive console.\n\n\n', 'stemmed comments': ['run', 'consol', 'interact']}"
1047,"{'func name': '_get_data_for_simple_models', 'comments': '', 'stemmed comments': []}"
1048,"{'func name': 'simple_save', 'comments': 'Convenience function to build a SavedModel suitable for serving.\n\nIn many common cases, saving models for serving will be as simple as:\n\nsimple_save(session, export_dir, inputs={""x"": x, ""y"": y}, outputs={""z"": z})\n\nAlthough in many cases it\'s not necessary to understand all of the many ways to configure a SavedModel, this method has a few practical implications:\n\n- It will be treated as a graph for inference / serving (i.e. uses the tag `saved_model.SERVING`)\n\n- The SavedModel will load in TensorFlow Serving and supports the [Predict API](https://github.com/tensorflow/serving/blob/master/tensorflow_serving/apis/predict.proto). To use the Classify, Regress, or MultiInference APIs, please use either [tf.Estimator](https://www.tensorflow.org/api_docs/python/tf/estimator/Estimator) or the lower level [SavedModel APIs](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md).\n\n- Some TensorFlow ops depend on information on disk or other information called ""assets"". These are generally handled automatically by adding the assets to the `GraphKeys.ASSET_FILEPATHS` collection. Only assets in that collection are exported; if you need more custom behavior, you\'ll need to use the [SavedModelBuilder](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/builder.py).\n\nMore information about SavedModel and signatures can be found here: https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md.\n##### Args\n* **session**: The TensorFlow session from which to save the meta graph and\n    variables.\n\n* **export_dir**: The path to which the SavedModel will be stored.\n\n* **inputs**: dict mapping string input names to tensors. These are added\n    to the SignatureDef as the inputs.\n\n* **outputs**: dict mapping string output names to tensors. These are added\n    to the SignatureDef as the outputs.\n\n* **legacy_init_op**: Legacy support for op or group of ops to execute after the\n    restore op upon a load.\n\n', 'stemmed comments': ['mani', 'disk', 'the', 'conveni', 'arg', '//githubcom/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/builderpi', '//wwwtensorfloworg/api_docs/python/tf/estimator/estim', 'configur', 'simple_sav', 'ie', 'It', ']', 'these', 'variabl', '}', 'path', 'depend', 'custom', 'http', 'serv', 'To', 'simpl', 'savedmodel', '/', ';', 'predict', 'handl', '//githubcom/tensorflow/serving/blob/master/tensorflow_serving/apis/predictproto', 'implic', 'ad', 'graphkeysasset_filepath', 'signaturedef', 'dict', 'some', 'export_dir', 'automat', 'tag', 'api', 'regress', 'tfestim', 'treat', 'model', 'execut', 'either', 'meta', 'op', 'name', 'z', 'level', 'map', '[', 'session', '//githubcom/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/readmemd', '{', 'export', 'legaci', 'inform', 'signatur', 'found', 'method', 's', 'call', 'string', 'multiinfer', 'although', 'restor', 'input', 'inputs=', 'infer', 'classifi', 'function', 'onli', 'x', 'case', 'In', 'savedmodelbuild', 'use', 'lower', 'common', 'group', 'legacy_init_op', 'upon', 'output', 'gener', 'outputs=', 'graph', 'behavior', 'way', 'asset', 'll', 'need', 'save', 'practic', 'saved_modelserv', 'suitabl', 'support', 'store', 'load', 'necessari', 'tensor', 'tensorflow', 'more', 'collect', 'pleas', 'understand', 'build']}"
1049,"{'func name': 'batchnorm_example', 'comments': 'Example of non-distribution-aware legacy code with batch normalization.\n\n\n', 'stemmed comments': ['code', 'nondistributionawar', 'exampl', 'normal', 'legaci', 'batch']}"
1050,"{'func name': 'sleep', 'comments': 'Sleeps for `sleep_microseconds` before producing each input element.\n\n\n##### Args\n* **sleep_microseconds**: The number of microseconds to sleep before producing an\n  input element.\n\n##### Returns\n', 'stemmed comments': ['return', 'microsecond', 'the', 'arg', 'produc', 'input', 'number', 'sleep', 'element', 'sleep_microsecond']}"
1051,"{'func name': 'make_slice_tests', 'comments': 'Make a set of tests to do slice.\n\n\n', 'stemmed comments': ['set', 'slice', 'make', 'test']}"
1052,"{'func name': 'transform', 'comments': '', 'stemmed comments': []}"
1053,"{'func name': '_py_set_item', 'comments': 'Overload of set_item that executes a Python list modification.\n\n\n', 'stemmed comments': ['execut', 'overload', 'python', 'modif', 'list', 'set_item']}"
1054,"{'func name': 'create_zeros_slot', 'comments': 'Create a slot initialized to 0 with same shape as the primary object.\n\n\n##### Args\n* **primary**: The primary `Variable` or `Tensor`.\n\n* **name**: Name to use for the slot variable.\n\n* **dtype**: Type of the slot variable.  Defaults to the type of `primary`.\n\n* **colocate_with_primary**: Boolean.  If True the slot is located\n  on the same device as `primary`.\n\n##### Returns\n', 'stemmed comments': ['primari', 'the', 'arg', 'initi', 'object', 'default', 'colocate_with_primari', 'return', 'boolean', 'locat', 'If', 'type', 'variabl', 'devic', 'shape', 'tensor', 'slot', 'creat', 'dtype', 'name', 'use', '0', 'true']}"
1055,"{'func name': 'get_num_gpus', 'comments': 'Returns the number of GPUs visible on the current node.\n\nCurrently only implemented for NVIDIA GPUs.\n', 'stemmed comments': ['node', 'return', 'current', 'nvidia', 'visibl', 'number', 'implement', 'gpu']}"
1056,"{'func name': 'raise_exception', 'comments': '', 'stemmed comments': []}"
1057,"{'func name': 'smart_case', 'comments': 'Like tf.case, except attempts to statically evaluate predicates.\n\nIf any predicate in `pred_fn_pairs` is a bool or has a constant value, the associated callable will be called or omitted depending on its value. Otherwise this functions like tf.case.\n##### Args\n* **pred_fn_pairs**: Dict or list of pairs of a boolean scalar tensor and a\n               callable which returns a list of tensors.\n\n* **default**: Optional callable that returns a list of tensors.\n\n* **exclusive**: True iff at most one predicate is allowed to evaluate to `True`.\n\n* **name**: A name for this operation (optional).\n\n##### Returns\n', 'stemmed comments': ['otherwis', 'exclus', 'pred_fn_pair', 'pair', 'arg', 'omit', 'except', 'static', 'default', 'return', 'valu', 'dict', 'option', 'associ', 'list', 'boolean', 'If', 'allow', 'iff', 'callabl', 'A', 'call', 'attempt', 'scalar', 'evalu', 'constant', 'depend', 'one', 'tensor', 'predic', 'like', 'function', 'oper', 'name', 'bool', 'true', 'tfcase']}"
1058,"{'func name': 'snapshot', 'comments': 'API to persist the output of the input dataset.\n\nThe snapshot API allows users to transparently persist the output of their preprocessing pipeline to disk, and materialize the pre-processed data on a different training run.\n\nThis API enables repeated preprocessing steps to be consolidated, and allows re-use of already processed data, trading off disk storage and network bandwidth for freeing up more valuable CPU resources and accelerator compute time.\n\nhttps://github.com/tensorflow/community/blob/master/rfcs/20200107-tf-data-snapshot.md has detailed design documentation of this feature.\n\nUsers can specify various options to control the behavior of snapshot, including how snapshots are read from and written to by passing in user-defined functions to the `reader_func` and `shard_func` parameters.\n\n`shard_func` is a user specified function that maps input elements to snapshot shards.\n\nUsers may want to specify this function to control how snapshot files should be written to disk. Below is an example of how a potential shard_func could be written.\n\n```python dataset = ... dataset = dataset.enumerate() dataset = dataset.apply(tf.data.experimental.snapshot(""/path/to/snapshot/dir"", shard_func=lambda x, y: x % NUM_SHARDS, ...)) dataset = dataset.map(lambda x, y: y) ```\n\n`reader_func` is a user specified function that accepts a single argument: (1) a Dataset of Datasets, each representing a ""split"" of elements of the original dataset. The cardinality of the input dataset matches the number of the shards specified in the `shard_func` (see above). The function should return a Dataset of elements of the original dataset.\n\nUsers may want specify this function to control how snapshot files should be read from disk, including the amount of shuffling and parallelism.\n\nHere is an example of a standard reader function a user can define. This function enables both dataset shuffling and parallel reading of datasets:\n\n```python def user_reader_func(datasets): # shuffle the datasets splits datasets = datasets.shuffle(NUM_CORES) # read datasets in parallel and interleave their elements return datasets.interleave(lambda x: x, num_parallel_calls=AUTOTUNE)\n\ndataset = dataset.apply(tf.data.experimental.snapshot(""/path/to/snapshot/dir"", reader_func=user_reader_func)) ```\n\nBy default, snapshot parallelizes reads by the number of cores available on the system, but will not attempt to shuffle the data.\n##### Args\n* **path**: Required. A directory to use for storing / loading the snapshot to /\n  from.\n\n* **compression**: Optional. The type of compression to apply to the snapshot\n  written to disk. Supported options are `GZIP`, `SNAPPY`, `AUTO` or None.\n  Defaults to AUTO, which attempts to pick an appropriate compression\n  algorithm for the dataset.\n\n* **reader_func**: Optional. A function to control how to read data from snapshot\n  shards.\n\n* **shard_func**: Optional. A function to control how to shard data when writing a\n  snapshot.\n\n##### Returns\n', 'stemmed comments': ['disk', 'the', 'valuabl', 'arg', 'document', 'datasetenumer', 'bandwidth', 'match', 'trade', 'materi', 'appli', 'shard_func=lambda', 'see', 'lambda', 'preprocess', 'pipelin', 'user', 'variou', 'datasetmap', 'reader_func', 'user_reader_func', 'none', 'origin', 'type', 'written', 'below', 'path', 'reader_func=user_reader_func', 'file', 'http', 'appropri', 'featur', 'storag', 'number', '/', 'snapshot', 'pass', 'want', 'shard', 'parallel', 'repeat', 'datasetappli', 'step', 'algorithm', 'default', 'accept', 'return', 'pick', 'time', 'detail', 'def', 'option', 'design', '=', 'num_cor', 'reader', 'write', 'api', '%', 'A', 'paramet', 'exampl', 'datasetsinterleav', 'attempt', 'specifi', 'data', 'requir', 'repres', 'enabl', 'read', 'python', '//githubcom/tensorflow/community/blob/master/rfcs/20200107tfdatasnapshotmd', 'num_shard', 'map', 'split', 'run', 'compress', 'num_parallel_calls=autotun', 'alreadi', 'includ', 'process', 'argument', 'datasetsshuffl', 'interleav', 'By', 'tfdataexperimentalsnapshot', 'element', 'allow', 'consolid', 'train', 'may', 'shuffl', '/path/to/snapshot/dir', 'input', 'potenti', 'defin', 'reus', 'function', 'x', 'use', 'shard_func', 'snappi', 'gzip', 'network', 'persist', 'auto', 'output', 'cardin', 'acceler', 'amount', 'control', 'behavior', 'system', 'resourc', 'free', 'here', '1', 'thi', 'userdefin', 'core', 'singl', 'transpar', 'support', 'dataset', 'store', 'standard', 'differ', 'load', 'could', 'avail', 'directori', 'cpu', 'comput']}"
1059,"{'func name': 'make_softmax_tests', 'comments': 'Make a set of tests to do softmax.\n\n\n', 'stemmed comments': ['set', 'softmax', 'make', 'test']}"
1060,"{'func name': '_solve_linear_operator_circulant_circulant', 'comments': '', 'stemmed comments': []}"
1061,"{'func name': '_ascending_sort', 'comments': '', 'stemmed comments': []}"
1062,"{'func name': 'line_number_above', 'comments': '', 'stemmed comments': []}"
1063,"{'func name': 'send_eager_tracebacks', 'comments': 'Send the tracebacks of an eager execution call to debug server(s).\n\n\n##### Args\n* **destinations**: gRPC destination addresses, a `str` or a `list` of `str`s,\n  e.g., ""localhost\n\n* **origin_stack**: The traceback of the eager operation invocation.\n\n* **send_source**: Whether the source files involved in the op tracebacks but\n  outside the TensorFlow library are to be sent.\n\n', 'stemmed comments': ['traceback', 'send', 'send_sourc', 'the', 'destin', 'arg', 'invoc', 'list', 'outsid', 'whether', 'call', 'involv', 'eager', 'server', 'sent', 'str', 'grpc', 'eg', 'address', 'tensorflow', 'sourc', 'file', 'debug', 'execut', 'op', 'oper', 'origin_stack', 'localhost', 'librari']}"
1064,"{'func name': '_find_preceding_ast_node', 'comments': 'Find the ast node immediately before and not including lineno.\n\n\n', 'stemmed comments': ['find', 'node', 'immedi', 'includ', 'ast', 'lineno']}"
1065,"{'func name': 'annotate_source_against_profile', 'comments': ""Annotate a Python source file with profiling information at each line.\n\n(The annotation doesn't change the source file itself.)\n##### Args\n* **profile_data**: (`list` of `ProfileDatum`) A list of `ProfileDatum`.\n\n* **source_file_path**: (`str`) Path to the source file being annotated.\n\n* **node_name_filter**: Regular expression to filter by node name.\n\n* **op_type_filter**: Regular expression to filter by op type.\n\n* **min_line**: (`None` or `int`) The 1-based line to start annotate the source\n  file from (inclusive).\n\n* **max_line**: (`None` or `int`) The 1-based line number to end the annotation\n  at (exclusive).\n\n##### Returns\n"", 'stemmed comments': ['start', 'exclus', 'annot', 'profile_data', 'the', 'arg', 'regular', 'profiledatum', 'express', 'nt', 'node_name_filt', 'return', 'op_type_filt', 'min_lin', 'none', 'list', 'inform', 'end', 'node', 'type', 'A', 'source_file_path', 'filter', 'line', 'chang', 'str', 'path', 'inclus', 'profil', 'sourc', 'file', 'int', '1base', 'op', 'name', 'python', 'number', 'max_lin']}"
1066,"{'func name': 'make_space_to_batch_nd_tests', 'comments': 'Make a set of tests to do space_to_batch_nd.\n\n\n', 'stemmed comments': ['space_to_batch_nd', 'set', 'make', 'test']}"
1067,"{'func name': 'make_space_to_depth_tests', 'comments': 'Make a set of tests to do space_to_depth.\n\n\n', 'stemmed comments': ['set', 'make', 'space_to_depth', 'test']}"
1068,"{'func name': 'space_to_batch_direct', 'comments': 'Direct Python implementation of space-to-batch conversion.\n\nThis is used for tests only.\n##### Args\n* **input_array**: N-D array\n\n* **block_shape**: 1-D array of shape [num_block_dims].\n\n* **paddings**: 2-D array of shape [num_block_dims, 2].\n\n##### Returns\n', 'stemmed comments': ['array', '[', '1D', 'convers', 'arg', 'block_shap', 'ND', 'input_array', 'direct', 'return', 'pad', '2', 'num_block_dim', 'thi', ']', 'shape', 'implement', 'test', '2D', 'spacetobatch', 'use', 'python']}"
1069,"{'func name': 'space_to_batch_direct', 'comments': 'Direct Python implementation of space-to-batch conversion.\n\nThis is used for tests only.\n##### Args\n* **input_array**: N-D array\n\n* **block_shape**: 1-D array of shape [num_block_dims].\n\n* **paddings**: 2-D array of shape [num_block_dims, 2].\n\n##### Returns\n', 'stemmed comments': ['array', '[', '1D', 'convers', 'arg', 'block_shap', 'ND', 'input_array', 'direct', 'return', 'pad', '2', 'num_block_dim', 'thi', ']', 'shape', 'implement', 'test', '2D', 'spacetobatch', 'use', 'python']}"
1070,"{'func name': '_s2d_add_vs_sparse_add', 'comments': '', 'stemmed comments': []}"
1071,"{'func name': '_indexedslice', 'comments': '', 'stemmed comments': []}"
1072,"{'func name': '_SparseMatrixMulGrad', 'comments': 'Gradient for sparse_matrix_mul op.\n\n\n', 'stemmed comments': ['gradient', 'op', 'sparse_matrix_mul']}"
1073,"{'func name': 'matmul', 'comments': 'Perform a sparse matrix matmul between `a` and `b`.\n\nPerforms a contraction between `a` and `b` along the two innermost dimensions. If both `a` and `b` are instances of `SparseMatrix`, returns a new instance of `SparseMatrix` (same type as `a`).\n\nIf one is not an instance of `SparseMatrix`, returns a dense `Tensor`:\n\n``` c = opA(a) . opB(b) ``` where `opA` (resp. `opB`) is the transpose or hermitian transpose depending on the values of `transpose_a` (resp. `transpose_b`) and `adjoint_a` (resp. `adjoint_b`).\n##### Args\n* **a**: `Tensor` or `SparseMatrix`, having rank `2` or `3`.\n\n* **b**: `Tensor` or `SparseMatrix`, having rank `2` or `3`.\n\n* **transpose_a**: Python `bool`.\n\n* **transpose_b**: Python `bool`.\n\n* **adjoint_a**: Python `bool`.\n\n* **adjoint_b**: Python `bool`.\n\n* **name**: Optional name to use when creating ops.\n\n##### Returns\n', 'stemmed comments': ['dens', 'instanc', 'arg', '3', 'spars', 'opb', 'dimens', 'hermitian', 'return', 'new', 'contract', 'valu', 'option', '=', '2', 'If', 'transpose_b', 'rank', 'type', 'resp', 'transpos', 'two', 'depend', 'transpose_a', 'sparsematrix', 'tensor', 'one', 'c', 'perform', 'creat', 'b', 'adjoint_a', 'matrix', 'matmul', 'along', 'opa', 'op', 'name', 'use', 'python', 'bool', 'innermost', 'adjoint_b']}"
1074,"{'func name': '_SparseToDenseGrad', 'comments': '', 'stemmed comments': []}"
1075,"{'func name': 'RandMatrix', 'comments': '', 'stemmed comments': []}"
1076,"{'func name': '_sparsify', 'comments': '', 'stemmed comments': []}"
1077,"{'func name': '_take_many_sparse_from_tensors_map', 'comments': ""Read `SparseTensors` from a `SparseTensorsMap` and concatenate them.\n\nThe input `sparse_handles` must be a string matrix of shape `[N, 1]` where `N` is the minibatch size and the rows correspond to packed outputs of `add_sparse_to_tensors_map`.\n\nThe ranks of the original `SparseTensor` objects must all match.\n\nWhen the final `SparseTensor` is created, it has rank one higher than the ranks of the incoming `SparseTensor` objects (they have been concatenated along a new row dimension).\n\nThe output `SparseTensor` object's shape values for all dimensions but the first are the max across the input `SparseTensor` objects' shape values for the corresponding dimensions.\n\nIts first shape value is `N`, the minibatch size.\n\nThe input `SparseTensor` objects' indices are assumed ordered in standard lexicographic order.\n\nIf this is not the case, after this step run `sparse.reorder` to restore index ordering.\n\nFor example, if the serialized input is a `[2, 3]` matrix representing two original `SparseTensor` objects:\n\nindex = [ 0] [10] [20] values = [1, 2, 3] shape = [50]\n\nand\n\nindex = [ 2] [10] values = [4, 5] shape = [30]\n\nthen the final deserialized `SparseTensor` will be:\n\nindex = [0\n\n0] [0 10] [0 20] [1\n\n2] [1 10] values = [1, 2, 3, 4, 5] shape = [2 50]\n##### Args\n* **sparse_map_op**: The `Operation` that created the original handles.\n  Usually this is, e.g., `add_sparse_to_tensors_map(...).op`.\n\n* **sparse_handles**: 2-D `Tensor` of type `string` of shape `[N, 1]`.\n  The serialized and packed `SparseTensor` objects.\n\n* **rank**: (optional) Python int, the rank of the `SparseTensor` objects.\n\n* **name**: A name prefix for the returned tensors (optional)\n\n##### Returns\n"", 'stemmed comments': ['sparsetensorsmap', 'the', 'arg', 'match', '4', 'deseri', 'object', 'N', '10', 'indic', 'max', 'lexicograph', 'must', 'rank', 'origin', ']', 'type', 'sparsetensor', 'two', 'along', 'first', 'across', 'when', '3', 'final', 'handl', 'step', 'for', '50', 'return', 'new', 'assum', 'valu', 'option', '2', '=', 'prefix', '30', 'sparsereord', 'A', 'exampl', 'one', 'minibatch', 'sparse_map_op', 'creat', 'repres', 'op', 'name', 'read', 'python', '5', 'it', '[', 'run', 'usual', 'dimens', '20', 's', 'string', 'eg', 'shape', 'restor', 'input', '2D', 'int', 'add_sparse_to_tensors_map', 'case', '0', 'output', 'index', 'pack', 'order', 'incom', 'concaten', '1', 'If', 'serial', 'higher', 'correspond', 'standard', 'tensor', 'matrix', 'oper', 'size', 'row', 'sparse_handl']}"
1078,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
1079,"{'func name': 'is_sparse', 'comments': 'Check whether `x` is sparse.\n\nCheck whether an object is a `tf.sparse.SparseTensor` or `tf.compat.v1.SparseTensorValue`.\n##### Args\n* **x**: A python object to check.\n\n##### Returns\n', 'stemmed comments': ['return', 'whether', 'tfsparsesparsetensor', 'tfcompatv1sparsetensorvalu', 'A', 'x', 'arg', 'python', 'spars', 'object', 'check']}"
1080,"{'func name': '_SparseToDense', 'comments': '', 'stemmed comments': []}"
1081,"{'func name': 'make_sparse_to_dense_tests', 'comments': 'Make a set of tests to do sparse to dense.\n\n\n', 'stemmed comments': ['dens', 'make', 'set', 'spars', 'test']}"
1082,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
1083,"{'func name': 'serialize_sparse_tensors', 'comments': 'Serializes sparse tensors.\n\n\n##### Args\n* **tensors**: a tensor structure to serialize.\n\n##### Returns\n', 'stemmed comments': ['serial', 'structur', 'return', 'arg', 'spars', 'tensor']}"
1084,"{'func name': 'stack', 'comments': 'Stacks the input, if it admits the notion of stacking.\n\nFor example, a list of tensors can be stacked into a larger tensor. This function is similar to tf.stack, but it accepts non-lists and lists of non-tensors as arguments. In the latter case, the function does nothing.\n##### Args\n* **list_or_tensor**: Any\n\n* **element_dtype**: tf.DType, optional dtypedtype for the elements in the list.\n    Required if the input is stackable, and the list is untyped.\n\n* **strict**: bool, if True an error is raised if the input is not stackable.\n    Otherwise the function is a no-op.\n\n##### Returns\n', 'stemmed comments': ['otherwis', 'rais', 'nontensor', 'untyp', 'arg', 'ani', 'for', 'error', 'argument', 'list_or_tensor', 'accept', 'tfdtype', 'admit', 'return', 'stack', 'nonlist', 'larger', 'option', 'noop', 'list', 'thi', 'stackabl', 'latter', 'element', 'strict', 'exampl', 'noth', 'input', 'tfstack', 'tensor', 'similar', 'requir', 'function', 'notion', 'case', 'In', 'bool', 'true', 'element_dtyp', 'dtypedtyp']}"
1085,"{'func name': '_einsum_v2_parse_and_resolve_equation', 'comments': 'Helper which validates einsum equation and resolves input shapes.\n\n\n', 'stemmed comments': ['helper', 'resolv', 'einsum', 'shape', 'input', 'equat', 'valid']}"
1086,"{'func name': '_log1p', 'comments': '', 'stemmed comments': []}"
1087,"{'func name': '_value_and_gradient', 'comments': 'Calls `fn` and computes the gradient of the result wrt `arg`.\n\n\n', 'stemmed comments': ['fn', 'gradient', 'call', 'arg', 'result', 'wrt', 'comput']}"
1088,"{'func name': 'log_cdf_laplace', 'comments': 'Log Laplace distribution function.\n\nThis function calculates `Log[L(x)]`, where `L(x)` is the cumulative distribution function of the Laplace distribution, i.e.\n\n```L(x) := 0.5 * int_{-infty}^x e^{-|t|} dt```\n\nFor numerical accuracy, `L(x)` is computed in different ways depending on `x`,\n\n``` x <= 0: Log[L(x)] = Log[0.5] + x, which is exact\n\n0 < x: Log[L(x)] = Log[1\n\n- 0.5 * e^{-x}], which is exact ```\n##### Args\n* **x**: `Tensor` of type `float32`, `float64`.\n\n* **name**: Python string. A name for the operation (default=""log_ndtr"").\n\n##### Returns\n', 'stemmed comments': ['e^', '[', 'cumul', '|t|', 'arg', 'infti', 'L', '{', 'for', '05', 'way', 'laplac', 'return', 'distribut', 'ie', '=', 'float64', '1', 'thi', 'calcul', ']', 'default=', 'log_ndtr', 'type', 'A', '^x', 'log', 'string', '}', 'depend', 'differ', 'numer', 'float32', 'int_', 'tensor', 'accuraci', 'function', '<', 'dt', 'x', 'oper', 'name', '0', 'python', 'exact', 'comput']}"
1089,"{'func name': 'inverse_mdct', 'comments': 'Computes the inverse modified DCT of `mdcts`.\n\nTo reconstruct an original waveform, the same window function should be used with `mdct` and `inverse_mdct`.\n\nExample usage:\n\n>>> @tf.function ... def compare_round_trip(): ...\n\n samples = 1000 ...\n\n frame_length = 400 ...\n\n halflen = frame_length // 2 ...\n\n waveform = tf.random.normal(dtype=tf.float32, shape=[samples]) ...\n\n waveform_pad = tf.pad(waveform, [[halflen, 0],]) ...\n\n mdct = tf.signal.mdct(waveform_pad, frame_length, pad_end=True, ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n window_fn=tf.signal.vorbis_window) ...\n\n inverse_mdct = tf.signal.inverse_mdct(mdct, ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n window_fn=tf.signal.vorbis_window) ...\n\n inverse_mdct = inverse_mdct[halflen: halflen + samples] ...\n\n return waveform, inverse_mdct >>> waveform, inverse_mdct = compare_round_trip() >>> np.allclose(waveform.numpy(), inverse_mdct.numpy(), rtol=1e-3, atol=1e-4) True\n\nImplemented with TPU/GPU-compatible ops and supports gradients.\n##### Args\n* **mdcts**: A `float32`/`float64` `[..., frames, frame_length // 2]`\n  `Tensor` of MDCT bins representing a batch of `frame_length // 2`-point\n  MDCTs.\n\n* **window_fn**: A callable that takes a frame_length and a `dtype` keyword\n  argument and returns a `[frame_length]` `Tensor` of samples in the\n  provided datatype. If set to `None`, a rectangular window with a scale of\n  1/sqrt(2) is used. For perfect reconstruction of a signal from `mdct`\n  followed by `inverse_mdct`, please use `tf.signal.vorbis_window`,\n  `tf.signal.kaiser_bessel_derived_window` or `None`. If using another\n  window function, make sure that w[n]^2 + w[n + frame_length // 2]^2 = 1\n  and w[n] = w[frame_length - n - 1] for n = 0,...,frame_length // 2 - 1 to\n  achieve perfect reconstruction.\n\n* **norm**: If ""ortho"", orthonormal inverse DCT4 is performed, if it is None,\n  a regular dct4 followed by scaling of `1/frame_length` is performed.\n\n* **name**: An optional name for the operation.\n\n##### Returns\n', 'stemmed comments': ['//', 'make', 'arg', 'halflen', '>', 'window', 'window_fn', 'inverse_mdct', 'float64', 'tfrandomnorm', 'none', 'origin', 'modifi', ']', 'callabl', 'waveformnumpi', 'follow', 'tfsignalinverse_mdct', 'frame_length', 'batch', 'perform', 'To', 'npallclos', 'orthonorm', 'waveform_pad', 'dtype=tffloat32', 'norm', '/', 'window_fn=tfsignalvorbis_window', 'regular', 'tfpad', 'tfsignalmdct', 'atol=1e4', 'for', 'return', 'tpu/gpucompat', 'shape=', 'rectangular', 'def', 'anoth', '=', '2', 'option', '^2', 'tfsignalvorbis_window', 'A', 'exampl', '1/sqrt', 'compare_round_trip', 'repres', 'op', 'name', 'true', 'keyword', 'bin', '[', 'dct4', 'argument', 'tffunction', 'take', '400', 'usag', 'reconstruct', 'invers', 'tfsignalkaiser_bessel_derived_window', 'mdct', 'scale', 'An', 'n', 'w', 'inverse_mdctnumpi', 'float32', 'waveform', 'implement', '@', 'function', 'sure', 'use', '0', 'pad_end=tru', '1000', 'frame', 'point', 'dct', 'signal', 'sampl', 'provid', '1', 'If', 'rtol=1e3', 'datatyp', 'gradient', 'perfect', '1/frame_length', 'support', 'tensor', 'ortho', 'dtype', 'achiev', 'oper', 'set', 'pleas', 'comput']}"
1090,"{'func name': 'build_graph', 'comments': 'Build a graph containing a sequence of split operations.\n\n\n##### Args\n* **device**: string, the device to run on.\n\n* **input_shape**: shape of the input tensor.\n\n* **output_sizes**: size of each output along axis.\n\n* **axis**: axis to be split along.\n\n##### Returns\n', 'stemmed comments': ['graph', 'split', 'run', 'arg', 'return', 'input_shap', 'sequenc', 'string', 'output_s', 'devic', 'shape', 'input', 'tensor', 'axi', 'contain', 'along', 'oper', 'size', 'output', 'build']}"
1091,"{'func name': 'make_split_tests', 'comments': 'Make a set of tests to do tf.split.\n\n\n', 'stemmed comments': ['set', 'make', 'tfsplit', 'test']}"
1092,"{'func name': 'make_splitv_tests', 'comments': 'Make a set of tests to do tf.split_v.\n\n\n', 'stemmed comments': ['tfsplit_v', 'set', 'make', 'test']}"
1093,"{'func name': 'make_squeeze_transpose_tests', 'comments': 'Make a set of tests to do squeeze followed by transpose.\n\n\n', 'stemmed comments': ['squeez', 'make', 'set', 'follow', 'transpos', 'test']}"
1094,"{'func name': 'make_squeeze_tests', 'comments': 'Make a set of tests to do squeeze.\n\n\n', 'stemmed comments': ['squeez', 'set', 'make', 'test']}"
1095,"{'func name': 'np_split_squeeze', 'comments': '', 'stemmed comments': []}"
1096,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
1097,"{'func name': 'batch_scatter_update', 'comments': 'Generalization of `tf.compat.v1.scatter_update` to axis different than 0.\n\nAnalogous to `batch_gather`. This assumes that `ref`, `indices` and `updates` have a series of leading dimensions that are the same for all of them, and the updates are performed on the last dimension of indices. In other words, the dimensions should be the following:\n\n`num_prefix_dims = indices.ndims\n\n- 1` `batch_dim = num_prefix_dims + 1` `updates.shape = indices.shape + var.shape[batch_dim:]`\n\nwhere\n\n`updates.shape[:num_prefix_dims]` `== indices.shape[:num_prefix_dims]` `== var.shape[:num_prefix_dims]`\n\nAnd the operation performed can be expressed as:\n\n`var[i_1, ..., i_n, indices[i_1, ..., i_n, j]] = updates[i_1, ..., i_n, j]`\n\nWhen indices is a 1D tensor, this operation is equivalent to `tf.compat.v1.scatter_update`.\n\nTo avoid this operation there would be 2 alternatives: 1) Reshaping the variable by merging the first `ndims` dimensions. However, this is not possible because `tf.reshape` returns a Tensor, which we cannot use `tf.compat.v1.scatter_update` on. 2) Looping over the first `ndims` of the variable and using `tf.compat.v1.scatter_update` on the subtensors that result of slicing the first dimension. This is a valid option for `ndims = 1`, but less efficient than this implementation.\n\nSee also `tf.compat.v1.scatter_update` and `tf.compat.v1.scatter_nd_update`.\n##### Args\n* **ref**: `Variable` to scatter onto.\n\n* **indices**: Tensor containing indices as described above.\n\n* **updates**: Tensor of updates to apply to `ref`.\n\n* **use_locking**: Boolean indicating whether to lock the writing operation.\n\n* **name**: Optional scope name string.\n\n##### Returns\n', 'stemmed comments': ['indicesshap', 'tfreshap', 'arg', 'seri', 'appli', 'express', 'see', 'lock', 'indic', ']', 'var', 'whether', 'variabl', 'follow', 'equival', 'indicesndim', 'howev', 'perform', 'would', 'last', 'To', 'first', 'loop', 'when', 'result', 'also', 'less', 'subtensor', 'return', 'assum', 'option', '=', '2', 'write', 'batch_gath', 'and', 'i_n', 'scatter', 'axi', 'name', '[', '1D', 'merg', 'onto', 'ref', 'dimens', 'ndim', 'describ', 'batch_dim', 'analog', 'valid', 'tfcompatv1scatter_upd', 'scope', 'string', 'i_1', 'implement', 'word', 'contain', 'varshap', 'In', 'use', '0', 'lead', 'gener', 'j', 'slice', 'effici', 'tfcompatv1scatter_nd_upd', '1', 'num_prefix_dim', 'boolean', 'thi', 'updatesshap', 'altern', 'differ', 'tensor', 'avoid', '==', 'updat', 'oper', 'reshap', 'use_lock', 'possibl']}"
1098,"{'func name': 'xla_device_name', 'comments': '', 'stemmed comments': []}"
1099,"{'func name': 'set_global_generator', 'comments': ""Replaces the global generator with another `Generator` object.\n\nThis function creates a new Generator object (and the Variable object within), which does not work well with tf.function because (1) tf.function puts restrictions on Variable creation thus reset_global_generator can't be freely used inside tf.function; (2) redirecting a global variable to a new object is problematic with tf.function because the old object may be captured by a 'tf.function'ed function and still be used by it. A 'tf.function'ed function only keeps weak references to variables, so deleting a variable and then calling that function again may raise an error, as demonstrated by random_test.py/RandomTest.testResetGlobalGeneratorBadWithDefun .\n##### Args\n* **generator**: the new `Generator` object.\n\n"", 'stemmed comments': ['ca', ';', 'keep', 'restrict', 'rais', 'delet', 'arg', 'redirect', 'error', 'object', 'nt', 'tffunction', 'new', 'old', 'weak', 'problemat', 'well', 'work', 'global', 'anoth', '2', 'random_testpy/randomtesttestresetglobalgeneratorbadwithdefun', '1', 'thi', 'may', 'put', 'A', 'thu', 'variabl', 'captur', 'call', 'insid', 'freeli', 'still', 'creat', 'function', 'creation', 'replac', 'demonstr', 'use', 'refer', 'reset_global_gener', 'within', 'gener']}"
1100,"{'func name': 'invert_philox', 'comments': 'Invert the Philox bijection.\n\n\n', 'stemmed comments': ['philox', 'biject', 'invert']}"
1101,"{'func name': 'stateless_parameterized_truncated_normal', 'comments': 'Outputs random values from a truncated normal distribution.\n\nThe generated values follow a normal distribution with specified mean and standard deviation, except that values whose magnitude is more than 2 standard deviations from the mean are dropped and re-picked.\n\n Examples:\n\nSample from a Truncated normal, with deferring shape parameters that broadcast.\n\n>>> means = 0. >>> stddevs = tf.math.exp(tf.random.uniform(shape=[2, 3])) >>> minvals = [-1., -2., -1000.] >>> maxvals = [[10000.], [1.]] >>> y = tf.random.stateless_parameterized_truncated_normal( ...\n\n shape=[10, 2, 3], seed=[7, 17], ...\n\n means=means, stddevs=stddevs, minvals=minvals, maxvals=maxvals) >>> y.shape TensorShape([10, 2, 3])\n##### Args\n* **shape**: A 1-D integer `Tensor` or Python array. The shape of the output\n  tensor.\n\n* **seed**: A shape [2] Tensor, the seed to the random number generator. Must have\n  dtype `int32` or `int64`. (When using XLA, only `int32` is allowed.)\n\n* **means**: A `Tensor` or Python value of type `dtype`. The mean of the truncated\n  normal distribution. This must broadcast with `stddevs`, `minvals` and\n  `maxvals`, and the broadcasted shape must be dominated by `shape`.\n\n* **stddevs**: A `Tensor` or Python value of type `dtype`. The standard deviation\n  of the truncated normal distribution. This must broadcast with `means`,\n  `minvals` and `maxvals`, and the broadcasted shape must be dominated by\n  `shape`.\n\n* **minvals**: A `Tensor` or Python value of type `dtype`. The minimum value of\n  the truncated normal distribution. This must broadcast with `means`,\n  `stddevs` and `maxvals`, and the broadcasted shape must be dominated by\n  `shape`.\n\n* **maxvals**: A `Tensor` or Python value of type `dtype`. The maximum value of\n  the truncated normal distribution. This must broadcast with `means`,\n  `stddevs` and `minvals`, and the broadcasted shape must be dominated by\n  `shape`.\n\n* **name**: A name for the operation (optional).\n\n##### Returns\n', 'stemmed comments': ['array', 'the', 'arg', 'mean', '>', '10', '10000', 'integ', 'must', ']', 'type', 'follow', 'int32', '7', 'number', 'seed=', 'when', '3', 'tfrandomuniform', 'return', 'shape=', 'valu', 'option', '2', '=', 'A', 'paramet', 'exampl', 'specifi', 'stddevs=stddev', 'yshape', 'maximum', 'name', 'python', 'normal', 'int64', 'minimum', 'whose', '[', '1D', 'defer', 'deviat', 'minval', 'truncat', 'maxvals=maxv', 'tfmathexp', 'allow', 'domin', 'means=mean', 'shape', 'maxval', 'broadcast', 'use', '0', 'random', 'stddev', 'output', '1000', 'gener', 'except', 'repick', '17', 'sampl', 'minvals=minv', 'magnitud', 'distribut', 'tensorshap', '1', 'thi', 'tfrandomstateless_parameterized_truncated_norm', 'standard', 'tensor', 'seed', 'xla', 'dtype', 'oper', 'drop']}"
1102,"{'func name': '_events_from_logdir', 'comments': 'Returns all events in the single eventfile in logdir.\n\n\n##### Args\n* **logdir**: The directory in which the single event file is sought.\n\n##### Returns\n', 'stemmed comments': ['sought', 'return', 'event', 'logdir', 'the', 'directori', 'arg', 'eventfil', 'file', 'singl']}"
1103,"{'func name': 'latency_stats', 'comments': 'Records the latency of producing each element of the input dataset.\n\nTo consume the statistics, associate a `StatsAggregator` with the output dataset.\n##### Args\n* **tag**: String. All statistics recorded by the returned transformation will\n  be associated with the given `tag`.\n\n##### Returns\n', 'stemmed comments': ['arg', 'return', 'consum', 'associ', 'transform', 'element', 'tag', 'string', 'produc', 'dataset', 'input', 'statsaggreg', 'latenc', 'statist', 'To', 'given', 'all', 'record', 'output']}"
1104,"{'func name': 'SetupStatusBarInsideGoogle', 'comments': '', 'stemmed comments': []}"
1105,"{'func name': 'all_strategy_combinations_minus_default', 'comments': '', 'stemmed comments': []}"
1106,"{'func name': '_all_mean', 'comments': '', 'stemmed comments': []}"
1107,"{'func name': 'make_strided_slice_np_style_tests', 'comments': 'Make a set of tests to test strided_slice in np style.\n\n\n', 'stemmed comments': ['style', 'make', 'set', 'strided_slic', 'np', 'test']}"
1108,"{'func name': 'make_strided_slice_1d_exhaustive_tests', 'comments': 'Make a set of exhaustive tests for 1D strided_slice.\n\n\n', 'stemmed comments': ['1D', 'exhaust', 'make', 'set', 'strided_slic', 'test']}"
1109,"{'func name': '_get_end_to_end_test_cases', 'comments': '', 'stemmed comments': []}"
1110,"{'func name': 'string_join', 'comments': 'Perform element-wise concatenation of a list of string tensors.\n\nGiven a list of string tensors of same shape, performs element-wise concatenation of the strings of the same index in all tensors.\n\n >>> tf.strings.join([\'abc\',\'def\']).numpy() b\'abcdef\' >>> tf.strings.join([[\'abc\',\'123\'], ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[\'def\',\'456\'], ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[\'ghi\',\'789\']]).numpy() array([b\'abcdefghi\', b\'123456789\'], dtype=object) >>> tf.strings.join([[\'abc\',\'123\'], ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[\'def\',\'456\']], ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nseparator="" "").numpy() array([b\'abc def\', b\'123 456\'], dtype=object)\n##### Args\n* **inputs**: A list of `tf.Tensor` objects of same size and `tf.string` dtype.\n\n* **separator**: A string added between each string being joined.\n\n* **name**: A name for the operation (optional).\n\n##### Returns\n', 'stemmed comments': ['dtype=object', 'array', 'tftensor', '[', 'b123', 'ghi', 'tfstring', 'arg', 'index', '>', 'object', '456', 'return', 'babcdef', 'babcdefghi', 'ad', 'concaten', 'def', 'option', 'list', 'tfstringsjoin', ']', 'b123456789', 'numpi', 'A', '789', 'string', 'shape', 'input', 'abc', 'tensor', 'perform', 'dtype', 'separ', 'babc', '123', 'separator=', 'oper', 'name', 'given', 'join', 'size', 'elementwis']}"
1111,"{'func name': 'main', 'comments': 'Application run loop.\n\n\n', 'stemmed comments': ['run', 'applic', 'loop']}"
1112,"{'func name': 'strip_unused_from_files', 'comments': 'Removes unused nodes from a graph file.\n\n\n', 'stemmed comments': ['node', 'graph', 'remov', 'unus', 'file']}"
1113,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
1114,"{'func name': 'type_spec_from_value', 'comments': 'Creates a type specification for the given value.\n\n\n##### Args\n* **element**: The element to create the type specification for.\n\n* **use_fallback**: Whether to fall back to converting the element to a tensor\n  in order to compute its `TypeSpec`.\n\n##### Returns\n', 'stemmed comments': ['creat', 'order', 'tensor', 'return', 'whether', 'type', 'comput', 'the', 'specif', 'arg', 'valu', 'convert', 'given', 'fall', 'back', 'use_fallback', 'typespec', 'element']}"
1115,"{'func name': '_make_tensor_slice_spec', 'comments': 'Wraps all integers in an extended slice spec w/ a tensor.\n\nThis function is used to help test slicing when the slice spec contains tensors, rather than integers.\n##### Args\n* **slice_spec**: The extended slice spec.\n\n* **use_constant**: If true, then wrap each integer with a tf.constant.  If false,\n  then wrap each integer with a tf.placeholder.\n\n##### Returns\n', 'stemmed comments': ['wrap', 'the', 'arg', 'slice', 'fals', 'return', 'tfplacehold', 'slice_spec', 'If', 'thi', 'integ', 'tfconstant', 'use_const', 'rather', 'spec', 'tensor', 'extend', 'help', 'test', 'contain', 'function', 'use', 'true', 'w/']}"
1116,"{'func name': '_merge_dims', 'comments': 'Merges `outer_axis...inner_axis` of `value` into a single dimension.\n\n\n', 'stemmed comments': ['outer_axi', 'merg', 'valu', 'inner_axi', 'dimens', 'singl']}"
1117,"{'func name': 'try_import', 'comments': '', 'stemmed comments': []}"
1118,"{'func name': 'subscribe', 'comments': ""Subscribe to a tensor.\n\nThis method will attach side effect graphs to a given set of tensors. Set of tensors follows from session.run and supports single `Tensor`, `list`, nested `list`, `tuple`, `namedtuple`, or `dict`. It returns the tensors in the same passed in structure, but as clones with side effects applied. The supplied side effect graphs are specified as a constructor function which takes the target tensor and constructs a side effect graph and returns a list of ops that should be control dependencies on fetching the tensor. It will append 'subscription' to the name scope of the tensor for every node in the side effect graph. These control dependencies are what trigger the side effects. Subscribe will construct the additions to your graph and return the created identity tensor downstream of the control dependencies. Use these tensors as you would normally in the rest of your tensorflow code. If a given tensor has already been subscribed or a tensor returned by a call to subscribe is passed, the previously created identity tensor will be reused and the side effect graphs will be added to the existing ones.\n##### Args\n* **tensors**: `Tensor` or set of tensors to subscribe to. Set of tensors format\n  follows from `Session.run` and supports single `Tensor`, `list`, nested\n  `list`, `tuple`, `namedtuple`, or `dict`.\n\n* **side_effects**: Function(s) that takes a `Tensor`, construct a subgraph, and\n  return a nonempty list of control dependencies. This can be a single\n  function or list of functions.\n\n##### Returns\n"", 'stemmed comments': ['tupl', 'pass', 'trigger', 'addit', 'graph', 'format', 'sessionrun', 'the', 'nest', 'arg', 'alreadi', 'control', 'appli', 'subscrib', 'take', 'clone', 'return', 'code', 'subscript', 'ad', 'side_effect', 'attach', 'suppli', 'dict', 'namedtupl', 'list', 'everi', 'If', 'thi', 'ident', 'singl', 'node', 'It', 'structur', 'these', 'method', 'call', 'append', 'scope', 'follow', 'support', 'depend', 'specifi', 'one', 'tensor', 'tensorflow', 'constructor', 'downstream', 'target', 'creat', 'side', 'rest', 'would', 'previous', 'reus', 'nonempti', 'function', 'effect', 'op', 'name', 'set', 'given', 'use', 'exist', 'fetch', 'subgraph', 'normal', 'construct']}"
1119,"{'func name': 'summary_iterator', 'comments': ""Returns a iterator for reading `Event` protocol buffers from an event file.\n\nYou can use this function to read events written to an event file. It returns a Python iterator that yields `Event` protocol buffers.\n\nExample: Print the contents of an events file.\n\n```python for e in tf.compat.v1.train.summary_iterator(path to events file): print(e) ```\n\nExample: Print selected summary values.\n\n```python # This example supposes that the events file contains summaries with a # summary value tag 'loss'.\n\nThese could have been added by calling # `add_summary()`, passing the output of a scalar summary op created with # with: `tf.compat.v1.summary.scalar('loss', loss_tensor)`. for e in tf.compat.v1.train.summary_iterator(path to events file): for v in e.summary.value: if v.tag == 'loss': print(v.simple_value) ``` Example: Continuously check for new summary values.\n\n```python summaries = tf.compat.v1.train.summary_iterator(path to events file) while True: for e in summaries: for v in e.summary.value: if v.tag == 'loss': print(v.simple_value) # Wait for a bit before checking the file for any new events time.sleep(wait time) ```\n\nSee the protocol buffer definitions of [Event](https://www.tensorflow.org/code/tensorflow/core/util/event.proto) and [Summary](https://www.tensorflow.org/code/tensorflow/core/framework/summary.proto) for more information about their attributes.\n##### Args\n* **path**: The path to an event file created by a `SummaryWriter`.\n\n##### Returns\n"", 'stemmed comments': ['content', 'pass', 'definit', '[', 'wait', 'the', 'loss', 'arg', 'timesleep', 'check', '//wwwtensorfloworg/code/tensorflow/core/util/eventproto', 'see', 'return', 'suppos', 'event', 'new', 'time', 'attribut', 'yield', 'ad', 'vsimple_valu', 'select', 'continu', 'valu', 'iter', '=', 'inform', 'tfcompatv1trainsummary_iter', 'thi', 'tfcompatv1summaryscalar', 'It', ']', 'tag', 'these', 'esummaryvalu', 'summarywrit', 'written', 'call', 'exampl', 'bit', 'vtag', 'path', 'scalar', 'protocol', 'buffer', 'loss_tensor', 'v', '//wwwtensorfloworg/code/tensorflow/core/framework/summaryproto', 'file', 'could', 'you', 'creat', 'http', 'contain', 'function', 'op', '==', 'read', 'use', 'python', 'print', 'e', 'true', 'summari', 'output', 'add_summari']}"
1120,"{'func name': 'skip_summary', 'comments': 'Determines if summary should be skipped.\n\nIf using multiple replicas in distributed strategy, skip summaries on all replicas except the first one (replica_id=0).\n##### Returns\n', 'stemmed comments': ['except', 'strategi', 'replica_id=0', 'summari', 'return', 'distribut', 'use', 'skip', 'first', 'multipl', 'replica', 'determin', 'If', 'one']}"
1121,"{'func name': 'summary_scope', 'comments': ""Enters a scope used for the summary and yields both the name and tag.\n\nTo ensure that the summary tag name is always unique, we create a name scope based on `name` and use the full scope name in the tag.\n\nIf `family` is set, then the tag name will be '<family>/<scope_name>', where `scope_name` is `<outer_scope>/<family>/<name>`. This ensures that `family` is always the prefix of the tag (and unmodified), while ensuring the scope respects the outer scope from this summary was created.\n##### Args\n* **name**: A name for the generated summary node.\n\n* **family**: Optional; if provided, used as the prefix of the summary tag name.\n\n* **default_name**: Optional; if provided, used as default name of the summary.\n\n* **values**: Optional; passed as `values` parameter to name_scope.\n\n* **elds**: \n\n"", 'stemmed comments': ['/', ';', 'pass', 'scope_nam', 'alway', 'arg', 'enter', '>', 'default', 'yield', 'valu', 'option', 'ensur', 'full', 'prefix', 'provid', 'If', 'thi', 'respect', 'node', 'tag', 'default_nam', 'A', 'paramet', 'eld', 'scope', 'outer', 'base', 'creat', 'name_scop', '<', 'unmodifi', 'To', 'name', 'use', 'uniqu', 'set', 'famili', 'summari', 'outer_scop', 'gener']}"
1122,"{'func name': 'events_from_logdir', 'comments': 'Returns all events in the single eventfile in logdir.\n\n\n##### Args\n* **logdir**: The directory in which the single event file is sought.\n\n##### Returns\n', 'stemmed comments': ['sought', 'return', 'event', 'logdir', 'the', 'directori', 'arg', 'eventfil', 'file', 'singl']}"
1123,"{'func name': 'to_numpy', 'comments': '', 'stemmed comments': []}"
1124,"{'func name': 'trace_off', 'comments': 'Stops the current trace and discards any collected information.\n\n\n', 'stemmed comments': ['collect', 'current', 'stop', 'trace', 'inform', 'discard']}"
1125,"{'func name': 'get_summary_description', 'comments': 'Given a TensorSummary node_def, retrieve its SummaryDescription.\n\nWhen a Summary op is instantiated, a SummaryDescription of associated metadata is stored in its NodeDef. This method retrieves the description.\n##### Args\n* **node_def**: the node_def_pb2.NodeDef of a TensorSummary op\n\n##### Returns\n', 'stemmed comments': ['retriev', 'when', 'arg', 'node_def_pb2nodedef', 'descript', 'metadata', 'return', 'summarydescript', 'associ', 'thi', 'tensorsummari', 'method', 'store', 'instanti', 'nodedef', 'node_def', 'op', 'given', 'summari']}"
1126,"{'func name': '_summary_iterator', 'comments': 'Reads events from test_dir/events.\n\n\n##### Args\n* **test_dir**: Name of the test directory.\n\n##### Returns\n', 'stemmed comments': ['return', 'event', 'test_dir/ev', 'directori', 'test_dir', 'arg', 'read', 'name', 'test']}"
1127,"{'func name': '_GetSvdGradGradOpTest', 'comments': '', 'stemmed comments': []}"
1128,"{'func name': 'get_workers', 'comments': '', 'stemmed comments': []}"
1129,"{'func name': 'get_build_info', 'comments': ""Get a dictionary describing TensorFlow's build environment.\n\nValues are generated when TensorFlow is compiled, and are static for each TensorFlow package. The return value is a dictionary with string keys such as:\n\n- cuda_version\n\n- cudnn_version\n\n- is_cuda_build\n\n- is_rocm_build\n\n- msvcp_dll_names\n\n- nvcuda_dll_name\n\n- cudart_dll_name\n\n- cudnn_dll_name\n\nNote that the actual keys and values returned by this function is subject to change across different versions of TensorFlow or across platforms.\n##### Returns\n"", 'stemmed comments': ['note', 'subject', 'is_rocm_build', 'the', 'dictionari', 'cuda_vers', 'msvcp_dll_name', 'platform', 'packag', 'static', 'return', 'describ', 'cudnn_vers', 'nvcuda_dll_nam', 'cudart_dll_nam', 'actual', 'valu', 'get', 'cudnn_dll_nam', 'build', 'compil', 'environ', 's', 'string', 'is_cuda_build', 'chang', 'differ', 'version', 'tensorflow', 'function', 'key', 'across', 'gener']}"
1130,"{'func name': 'gather_platform_info', 'comments': 'Gather platform info.\n\n\n', 'stemmed comments': ['platform', 'gather', 'info']}"
1131,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
1132,"{'func name': 'get_table', 'comments': '', 'stemmed comments': []}"
1133,"{'func name': 'convert_to_ndarray', 'comments': ""Convert 'x' to a numpy array.\n\n\n"", 'stemmed comments': ['convert', 'array', 'numpi', 'x']}"
1134,"{'func name': 'take_while', 'comments': 'A transformation that stops dataset iteration based on a `predicate`.\n\n\n##### Args\n* **predicate**: A function that maps a nested structure of tensors (having shapes\n  and types defined by `self.output_shapes` and `self.output_types`) to a\n  scalar `tf.bool` tensor.\n\n##### Returns\n', 'stemmed comments': ['map', 'arg', 'nest', 'return', 'iter', 'selfoutput_typ', 'transform', 'selfoutput_shap', 'structur', 'type', 'A', 'dataset', 'scalar', 'shape', 'tensor', 'stop', 'defin', 'predic', 'base', 'tfbool', 'function']}"
1135,"{'func name': 'make_tanh_tests', 'comments': 'Make a set of tests to do tanh.\n\n\n', 'stemmed comments': ['set', 'tanh', 'make', 'test']}"
1136,"{'func name': 'gradient_is_constant', 'comments': '', 'stemmed comments': []}"
1137,"{'func name': 'could_possibly_record', 'comments': 'Returns True if any tape is active.\n\n\n', 'stemmed comments': ['true', 'return', 'activ', 'tape']}"
1138,"{'func name': 'variable_scoped_function_with_local_variable', 'comments': '', 'stemmed comments': []}"
1139,"{'func name': '_skip_common_stack_elements', 'comments': 'Skips items that the target stacktrace shares with the base stacktrace.\n\n\n', 'stemmed comments': ['target', 'stacktrac', 'item', 'skip', 'share', 'base']}"
1140,"{'func name': '_parse_with_unset_ctx', 'comments': '', 'stemmed comments': []}"
1141,"{'func name': 'replace_as_expression', 'comments': 'Variant of replace that generates expressions, instead of code blocks.\n\n\n', 'stemmed comments': ['variant', 'code', 'gener', 'replac', 'block', 'instead', 'express']}"
1142,"{'func name': 'run_with_different_sample_weight_mode_inputs', 'comments': 'Executes the given function with different sample weight mode inputs.\n\n\n##### Args\n* **fn**: Training or eval function to execute.\n\n* **partial_sw**: Boolean flag to indicate whether temporal sample weight mode\n  should be set partially just for one output.\n\n', 'stemmed comments': ['arg', 'mode', 'sampl', 'indic', 'boolean', 'eval', 'tempor', 'train', 'whether', 'partial', 'weight', 'input', 'differ', 'one', 'fn', 'execut', 'function', 'flag', 'set', 'given', 'output', 'partial_sw']}"
1143,"{'func name': '_TensorArraySplitGrad', 'comments': 'Gradient for TensorArraySplit.\n\n\n##### Args\n* **op**: Forward TensorArraySplit op.\n\n* **flow**: Gradient `Tensor` flow to TensorArraySplit.\n\n##### Returns\n', 'stemmed comments': ['flow', 'return', 'gradient', 'tensorarraysplit', 'op', 'arg', 'forward', 'tensor']}"
1144,"{'func name': '_make_converter', 'comments': '', 'stemmed comments': []}"
1145,"{'func name': '_make_ta', 'comments': '', 'stemmed comments': []}"
1146,"{'func name': '_check_dtypes', 'comments': '', 'stemmed comments': []}"
1147,"{'func name': 'get', 'comments': 'Get conversion function for objects of `cls`.\n\n\n##### Args\n* **query**: The type to query for.\n\n##### Returns\n', 'stemmed comments': ['return', 'type', 'function', 'queri', 'the', 'convers', 'cl', 'arg', 'get', 'object']}"
1148,"{'func name': 'tree_variable', 'comments': '', 'stemmed comments': []}"
1149,"{'func name': 'numeric_summary', 'comments': 'Get a text summary of a numeric tensor.\n\nThis summary is only available for numeric (int*, float*, complex*) and Boolean tensors.\n##### Args\n* **tensor**: (`numpy.ndarray`) the tensor value object to be summarized.\n\n##### Returns\n', 'stemmed comments': ['int', 'summar', 'return', 'boolean', 'avail', 'complex', 'arg', 'valu', 'float', 'get', 'thi', 'numer', 'summari', 'text', 'tensor', 'numpyndarray', 'object']}"
1150,"{'func name': 'dynamic_list_append', 'comments': 'Converts a list append call inline.\n\n\n', 'stemmed comments': ['call', 'append', 'convert', 'list', 'inlin']}"
1151,"{'func name': 'unknown_shape', 'comments': 'Returns an unknown TensorShape, optionally with a known rank.\n\n\n##### Args\n* **rank**: (Optional) If specified, the number of dimensions in the shape.\n\n* ****kwargs**: For backwards compatibility.\n\n##### Returns\n', 'stemmed comments': ['If', 'rank', 'unknown', 'return', 'compat', 'kwarg', 'arg', 'tensorshap', 'number', 'option', 'for', 'shape', 'backward', 'specifi', 'known', 'dimens']}"
1152,"{'func name': '_create_tensor', 'comments': '', 'stemmed comments': []}"
1153,"{'func name': 'proto_fingerprint', 'comments': '', 'stemmed comments': []}"
1154,"{'func name': '_trace_files_need_precreated', 'comments': 'Return True if trace files must be pre-created by users.\n\n\n', 'stemmed comments': ['must', 'return', 'precreat', 'user', 'true', 'trace', 'file']}"
1155,"{'func name': 'maybe_set_static_shape', 'comments': ""Sets the shape of `tensor` to the `shape`'s constant value, if inferrable.\n\nThis is a temporary workaround to fix shape inference across functional op boundaries. E.g.\n\n```python shape = tf.constant([3]) @tf.function def f(): u = tf.random_uniform(shape) return u ```\n\nIf we were to rely solely on C++ shape inference, the shape of `u` inside `f` would be unknown because C++ shape inference is not aware of the outer graph and all it sees is a Placeholder node when backtracing the captured tensor for `shape`. `maybe_set_static_shape` computes the static shape value of `shape` by traversing the `FuncGraph` boundaries and sets the correct shape.\n\nA longer term solution would be to fix C++ shape inference.\n##### Args\n* **tensor**: A tensor.\n\n* **shape**: A shape tensor.\n\n"", 'stemmed comments': ['fix', 'graph', '[', 'solut', 'C', 'tfrandom_uniform', '3', 'arg', 'Eg', 'temporari', 'static', 'funcgraph', 'tffunction', 'see', 'maybe_set_static_shap', 'return', 'unknown', 'sole', 'valu', 'def', 'boundari', '=', 'reli', 'If', 'thi', 'correct', 'longer', 'node', ']', 'tfconstant', 'placehold', 'f', 'A', 'term', 's', 'captur', 'workaround', 'constant', 'shape', 'u', 'insid', 'tensor', 'outer', 'travers', 'infer', '@', 'would', 'function', 'backtrac', 'op', 'set', 'inferr', 'python', 'awar', 'across', 'comput']}"
1156,"{'func name': 'fatal', 'comments': '', 'stemmed comments': []}"
1157,"{'func name': '_get_tensordot_tests', 'comments': '', 'stemmed comments': []}"
1158,"{'func name': '_reuse_ancillary_layer', 'comments': '', 'stemmed comments': []}"
1159,"{'func name': 'is_range_tensor', 'comments': 'Returns True if a tensor is the result of a tf.range op. Best effort.\n\n\n', 'stemmed comments': ['return', 'tfrang', 'op', 'best', 'true', 'result', 'tensor', 'effort']}"
1160,"{'func name': 'v2_only_combinations', 'comments': 'Returns the default test combinations for v1 only tf.data tests.\n\n\n', 'stemmed comments': ['default', 'combin', 'v1', 'return', 'tfdata', 'test']}"
1161,"{'func name': '_get_name', 'comments': '', 'stemmed comments': []}"
1162,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
1163,"{'func name': '_gather', 'comments': 'Gathers a single value.\n\n\n', 'stemmed comments': ['valu', 'gather', 'singl']}"
1164,"{'func name': 'set_producer_version', 'comments': 'Sets graph.graph_def_versions.producer to `producer_version`.\n\n\n', 'stemmed comments': ['set', 'producer_vers', 'graphgraph_def_versionsproduc']}"
1165,"{'func name': 'create_identity_with_nan_gradients_fn', 'comments': ""Returns a function that optionally has NaN gradients.\n\nThis serves as a hook to introduce NaN gradients to a model. This returns an identity function. The identity's gradient function will check if the boolean tensor `have_nan_gradients` is True. If so, the gradient will be NaN. Otherwise, the gradient will also be the identity.\n##### Args\n* **have_nan_gradients**: A scalar boolean tensor. If True, gradients will be NaN.\n  Otherwise, the gradient function is the identity function.\n\n##### Returns\n"", 'stemmed comments': ['otherwis', 'nan', 'the', 'arg', 'also', 'check', 'return', 'option', 'introduc', 'boolean', 'If', 'ident', 'thi', 'hook', 'gradient', 'A', 's', 'scalar', 'tensor', 'model', 'serv', 'function', 'have_nan_gradi', 'true']}"
1166,"{'func name': 'evaluate_tflite_model', 'comments': 'Evaluates the provided tf.lite model with the given input ndarrays.\n\n\n##### Args\n* **tflite_model**: bytes. The serialized tf.lite model.\n\n* **input_ndarrays**: A list of NumPy arrays to feed as input to the model.\n\n##### Returns\n', 'stemmed comments': ['array', 'the', 'arg', 'return', 'ndarray', 'byte', 'tflite_model', 'provid', 'list', 'serial', 'numpi', 'A', 'evalu', 'input', 'tflite', 'model', 'feed', 'input_ndarray', 'given']}"
1167,"{'func name': 'RunWithWarmup', 'comments': 'Runs a graph a few times to ensure that its clusters are compiled.\n\n\n', 'stemmed comments': ['cluster', 'graph', 'time', 'run', 'ensur', 'compil']}"
1168,"{'func name': 'build_mock_model', 'comments': 'Creates an object containing an example model.\n\n\n', 'stemmed comments': ['model', 'creat', 'contain', 'exampl', 'object']}"
1169,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
1170,"{'func name': 'is_built_with_xla', 'comments': 'Returns whether TensorFlow was built with XLA support.\n\n\n', 'stemmed comments': ['xla', 'return', 'whether', 'built', 'support', 'tensorflow']}"
1171,"{'func name': '_set_v2_dtype_behavior', 'comments': ""Returns version of 'fn' that runs with v2 dtype behavior on or off.\n\n\n"", 'stemmed comments': ['fn', 'return', 'dtype', 'run', 'v2', 'behavior', 'version']}"
1172,"{'func name': 'fake_tf', 'comments': 'Creates a fake module that looks like TensorFlow, for testing.\n\n\n', 'stemmed comments': ['creat', 'like', 'fake', 'modul', 'tensorflow', 'test', 'look']}"
1173,"{'func name': 'sleep', 'comments': 'Sleeps for `sleep_microseconds` before producing each input element.\n\n\n##### Args\n* **sleep_microseconds**: The number of microseconds to sleep before producing an\n  input element.\n\n##### Returns\n', 'stemmed comments': ['return', 'microsecond', 'the', 'arg', 'produc', 'input', 'number', 'sleep', 'element', 'sleep_microsecond']}"
1174,"{'func name': 'path_to_string_content', 'comments': '', 'stemmed comments': []}"
1175,"{'func name': 'get_layer_class', 'comments': '', 'stemmed comments': []}"
1176,"{'func name': 'custom_split_fn', 'comments': '', 'stemmed comments': []}"
1177,"{'func name': 'one_hot', 'comments': 'One-hot encodes a text into a list of word indexes of size `n`.\n\nThis function receives as input a string of text and returns a list of encoded integers each corresponding to a word (or token) in the given input string.\n\nArguments: input_text: Input text (string). n: int. Size of vocabulary. filters: list (or concatenation) of characters to filter out, such as punctuation. Default: ``!""#$%&()*+,-./:;<=>?@[\\]^_`{|}~\\t\\n``, includes basic punctuation, tabs, and newlines. lower: boolean. Whether to set the text to lowercase. split: str. Separator for word splitting.\n##### Returns\n', 'stemmed comments': ['/', ';', '[', '~\\t\\n', 'split', 'index', 'includ', 'onehot', '{', '|', 'basic', 'argument', '>', 'default', 'punctuat', 'return', '?', '&', 'concaten', '=', '\\', 'list', 'boolean', 'thi', 'text', 'vocabulari', 'integ', ']', '%', '!', 'whether', 'receiv', 'n', 'filter', 'string', 'str', '}', 'correspond', 'input', '^_', 'input_text', 'word', 'int', '@', 'separ', 'token', 'function', 'charact', '<', 'lowercas', 'encod', 'lower', 'given', 'set', 'size', 'newlin', '$', 'tab']}"
1178,"{'func name': 'test_params_and_defaults', 'comments': '', 'stemmed comments': []}"
1179,"{'func name': 'contextmanager', 'comments': 'A tf_decorator-aware wrapper for `contextlib.contextmanager`.\n\nUsage is identical to `contextlib.contextmanager`.\n##### Args\n* **target**: A callable to be wrapped in a contextmanager.\n\n##### Returns\n', 'stemmed comments': ['wrap', 'target', 'contextmanag', 'callabl', 'return', 'usag', 'A', 'tf_decoratorawar', 'arg', 'ident', 'contextlibcontextmanag', 'wrapper']}"
1180,"{'func name': 'test_wrapper', 'comments': '', 'stemmed comments': []}"
1181,"{'func name': 'unwrap', 'comments': 'Unwraps an object into a list of TFDecorators and a final target.\n\n\n##### Args\n* **maybe_tf_decorator**: Any callable object.\n\n##### Returns\n', 'stemmed comments': ['target', 'return', 'callabl', 'maybe_tf_decor', 'unwrap', 'arg', 'final', 'tfdecor', 'list', 'ani', 'object']}"
1182,"{'func name': 'setUpModule', 'comments': '', 'stemmed comments': []}"
1183,"{'func name': '_test_function2', 'comments': '', 'stemmed comments': []}"
1184,"{'func name': 'kwarg_only', 'comments': 'A wrapper that throws away all non-kwarg arguments.\n\n\n', 'stemmed comments': ['nonkwarg', 'argument', 'A', 'away', 'throw', 'wrapper']}"
1185,"{'func name': 'test_decorated_function_with_defaults', 'comments': 'Test Decorated Function With Defaults Docstring.\n\n\n', 'stemmed comments': ['default', 'function', 'with', 'docstr', 'decor', 'test']}"
1186,"{'func name': 'stack', 'comments': 'TFDecorator-aware replacement for inspect.stack.\n\n\n', 'stemmed comments': ['replac', 'inspectstack', 'tfdecoratorawar']}"
1187,"{'func name': '_get_thread_id', 'comments': 'Get id of current thread, suitable for logging as an unsigned quantity.\n\n\n', 'stemmed comments': ['current', 'id', 'suitabl', 'log', 'unsign', 'get', 'thread', 'quantiti']}"
1188,"{'func name': 'OptimizeGraph', 'comments': 'Optimize the provided metagraph.\n\nFor best results, the signature_def field in `metagraph` should be populated with information about input (feed) and output (fetch) tensors.\n##### Args\n* **config_proto**: a ConfigProto protobuf.\n\n* **metagraph**: a MetagraphDef protobuf.\n\n* **verbose**: whether to log optimization results.\n\n* **graph_id**: a string identifying this graph.\n\n* **cluster**: a grappler cluster object representing hardware resources\n    available to run this graph.\n\n* **strip_default_attributes**: whether graph node attributes having default\n    values should be removed after all the optimization passes. This\n    option is useful if the resulting graph will be executed by an older\n    process that might not know some of the recently added attributes.\n\n', 'stemmed comments': ['pass', 'graph', 'run', 'optim', 'best', 'arg', 'graph_id', 'remov', 'result', 'for', 'process', 'configproto', 'might', 'resourc', 'field', 'object', 'default', 'know', 'attribut', 'metagraph', 'ad', 'grappler', 'hardwar', 'valu', 'option', 'config_proto', 'provid', 'inform', 'thi', 'node', 'cluster', 'whether', 'log', 'string', 'older', 'verbos', 'input', 'tensor', 'feed', 'protobuf', 'repres', 'identifi', 'strip_default_attribut', 'execut', 'signature_def', 'popul', 'avail', 'use', 'metagraphdef', 'fetch', 'recent', 'output']}"
1189,"{'func name': 'tf_record_random_reader', 'comments': 'Creates a reader that allows random-access reads from a TFRecords file.\n\nThe created reader object has the following method:\n\n- `read(offset)`, which returns a tuple of `(record, ending_offset)`, where `record` is the TFRecord read at the offset, and `ending_offset` is the ending offset of the read record.\n\nThe method throws a `tf.errors.DataLossError` if data is corrupted at the given offset. The method throws `IndexError` if the offset is out of range for the TFRecords file.\n\n Usage example: ```py reader = tf_record_random_reader(file_path)\n\nrecord_1, offset_1 = reader.read(0)\n\n# 0 is the initial offset. # offset_1 is the ending offset of the 1st record and the starting offset of # the next.\n\nrecord_2, offset_2 = reader.read(offset_1) # offset_2 is the ending offset of the 2nd record and the starting offset of # the next. # We can jump back and read the first record again if so desired. reader.read(0) ```\n##### Args\n* **path**: The path to the TFRecords file.\n\n##### Returns\n', 'stemmed comments': ['start', 'tupl', 'We', 'ending_offset', 'py', '2nd', 'the', 'arg', 'randomaccess', 'rang', '1st', 'initi', 'indexerror', 'object', 'corrupt', 'return', 'usag', 'offset_1', 'jump', '=', 'offset', 'reader', 'tferrorsdatalosserror', 'throw', 'end', 'allow', 'readerread', 'method', 'exampl', 'record_2', 'follow', 'next', 'path', 'tf_record_random_read', 'file', 'data', 'tfrecord', 'creat', 'record_1', 'file_path', 'desir', 'read', 'given', '0', 'record', 'first', 'back', 'offset_2']}"
1190,"{'func name': 'reroute_error', 'comments': 'Temporarily reroute errors written to tf_logging.error into `captured`.\n\n\n', 'stemmed comments': ['temporarili', 'rerout', 'tf_loggingerror', 'written', 'captur', 'error']}"
1191,"{'func name': 'should_use_result', 'comments': ""Function wrapper that ensures the function's output is used.\n\nIf the output is not used, a `logging.error` is logged.\n\nIf `error_in_function` is set, then a `RuntimeError` will be raised at the end of function tracing if the output is not used by that point.\n\nAn output is marked as used if any of its attributes are read, modified, or updated.\n\nExamples when the output is a `Tensor` include:\n\n- Using it in any capacity (e.g. `y = t + 0`, `sess.run(t)`)\n\n- Accessing a property (e.g. getting `t.name` or `t.op`).\n\n- Calling `t.mark_used()`.\n\nNote, certain behaviors cannot be tracked\n\n- for these the object may not be marked as used.\n\nExamples include:\n\n- `t != 0`.\n\nIn this case, comparison is done on types / ids.\n\n- `isinstance(t, tf.Tensor)`.\n\nSimilar to above.\n##### Args\n* **fn**: The function to wrap.\n\n* **warn_in_eager**: Whether to create warnings in Eager as well.\n\n* **error_in_function**: Whether to raise an error when creating a tf.function.\n\n##### Returns\n"", 'stemmed comments': ['note', 'isinst', '/', 'wrap', 'tftensor', 'rais', 'point', 'done', 'the', 'tmark_us', 'arg', 'includ', 'sessrun', 'mark', 'behavior', 'error', 'track', 'object', 'tffunction', 'properti', 'return', 'attribut', 'id', 'well', 'ensur', '=', 'get', 'trace', 'If', 'top', 'end', 'certain', 'comparison', 'capac', 'modifi', 'may', 'An', 'whether', '!', 'type', 's', 'call', 'exampl', 'log', 'eager', 'runtimeerror', 'eg', 'access', 'tensor', 'wrapper', 'similar', 'loggingerror', 'fn', 'creat', 'function', 'tname', 'case', 'updat', 'In', 'use', 'set', 'read', 'error_in_funct', '0', 'warn_in_eag', 'warn', 'output']}"
1192,"{'func name': 'convert_stack_frame', 'comments': ""Converts a TF stack frame into Python's.\n\n\n"", 'stemmed comments': ['frame', 'stack', 's', 'convert', 'python', 'TF']}"
1193,"{'func name': 'extract_stack', 'comments': 'A lightweight, extensible re-implementation of traceback.extract_stack.\n\nNOTE(mrry): traceback.extract_stack eagerly retrieves the line of code for each stack frame using linecache, which results in an abundance of stat() calls. This implementation does not retrieve the code, and any consumer should apply _convert_stack to the result to obtain a traceback that can be formatted etc. using traceback methods.\n##### Args\n* **limit**: A limit on the number of frames to return.\n\n##### Returns\n', 'stemmed comments': ['note', 'format', 'retriev', 'frame', 'traceback', 'mrri', 'arg', '_convert_stack', 'tracebackextract_stack', 'result', 'extens', 'appli', 'return', 'code', 'stack', 'consum', 'linecach', 'thi', 'A', 'etc', 'call', 'method', 'line', 'eagerli', 'stat', 'lightweight', 'implement', 'abund', 'limit', 'reimplement', 'use', 'number', 'obtain']}"
1194,"{'func name': '_AddTests', 'comments': 'Adds test methods to TfTrtIntegrationTestBase.\n\n\n', 'stemmed comments': ['tftrtintegrationtestbas', 'method', 'add', 'test']}"
1195,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
1196,"{'func name': 'get_func_and_args_from_str', 'comments': 'Parse call string to get function and argument names.\n\n\n##### Args\n* **call_str**: Call string must be in the form\n\n##### Returns\n', 'stemmed comments': ['must', 'return', 'function', 'call', 'string', 'arg', 'name', 'pars', 'get', 'call_str', 'form', 'argument']}"
1197,"{'func name': '_string_split_rtype_transformer', 'comments': 'Update tf.strings.split arguments: result_type, source.\n\n\n', 'stemmed comments': ['tfstringssplit', 'result_typ', 'updat', 'argument', 'sourc']}"
1198,"{'func name': '_astuple', 'comments': 'Converts the given attrs to tuple non-recursively.\n\n\n', 'stemmed comments': ['tupl', 'nonrecurs', 'convert', 'given', 'attr']}"
1199,"{'func name': 'unset_environ', 'comments': '', 'stemmed comments': []}"
1200,"{'func name': 'enabled', 'comments': '', 'stemmed comments': []}"
1201,"{'func name': '_get_value_in_tfconfig', 'comments': '', 'stemmed comments': []}"
1202,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
1203,"{'func name': 'write_op_log', 'comments': 'Log provided \'op_log\', and add additional model information below.\n\nThe API also assigns ops in tf.compat.v1.trainable_variables() an op type called \'_trainable_variables\'. The API also logs \'flops\' statistics for ops with op.RegisterStatistics() defined. flops calculation depends on Tensor shapes defined in \'graph\', which might not be complete. \'run_meta\', if provided, completes the shape information with best effort.\n##### Args\n* **graph**: tf.Graph. If None and eager execution is not enabled, use\n    default graph.\n\n* **log_dir**: directory to write the log file.\n\n* **op_log**: (Optional) OpLogProto proto to be written. If not provided, an new\n    one is created.\n\n* **run_meta**: (Optional) RunMetadata proto that helps flops computation using\n    run time shape information.\n\n* **add_trace**: Whether to add python code trace information.\n    Used to support ""code"" view.\n\n', 'stemmed comments': ['addit', 'graph', 'run', 'the', 'arg', 'complet', 'best', 'tfgraph', 'also', 'might', 'default', 'add', 'code', 'time', 'new', 'option', 'none', 'provid', 'trace', 'inform', 'If', 'effort', 'oplogproto', 'flop', 'write', 'calcul', 'opregisterstatist', 'api', 'tfcompatv1trainable_vari', 'type', 'assign', 'proto', 'call', 'run_meta', 'written', 'log', 'eager', 'log_dir', 'support', 'shape', 'depend', 'runmetadata', 'one', 'tensor', 'help', 'add_trac', 'defin', 'model', 'file', 'creat', 'whether', 'view', 'statist', 'op_log', 'execut', 'enabl', 'directori', '_trainable_vari', 'op', 'use', 'python', 'comput']}"
1204,"{'func name': 'override_threadpool', 'comments': 'Returns a new dataset that uses the given thread pool for its operations.\n\n\n##### Args\n* **dataset**: A `tf.data.Dataset` object.\n\n* **thread_pool**: A `PrivateThreadPool` object.\n\n##### Returns\n', 'stemmed comments': ['return', 'thread_pool', 'privatethreadpool', 'new', 'A', 'oper', 'arg', 'use', 'dataset', 'given', 'pool', 'tfdatadataset', 'thread', 'object']}"
1205,"{'func name': 'make_tile_tests', 'comments': 'Make a set of tests to do tile.\n\n\n', 'stemmed comments': ['set', 'tile', 'make', 'test']}"
1206,"{'func name': 'sequences_from_indices', 'comments': '', 'stemmed comments': []}"
1207,"{'func name': 'toco_convert', 'comments': ""Convert a model's graph def into a tflite model.\n\nNOTE: this currently shells out to the toco binary, but we would like convert to Python API tooling in the future.\n##### Args\n* **options**: An Options instance.\n\n* **graph_def**: A GraphDef object.\n\n* **input_tensors**: List of input tensor tuples `(name, shape, type)`.\n\n* **output_tensors**: List of output tensors (names).\n\n* ****kwargs**: Extra options to be passed.\n\n##### Returns\n"", 'stemmed comments': ['note', 'tupl', 'instanc', 'pass', 'graph', 'arg', 'input_tensor', 'object', 'output_tensor', 'return', 'shell', 'def', 'binari', 'option', 'list', 'tool', 'An', 'api', 'futur', 'A', 'type', 's', 'kwarg', 'convert', 'shape', 'input', 'tflite', 'tensor', 'model', 'extra', 'would', 'current', 'like', 'name', 'python', 'graph_def', 'graphdef', 'toco', 'output']}"
1208,"{'func name': 'TensorName', 'comments': 'Get the canonical (non foo:0 name).\n\n\n', 'stemmed comments': ['foo0', 'name', 'canon', 'get', 'non']}"
1209,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
1210,"{'func name': 'make_topk_tests', 'comments': 'Make a set of tests to do topk.\n\n\n', 'stemmed comments': ['set', 'make', 'topk', 'test']}"
1211,"{'func name': '_tpu_host_device_name', 'comments': 'Returns the device name for the CPU device on `task` of `job`.\n\n\n', 'stemmed comments': ['return', 'name', 'cpu', 'devic', 'job', 'task']}"
1212,"{'func name': 'mock_not_running_in_gce_urlopen', 'comments': '', 'stemmed comments': []}"
1213,"{'func name': 'is_running_in_gce', 'comments': '', 'stemmed comments': []}"
1214,"{'func name': 'get_gradients_through_dummy_table_variables', 'comments': 'Get gradients wrt the activations of each feature.\n\n\n##### Args\n* **tpu_embedding**: TPUEmbedding, create dummy table variable to be used with\n  tpu_embedding.\n\n##### Returns\n', 'stemmed comments': ['tpuembed', 'creat', 'activ', 'return', 'gradient', 'featur', 'variabl', 'tabl', 'arg', 'use', 'get', 'dummi', 'tpu_embed', 'wrt']}"
1215,"{'func name': '_get_variable', 'comments': '', 'stemmed comments': []}"
1216,"{'func name': '_get_variable', 'comments': '', 'stemmed comments': []}"
1217,"{'func name': 'make_sharded_variable_creator', 'comments': 'Makes a sharded variable creator given a list of hosts.\n\n\n##### Args\n* **hosts**: a list of tensorflow devices on which to shard the tensors.\n\n##### Returns\n', 'stemmed comments': ['return', 'host', 'variabl', 'make', 'arg', 'given', 'shard', 'devic', 'creator', 'list', 'tensor', 'tensorflow']}"
1218,"{'func name': '_create_partitioned_variables', 'comments': 'Creates PartitionedVariables based on `num_hosts` for `table`.\n\n\n', 'stemmed comments': ['creat', 'partitionedvari', 'tabl', 'num_host', 'base']}"
1219,"{'func name': 'tag_sharding_attribute_for_dequeued_tensors', 'comments': 'Tags appropriate XLA sharding attribute to the dequeued tensors.\n\n\n##### Args\n* **dequeues**: A list of dequeued tensors on TPU.\n\n* **dims**: A list of integer describes how the tensor is partitioned.\n\n##### Returns\n', 'stemmed comments': ['integ', 'dequeu', 'xla', 'tag', 'return', 'attribut', 'appropri', 'A', 'dim', 'describ', 'arg', 'shard', 'tpu', 'partit', 'list', 'tensor']}"
1220,"{'func name': 'on_device_training_loop', 'comments': '', 'stemmed comments': []}"
1221,"{'func name': 'enqueue_tpu_embedding_ragged_tensor_batch', 'comments': ""A placeholder op for enqueueing embedding IDs to the TPU.\n\n\n##### Args\n* **sample_splits**: A list of rank 1 Tensors specifying the break points for\n  splitting embedding_indices and aggregation_weights into rows. It\n  corresponds to ids.row_splits in embedding_lookup(), when ids is a\n  RaggedTensor. Both int32 and int64 are allowed and will be converted to\n  int32 internally.\n\n* **embedding_indices**: A list of rank 1 Tensors, indices into the embedding\n  tables. It corresponds to ids.values in embedding_lookup(), when ids is a\n  RaggedTensor. Both int32 and int64 are allowed and will be converted to\n  int32 internally.\n\n* **aggregation_weights**: A list of rank 1 Tensors containing per training\n  example aggregation weights. It corresponds to the values field of a\n  RaggedTensor with the same row_splits as ids in embedding_lookup(), when\n  ids is a RaggedTensor. Both float32 and float64 are allowed and will be\n  converted to float32 internally.\n\n* **table_ids**: A list of integers specifying the identifier of the embedding\n  table (offset of TableDescriptor in the TPUEmbeddingConfiguration) to\n  lookup the corresponding input. The ith input is looked up using\n  table_ids[i]. The size of the table_ids list must be equal to that of\n  sample_indices, embedding_indices and aggregation_weights.\n\n* **device_ordinal**: The TPU device to use. Should be >= 0 and less than the\n  number of TPU cores in the task on which the node is placed.\n\n* **max_sequence_lengths**: A list of integers, the size of which is equal to\n  sample_indices. If equal to 0, the corresponding feature is considered to\n  be a non-sequence feature, If greater than 0, the corresponding feature is\n  a sequence feature with the given maximal length. If None, then we assume\n  a list of all zeroes.\n\n* **combiners**: A list of string scalars, one for each embedding table that\n  specify how to normalize the embedding activations after weighted\n  summation. Supported combiners are 'mean', 'sum', or 'sqrtn'. It is\n  invalid to have the sum of the weights be 0 for 'mean' or the sum of the\n  squared weights be 0 for 'sqrtn'. If combiners isn't passed, the default\n  is to use 'sum' for all tables (optional).\n\n* **mode_override**: A string input that overrides the mode specified in the\n  TPUEmbeddingConfiguration. Supported values are {'unspecified',\n  'inference', 'training', 'backward_pass_only'}. When set to 'unspecified',\n  the mode set in TPUEmbeddingConfiguration is used, otherwise mode_override\n  is used (optional).\n\n* **name**: A name for the operation (optional).\n\n##### Returns\n"", 'stemmed comments': ['combin', 'the', 'arg', 'mean', '>', 'place', 'idsrow_split', 'indic', 'float64', 'none', 'aggreg', 'must', 'rank', 'It', 'integ', ']', 'nonsequ', 'overrid', 'int32', 'scalar', 'devic', '}', 'featur', 'both', 'per', 'number', 'activ', 'pass', 'when', 'mode', 'less', 'intern', 'default', 'break', 'enqueu', 'return', 'should', 'assum', 'valu', 'option', '=', 'list', 'offset', 'max_sequence_length', 'task', 'zero', 'greater', 'placehold', 'consid', 'tabledescriptor', 'A', 'sequenc', 'embedding_lookup', 'exampl', 'embed', 'convert', 'tpu', 'backward_pass_onli', 'specifi', 'idsvalu', 'one', 'identifi', 'summat', 'tabl', 'op', 'name', 'normal', 'int64', 'otherwis', 'split', 'ith', 'aggregation_weight', '[', 'invalid', 'lookup', '{', 'field', 'nt', 'sum', 'sample_indic', 'embedding_indic', 'allow', 'node', 'train', 'table_id', 'sqrtn', 'raggedtensor', 'tpuembeddingconfigur', 'weight', 'equal', 'string', 'float32', 'input', 'maxim', 'infer', 'contain', 'sample_split', 'use', '0', 'squar', 'look', 'length', 'point', 'row_split', 'id', '1', 'If', 'unspecifi', 'core', 'mode_overrid', 'support', 'correspond', 'tensor', 'device_ordin', 'oper', 'set', 'given', 'size', 'row']}"
1222,"{'func name': 'get_tpu_strategy', 'comments': '', 'stemmed comments': []}"
1223,"{'func name': 'get_tpu_strategy', 'comments': '', 'stemmed comments': []}"
1224,"{'func name': 'get_tpu_strategy', 'comments': '', 'stemmed comments': []}"
1225,"{'func name': 'get_tpu_strategy', 'comments': '', 'stemmed comments': []}"
1226,"{'func name': 'shutdown_tpu_system', 'comments': 'Shuts down the TPU devices.\n\nThis will clear all caches, even those that are maintained through sequential calls to tf.tpu.experimental.initialize_tpu_system, such as the compilation cache.\n##### Args\n* **cluster_resolver**: A tf.distribute.cluster_resolver.TPUClusterResolver,\n    which provides information about the TPU cluster.\n\n', 'stemmed comments': ['cach', 'arg', 'provid', 'inform', 'thi', 'compil', 'clear', 'cluster', 'A', 'call', 'tpu', 'devic', 'even', 'tftpuexperimentalinitialize_tpu_system', 'shut', 'sequenti', 'cluster_resolv', 'tfdistributecluster_resolvertpuclusterresolv', 'maintain']}"
1227,"{'func name': '_set_last_step_outputs', 'comments': 'Sets the last step outputs on the given context.\n\n\n', 'stemmed comments': ['last', 'set', 'given', 'step', 'context', 'output']}"
1228,"{'func name': 'master_job', 'comments': 'Returns the canonical job name to use to place TPU computations on.\n\n\n##### Args\n* **master**: A `string` representing the TensorFlow master to use.\n\n* **cluster_def**: A ClusterDef object describing the TPU cluster.\n\n##### Returns\n', 'stemmed comments': ['arg', 'object', 'place', 'return', 'cluster_def', 'describ', 'cluster', 'A', 'string', 'canon', 'tpu', 'tensorflow', 'repres', 'master', 'name', 'use', 'clusterdef', 'job', 'comput']}"
1229,"{'func name': '_write_and_load_module', 'comments': '', 'stemmed comments': []}"
1230,"{'func name': 'run_user_main', 'comments': 'Runs the ""if __name__ == \'__main__\'"" at the bottom of a module.\n\nTensorFlow practice is to have a main if at the bottom of the module which might call an API compat function before calling test.main().\n\nSince this is a statement, not a function, we can\'t cleanly reference it, but we can inspect it from the user module and run it in the context of that module so all imports and variables are available to it.\n##### Args\n* **wrapped_test_module**: The user-provided test code to run.\n\n', 'stemmed comments': ['ca', 'userprovid', 'run', 'inspect', 'the', 'arg', 'testmain', 'main', 'might', '__name__', 'nt', 'statement', 'code', 'user', 'practic', 'compat', 'api', '__main__', 'call', 'import', 'variabl', 'cleanli', 'wrapped_test_modul', 'tensorflow', 'bottom', 'test', 'function', 'avail', 'sinc', '==', 'refer', 'modul', 'context']}"
1231,"{'func name': 'find_xla_einsum', 'comments': '', 'stemmed comments': []}"
1232,"{'func name': 'enclosing_tpu_context', 'comments': 'Returns the TPUReplicateContext, which exists inside a tpu.rewrite().\n\n\n', 'stemmed comments': ['return', 'tpurewrit', 'exist', 'insid', 'tpureplicatecontext']}"
1233,"{'func name': 'prune_unconnected_ops_from_xla', 'comments': 'Prunes unconnected ops as listed in _UNCONNECTED_OPS_TO_PRUNE.\n\n\n##### Args\n* **prune_graph**: A tensorflow graph from which we wish to prune unconnected ops\n  as listed in _UNCONNECTED_OPS_TO_PRUNE.  In general, these ops should have\n  no inputs and no consumers. These can often be left behind due to graph\n  construction rewiring (for instance TF-Hub). While they never execute,\n  they will cause XLA compile to fail so we strip them from XLA compile by\n  removing the tpu_replicate attribute.\n\n', 'stemmed comments': ['instanc', 'graph', 'arg', 'remov', 'tfhub', 'fail', 'consum', 'left', 'attribut', 'caus', 'strip', 'unconnect', '_unconnected_ops_to_prun', 'often', 'list', 'wish', 'compil', 'construct', 'these', 'A', 'prune_graph', 'rewir', 'input', 'due', 'tpu_repl', 'tensorflow', 'never', 'xla', 'execut', 'behind', 'prune', 'op', 'In', 'while', 'gener']}"
1234,"{'func name': 'traceme_wrapper', 'comments': '', 'stemmed comments': []}"
1235,"{'func name': 'cached_per_instance', 'comments': ""Lightweight decorator for caching lazily constructed properties.\n\nWhen to use: This decorator provides simple caching with minimal overhead. It is designed for properties which are expensive to compute and static over the life of a class instance, and provides no mechanism for cache invalidation. Thus it is best suited for lazily exposing derived properties of other static data.\n\nFor classes with custom getattr / setattr behavior (such as trackable objects), storing cache results as object attributes is not performant. Instead, a specialized cache can significantly reduce property lookup overhead. (While still allowing the decorated property to be lazily computed.) Consider the following class:\n\n``` class MyClass(object): def __setattr__(self, key, value): # Some expensive class specific code # ... # ...\n\nsuper(MyClass, self).__setattr__(key, value)\n\n@property def thing(self): # `thing` is expensive to compute (and may not even be requested), so we # want to lazily compute it and then cache it. output = getattr(self, '_thing', None) if output is None: self._thing = output = compute_thing(self) return output ```\n\nIt's also worth noting that ANY overriding of __setattr__, even something as simple as: ``` def __setattr__(self, key, value): super(MyClass, self).__setattr__(key, value) ```\n\nSlows down attribute assignment by nearly 10x.\n\nBy contrast, replacing the definition of `thing` with the following sidesteps the expensive __setattr__ altogether:\n\n''' @property @tracking.cached_per_instance def thing(self): # `thing` is expensive to compute (and may not even be requested), so we # want to lazily compute it and then cache it. return compute_thing(self) '''\n\nPerformance: The overhead for this decorator is ~0.4 us / call. A much lower overhead implementation (~0.085 us / call) can be achieved by using a custom dict type:\n\n``` def dict_based_cache(f): class Cache(dict): __slots__ = () def __missing__(self, key): self[key] = output = f(key) return output\n\nreturn property(Cache().__getitem__) ```\n\nHowever, that implementation holds class instances as keys, and as a result blocks garbage collection. (And modifying it to use weakref's as keys raises the lookup overhead to ~0.4 us) As a result, the WeakKeyDictionary implementation below turns out to be more prudent.\n##### Args\n* **f**: The function to cache.\n\n##### Returns\n"", 'stemmed comments': ['__getitem__', 'rais', 'the', 'arg', 'worth', 'reduc', 'trackabl', 'much', 'static', 'object', 'self_th', 'properti', 'code', 'attribut', 'none', '__setattr__', 'It', ']', 'modifi', 'type', 'overrid', 'expens', 'follow', 'someth', 'custom', 'even', 'still', 'perform', 'howev', 'key', 'simpl', '__missing__', 'slow', '/', 'instanc', 'want', 'cach', 'when', 'life', 'specif', 'result', 'for', 'also', '~0085', 'return', 'valu', 'def', 'super', 'design', 'some', '=', 'dict', 'overhead', 'altogeth', 'consid', 'garbag', 'A', 'thu', 'assign', 'and', 'weakkeydictionari', 'expos', 'us', 'data', 'trackingcached_per_inst', 'construct', 'note', 'definit', '[', 'turn', 'significantli', 'best', 'invalid', 'special', 'contrast', 'lookup', 'setattr', 'By', 'dict_based_cach', 'allow', 'deriv', 'may', '__slots__', 'f', 's', 'call', 'lazili', 'sidestep', 'implement', 'decor', '@', 'prudent', 'function', 'replac', 'use', 'lower', 'As', '_thing', 'weakref', 'output', '~04', 'minim', 'ani', 'behavior', 'self', 'thing', 'hold', 'suit', 'provid', 'getattr', 'compute_th', 'thi', 'myclass', 'instead', 'store', 'lightweight', 'collect', 'request', 'nearli', 'class', 'achiev', '10x', 'while', 'block', 'mechan', 'comput']}"
1236,"{'func name': 'requires_contrib', 'comments': '', 'stemmed comments': []}"
1237,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
1238,"{'func name': 'train_net', 'comments': 'Trains the model.\n\n\n', 'stemmed comments': ['model', 'train']}"
1239,"{'func name': '_update_sample_weight_mode', 'comments': 'Updates the sample_weight_mode of a given model.\n\n\n', 'stemmed comments': ['model', 'sample_weight_mod', 'given', 'updat']}"
1240,"{'func name': '_train_with_multi_worker', 'comments': 'Decorator that handles multi worker training with distribution strategy.\n\n\n', 'stemmed comments': ['train', 'strategi', 'multi', 'worker', 'distribut', 'handl', 'decor']}"
1241,"{'func name': 'test_on_batch', 'comments': ""Calculates the loss for one input batch.\n\nArguments: model: Model whose loss has to be calculated. inputs: Input batch data. targets: Target batch data. sample_weights: Sample weight batch data. output_loss_metrics: List of metrics that are used to aggregated output loss values.\n##### Returns\n* **Dict with three items**: 'total_loss'\n\n"", 'stemmed comments': ['whose', 'sample_weight', 'loss', 'argument', 'return', 'sampl', 'output_loss_metr', 'valu', 'dict', 'total_loss', 'list', 'aggreg', 'calcul', 'three', 'weight', 'metric', 'item', 'input', 'one', 'batch', 'model', 'data', 'target', 'use', 'output']}"
1242,"{'func name': 'custom_generator_changing_batch_size', 'comments': '', 'stemmed comments': []}"
1243,"{'func name': '_get_num_samples_or_steps', 'comments': 'Returns number of samples or steps, and whether to use steps count mode.\n\n\n', 'stemmed comments': ['step', 'return', 'whether', 'sampl', 'use', 'mode', 'count', 'number']}"
1244,"{'func name': '_gather_test_cases', 'comments': '', 'stemmed comments': []}"
1245,"{'func name': 'repeat', 'comments': 'Builds a training loop that executes a fixed number of iterations.\n\nThe set of loop-carried tensors correspond to `inputs`. `body` must be a function that takes and returns the values of the loop-carried tensors.\n##### Args\n* **n**: the number of loop iterations\n\n* **body**: a Python function that builds the loop body.\n\n* **inputs**: a list of initial values passed into the training loop or\n  None (equivalent to an empty list).\n\n* **infeed_queue**: if not None, the infeed queue from which to append a tuple\n  of arguments as inputs to condition.\n\n* **name**: (Deprecated) Does nothing.\n\n##### Returns\n', 'stemmed comments': ['tupl', 'pass', 'fix', 'the', 'arg', 'initi', 'argument', 'infe', 'take', 'return', 'condit', 'valu', 'iter', 'none', 'list', 'must', 'train', 'n', 'append', 'noth', 'bodi', 'equival', 'correspond', 'input', 'queue', 'infeed_queu', 'tensor', 'loop', 'deprec', 'execut', 'function', 'doe', 'name', 'set', 'python', 'number', 'loopcarri', 'empti', 'build']}"
1246,"{'func name': '_increment_global_step', 'comments': '', 'stemmed comments': []}"
1247,"{'func name': 'cause_error', 'comments': '', 'stemmed comments': []}"
1248,"{'func name': 'unpack_validation_data', 'comments': 'Unpack validation data based input type.\n\nThe validation data is not touched if its dataset or dataset iterator. For other type of input (Numpy or tensor), it will be unpacked into tuple of 3 which is x, y and sample weights.\n##### Args\n* **validation_data**: dataset, dataset iterator, or numpy, tensor tuple.\n\n* **raise_if_ambiguous**: boolean on whether to fail if validation_data cannot be\n  parsed. Otherwise simply return validation_data, None, None and defer the\n  decision to the caller.\n\n##### Returns\n', 'stemmed comments': ['otherwis', 'tupl', 'simpli', 'the', 'unpack', '3', 'arg', 'for', 'defer', 'fail', 'return', 'sampl', 'raise_if_ambigu', 'iter', 'pars', 'none', 'boolean', 'touch', 'decis', 'valid', 'numpi', 'whether', 'type', 'weight', 'dataset', 'input', 'tensor', 'base', 'data', 'validation_data', 'x', 'caller']}"
1249,"{'func name': '_non_none_constant_value', 'comments': '', 'stemmed comments': []}"
1250,"{'func name': '_is_hdf5_filepath', 'comments': '', 'stemmed comments': []}"
1251,"{'func name': 'parse_args', 'comments': 'Converts the raw arguments into accessible flags.\n\n\n', 'stemmed comments': ['raw', 'flag', 'convert', 'access', 'argument']}"
1252,"{'func name': 'parse_args', 'comments': 'Converts the raw arguments into accessible flags.\n\n\n', 'stemmed comments': ['raw', 'flag', 'convert', 'access', 'argument']}"
1253,"{'func name': '_is_scalar_from_shape', 'comments': 'Returns `True` `Tensor` if `Tensor` shape implies a scalar.\n\n\n', 'stemmed comments': ['return', 'true', 'scalar', 'shape', 'tensor', 'impli']}"
1254,"{'func name': '_wrap_into_factory', 'comments': 'Wraps an AST into the body of a factory with consistent lexical context.\n\nThe AST is expected to define some symbol with a name given by `entity_name`.\n\nThis mechanism ensures that the resulting transformed entity has lexical scoping identical to that of the source entity, while allowing extra parametrization.\n\nTwo nested factories achieve the following:\n\n1. The inner factory dynamically creates the entity represented by `nodes`. 2. The inner factory is parametrized by a custom set of arguments. 3. The inner factory has a closure identical to that of the transformed entity. 4. The inner factory has local variables named like `args`, which `nodes` may use as additional parameters. 5. The inner factory returns the variables given by `entity_name`. 6. The outer factory is niladic. 7. The outer factory has no closure. 8. The outer factory creates the necessary lexical scope for the inner factory, so that the loaded code has the given configuration for closure/globals. 9. The outer factory returns the inner factory.\n\nRoughly speaking, the following code is generated:\n\nfrom __future__ import future_feature_1 from __future__ import future_feature_2 ...\n\ndef outer_factory(): closure_var_1 = None closure_var_2 = None ...\n\ndef inner_factory(arg_1, arg_2, ...): <<nodes>> return entity\n\nreturn inner_factory\n\nThe lexical scoping is created using dummy symbol declarations which create local fariables in the body of the outer factory, so that the Python parser correctly marks them as free non-global variables upon load (that is, it creates cell slots for each symbol. Thes symbols are initialized with None, but their values are not expected to be used; instead, the caller is expected to replace them with the cells of the source entity. For more details, see: https://docs.python.org/3/reference/executionmodel.html#binding-of-names\n##### Args\n* **nodes**: Tuple[ast.AST], the source code to wrap.\n\n* **entity_name**: Union[Text, ast.AST], the name of the principal entity that\n  `nodes` define.\n\n* **inner_factory_name**: Text, the name of the inner factory.\n\n* **outer_factory_name**: Text, the name of the outer factory.\n\n* **closure_vars**: Iterable[Text], names of the closure variables for the inner\n  factory.\n\n* **factory_args**: Iterable[Text], names of additional arguments for the\n  inner factory. Useful to configure variables that the converted code can\n  use. Typically, these are modules.\n\n* **future_features**: Iterable[Text], names of future statements to associate the\n  code with.\n\n##### Returns\n', 'stemmed comments': ['tupl', 'bindingofnam', 'future_feature_1', 'closure_var_2', 'the', 'arg', '4', 'inner_factori', '>', 'see', 'inner', 'code', 'configur', 'closure_var_1', 'astast', 'associ', 'outer_factory_nam', 'none', 'arg_1', 'closure_var', 'transform', ']', 'variabl', 'import', 'follow', 'factory_arg', 'speak', 'two', 'outer', 'lexic', 'custom', 'extra', 'http', '7', 'inner_factory_nam', '<', 'caller', 'future_feature_2', 'fariabl', 'wrap', 'expect', 'symbol', ';', 'nest', '3', 'result', 'mark', 'initi', 'for', 'factori', 'dynam', 'return', 'nonglob', 'detail', 'valu', 'def', '2', '=', 'iter', 'closure/glob', '8', 'nilad', 'futur', 'paramet', 'outer_factori', 'future_featur', 'convert', 'entiti', 'bodi', 'ast', 'sourc', 'slot', 'roughli', 'creat', 'arg_2', 'repres', 'like', 'name', 'python', '5', 'dummi', 'modul', '//docspythonorg/3/reference/executionmodelhtml', 'local', 'addit', '[', 'cell', 'union', '6', 'closur', 'argument', 'parametr', 'typic', 'statement', 'correctli', 'parser', 'text', 'allow', 'node', 'may', 'scope', 'princip', 'defin', 'replac', 'use', 'context', 'upon', 'gener', 'declar', 'free', '9', 'ensur', '1', 'thi', 'ident', 'instead', 'consist', 'load', 'necessari', '__future__', 'achiev', 'set', 'given', 'mechan', 'entity_nam']}"
1255,"{'func name': 'build_graph', 'comments': ""builds a graph containing a sequence of conv2d operations.\n\n\n##### Args\n* **device**: String, the device to run on.\n\n* **input_shape**: Shape of the input tensor.\n\n* **perm**: A list of ints with the same length as input tensor's dimension.\n\n* **datatype**: numpy data type of the input tensor.\n\n* **num_iters**: number of iterations to run transpose.\n\n##### Returns\n"", 'stemmed comments': ['perm', 'length', 'graph', 'run', 'arg', 'dimens', 'conv2d', 'return', 'input_shap', 'iter', 'list', 'datatyp', 'numpi', 'sequenc', 'type', 'A', 's', 'string', 'devic', 'shape', 'transpos', 'input', 'tensor', 'data', 'int', 'contain', 'num_it', 'oper', 'number', 'build']}"
1256,"{'func name': 'make_transpose_conv_tests', 'comments': 'Make a set of tests to do transpose_conv.\n\n\n', 'stemmed comments': ['set', 'make', 'transpose_conv', 'test']}"
1257,"{'func name': 'make_transpose_tests', 'comments': 'Make a set of tests to do transpose.\n\n\n', 'stemmed comments': ['set', 'make', 'transpos', 'test']}"
1258,"{'func name': 'obtain_all_variant_tensor_ops', 'comments': 'Given an input dataset, finds all dataset ops used for construction.\n\nA series of transformations would have created this dataset with each transformation including zero or more Dataset ops, each producing a dataset variant tensor. This method outputs all of them.\n##### Args\n* **dataset**: Dataset to find variant tensors for.\n\n##### Returns\n', 'stemmed comments': ['arg', 'seri', 'includ', 'find', 'variant', 'return', 'transform', 'thi', 'zero', 'A', 'method', 'dataset', 'produc', 'input', 'tensor', 'creat', 'would', 'op', 'use', 'given', 'output', 'construct']}"
1259,"{'func name': 'traverse', 'comments': ""Recursively enumerate all members of `root`.\n\nSimilar to the Python library function `os.path.walk`.\n\nTraverses the tree of Python objects starting with `root`, depth first. Parent-child relationships in the tree are defined by membership in modules or classes. The function `visit` is called with arguments `(path, parent, children)` for each module or class `parent` found in the tree of python objects starting with `root`. `path` is a string containing the name with which `parent` is reachable from the current context. For example, if `root` is a local class called `X` which contains a class `Y`, `visit` will be called with `('Y', X.Y, children)`).\n\nIf `root` is not a module or class, `visit` is never called. `traverse` never descends into built-in modules.\n\n`children`, a list of `(name, object)` pairs are determined by `tf_inspect.getmembers`. To avoid visiting parts of the tree, `children` can be modified in place, using `del` or slice assignment.\n\nCycles (determined by reference equality, `is`) stop the traversal. A stack of objects is kept to find cycles. Objects forming cycles may appear in `children`, but `visit` will not be called with any object as `parent` which is already in the stack.\n\nTraversing system modules can take a long time, it is advisable to pass a `visit` callable which blacklists such modules.\n##### Args\n* **root**: A python object with which to start the traversal.\n\n* **visit**: A function taking arguments `(path, parent, children)`. Will be\n  called for each object found in the traversal.\n\n"", 'stemmed comments': ['the', 'arg', 'relationship', 'object', 'place', 'find', 'kept', 'will', 'modifi', 'callabl', 'member', 'path', 'parentchild', 'X', 'current', 'To', 'first', 'refer', 'pass', 'cycl', 'for', 'determin', 'time', 'advis', 'builtin', 'list', 'recurs', 'root', 'depth', 'A', 'assign', 'exampl', 'similar', 'never', 'XY', 'descend', 'name', 'python', 'librari', 'modul', 'local', 'children', 'blacklist', 'alreadi', 'long', 'argument', 'take', 'visit', 'may', 'found', 'call', 'equal', 'string', 'appear', 'parent', 'ospathwalk', 'stop', 'defin', 'Y', 'contain', 'function', 'use', 'context', 'start', 'membership', 'tf_inspectgetmemb', 'pair', 'tree', 'slice', 'system', 'enumer', 'reachabl', 'stack', 'form', 'If', 'travers', 'part', 'class', 'avoid', 'del']}"
1260,"{'func name': '_tf_ones', 'comments': '', 'stemmed comments': []}"
1261,"{'func name': '_tf_ones', 'comments': '', 'stemmed comments': []}"
1262,"{'func name': 'create_inference_graph', 'comments': ""Python wrapper for the TRT transformation.\n\n\n##### Args\n* **input_graph_def**: a GraphDef object containing a model to be transformed. If\n  set to None, the graph will be read from the SavedModel loaded from\n  input_saved_model_dir.\n\n* **outputs**: list of tensors or node names for the model outputs. Only used when\n  input_graph_def is not None.\n\n* **max_batch_size**: max size for the input batch.\n\n* **max_workspace_size_bytes**: the maximum GPU temporary memory which the TRT\n  engine can use at execution time. This corresponds to the 'workspaceSize'\n  parameter of nvinfer1\n\n* **precision_mode**: one of TrtPrecisionMode.supported_precision_modes().\n\n* **minimum_segment_size**: the minimum number of nodes required for a subgraph to\n  be replaced by TRTEngineOp.\n\n* **is_dynamic_op**: whether to generate dynamic TRT ops which will build the TRT\n  network and engine at run time.\n\n* **maximum_cached_engines**: max number of cached TRT engines in dynamic TRT ops.\n  If the number of cached engines is already at max but none of them can\n  serve the input, the TRTEngineOp will fall back to run the TF function\n  based on which the TRTEngineOp is created.\n\n* **input_saved_model_dir**: the directory to load the SavedModel which contains\n  the input graph to transforms. Used only when input_graph_def is None.\n\n* **input_saved_model_tags**: list of tags to load the SavedModel.\n\n* **input_saved_model_signature_key**: the key of the signature to optimize the\n  graph for.\n\n* **output_saved_model_dir**: if not None, construct a SavedModel using the\n  returned GraphDef and save it to the specified directory. This option only\n  works when the input graph is loaded from a SavedModel, i.e. when\n  input_saved_model_dir is specified and input_graph_def is None.\n\n* **session_config**: the ConfigProto used to create a Session. It's also used as\n  a template to create a TRT-enabled ConfigProto for conversion. If not\n  specified, a default ConfigProto will be used.\n\n##### Returns\n"", 'stemmed comments': ['memori', 'max_workspace_size_byt', 'arg', 'object', 'precision_mod', 'is_dynamic_op', 'ie', 'none', 'max', 'transform', 'It', 'whether', 'minimum_segment_s', 'batch', 'wrapper', 'serv', 'key', 'savedmodel', 'number', 'graphdef', 'input_saved_model_dir', 'cach', 'also', 'temporari', 'trtenabl', 'default', 'dynam', 'return', 'time', 'input_saved_model_signature_key', 'input_saved_model_tag', 'option', 'list', 'maximum_cached_engin', 'tag', 'paramet', 'specifi', 'one', 'model', 'requir', 'creat', 'execut', 'maximum', 'op', 'name', 'read', 'python', 'subgraph', 'minimum', 'construct', 'run', 'nvinfer1', 'session', 'optim', 'alreadi', 'trt', 'node', 'signatur', 'trtprecisionmodesupported_precision_mod', 's', 'trtengineop', 'input', 'session_config', 'contain', 'onli', 'function', 'replac', 'use', 'TF', 'network', 'fall', 'output', 'gener', 'output_saved_model_dir', 'graph', 'convers', 'configproto', 'engin', 'work', 'save', 'max_batch_s', 'If', 'thi', 'gpu', 'templat', 'workspaces', 'load', 'correspond', 'tensor', 'input_graph_def', 'base', 'directori', 'set', 'size', 'back', 'build']}"
1263,"{'func name': 'resolve', 'comments': 'Performs type inference.\n\n\n##### Args\n* **node**: ast.AST\n\n* **source_info**: transformer.SourceInfo\n\n* **graphs**: Dict[ast.FunctionDef, cfg.Graph]\n\n* **resolver**: Resolver\n\n##### Returns\n', 'stemmed comments': ['perform', 'node', ']', 'source_info', 'astast', 'transformersourceinfo', 'type', 'graph', '[', 'astfunctiondef', 'cfggraph', 'return', 'arg', 'dict', 'resolv', 'infer']}"
1264,"{'func name': 'register_type_spec_from_value_converter', 'comments': 'Registers a function for converting values with a given type to TypeSpecs.\n\nIf multiple registered `type_object`s match a value, then the most recent registration takes precedence.\n\nCustom converters should not be defined for `CompositeTensor`s; use `CompositeTensor._type_spec` instead.\n##### Args\n* **type_object**: A Python `type` object representing the type of values\n  accepted by `converter_fn`.\n\n* **converter_fn**: A function that takes one argument (an instance of the\n  type represented by `type_object`) and returns a `TypeSpec`.\n\n* **allow_subclass**: If true, then use `isinstance(value, type_object)` to\n  check for matches.  If false, then use `type(value) is type_object`.\n\n', 'stemmed comments': ['isinst', ';', 'instanc', 'converter_fn', 'regist', 'preced', 'arg', 'match', 'fals', 'object', 'argument', 'check', 'take', 'accept', 'return', 'registr', 'valu', 'compositetensor', 'If', 'typespec', 'instead', 'type', 'A', 'type_object', 'convert', 'multipl', 'compositetensor_type_spec', 'one', 'custom', 'defin', 'allow_subclass', 'repres', 'function', 'use', 'given', 'python', 'true', 'recent']}"
1265,"{'func name': 'get_ui', 'comments': 'Create a `base_ui.BaseUI` subtype.\n\nThis factory method attempts to fallback to other available ui_types on ImportError. For example, if `ui_type` is `curses`, but `curses` cannot be imported properly, e.g., on Windows, will fallback to `readline`.\n##### Args\n* **ui_type**: (`str`) requested UI type. Currently supported\n\n* **on_ui_exit**: (`Callable`) the callback to be called when the UI exits.\n\n* **available_ui_types**: (`None` or `list` of `str`) Manually-set available\n  ui_types.\n\n* **config**: An instance of `cli_config.CLIConfig()` carrying user-facing\n  configurations.\n\n##### Returns\n', 'stemmed comments': ['instanc', 'curs', 'UI', 'ui_typ', 'arg', 'manuallyset', 'for', 'factori', 'readlin', 'return', 'window', 'available_ui_typ', 'configur', 'none', 'list', 'subtyp', 'thi', 'An', 'callabl', 'type', 'fallback', 'on_ui_exit', 'method', 'import', 'call', 'base_uibaseui', 'exampl', 'exit', 'attempt', 'eg', 'str', 'support', 'callback', 'creat', 'request', 'config', 'cli_configcliconfig', 'current', 'avail', 'carri', 'properli', 'importerror', 'userfac']}"
1266,"{'func name': 'nhwc_to_format', 'comments': 'Converts a numpy array from NHWC format to `data_format`.\n\n\n', 'stemmed comments': ['format', 'nhwc', 'array', 'numpi', 'convert', 'data_format']}"
1267,"{'func name': 'make_unfused_gru_tests', 'comments': 'Make a set of tests for unfused gru op.\n\n\n', 'stemmed comments': ['gru', 'make', 'op', 'set', 'unfus', 'test']}"
1268,"{'func name': '_make_sparse_tensor', 'comments': '', 'stemmed comments': []}"
1269,"{'func name': 'make_unidirectional_sequence_lstm_tests', 'comments': 'Make a set of tests to do unidirectional_sequence_lstm.\n\n\n', 'stemmed comments': ['unidirectional_sequence_lstm', 'set', 'make', 'test']}"
1270,"{'func name': 'make_unidirectional_sequence_rnn_tests', 'comments': 'Make a set of tests to do unidirectional_sequence_rnn.\n\n\n', 'stemmed comments': ['set', 'unidirectional_sequence_rnn', 'make', 'test']}"
1271,"{'func name': 'try_import', 'comments': '', 'stemmed comments': []}"
1272,"{'func name': 'make_unique_tests', 'comments': 'Make a set of tests for Unique op.\n\n\n', 'stemmed comments': ['make', 'op', 'uniqu', 'set', 'test']}"
1273,"{'func name': 'unique', 'comments': 'Creates a `Dataset` from another `Dataset`, discarding duplicates.\n\nUse this transformation to produce a dataset that contains one instance of each unique element in the input. For example:\n\n```python dataset = tf.data.Dataset.from_tensor_slices([1, 37, 2, 37, 2, 1])\n\n# Using `unique()` will drop the duplicate elements. dataset = dataset.apply(tf.data.experimental.unique())\n\n# ==> { 1, 37, 2 } ```\n##### Returns\n', 'stemmed comments': ['instanc', '[', 'datasetappli', '{', 'for', '>', 'return', 'tfdataexperimentaluniqu', 'duplic', 'anoth', '=', '2', '1', 'transform', 'discard', 'element', ']', 'exampl', 'dataset', 'produc', '}', 'input', 'one', 'creat', 'contain', '37', '==', 'uniqu', 'use', 'python', 'tfdatadatasetfrom_tensor_slic', 'drop']}"
1274,"{'func name': 'make_unpack_tests', 'comments': 'Make a set of tests to do unpack.\n\n\n', 'stemmed comments': ['set', 'unpack', 'make', 'test']}"
1275,"{'func name': 'make_unroll_batch_matmul_tests', 'comments': 'Make a set of tests to test unroll_batch_matmul.\n\n\n', 'stemmed comments': ['unroll_batch_matmul', 'set', 'make', 'test']}"
1276,"{'func name': 'np_split_squeeze', 'comments': '', 'stemmed comments': []}"
1277,"{'func name': 'verify', 'comments': '', 'stemmed comments': []}"
1278,"{'func name': 'main', 'comments': 'This script updates all instances of version in the tensorflow directory.\n\nRequirements: version: The version tag OR nightly: Create a nightly tag with current date\n', 'stemmed comments': ['script', 'requir', 'instanc', 'tag', 'creat', 'current', 'OR', 'the', 'directori', 'date', 'updat', 'nightli', 'thi', 'version', 'tensorflow']}"
1279,"{'func name': 'JsonDumpAndFlush', 'comments': 'Write the dictionary `data` to a JSON file `fp` (and flush).\n\n\n##### Args\n* **data**: in a dictionary that is JSON serializable.\n\n* **fp**: File-like object\n\n', 'stemmed comments': ['data', 'write', 'fp', 'json', 'dictionari', 'flush', 'arg', 'serializ', 'filelik', 'object', 'file']}"
1280,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
1281,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
1282,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
1283,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
1284,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
1285,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
1286,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
1287,"{'func name': 'my_fact', 'comments': 'Example of overriding the generated code for an Op.\n\n\n', 'stemmed comments': ['code', 'gener', 'overrid', 'exampl', 'Op']}"
1288,"{'func name': 'gcd', 'comments': ""Returns the greatest common divisor via Euclid's algorithm.\n\n\n##### Args\n* **a**: The dividend. A scalar integer `Tensor`.\n\n* **b**: The divisor. A scalar integer `Tensor`.\n\n* **name**: An optional name for the operation.\n\n##### Returns\n"", 'stemmed comments': ['the', 'euclid', 'arg', 'greatest', 'algorithm', 'return', 'option', 'via', 'integ', 'An', 'A', 'divisor', 's', 'dividend', 'scalar', 'tensor', 'b', 'oper', 'name', 'common']}"
1289,"{'func name': '_logit', 'comments': '', 'stemmed comments': []}"
1290,"{'func name': 'convert_bytes_to_c_source', 'comments': 'Returns strings representing a C constant array containing `data`.\n\n\n##### Args\n* **data**: Byte array that will be converted into a C constant.\n\n* **array_name**: String to use as the variable name for the constant array.\n\n* **max_line_width**: The longest line length, for formatting purposes.\n\n* **include_guard**: Name to use for the include guard macro definition.\n\n* **include_path**: Optional path to include in the source file.\n\n* **use_tensorflow_license**: Whether to include the standard TensorFlow Apache2\n  license in the generated files.\n\n##### Returns\n', 'stemmed comments': ['length', 'format', 'definit', 'array', 'C', 'the', 'arg', 'includ', 'longest', 'use_tensorflow_licens', 'return', 'byte', 'option', 'macro', 'array_nam', 'include_guard', 'whether', 'max_line_width', 'variabl', 'string', 'convert', 'line', 'path', 'constant', 'standard', 'apache2', 'licens', 'tensorflow', 'sourc', 'data', 'file', 'repres', 'contain', 'name', 'use', 'include_path', 'purpos', 'guard', 'gener']}"
1291,"{'func name': 'test_truncated_normal', 'comments': ""Tests truncated normal distribution's statistics.\n\n\n"", 'stemmed comments': ['statist', 's', 'distribut', 'truncat', 'normal', 'test']}"
1292,"{'func name': 'saver_with_op_caching', 'comments': 'A TrackableSaver with a SaveableObject cache when graph building.\n\n\n', 'stemmed comments': ['graph', 'A', 'cach', 'saveableobject', 'trackablesav', 'build']}"
1293,"{'func name': 'get_total_loss', 'comments': 'Returns a tensor whose value represents the total loss.\n\nIn particular, this adds any losses you have added with `tf.add_loss()` to any regularization losses that have been added by regularization parameters on layers constructors e.g. `tf.layers`. Be very sure to use this if you are constructing a loss_op manually. Otherwise regularization arguments on `tf.layers` methods will not function.\n##### Args\n* **add_regularization_losses**: A boolean indicating whether or not to use the\n  regularization losses in the sum.\n\n* **name**: The name of the returned tensor.\n\n* **scope**: An optional scope name for filtering the losses to return. Note that\n  this filters the losses added with `tf.add_loss()` as well as the\n  regularization losses to that scope.\n\n##### Returns\n', 'stemmed comments': ['note', 'whose', 'otherwis', 'the', 'loss', 'regular', 'arg', 'Be', 'argument', 'particular', 'return', 'add', 'loss_op', 'sum', 'ad', 'well', 'valu', 'indic', 'option', 'boolean', 'layer', 'An', 'add_regularization_loss', 'whether', 'A', 'paramet', 'method', 'filter', 'tflayer', 'manual', 'scope', 'eg', 'tensor', 'constructor', 'repres', 'function', 'sure', 'total', 'In', 'name', 'use', 'tfadd_loss', 'construct']}"
1294,"{'func name': 'parent_frame_arguments', 'comments': ""Returns parent frame arguments.\n\nWhen called inside a function, returns a dictionary with the caller's function arguments. These are positional arguments and keyword arguments (**kwargs), while variable arguments (*varargs) are excluded.\n\nWhen called at global scope, this will return an empty dictionary, since there are no arguments.\n\nWARNING: If caller function argument names are overloaded before invoking this method, then values will reflect the overloaded value. For this reason, we recommend calling `parent_frame_arguments` at the beginning of the function.\n"", 'stemmed comments': ['frame', 'when', 'dictionari', 'for', 'parent_frame_argu', 'argument', 'return', 'recommend', 'valu', 'global', 'overload', 'If', 'these', 'method', 'call', 's', 'kwarg', 'variabl', 'scope', 'invok', 'reason', 'parent', 'reflect', 'insid', 'exclud', 'vararg', 'function', 'sinc', 'posit', 'name', 'keyword', 'warn', 'begin', 'caller', 'empti']}"
1295,"{'func name': 'get_debug_dir', 'comments': 'Returns path to the debug sub-directory in the SavedModel.\n\n\n', 'stemmed comments': ['return', 'debug', 'path', 'savedmodel', 'subdirectori']}"
1296,"{'func name': '_is_shape_and_default_value_compatible', 'comments': 'Verifies compatibility of shape and default_value.\n\n\n', 'stemmed comments': ['default_valu', 'compat', 'shape', 'verifi']}"
1297,"{'func name': 'remove_training_arg', 'comments': '', 'stemmed comments': []}"
1298,"{'func name': 'constant_value', 'comments': 'Return the bool value for `pred`, or None if `pred` had a dynamic value.\n\nArguments: pred: A scalar, either a Python bool or a TensorFlow boolean variable or tensor, or the Python integer 1 or 0.\n##### Returns\n', 'stemmed comments': ['integ', 'return', 'dynam', 'A', 'pred', 'either', 'variabl', 'valu', '0', 'bool', 'scalar', 'none', 'python', '1', 'boolean', 'tensor', 'tensorflow', 'argument']}"
1299,"{'func name': 'disable_v2_behavior', 'comments': 'Disables TensorFlow 2.x behaviors.\n\nThis function can be called at the beginning of the program (before `Tensors`, `Graphs` or other structures have been created, and before devices have been initialized. It switches all global behaviors that are different between TensorFlow 1.x and 2.x to behave as intended for 1.x.\n\nUser can call this function to disable 2.x behavior during complex migrations.\n', 'stemmed comments': ['graph', 'complex', '2x', 'switch', 'initi', 'behavior', 'program', 'global', 'user', 'behav', 'thi', 'It', 'structur', 'call', 'migrat', 'intend', 'devic', 'differ', '1x', 'tensor', 'tensorflow', 'creat', 'function', 'begin', 'disabl']}"
1300,"{'func name': '_make_index_slices', 'comments': '', 'stemmed comments': []}"
1301,"{'func name': 'apply_aggregation', 'comments': '', 'stemmed comments': []}"
1302,"{'func name': '_is_sync_on_read', 'comments': '', 'stemmed comments': []}"
1303,"{'func name': 'axis0_into3_partitioner', 'comments': '', 'stemmed comments': []}"
1304,"{'func name': 'variable_creator_scope', 'comments': ""Scope which defines a variable creation function to be used by variable().\n\nvariable_creator is expected to be a function with the following signature:\n\n``` def variable_creator(next_creator, **kwargs) ```\n\nThe creator is supposed to eventually call the next_creator to create a variable if it does want to create a variable and not call Variable or ResourceVariable directly. This helps make creators composable. A creator may choose to create multiple variables, return already existing variables, or simply register that a variable was created and defer to the next creators in line. Creators can also modify the keyword arguments seen by the next creators.\n\nCustom getters in the variable scope will eventually resolve down to these custom creators when they do create variables.\n\nThe valid keyword arguments in kwds are:\n\n* initial_value: A `Tensor`, or Python object convertible to a `Tensor`, which is the initial value for the Variable. The initial value must have a shape specified unless `validate_shape` is set to False. Can also be a callable with no argument that returns the initial value when called. In that case, `dtype` must be specified. (Note that initializer functions from init_ops.py must first be bound to a shape before being used here.) * trainable: If `True`, the default, GradientTapes automatically watch uses of this Variable. * validate_shape: If `False`, allows the variable to be initialized with a value of unknown shape. If `True`, the default, the shape of `initial_value` must be known. * caching_device: Optional device string describing where the Variable should be cached for reading.\n\nDefaults to the Variable's device. If not `None`, caches on another device.\n\nTypical use is to cache on the device where the Ops using the Variable reside, to deduplicate copying through `Switch` and other conditional statements. * name: Optional name for the variable. Defaults to `'Variable'` and gets uniquified automatically. dtype: If set, initial_value will be converted to the given type. If `None`, either the datatype will be kept (if `initial_value` is a Tensor), or `convert_to_tensor` will decide. * constraint: A constraint function to be applied to the variable after updates by some algorithms. * synchronization: Indicates when a distributed a variable will be aggregated. Accepted values are constants defined in the class `tf.VariableSynchronization`. By default the synchronization is set to `AUTO` and the current `DistributionStrategy` chooses when to synchronize. * aggregation: Indicates how a distributed variable will be aggregated. Accepted values are constants defined in the class `tf.VariableAggregation`.\n\nThis set may grow over time, so it's important the signature of creators is as mentioned above.\n##### Args\n* **variable_creator**: the passed creator\n\n* **elds**: \n\n"", 'stemmed comments': ['mention', 'the', 'make', 'arg', 'appli', 'object', 'kept', 'indic', 'none', 'get', 'aggreg', 'initial_valu', 'must', 'modifi', 'callabl', 'type', 'variabl', 'import', 'next_creat', 'dedupl', 'follow', 'devic', 'custom', 'current', 'creation', 'tfvariablesynchron', 'first', 'expect', 'want', 'pass', 'simpli', 'cach', 'switch', 'gradienttap', 'also', 'initi', 'algorithm', 'init_opspi', 'default', 'accept', 'return', 'unknown', 'suppos', 'time', 'condit', 'copi', 'eventu', 'def', 'valu', 'unless', 'option', 'anoth', 'automat', 'trainabl', 'variable_cr', 'A', 'constraint', 'next', 'convert', 'constant', 'seen', 'specifi', 'decid', 'creat', 'resourcevari', 'choos', 'caching_devic', 'either', 'op', 'name', 'exist', 'read', 'python', 'true', 'keyword', 'note', 'convert_to_tensor', 'regist', 'alreadi', 'defer', 'argument', 'typic', 'getter', 'compos', 'statement', 'tfvariableaggreg', 'describ', 'By', 'kwd', 'valid', 'allow', 'signatur', 'may', 'eld', 'kwarg', 'call', 'scope', 'string', 's', 'uniquifi', 'shape', 'distributionstrategi', 'defin', 'function', 'case', 'In', 'use', 'resolv', 'creator', 'auto', 'watch', 'fals', 'distribut', 'If', 'thi', 'bound', 'resid', 'datatyp', 'grow', 'validate_shap', 'line', 'multipl', 'tensor', 'help', 'dtype', 'class', 'directli', 'can', 'updat', 'set', 'given', 'synchron', 'known']}"
1305,"{'func name': 'transform', 'comments': '', 'stemmed comments': []}"
1306,"{'func name': 'ldu', 'comments': 'Load variable operator that returns Undefined when failing to evaluate.\n\nNote: the name (""load or return undefined"") is abbreviated to minimize the amount of clutter in generated code.\n\nThis variant of `ld` is useful when loading symbols that may be undefined at runtime, such as composite symbols, and whether they are defined or not cannot be determined statically. For example `d[\'a\']` is undefined when `d` is an empty dict.\n##### Args\n* **load_v**: Lambda that executes the actual read.\n\n* **name**: Human-readable name of the symbol being read.\n\n##### Returns\n', 'stemmed comments': ['note', 'minim', 'symbol', '[', 'arg', 'amount', 'determin', 'for', 'static', 'composit', 'variant', 'fail', 'return', 'code', 'lambda', 'actual', 'load_v', 'dict', 'clutter', 'undefin', 'thi', 'runtim', 'abbrevi', 'may', ']', 'whether', 'ld', 'variabl', 'exampl', 'evalu', 'load', 'defin', 'execut', 'oper', 'name', 'use', 'read', 'humanread', 'empti', 'gener']}"
1307,"{'func name': 'report_uninitialized_variables', 'comments': 'Adds ops to list the names of uninitialized variables.\n\nWhen run, it returns a 1-D tensor containing the names of uninitialized variables if there are any, or an empty array if there are none.\n##### Args\n* **var_list**: List of `Variable` objects to check. Defaults to the value of\n  `global_variables() + local_variables()`\n\n* **name**: Optional name of the `Operation`.\n\n##### Returns\n', 'stemmed comments': ['array', 'var_list', '1D', 'run', 'when', 'arg', 'check', 'object', 'default', 'return', 'add', 'valu', 'global_vari', 'option', 'none', 'list', 'local_vari', 'variabl', 'tensor', 'contain', 'op', 'oper', 'name', 'uniniti', 'empti']}"
1308,"{'func name': 'is_v1_layer_or_model', 'comments': '', 'stemmed comments': []}"
1309,"{'func name': 'decode_predictions', 'comments': '', 'stemmed comments': []}"
1310,"{'func name': 'decode_predictions', 'comments': '', 'stemmed comments': []}"
1311,"{'func name': '_forward_module', 'comments': '', 'stemmed comments': []}"
1312,"{'func name': '_forward_module', 'comments': '', 'stemmed comments': []}"
1313,"{'func name': 'plot_model', 'comments': ""Converts a Keras model to dot format and save to a file.\n\nExample:\n\n```python input = tf.keras.Input(shape=(100,), dtype='int32', name='input') x = tf.keras.layers.Embedding( output_dim=512, input_dim=10000, input_length=100)(input) x = tf.keras.layers.LSTM(32)(x) x = tf.keras.layers.Dense(64, activation='relu')(x) x = tf.keras.layers.Dense(64, activation='relu')(x) x = tf.keras.layers.Dense(64, activation='relu')(x) output = tf.keras.layers.Dense(1, activation='sigmoid', name='output')(x) model = tf.keras.Model(inputs=[input], outputs=[output]) dot_img_file = '/tmp/model_1.png' tf.keras.utils.plot_model(model, to_file=dot_img_file, show_shapes=True) ```\n\nArguments: model: A Keras model instance to_file: File name of the plot image. show_shapes: whether to display shape information. show_dtype: whether to display layer dtypes. show_layer_names: whether to display layer names. rankdir: `rankdir` argument passed to PyDot, a string specifying the format of the plot: 'TB' creates a vertical plot; 'LR' creates a horizontal plot. expand_nested: Whether to expand nested models into clusters. dpi: Dots per inch.\n##### Returns\n"", 'stemmed comments': ['expand', 'format', 'outputs=', 'instanc', 'pass', '[', ';', 'imag', '/tmp/model_1png', 'to_file=dot_img_fil', 'nest', 'show_layer_nam', 'name=output', 'pydot', 'kera', 'input_dim=10000', 'tfkerasinput', 'display', 'tfkeraslayerslstm', 'dpi', 'argument', 'TB', 'rankdir', 'return', 'dot', 'show_dtyp', 'shape=', 'save', 'tfkeraslayersdens', '=', 'dtype=int32', 'name=input', '1', 'inform', 'show_shapes=tru', 'tfkerasmodel', 'layer', 'inch', ']', 'dot_img_fil', 'cluster', 'whether', 'A', '32', 'output_dim=512', 'exampl', 'string', 'vertic', 'activation=relu', 'convert', 'input_length=100', 'shape', 'input', 'tfkerasutilsplot_model', '100', 'tfkeraslayersembed', 'to_fil', '64', 'specifi', 'activation=sigmoid', 'file', 'model', 'inputs=', 'show_shap', 'creat', 'dtype', 'LR', 'x', 'name', 'plot', 'python', 'horizont', 'per', 'expand_nest', 'output']}"
1314,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
1315,"{'func name': 'warm_start', 'comments': 'Warm-starts a model using the given settings.\n\nIf you are using a tf.estimator.Estimator, this will automatically be called during training.\n##### Args\n* **ckpt_to_initialize_from**: [Required] A string specifying the directory with\n  checkpoint file(s) or path to checkpoint from which to warm-start the\n  model parameters.\n\n* **vars_to_warm_start**: [Optional] One of the following\n\n* **var_name_to_vocab_info**: [Optional] Dict of variable names (strings) to\n  `tf.estimator.VocabInfo`. The variable names should be ""full"" variables,\n  not the names of the partitions.  If not explicitly provided, the variable\n  is assumed to have no (changes to) vocabulary.\n\n* **var_name_to_prev_var_name**: [Optional] Dict of variable names (strings) to\n  name of the previously-trained variable in `ckpt_to_initialize_from`. If\n  not explicitly provided, the name of the variable is assumed to be same\n  between previous checkpoint and current model.  Note that this has no\n  effect on the set of variables that is warm-started, and only controls\n  name mapping (use `vars_to_warm_start` for controlling what variables to\n  warm-start).\n\n', 'stemmed comments': ['tfestimatorestim', 'note', 'map', 'ckpt_to_initialize_from', 'var_name_to_vocab_info', '[', 'the', 'arg', 'vars_to_warm_start', 'partit', 'control', 'warmstart', 'assum', 'dict', 'option', 'checkpoint', 'full', 'provid', 'automat', 'If', 'tfestimatorvocabinfo', 'vocabulari', 'train', ']', 'A', 'paramet', 'call', 'variabl', 'string', 'follow', 'chang', 'path', 'explicitli', 'specifi', 'one', 'var_name_to_prev_var_nam', 'file', 'model', 'requir', 'current', 'directori', 'effect', 'name', 'use', 'given', 'set', 'previouslytrain', 'previou']}"
1316,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
1317,"{'func name': 'broadcast_weights', 'comments': 'Broadcast `weights` to the same shape as `values`.\n\nThis returns a version of `weights` following the same broadcast rules as `mul(weights, values)`, but limited to the weights shapes allowed by `assert_broadcastable`. When computing a weighted average, use this function to broadcast `weights` before summing them; e.g., `reduce_sum(w * v) / reduce_sum(_broadcast_weights(w, v))`.\n##### Args\n* **weights**: `Tensor` whose shape is broadcastable to `values` according to the\n  rules of `assert_broadcastable`.\n\n* **values**: `Tensor` of any shape.\n\n##### Returns\n', 'stemmed comments': ['assert_broadcast', 'whose', '/', ';', 'mul', 'when', 'arg', 'return', 'sum', 'valu', 'thi', 'allow', '_broadcast_weight', 'rule', 'weight', 'follow', 'eg', 'w', 'shape', 'v', 'accord', 'version', 'tensor', 'reduce_sum', 'function', 'limit', 'broadcast', 'averag', 'use', 'comput']}"
1318,"{'func name': '_test_values', 'comments': '', 'stemmed comments': []}"
1319,"{'func name': 'make_where_tests', 'comments': 'Make a set of tests to do where.\n\n\n', 'stemmed comments': ['set', 'make', 'test']}"
1320,"{'func name': 'is_compile_on_demand', 'comments': '', 'stemmed comments': []}"
1321,"{'func name': '_flatten', 'comments': '', 'stemmed comments': []}"
1322,"{'func name': 'GetOptimizedGraph', 'comments': '', 'stemmed comments': []}"
1323,"{'func name': '_set_read_only_resource_inputs_attr', 'comments': 'Sets the list of resource inputs which are read-only.\n\nThis is used by AutomaticControlDependencies.\n##### Args\n* **op**: While Operation.\n\n* **branch_graphs**: List of branch FuncGraphs.\n\n', 'stemmed comments': ['branch_graph', 'funcgraph', 'branch', 'automaticcontroldepend', 'op', 'arg', 'oper', 'set', 'use', 'while', 'input', 'readonli', 'list', 'thi', 'resourc']}"
1324,"{'func name': '_scipy_raised_cosine', 'comments': 'A simple implementation of a raised cosine window that matches SciPy.\n\nhttps://en.wikipedia.org/wiki/Window_function#Hann_window https://github.com/scipy/scipy/blob/v0.14.0/scipy/signal/windows.py#L615\n##### Args\n* **length**: The window length.\n\n* **symmetric**: Whether to create a symmetric window.\n\n* **a**: The alpha parameter of the raised cosine window.\n\n* **b**: The beta parameter of the raised cosine window.\n\n##### Returns\n', 'stemmed comments': ['length', 'rais', 'the', 'arg', 'match', 'return', 'window', 'beta', 'hann_window', 'symmetr', 'A', 'whether', '//enwikipediaorg/wiki/window_funct', 'paramet', 'alpha', 'l615', 'cosin', '//githubcom/scipy/scipy/blob/v0140/scipy/signal/windowspi', 'implement', 'http', 'creat', 'b', 'simpl', 'scipi']}"
1325,"{'func name': '_raised_cosine_window', 'comments': 'Helper function for computing a raised cosine window.\n\n\n##### Args\n* **name**: Name to use for the scope.\n\n* **default_name**: Default name to use for the scope.\n\n* **window_length**: A scalar `Tensor` or integer indicating the window length.\n\n* **periodic**: A bool `Tensor` indicating whether to generate a periodic or\n  symmetric window.\n\n* **dtype**: A floating point `DType`.\n\n* **a**: The alpha parameter to the raised cosine window.\n\n* **b**: The beta parameter to the raised cosine window.\n\n##### Returns\n', 'stemmed comments': ['length', 'helper', 'rais', 'point', 'the', 'arg', 'float', 'window_length', 'default', 'return', 'window', 'beta', 'indic', 'integ', 'default_nam', 'whether', 'symmetr', 'A', 'paramet', 'scope', 'alpha', 'scalar', 'cosin', 'tensor', 'period', 'b', 'dtype', 'function', 'name', 'use', 'bool', 'comput', 'gener']}"
1326,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
1327,"{'func name': 'function_from_graph_def', 'comments': 'Creates a ConcreteFunction from a GraphDef.\n\n\n##### Args\n* **graph_def**: A GraphDef to make a function out of.\n\n* **inputs**: A Tensor name or nested structure of names in `graph_def` which\n  should be inputs to the function.\n\n* **outputs**: A Tensor name or nested structure of names in `graph_def` which\n  should be outputs of the function.\n\n##### Returns\n', 'stemmed comments': ['creat', 'structur', 'return', 'A', 'function', 'make', 'arg', 'name', 'nest', 'graph_def', 'input', 'graphdef', 'tensor', 'concretefunct', 'output']}"
1328,"{'func name': 'wrapped_experimental_mlir_sparsify', 'comments': 'Wraps experimental mlir sparsify model.\n\n\n', 'stemmed comments': ['wrap', 'experiment', 'sparsifi', 'model', 'mlir']}"
1329,"{'func name': '_to_list', 'comments': '', 'stemmed comments': []}"
1330,"{'func name': 'decode_predictions', 'comments': '', 'stemmed comments': []}"
1331,"{'func name': 'InstantiateTests', 'comments': '', 'stemmed comments': []}"
1332,"{'func name': 'heap_profile', 'comments': 'Returns a gzipped pprof protocol buffer containing a heap profile.\n\n\n', 'stemmed comments': ['heap', 'return', 'contain', 'pprof', 'protocol', 'buffer', 'gzip', 'profil']}"
1333,"{'func name': '_make_unstacked', 'comments': '', 'stemmed comments': []}"
1334,"{'func name': 'ConvertNumpyArrayToLiteral', 'comments': 'Converts a Numpy array or a nested tuple thereof to an XLA literal.\n\n\n', 'stemmed comments': ['tupl', 'xla', 'array', 'numpi', 'thereof', 'nest', 'convert', 'liter']}"
1335,"{'func name': '_XlaClusterOutputGrad', 'comments': '', 'stemmed comments': []}"
1336,"{'func name': 'CreateShapeFromDtypeAndTuple', 'comments': ""Create a shape from a Numpy dtype and a sequence of nonnegative integers.\n\n\n##### Args\n* **dtype**: a numpy dtype, e.g. np.dtype('int32').\n\n* **shape_tuple**: a sequence of nonnegative integers.\n\n##### Returns\n"", 'stemmed comments': ['integ', 'creat', 'return', 'dtype', 'numpi', 'sequenc', 'arg', 'nonneg', 'eg', 'npdtype', 'shape', 'int32', 'shape_tupl']}"
1337,"{'func name': 'manual_to_auto_spmd_partition', 'comments': 'Switches from manual partitioning to automatic SPMD partitioning.\n\nConverts a shard-shaped tensor (manually partitioned in SPMD-style) to a full-shaped tensor to be partitioned automatically by the SPMD partitioner.\n##### Args\n* **tensor**: A tf.Tensor in shard shape.\n\n* **manual_sharding**: a serialized string of OpSharding to be used in manual\n  partitioning.\n\n* **full_shape**: the shape of tensor before partitioning.\n\n##### Returns\n', 'stemmed comments': ['spmd', 'tftensor', 'arg', 'switch', 'shard', 'partit', 'spmdstyle', 'fullshap', 'return', 'full_shap', 'partition', 'shardshap', 'automat', 'serial', 'A', 'manual', 'string', 'convert', 'manual_shard', 'shape', 'opshard', 'tensor', 'use']}"
1338,"{'func name': 'Benchmark', 'comments': 'Build a graph and run benchmarks against it, with or without XLA.\n\n\n##### Args\n* **tf_bench**: An instance of tf.test.Benchmark, used to run the benchmark.\n\n* **builder_fn**: A function that builds a graph when invoked, and returns\n    (name, fetches), where name is the name of the test, and fetches\n    is a list of tensors to fetch as output.\n\n* **use_xla_jit**: If true compile with the XLA JIT, otherwise use regular TF.\n\n* **device**: The tensorflow device to run on, e.g. ""cpu"", ""gpu"".\n\n* **separate_compiled_gradients**: If true put each gradient subgraph into a\n  separate compilation scope. This gives fine-grained control over which\n  portions of the graph will be compiled as a single unit. Compiling\n  gradients separately may yield better performance for some graphs.\n  The scope is named based on the scope of the forward computation as well\n  as the name of the gradients. As a result, the gradients will be compiled\n  in a scope that is separate from both the forward computation, and from\n  other gradients.\n\n', 'stemmed comments': ['give', 'otherwis', 'instanc', 'benchmark', 'graph', 'run', 'the', 'arg', 'regular', 'result', 'jit', 'control', 'without', 'tftestbenchmark', 'unit', 'builder_fn', 'forward', 'tf_bench', 'return', 'comput', 'yield', 'separate_compiled_gradi', 'well', 'finegrain', 'list', 'If', 'thi', 'compil', 'gpu', 'singl', 'may', 'An', 'put', 'A', 'gradient', 'invok', 'scope', 'better', 'eg', 'devic', 'tensor', 'tensorflow', 'portion', 'test', 'perform', 'base', 'xla', 'separ', 'function', 'name', 'use', 'cpu', 'true', 'TF', 'fetch', 'use_xla_jit', 'subgraph', 'As', 'output', 'build']}"
1339,"{'func name': 'scatter', 'comments': '', 'stemmed comments': []}"
1340,"{'func name': 'check_function_argument_count', 'comments': 'Validate the number of input arguments to an XLA function.\n\n\n##### Args\n* **func**: the Python function that will be called to generate the body of an XLA\n  computation graph.\n\n* **input_arity**: the number of explicit arguments supplied by the caller.\n\n* **infeed_queue**: if not None, the infeed queue that will supply\n  additional arguments to the function.\n\n##### Returns\n', 'stemmed comments': ['addit', 'graph', 'arg', 'argument', 'infe', 'return', 'suppli', 'none', 'func', 'valid', 'call', 'explicit', 'bodi', 'input', 'queue', 'infeed_queu', 'input_ar', 'xla', 'function', 'python', 'caller', 'number', 'comput', 'gener']}"
1341,"{'func name': '_zero_out_grad', 'comments': 'The gradients for `zero_out`.\n\n\n##### Args\n* **op**: The `zero_out` `Operation` that we are differentiating, which we can use\n  to find the inputs and outputs of the original op.\n\n* **grad**: Gradient with respect to the output of the `zero_out` op.\n\n##### Returns\n', 'stemmed comments': ['find', 'origin', 'respect', 'grad', 'return', 'gradient', 'the', 'op', 'zero_out', 'arg', 'oper', 'differenti', 'use', 'input', 'output']}"
1342,"{'func name': 'make_zeros_like_tests', 'comments': 'Make a set of tests to do zeros_like.\n\n\n', 'stemmed comments': ['set', 'make', 'zeros_lik', 'test']}"
1343,"{'func name': 'main', 'comments': '', 'stemmed comments': []}"
1344,"{'func name': 'make_zip_of_tests', 'comments': 'Helper to make a zip file of a bunch of TensorFlow models.\n\nThis does a cartesian product of the dictionary of test_parameters and calls make_graph() for each item in the cartesian product set. If the graph is built successfully, then make_test_inputs() is called to build expected input/output value pairs. The model is then converted to tflite with toco, and the examples are serialized with the tflite model into a zip file (2 files per item in the cartesian product set).\n##### Args\n* **options**: An Options instance.\n\n* **test_parameters**: Dictionary mapping to lists for each parameter.\n  e.g. `{""strides""\n\n* **make_graph**: function that takes current parameters and returns tuple\n  `[input1, input2, ...], [output1, output2, ...]`\n\n* **make_test_inputs**: function taking `curr_params`, `session`, `input_tensors`,\n  `output_tensors` and returns tuple `(input_values, output_values)`.\n\n* **extra_toco_options**: Additional toco options.\n\n* **use_frozen_graph**: Whether or not freeze graph before toco converter.\n\n* **expected_tf_failures**: Number of times tensorflow is expected to fail in\n  executing the input graphs. In some cases it is OK for TensorFlow to fail\n  because the one or more combination of parameters is invalid.\n\n', 'stemmed comments': ['combin', 'tupl', 'helper', 'built', 'dictionari', 'make', 'the', 'arg', 'input_tensor', 'input2', 'output_valu', ']', 'whether', 'tflite', 'file', 'current', 'output2', 'product', 'per', 'number', 'expect', 'instanc', 'make_graph', 'freez', 'return', 'extra_toco_opt', 'time', 'valu', 'option', '2', 'cartesian', 'list', 'paramet', 'make_test_input', 'exampl', 'bunch', 'convert', 'one', 'model', 'execut', 'stride', 'map', 'addit', '[', 'input1', 'session', 'invalid', '{', 'output1', 'output_tensor', 'take', 'An', 'OK', 'call', 'eg', 'input', 'expected_tf_failur', 'input/output', 'function', 'test_paramet', 'case', 'In', 'success', 'curr_param', 'graph', 'pair', 'fail', 'use_frozen_graph', 'If', 'thi', 'serial', 'item', 'tensorflow', 'input_valu', 'set', 'zip', 'toco', 'build']}"
1345,"{'func name': '_dataset_factory', 'comments': '', 'stemmed comments': []}"
