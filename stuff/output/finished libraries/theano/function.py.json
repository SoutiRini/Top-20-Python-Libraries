{
    "source file": "function.py",
    "line number": "74",
    "func name": "function",
    "func arg": "(inputs, outputs, mode, updates, givens, no_default_updates, accept_inplace, name, rebuild_strict, allow_input_downcast, profile, on_unused_input)",
    "comments": "Return a :class:`callable object <theano.compile.function_module.Function>` that will calculate `outputs` from `inputs`.\n\nParameters ---------- inputs : list of either Variable or In instances. Function parameters, these are not allowed to be shared variables. outputs : list or dict of Variables or Out instances. If it is a dict, the keys must be strings. Expressions to compute. mode : string or `Mode` instance. Compilation mode. updates : iterable over pairs (shared_variable, new_expression). List, tuple or OrderedDict. Updates the values for SharedVariable inputs according to these expressions. givens : iterable over pairs (Var1, Var2) of Variables. List, tuple or dict. The Var1 and Var2 in each pair must have the same Type. Specific substitutions to make in the computation graph (Var2 replaces Var1). no_default_updates: either bool or list of Variables If True, do not perform any automatic update on Variables. If False (default), perform them all. Else, perform automatic updates on all Variables that are neither in \"updates\" nor in \"no_default_updates\". accept_inplace : bool True iff the graph can contain inplace operations prior to the optimization phase (default is False). *Note* this parameter is unsupported, and its use is not recommended. name : str An optional name for this function. The profile mode will print the time spent in this function. rebuild_strict : bool True (Default) is the safer and better tested setting, in which case `givens` must substitute new variables with the same Type as the variables they replace. False is a you-better-know-what-you-are-doing setting, that permits `givens` to replace variables with new variables of any Type. The consequence of changing a Type is that all results depending on that variable may have a different Type too (the graph is rebuilt from inputs to outputs). If one of the new types does not make sense for one of the Ops in the graph, an Exception will be raised. allow_input_downcast: bool or None True means that the values passed as inputs when calling the function can be silently down-casted to fit the dtype of the corresponding Variable, which may lose precision. False means that it will only be cast to a more general, or precise, type. None (default) is almost like False, but allows down-casting of Python float scalars to floatX. profile: None, True, or ProfileStats instance Accumulate profiling information into a given ProfileStats instance. If argument is `True` then a new ProfileStats instance will be used. If argument is a string, a new ProfileStats instance will be created with that string as its ``message`` attribute. This profiling object will be available via self.profile. on_unused_input What to do if a variable in the 'inputs' list is not used in the graph. Possible values are 'raise', 'warn', 'ignore' and None.\n##### Returns\n* ****: class\n\n* **Regarding givens**: Be careful to make sure that these\n\n* **Internal documentation**: What happens when you call theano.function?\n       1. RemoveShared\n\n"
}