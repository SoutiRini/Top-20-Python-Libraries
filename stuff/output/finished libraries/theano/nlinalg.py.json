{
    "source file": "nlinalg.py",
    "line number": "786",
    "func name": "tensorsolve",
    "func arg": "(a, b, axes)",
    "comments": "Theano utilization of numpy.linalg.tensorsolve. Does not run on GPU!\n\nSolve the tensor equation ``a x = b`` for x. It is assumed that all indices of `x` are summed over in the product, together with the rightmost indices of `a`, as is done in, for example, ``tensordot(a, x, axes=len(b.shape))``.\n\nParameters ---------- a : array_like Coefficient tensor, of shape ``b.shape + Q``. `Q`, a tuple, equals the shape of that sub-tensor of `a` consisting of the appropriate number of its rightmost indices, and must be such that ``prod(Q) == prod(b.shape)`` (in which sense `a` is said to be 'square'). b : array_like Right-hand tensor, which can be of any shape. axes : tuple of ints, optional Axes in `a` to reorder to the right, before inversion. If None (default), no reordering is done.\n##### Returns\n* **x **: ndarray, shape Q\n\n"
}