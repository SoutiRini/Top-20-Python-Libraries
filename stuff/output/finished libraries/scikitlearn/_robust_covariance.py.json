{
    "source file": "_robust_covariance.py",
    "line number": "310",
    "func name": "fast_mcd",
    "func arg": "(X, support_fraction, cov_computation_method, random_state)",
    "comments": "Estimates the Minimum Covariance Determinant matrix.\n\nRead more in the :ref:`User Guide <robust_covariance>`.\n\nParameters ---------- X : array-like of shape (n_samples, n_features) The data matrix, with p features and n samples.\n\nsupport_fraction : float, default=None The proportion of points to be included in the support of the raw MCD estimate. Default is `None`, which implies that the minimum value of `support_fraction` will be used within the algorithm: `(n_sample + n_features + 1) / 2`. This parameter must be in the range (0, 1).\n\ncov_computation_method : callable,\n\n\n\n\n\n\n\n\n\n\n\n default=:func:`sklearn.covariance.empirical_covariance` The function which will be used to compute the covariance. Must return an array of shape (n_features, n_features).\n\nrandom_state : int or RandomState instance, default=None Determines the pseudo random number generator for shuffling the data. Pass an int for reproducible results across multiple function calls. See :term: `Glossary <random_state>`.\n##### Returns\n* **location **: ndarray of shape (n_features,)\n    Robust location of the data.\n\n* **covariance **: ndarray of shape (n_features, n_features)\n    Robust covariance of the features.\n\n* **support **: ndarray of shape (n_samples,), dtype=bool\n    A mask of the observations that have been used to compute\n    the robust location and covariance estimates of the data set.\n\n"
}