{
    "source file": "_partial_dependence.py",
    "line number": "207",
    "func name": "partial_dependence",
    "func arg": "(estimator, X, features)",
    "comments": "Partial dependence of ``features``.\n\nPartial dependence of a feature (or a set of features) corresponds to the average response of an estimator for each possible value of the feature.\n\nRead more in the :ref:`User Guide <partial_dependence>`.\n\n.. warning::\n\nFor :class:`~sklearn.ensemble.GradientBoostingClassifier` and :class:`~sklearn.ensemble.GradientBoostingRegressor`, the `'recursion'` method (used by default) will not account for the `init` predictor of the boosting process. In practice, this will produce the same values as `'brute'` up to a constant offset in the target response, provided that `init` is a constant estimator (which is the default). However, if `init` is not a constant estimator, the partial dependence values are incorrect for `'recursion'` because the offset will be sample-dependent. It is preferable to use the `'brute'` method. Note that this only applies to :class:`~sklearn.ensemble.GradientBoostingClassifier` and :class:`~sklearn.ensemble.GradientBoostingRegressor`, not to :class:`~sklearn.ensemble.HistGradientBoostingClassifier` and :class:`~sklearn.ensemble.HistGradientBoostingRegressor`.\n\nParameters ---------- estimator : BaseEstimator A fitted estimator object implementing :term:`predict`, :term:`predict_proba`, or :term:`decision_function`. Multioutput-multiclass classifiers are not supported.\n\nX : {array-like or dataframe} of shape (n_samples, n_features) ``X`` is used to generate a grid of values for the target ``features`` (where the partial dependence will be evaluated), and also to generate values for the complement features when the `method` is 'brute'.\n\nfeatures : array-like of {int, str} The feature (e.g. `[0]`) or pair of interacting features (e.g. `[(0, 1)]`) for which the partial dependency should be computed.\n\nresponse_method : {'auto', 'predict_proba', 'decision_function'},\n\n\n\n\n\n\n\n\n\n\n\n default='auto' Specifies whether to use :term:`predict_proba` or :term:`decision_function` as the target response. For regressors this parameter is ignored and the response is always the output of :term:`predict`. By default, :term:`predict_proba` is tried first and we revert to :term:`decision_function` if it doesn't exist. If ``method`` is 'recursion', the response is always the output of :term:`decision_function`.\n\npercentiles : tuple of float, default=(0.05, 0.95) The lower and upper percentile used to create the extreme values for the grid. Must be in [0, 1].\n\ngrid_resolution : int, default=100 The number of equally spaced points on the grid, for each target feature.\n\nmethod : {'auto', 'recursion', 'brute'}, default='auto' The method used to calculate the averaged predictions:\n\n- `'recursion'` is only supported for some tree-based estimators (namely :class:`~sklearn.ensemble.GradientBoostingClassifier`, :class:`~sklearn.ensemble.GradientBoostingRegressor`, :class:`~sklearn.ensemble.HistGradientBoostingClassifier`, :class:`~sklearn.ensemble.HistGradientBoostingRegressor`, :class:`~sklearn.tree.DecisionTreeRegressor`, :class:`~sklearn.ensemble.RandomForestRegressor`, ) when `kind='average'`. This is more efficient in terms of speed. With this method, the target response of a classifier is always the decision function, not the predicted probabilities. Since the `'recursion'` method implicitely computes the average of the Individual Conditional Expectation (ICE) by design, it is not compatible with ICE and thus `kind` must be `'average'`.\n\n- `'brute'` is supported for any estimator, but is more computationally intensive.\n\n- `'auto'`: the `'recursion'` is used for estimators that support it, and `'brute'` is used otherwise.\n\nPlease see :ref:`this note <pdp_method_differences>` for differences between the `'brute'` and `'recursion'` method.\n\nkind : {'legacy', 'average', 'individual', 'both'}, default='legacy' Whether to return the partial dependence averaged across all the samples in the dataset or one line per sample or both. See Returns below.\n\nNote that the fast `method='recursion'` option is only available for `kind='average'`. Plotting individual dependencies requires using the slower `method='brute'` option.\n\n.. versionadded:: 0.24 .. deprecated:: 0.24 `kind='legacy'` is deprecated and will be removed in version 0.26. `kind='average'` will be the new default. It is intended to migrate from the ndarray output to :class:`~sklearn.utils.Bunch` output.\n##### Returns\n* **predictions **: ndarray or\n\n* **values **: seq of 1d ndarrays\n    The values with which the grid has been created. The generated grid\n    is a cartesian product of the arrays in ``values``. ``len(values) ==\n    len(features)``. The size of each array ``values[j]`` is either\n    ``grid_resolution``, or the number of unique values in ``X[\n\n* **...                    grid_resolution=2) # doctest**: +SKIP\n\n* **sklearn.inspection.plot_partial_dependence**: Plot partial dependence\n\n"
}