{
    "source file": "_sag.py",
    "line number": "89",
    "func name": "sag_solver",
    "func arg": "(X, y, sample_weight, loss, alpha, beta, max_iter, tol, verbose, random_state, check_input, max_squared_sum, warm_start_mem, is_saga)",
    "comments": "SAG solver for Ridge and LogisticRegression\n\nSAG stands for Stochastic Average Gradient: the gradient of the loss is estimated each sample at a time and the model is updated along the way with a constant learning rate.\n\nIMPORTANT NOTE: 'sag' solver converges faster on columns that are on the same scale. You can normalize the data by using sklearn.preprocessing.StandardScaler on your data before passing it to the fit method.\n\nThis implementation works with data represented as dense numpy arrays or sparse scipy arrays of floating point values for the features. It will fit the data according to squared loss or log loss.\n\nThe regularizer is a penalty added to the loss function that shrinks model parameters towards the zero vector using the squared euclidean norm L2.\n\n.. versionadded:: 0.17\n\nParameters ---------- X : {array-like, sparse matrix}, shape (n_samples, n_features) Training data\n\ny : numpy array, shape (n_samples,) Target values. With loss='multinomial', y must be label encoded (see preprocessing.LabelEncoder).\n\nsample_weight : array-like, shape (n_samples,), optional Weights applied to individual samples (1. for unweighted).\n\nloss : 'log' | 'squared' | 'multinomial' Loss function that will be optimized: -'log' is the binary logistic loss, as used in LogisticRegression. -'squared' is the squared loss, as used in Ridge. -'multinomial' is the multinomial logistic loss, as used in LogisticRegression.\n\n.. versionadded:: 0.18 *loss='multinomial'*\n\nalpha : float, optional L2 regularization term in the objective function ``(0.5 * alpha * || W ||_F^2)``. Defaults to 1.\n\nbeta : float, optional L1 regularization term in the objective function ``(beta * || W ||_1)``. Only applied if ``is_saga`` is set to True. Defaults to 0.\n\nmax_iter : int, optional The max number of passes over the training data if the stopping criteria is not reached. Defaults to 1000.\n\ntol : double, optional The stopping criteria for the weights. The iterations will stop when max(change in weights) / max(weights) < tol. Defaults to .001\n\nverbose : integer, optional The verbosity level.\n\nrandom_state : int, RandomState instance, default=None Used when shuffling the data. Pass an int for reproducible output across multiple function calls. See :term:`Glossary <random_state>`.\n\ncheck_input : bool, default True If False, the input arrays X and y will not be checked.\n\nmax_squared_sum : float, default None Maximum squared sum of X over samples. If None, it will be computed, going through all the samples. The value should be precomputed to speed up cross validation.\n\nwarm_start_mem : dict, optional The initialization parameters used for warm starting. Warm starting is currently used in LogisticRegression but not in Ridge. It contains:\n\n- 'coef': the weight vector, with the intercept in last line if the intercept is fitted.\n\n- 'gradient_memory': the scalar gradient for all seen samples.\n\n- 'sum_gradient': the sum of gradient over all seen samples, for each feature.\n\n- 'intercept_sum_gradient': the sum of gradient over all seen samples, for the intercept.\n\n- 'seen': array of boolean describing the seen samples.\n\n- 'num_seen': the number of seen samples.\n\nis_saga : boolean, optional Whether to use the SAGA algorithm or the SAG algorithm. SAGA behaves better in the first epochs, and allow for l1 regularisation.\n##### Returns\n* **coef_ **: array, shape (n_features)\n    Weight vector.\n\n* **n_iter_ **: int\n    The number of full pass on all samples.\n\n* **warm_start_mem **: dict\n    Contains a 'coef' key with the fitted result, and possibly the\n    fitted intercept at the end of the array. Contains also other keys\n    used for warm starting.\n\n* **https**: //arxiv.org/abs/1407.0202\n\n* **SAGA**: A Fast Incremental Gradient Method With Support\n\n"
}