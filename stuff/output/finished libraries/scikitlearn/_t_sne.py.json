{
    "source file": "_t_sne.py",
    "line number": "403",
    "func name": "trustworthiness",
    "func arg": "(X, X_embedded)",
    "comments": "Expresses to what extent the local structure is retained.\n\nThe trustworthiness is within [0, 1]. It is defined as\n\n.. math::\n\nT(k) = 1\n\n- \\frac{2}{nk (2n\n\n- 3k\n\n- 1)} \\sum^n_{i=1} \\sum_{j \\in \\mathcal{N}_{i}^{k}} \\max(0, (r(i, j)\n\n- k))\n\nwhere for each sample i, :math:`\\mathcal{N}_{i}^{k}` are its k nearest neighbors in the output space, and every sample j is its :math:`r(i, j)`-th nearest neighbor in the input space. In other words, any unexpected nearest neighbors in the output space are penalised in proportion to their rank in the input space.\n\n* \"Neighborhood Preservation in Nonlinear Projection Methods: An Experimental Study\" J. Venna, S. Kaski * \"Learning a Parametric Embedding by Preserving Local Structure\" L.J.P. van der Maaten\n\nParameters ---------- X : array, shape (n_samples, n_features) or (n_samples, n_samples) If the metric is 'precomputed' X must be a square distance matrix. Otherwise it contains a sample per row.\n\nX_embedded : array, shape (n_samples, n_components) Embedding of the training data in low-dimensional space.\n\nn_neighbors : int, default=5 Number of neighbors k that will be considered.\n\nmetric : string, or callable, default='euclidean' Which metric to use for computing pairwise distances between samples from the original input space. If metric is 'precomputed', X must be a matrix of pairwise distances or squared distances. Otherwise, see the documentation of argument metric in sklearn.pairwise.pairwise_distances for a list of available metrics.\n\n.. versionadded:: 0.20\n##### Returns\n* **trustworthiness **: float\n    Trustworthiness of the low-dimensional embedding.\n\n"
}