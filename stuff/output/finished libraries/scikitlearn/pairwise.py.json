{
    "source file": "pairwise.py",
    "line number": "1851",
    "func name": "pairwise_kernels",
    "func arg": "(X, Y, metric, **kwds)",
    "comments": "Compute the kernel between arrays X and optional array Y.\n\nThis method takes either a vector array or a kernel matrix, and returns a kernel matrix. If the input is a vector array, the kernels are computed. If the input is a kernel matrix, it is returned instead.\n\nThis method provides a safe way to take a kernel matrix as input, while preserving compatibility with many other algorithms that take a vector array.\n\nIf Y is given (default is None), then the returned matrix is the pairwise kernel between the arrays from both X and Y.\n\nValid values for metric are: ['additive_chi2', 'chi2', 'linear', 'poly', 'polynomial', 'rbf', 'laplacian', 'sigmoid', 'cosine']\n\nRead more in the :ref:`User Guide <metrics>`.\n\nParameters ---------- X : array [n_samples_a, n_samples_a] if metric == \"precomputed\", or,\n\n\n\n\n\n\n\n\n\n\n\n\n\n[n_samples_a, n_features] otherwise Array of pairwise kernels between samples, or a feature array.\n\nY : array of shape (n_samples_b, n_features), default=None A second feature array only if X has shape [n_samples_a, n_features].\n\nmetric : str or callable, default=\"linear\" The metric to use when calculating kernel between instances in a feature array. If metric is a string, it must be one of the metrics in pairwise.PAIRWISE_KERNEL_FUNCTIONS. If metric is \"precomputed\", X is assumed to be a kernel matrix. Alternatively, if metric is a callable function, it is called on each pair of instances (rows) and the resulting value recorded. The callable should take two rows from X as input and return the corresponding kernel value as a single number. This means that callables from :mod:`sklearn.metrics.pairwise` are not allowed, as they operate on matrices, not single samples. Use the string identifying the kernel instead.\n\nfilter_params : bool, default=False Whether to filter invalid parameters or not.\n\nn_jobs : int, default=None The number of jobs to use for the computation. This works by breaking down the pairwise matrix into n_jobs even slices and computing them in parallel.\n\n``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details.\n\n**kwds : optional keyword parameters Any further parameters are passed directly to the kernel function.\n##### Returns\n* **K **: array [n_samples_a, n_samples_a] or [n_samples_a, n_samples_b]\n    A kernel matrix K such that K_{i, j} is the kernel between the\n    ith and jth vectors of the given matrix X, if Y is None.\n    If Y is not None, then K_{i, j} is the kernel between the ith array\n    from X and the jth array from Y.\n\n"
}