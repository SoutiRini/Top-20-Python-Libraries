{
    "source file": "_spectral_embedding.py",
    "line number": "137",
    "func name": "spectral_embedding",
    "func arg": "(adjacency)",
    "comments": "Project the sample on the first eigenvectors of the graph Laplacian.\n\nThe adjacency matrix is used to compute a normalized graph Laplacian whose spectrum (especially the eigenvectors associated to the smallest eigenvalues) has an interpretation in terms of minimal number of cuts necessary to split the graph into comparably sized components.\n\nThis embedding can also 'work' even if the ``adjacency`` variable is not strictly the adjacency matrix of a graph but more generally an affinity or similarity matrix between samples (for instance the heat kernel of a euclidean distance matrix or a k-NN matrix).\n\nHowever care must taken to always make the affinity matrix symmetric so that the eigenvector decomposition works as expected.\n\nNote : Laplacian Eigenmaps is the actual algorithm implemented here.\n\nRead more in the :ref:`User Guide <spectral_embedding>`.\n\nParameters ---------- adjacency : array-like or sparse graph, shape: (n_samples, n_samples) The adjacency matrix of the graph to embed.\n\nn_components : integer, optional, default 8 The dimension of the projection subspace.\n\neigen_solver : {None, 'arpack', 'lobpcg', or 'amg'}, default None The eigenvalue decomposition strategy to use. AMG requires pyamg to be installed. It can be faster on very large, sparse problems, but may also lead to instabilities. If None, then ``'arpack'`` is used.\n\nrandom_state : int, RandomState instance, default=None Determines the random number generator used for the initialization of the lobpcg eigenvectors decomposition when ``solver`` == 'amg'. Pass an int for reproducible results across multiple function calls. See :term: `Glossary <random_state>`.\n\neigen_tol : float, optional, default=0.0 Stopping criterion for eigendecomposition of the Laplacian matrix when using arpack eigen_solver.\n\nnorm_laplacian : bool, optional, default=True If True, then compute normalized Laplacian.\n\ndrop_first : bool, optional, default=True Whether to drop the first eigenvector. For spectral embedding, this should be True as the first eigenvector should be constant vector for connected graph, but for spectral clustering, this should be kept as False to retain the first eigenvector.\n##### Returns\n* **embedding **: array, shape=(n_samples, n_components)\n    The reduced samples.\n\n* *** https**: //en.wikipedia.org/wiki/LOBPCG\n\n* *** Toward the Optimal Preconditioned Eigensolver**: Locally Optimal\n  Block Preconditioned Conjugate Gradient Method\n  Andrew V. Knyazev\n  https\n\n"
}