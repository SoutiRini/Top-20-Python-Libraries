{
    "source file": "_locally_linear.py",
    "line number": "189",
    "func name": "locally_linear_embedding",
    "func arg": "(X)",
    "comments": "Perform a Locally Linear Embedding analysis on the data.\n\nRead more in the :ref:`User Guide <locally_linear_embedding>`.\n\nParameters ---------- X : {array-like, NearestNeighbors} Sample data, shape = (n_samples, n_features), in the form of a numpy array or a NearestNeighbors object.\n\nn_neighbors : int number of neighbors to consider for each point.\n\nn_components : int number of coordinates for the manifold.\n\nreg : float, default=1e-3 regularization constant, multiplies the trace of the local covariance matrix of the distances.\n\neigen_solver : {'auto', 'arpack', 'dense'}, default='auto' auto : algorithm will attempt to choose the best method for input data\n\narpack : use arnoldi iteration in shift-invert mode. For this method, M may be a dense matrix, sparse matrix, or general linear operator. Warning: ARPACK can be unstable for some problems.\n\nIt is best to try several random seeds in order to check results.\n\ndense\n\n: use standard dense matrix operations for the eigenvalue decomposition.\n\nFor this method, M must be an array or matrix type.\n\nThis method should be avoided for large problems.\n\ntol : float, default=1e-6 Tolerance for 'arpack' method Not used if eigen_solver=='dense'.\n\nmax_iter : int, default=100 maximum number of iterations for the arpack solver.\n\nmethod : {'standard', 'hessian', 'modified', 'ltsa'}, default='standard' standard : use the standard locally linear embedding algorithm. see reference [1]_ hessian\n\n: use the Hessian eigenmap method.\n\nThis method requires n_neighbors > n_components * (1 + (n_components + 1) / 2. see reference [2]_ modified : use the modified locally linear embedding algorithm. see reference [3]_ ltsa\n\n\n\n : use local tangent space alignment algorithm see reference [4]_\n\nhessian_tol : float, default=1e-4 Tolerance for Hessian eigenmapping method. Only used if method == 'hessian'\n\nmodified_tol : float, default=1e-12 Tolerance for modified LLE method. Only used if method == 'modified'\n\nrandom_state : int, RandomState instance, default=None Determines the random number generator when ``solver`` == 'arpack'. Pass an int for reproducible results across multiple function calls. See :term: `Glossary <random_state>`.\n\nn_jobs : int or None, default=None The number of parallel jobs to run for neighbors search. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details.\n##### Returns\n* **Y **: array-like, shape [n_samples, n_components]\n    Embedding vectors.\n\n* **squared_error **: float\n    Reconstruction error for the embedding vectors. Equivalent to\n    ``norm(Y - W Y, 'fro')**2``, where W are the reconstruction weights.\n\n* **.. [1] Roweis, S. & Saul, L. Nonlinear dimensionality reduction\n    by locally linear embedding.  Science 290**: 2323 (2000).\n\n* **.. [2] Donoho, D. & Grimes, C. Hessian eigenmaps**: Locally\n    linear embedding techniques for high-dimensional data.\n    Proc Natl Acad Sci U S A.  100\n\n* **.. [3] Zhang, Z. & Wang, J. MLLE**: Modified Locally Linear\n    Embedding Using Multiple Weights.\n    http\n\n* **.. [4] Zhang, Z. & Zha, H. Principal manifolds and nonlinear\n    dimensionality reduction via tangent space alignment.\n    Journal of Shanghai Univ.  8**: 406 (2004)\n\n"
}