{
    "source file": "_dbscan.py",
    "line number": "24",
    "func name": "dbscan",
    "func arg": "(X, eps)",
    "comments": "Perform DBSCAN clustering from vector array or distance matrix.\n\nRead more in the :ref:`User Guide <dbscan>`.\n\nParameters ---------- X : {array-like, sparse (CSR) matrix} of shape (n_samples, n_features) or\n\n\n\n\n\n\n\n\n\n\n\n (n_samples, n_samples) A feature array, or array of distances between samples if ``metric='precomputed'``.\n\neps : float, default=0.5 The maximum distance between two samples for one to be considered as in the neighborhood of the other. This is not a maximum bound on the distances of points within a cluster. This is the most important DBSCAN parameter to choose appropriately for your data set and distance function.\n\nmin_samples : int, default=5 The number of samples (or total weight) in a neighborhood for a point to be considered as a core point. This includes the point itself.\n\nmetric : str or callable, default='minkowski' The metric to use when calculating distance between instances in a feature array. If metric is a string or callable, it must be one of the options allowed by :func:`sklearn.metrics.pairwise_distances` for its metric parameter. If metric is \"precomputed\", X is assumed to be a distance matrix and must be square during fit. X may be a :term:`sparse graph <sparse graph>`, in which case only \"nonzero\" elements may be considered neighbors.\n\nmetric_params : dict, default=None Additional keyword arguments for the metric function.\n\n.. versionadded:: 0.19\n\nalgorithm : {'auto', 'ball_tree', 'kd_tree', 'brute'}, default='auto' The algorithm to be used by the NearestNeighbors module to compute pointwise distances and find nearest neighbors. See NearestNeighbors module documentation for details.\n\nleaf_size : int, default=30 Leaf size passed to BallTree or cKDTree. This can affect the speed of the construction and query, as well as the memory required to store the tree. The optimal value depends on the nature of the problem.\n\np : float, default=2 The power of the Minkowski metric to be used to calculate distance between points.\n\nsample_weight : array-like of shape (n_samples,), default=None Weight of each sample, such that a sample with a weight of at least ``min_samples`` is by itself a core sample; a sample with negative weight may inhibit its eps-neighbor from being core. Note that weights are absolute, and default to 1.\n\nn_jobs : int, default=None The number of parallel jobs to run for neighbors search. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details. If precomputed distance are used, parallel execution is not available and thus n_jobs will have no effect.\n##### Returns\n* **core_samples **: ndarray of shape (n_core_samples,)\n    Indices of core samples.\n\n* **labels **: ndarray of shape (n_samples,)\n    Cluster labels for each point.  Noisy samples are given the label -1.\n\n* **For an example, see **: ref\n\n* ****: func\n\n* **In**: Proceedings of the 2nd International Conference on Knowledge Discovery\n\n* **DBSCAN revisited, revisited**: why and how you should (still) use DBSCAN.\n\n"
}