{
    "source file": "partial_dependence.py",
    "line number": "20",
    "func name": "plot_partial_dependence",
    "func arg": "(estimator, X, features)",
    "comments": "Partial dependence (PD) and individual conditional expectation (ICE) plots.\n\nPartial dependence plots, individual conditional expectation plots or an overlay of both of them can be plotted by setting the ``kind`` parameter. The ``len(features)`` plots are arranged in a grid with ``n_cols`` columns. Two-way partial dependence plots are plotted as contour plots. The deciles of the feature values will be shown with tick marks on the x-axes for one-way plots, and on both axes for two-way plots.\n\nRead more in the :ref:`User Guide <partial_dependence>`.\n\n.. note::\n\n:func:`plot_partial_dependence` does not support using the same axes with multiple calls. To plot the the partial dependence for multiple estimators, please pass the axes created by the first call to the second call::\n\n>>> from sklearn.inspection import plot_partial_dependence >>> from sklearn.datasets import make_friedman1 >>> from sklearn.linear_model import LinearRegression >>> from sklearn.ensemble import RandomForestRegressor >>> X, y = make_friedman1() >>> est1 = LinearRegression().fit(X, y) >>> est2 = RandomForestRegressor().fit(X, y) >>> disp1 = plot_partial_dependence(est1, X, ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n [1, 2])\n\n# doctest: +SKIP >>> disp2 = plot_partial_dependence(est2, X, [1, 2], ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n ax=disp1.axes_)\n\n# doctest: +SKIP\n\n.. warning::\n\nFor :class:`~sklearn.ensemble.GradientBoostingClassifier` and :class:`~sklearn.ensemble.GradientBoostingRegressor`, the `'recursion'` method (used by default) will not account for the `init` predictor of the boosting process. In practice, this will produce the same values as `'brute'` up to a constant offset in the target response, provided that `init` is a constant estimator (which is the default). However, if `init` is not a constant estimator, the partial dependence values are incorrect for `'recursion'` because the offset will be sample-dependent. It is preferable to use the `'brute'` method. Note that this only applies to :class:`~sklearn.ensemble.GradientBoostingClassifier` and :class:`~sklearn.ensemble.GradientBoostingRegressor`, not to :class:`~sklearn.ensemble.HistGradientBoostingClassifier` and :class:`~sklearn.ensemble.HistGradientBoostingRegressor`.\n\nParameters ---------- estimator : BaseEstimator A fitted estimator object implementing :term:`predict`, :term:`predict_proba`, or :term:`decision_function`. Multioutput-multiclass classifiers are not supported.\n\nX : {array-like or dataframe} of shape (n_samples, n_features) ``X`` is used to generate a grid of values for the target ``features`` (where the partial dependence will be evaluated), and also to generate values for the complement features when the `method` is `'brute'`.\n\nfeatures : list of {int, str, pair of int, pair of str} The target features for which to create the PDPs. If `features[i]` is an integer or a string, a one-way PDP is created; if `features[i]` is a tuple, a two-way PDP is created (only supported with `kind='average'`). Each tuple must be of size 2. if any entry is a string, then it must be in ``feature_names``.\n\nfeature_names : array-like of shape (n_features,), dtype=str, default=None Name of each feature; `feature_names[i]` holds the name of the feature with index `i`. By default, the name of the feature corresponds to their numerical index for NumPy array and their column name for pandas dataframe.\n\ntarget : int, default=None\n\n- In a multiclass setting, specifies the class for which the PDPs should be computed. Note that for binary classification, the positive class (index 1) is always used.\n\n- In a multioutput setting, specifies the task for which the PDPs should be computed.\n\nIgnored in binary classification or classical regression settings.\n\nresponse_method : {'auto', 'predict_proba', 'decision_function'},\n\n\n\n\n\n\n\n\n\n\n\n default='auto' Specifies whether to use :term:`predict_proba` or :term:`decision_function` as the target response. For regressors this parameter is ignored and the response is always the output of :term:`predict`. By default, :term:`predict_proba` is tried first and we revert to :term:`decision_function` if it doesn't exist. If ``method`` is `'recursion'`, the response is always the output of :term:`decision_function`.\n\nn_cols : int, default=3 The maximum number of columns in the grid plot. Only active when `ax` is a single axis or `None`.\n\ngrid_resolution : int, default=100 The number of equally spaced points on the axes of the plots, for each target feature.\n\npercentiles : tuple of float, default=(0.05, 0.95) The lower and upper percentile used to create the extreme values for the PDP axes. Must be in [0, 1].\n\nmethod : str, default='auto' The method used to calculate the averaged predictions:\n\n- `'recursion'` is only supported for some tree-based estimators (namely :class:`~sklearn.ensemble.GradientBoostingClassifier`, :class:`~sklearn.ensemble.GradientBoostingRegressor`, :class:`~sklearn.ensemble.HistGradientBoostingClassifier`, :class:`~sklearn.ensemble.HistGradientBoostingRegressor`, :class:`~sklearn.tree.DecisionTreeRegressor`, :class:`~sklearn.ensemble.RandomForestRegressor` but is more efficient in terms of speed. With this method, the target response of a classifier is always the decision function, not the predicted probabilities. Since the `'recursion'` method implicitely computes the average of the ICEs by design, it is not compatible with ICE and thus `kind` must be `'average'`.\n\n- `'brute'` is supported for any estimator, but is more computationally intensive.\n\n- `'auto'`: the `'recursion'` is used for estimators that support it, and `'brute'` is used otherwise.\n\nPlease see :ref:`this note <pdp_method_differences>` for differences between the `'brute'` and `'recursion'` method.\n\nn_jobs : int, default=None The number of CPUs to use to compute the partial dependences. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details.\n\nverbose : int, default=0 Verbose output during PD computations.\n\nline_kw : dict, default=None Dict with keywords passed to the ``matplotlib.pyplot.plot`` call. For one-way partial dependence plots.\n\ncontour_kw : dict, default=None Dict with keywords passed to the ``matplotlib.pyplot.contourf`` call. For two-way partial dependence plots.\n\nax : Matplotlib axes or array-like of Matplotlib axes, default=None\n\n- If a single axis is passed in, it is treated as a bounding axes and a grid of partial dependence plots will be drawn within these bounds. The `n_cols` parameter controls the number of columns in the grid.\n\n- If an array-like of axes are passed in, the partial dependence plots will be drawn directly into these axes.\n\n- If `None`, a figure and a bounding axes is created and treated as the single axes case.\n\n.. versionadded:: 0.22\n\nkind : {'average', 'individual', 'both'}, default='average' Whether to plot the partial dependence averaged across all the samples in the dataset or one line per sample or both.\n\n- ``kind='average'`` results in the traditional PD plot;\n\n- ``kind='individual'`` results in the ICE plot.\n\nNote that the fast ``method='recursion'`` option is only available for ``kind='average'``. Plotting individual dependencies requires using the slower ``method='brute'`` option.\n\n.. versionadded:: 0.24\n\nsubsample : float, int or None, default=1000 Sampling for ICE curves when `kind` is 'individual' or 'both'. If `float`, should be between 0.0 and 1.0 and represent the proportion of the dataset to be used to plot ICE curves. If `int`, represents the absolute number samples to use.\n\nNote that the full dataset is still used to calculate averaged partial dependence when `kind='both'`.\n\n.. versionadded:: 0.24\n##### Returns\n* **display**: \n\n* **>>> plot_partial_dependence(clf, X, [0, (0, 1)]) #doctest**: +SKIP\n\n* **sklearn.inspection.partial_dependence**: Return raw partial\n  dependence values\n\n"
}