{
    "source file": "_data.py",
    "line number": "3261",
    "func name": "power_transform",
    "func arg": "(X, method)",
    "comments": "Power transforms are a family of parametric, monotonic transformations that are applied to make data more Gaussian-like. This is useful for modeling issues related to heteroscedasticity (non-constant variance), or other situations where normality is desired.\n\nCurrently, power_transform supports the Box-Cox transform and the Yeo-Johnson transform. The optimal parameter for stabilizing variance and minimizing skewness is estimated through maximum likelihood.\n\nBox-Cox requires input data to be strictly positive, while Yeo-Johnson supports both positive or negative data.\n\nBy default, zero-mean, unit-variance normalization is applied to the transformed data.\n\nRead more in the :ref:`User Guide <preprocessing_transformer>`.\n\n Parameters ---------- X : array-like of shape (n_samples, n_features) The data to be transformed using a power transformation.\n\nmethod : {'yeo-johnson', 'box-cox'}, default='yeo-johnson' The power transform method. Available methods are:\n\n- 'yeo-johnson' [1]_, works with positive and negative values\n\n- 'box-cox' [2]_, only works with strictly positive values\n\n.. versionchanged:: 0.23 The default value of the `method` parameter changed from 'box-cox' to 'yeo-johnson' in 0.23.\n\nstandardize : bool, default=True Set to True to apply zero-mean, unit-variance normalization to the transformed output.\n\ncopy : bool, default=True Set to False to perform inplace computation during transformation.\n##### Returns\n* **X_trans **: ndarray of shape (n_samples, n_features)\n    The transformed data.\n\n* **.. warning**: \n\n* **PowerTransformer **: Equivalent transformation with the\n    ``Transformer`` API (e.g. as part of a preprocessing\n\n* **quantile_transform **: Maps data to a standard normal distribution with\n    the parameter `output_distribution='normal'`.\n\n* **NaNs are treated as missing values**: disregarded in ``fit``, and maintained\n\n* **see **: ref\n\n"
}