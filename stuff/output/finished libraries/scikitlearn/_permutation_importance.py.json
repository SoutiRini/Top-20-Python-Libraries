{
    "source file": "_permutation_importance.py",
    "line number": "42",
    "func name": "permutation_importance",
    "func arg": "(estimator, X, y)",
    "comments": "Permutation importance for feature evaluation [BRE]_.\n\nThe :term:`estimator` is required to be a fitted estimator. `X` can be the data set used to train the estimator or a hold-out set. The permutation importance of a feature is calculated as follows. First, a baseline metric, defined by :term:`scoring`, is evaluated on a (potentially different) dataset defined by the `X`. Next, a feature column from the validation set is permuted and the metric is evaluated again. The permutation importance is defined to be the difference between the baseline metric and metric from permutating the feature column.\n\nRead more in the :ref:`User Guide <permutation_importance>`.\n\nParameters ---------- estimator : object An estimator that has already been :term:`fitted` and is compatible with :term:`scorer`.\n\nX : ndarray or DataFrame, shape (n_samples, n_features) Data on which permutation importance will be computed.\n\ny : array-like or None, shape (n_samples, ) or (n_samples, n_classes) Targets for supervised or `None` for unsupervised.\n\nscoring : string, callable or None, default=None Scorer to use. It can be a single string (see :ref:`scoring_parameter`) or a callable (see :ref:`scoring`). If None, the estimator's default scorer is used.\n\nn_repeats : int, default=5 Number of times to permute a feature.\n\nn_jobs : int or None, default=None Number of jobs to run in parallel. The computation is done by computing permutation score for each columns and parallelized over the columns. `None` means 1 unless in a :obj:`joblib.parallel_backend` context. `-1` means using all processors. See :term:`Glossary <n_jobs>` for more details.\n\nrandom_state : int, RandomState instance, default=None Pseudo-random number generator to control the permutations of each feature. Pass an int to get reproducible results across function calls. See :term: `Glossary <random_state>`.\n##### Returns\n* **result **: \n\n* **.. [BRE] L. Breiman, \"Random Forests\", Machine Learning, 45(1), 5-32,\n         2001. https**: //doi.org/10.1023/A\n\n"
}