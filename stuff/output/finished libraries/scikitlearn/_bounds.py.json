{
    "source file": "_bounds.py",
    "line number": "14",
    "func name": "l1_min_c",
    "func arg": "(X, y)",
    "comments": "Return the lowest bound for C such that for C in (l1_min_C, infinity) the model is guaranteed not to be empty. This applies to l1 penalized classifiers, such as LinearSVC with penalty='l1' and linear_model.LogisticRegression with penalty='l1'.\n\nThis value is valid if class_weight parameter in fit() is not set.\n\nParameters ---------- X : {array-like, sparse matrix} of shape (n_samples, n_features) Training vector, where n_samples in the number of samples and n_features is the number of features.\n\ny : array-like of shape (n_samples,) Target vector relative to X.\n\nloss : {'squared_hinge', 'log'}, default='squared_hinge' Specifies the loss function. With 'squared_hinge' it is the squared hinge loss (a.k.a. L2 loss). With 'log' it is the loss of logistic regression models.\n\nfit_intercept : bool, default=True Specifies if the intercept should be fitted by the model. It must match the fit() method parameter.\n\nintercept_scaling : float, default=1.0 when fit_intercept is True, instance vector x becomes [x, intercept_scaling], i.e. a \"synthetic\" feature with constant value equals to intercept_scaling is appended to the instance vector. It must match the fit() method parameter.\n##### Returns\n* **l1_min_c **: float\n    minimum value for C\n\n"
}