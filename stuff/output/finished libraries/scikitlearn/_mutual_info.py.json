{
    "source file": "_mutual_info.py",
    "line number": "375",
    "func name": "mutual_info_classif",
    "func arg": "(X, y)",
    "comments": "Estimate mutual information for a discrete target variable.\n\nMutual information (MI) [1]_ between two random variables is a non-negative value, which measures the dependency between the variables. It is equal to zero if and only if two random variables are independent, and higher values mean higher dependency.\n\nThe function relies on nonparametric methods based on entropy estimation from k-nearest neighbors distances as described in [2]_ and [3]_. Both methods are based on the idea originally proposed in [4]_.\n\nIt can be used for univariate features selection, read more in the :ref:`User Guide <univariate_feature_selection>`.\n\nParameters ---------- X : array-like or sparse matrix, shape (n_samples, n_features) Feature matrix.\n\ny : array-like of shape (n_samples,) Target vector.\n\ndiscrete_features : {'auto', bool, array-like}, default='auto' If bool, then determines whether to consider all features discrete or continuous. If array, then it should be either a boolean mask with shape (n_features,) or array with indices of discrete features. If 'auto', it is assigned to False for dense `X` and to True for sparse `X`.\n\nn_neighbors : int, default=3 Number of neighbors to use for MI estimation for continuous variables, see [2]_ and [3]_. Higher values reduce variance of the estimation, but could introduce a bias.\n\ncopy : bool, default=True Whether to make a copy of the given data. If set to False, the initial data will be overwritten.\n\nrandom_state : int, RandomState instance or None, default=None Determines random number generation for adding small noise to continuous variables in order to remove repeated values. Pass an int for reproducible results across multiple function calls. See :term:`Glossary <random_state>`.\n##### Returns\n* **mi **: ndarray, shape (n_features,)\n    Estimated mutual information between each feature and the target.\n\n* **.. [1] `Mutual Information\n       <https**: //en.wikipedia.org/wiki/Mutual_information>`_\n       on Wikipedia.\n\n* **.. [4] L. F. Kozachenko, N. N. Leonenko, \"Sample Estimate of the Entropy\n       of a Random Vector**: , Probl. Peredachi Inf., 23\n\n"
}