{
    "source file": "_scorer.py",
    "line number": "522",
    "func name": "make_scorer",
    "func arg": "(score_func, **kwargs)",
    "comments": "Make a scorer from a performance metric or loss function.\n\nThis factory function wraps scoring functions for use in GridSearchCV and cross_val_score. It takes a score function, such as ``accuracy_score``, ``mean_squared_error``, ``adjusted_rand_index`` or ``average_precision`` and returns a callable that scores an estimator's output.\n\nRead more in the :ref:`User Guide <scoring>`.\n\nParameters ---------- score_func : callable, Score function (or loss function) with signature ``score_func(y, y_pred, **kwargs)``.\n\ngreater_is_better : boolean, default=True Whether score_func is a score function (default), meaning high is good, or a loss function, meaning low is good. In the latter case, the scorer object will sign-flip the outcome of the score_func.\n\nneeds_proba : boolean, default=False Whether score_func requires predict_proba to get probability estimates out of a classifier.\n\nIf True, for binary `y_true`, the score function is supposed to accept a 1D `y_pred` (i.e., probability of the positive class, shape `(n_samples,)`).\n\nneeds_threshold : boolean, default=False Whether score_func takes a continuous decision certainty. This only works for binary classification using estimators that have either a decision_function or predict_proba method.\n\nIf True, for binary `y_true`, the score function is supposed to accept a 1D `y_pred` (i.e., probability of the positive class or the decision function, shape `(n_samples,)`).\n\nFor example ``average_precision`` or the area under the roc curve can not be computed using discrete predictions alone.\n\n**kwargs : additional arguments Additional parameters to be passed to score_func.\n##### Returns\n* **scorer **: callable\n    Callable object that returns a scalar score; greater is better.\n\n* **>>> grid = GridSearchCV(LinearSVC(), param_grid={'C'**: [1, 10]},\n\n* **function is supposed to accept the output of **: term\n\n* **output of **: term\n\n"
}