{
    "source file": "_mds.py",
    "line number": "134",
    "func name": "smacof",
    "func arg": "(dissimilarities)",
    "comments": "Computes multidimensional scaling using the SMACOF algorithm.\n\nThe SMACOF (Scaling by MAjorizing a COmplicated Function) algorithm is a multidimensional scaling algorithm which minimizes an objective function (the *stress*) using a majorization technique. Stress majorization, also known as the Guttman Transform, guarantees a monotone convergence of stress, and is more powerful than traditional techniques such as gradient descent.\n\nThe SMACOF algorithm for metric MDS can summarized by the following steps:\n\n1. Set an initial start configuration, randomly or not. 2. Compute the stress 3. Compute the Guttman Transform 4. Iterate 2 and 3 until convergence.\n\nThe nonmetric algorithm adds a monotonic regression step before computing the stress.\n\nParameters ---------- dissimilarities : ndarray of shape (n_samples, n_samples) Pairwise dissimilarities between the points. Must be symmetric.\n\nmetric : boolean, optional, default: True Compute metric or nonmetric SMACOF algorithm.\n\nn_components : int, default=2 Number of dimensions in which to immerse the dissimilarities. If an ``init`` array is provided, this option is overridden and the shape of ``init`` is used to determine the dimensionality of the embedding space.\n\ninit : ndarray of shape (n_samples, n_components), default=None Starting configuration of the embedding to initialize the algorithm. By default, the algorithm is initialized with a randomly chosen array.\n\nn_init : int, default=8 Number of times the SMACOF algorithm will be run with different initializations. The final results will be the best output of the runs, determined by the run with the smallest final stress. If ``init`` is provided, this option is overridden and a single run is performed.\n\nn_jobs : int, default=None The number of jobs to use for the computation. If multiple initializations are used (``n_init``), each run of the algorithm is computed in parallel.\n\n``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details.\n\nmax_iter : int, default=300 Maximum number of iterations of the SMACOF algorithm for a single run.\n\nverbose : int, default=0 Level of verbosity.\n\neps : float, default=1e-3 Relative tolerance with respect to stress at which to declare convergence.\n\nrandom_state : int or RandomState instance, default=None Determines the random number generator used to initialize the centers. Pass an int for reproducible results across multiple function calls. See :term: `Glossary <random_state>`.\n\nreturn_n_iter : bool, default=False Whether or not to return the number of iterations.\n##### Returns\n* **X **: ndarray of shape (n_samples, n_components)\n    Coordinates of the points in a ``n_components``-space.\n\n* **stress **: float\n    The final value of the stress (sum of squared distance of the\n    disparities and the distances for all constrained points).\n\n* **n_iter **: int\n    The number of iterations corresponding to the best stress. Returned\n    only if ``return_n_iter`` is set to ``True``.\n\n* **\"Nonmetric multidimensional scaling**: a numerical method\" Kruskal, J.\n\n"
}