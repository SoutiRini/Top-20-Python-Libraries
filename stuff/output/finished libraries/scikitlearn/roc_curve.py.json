{
    "source file": "roc_curve.py",
    "line number": "130",
    "func name": "plot_roc_curve",
    "func arg": "(estimator, X, y, **kwargs)",
    "comments": "Plot Receiver operating characteristic (ROC) curve.\n\nExtra keyword arguments will be passed to matplotlib's `plot`.\n\nRead more in the :ref:`User Guide <visualizations>`.\n\nParameters ---------- estimator : estimator instance Fitted classifier or a fitted :class:`~sklearn.pipeline.Pipeline` in which the last estimator is a classifier.\n\nX : {array-like, sparse matrix} of shape (n_samples, n_features) Input values.\n\ny : array-like of shape (n_samples,) Target values.\n\nsample_weight : array-like of shape (n_samples,), default=None Sample weights.\n\ndrop_intermediate : boolean, default=True Whether to drop some suboptimal thresholds which would not appear on a plotted ROC curve. This is useful in order to create lighter ROC curves.\n\nresponse_method : {'predict_proba', 'decision_function', 'auto'}\n\n\n\n default='auto' Specifies whether to use :term:`predict_proba` or :term:`decision_function` as the target response. If set to 'auto', :term:`predict_proba` is tried first and if it does not exist :term:`decision_function` is tried next.\n\nname : str, default=None Name of ROC Curve for labeling. If `None`, use the name of the estimator.\n\nax : matplotlib axes, default=None Axes object to plot on. If `None`, a new figure and axes is created.\n\npos_label : str or int, default=None The class considered as the positive class when computing the roc auc metrics. By default, `estimators.classes_[1]` is considered as the positive class.\n\n.. versionadded:: 0.24\n##### Returns\n* **display **: \n\n* **roc_auc_score **: Compute the area under the ROC curve\n\n* **roc_curve **: Compute Receiver operating characteristic (ROC) curve\n\n* **>>> import matplotlib.pyplot as plt  # doctest**: +SKIP\n\n* **>>> metrics.plot_roc_curve(clf, X_test, y_test)  # doctest**: +SKIP\n\n* **>>> plt.show()                                   # doctest**: +SKIP\n\n"
}