{
    "source file": "calibration.py",
    "line number": "588",
    "func name": "calibration_curve",
    "func arg": "(y_true, y_prob)",
    "comments": "Compute true and predicted probabilities for a calibration curve.\n\nThe method assumes the inputs come from a binary classifier, and discretize the [0, 1] interval into bins.\n\nCalibration curves may also be referred to as reliability diagrams.\n\nRead more in the :ref:`User Guide <calibration>`.\n\nParameters ---------- y_true : array-like of shape (n_samples,) True targets.\n\ny_prob : array-like of shape (n_samples,) Probabilities of the positive class.\n\nnormalize : bool, default=False Whether y_prob needs to be normalized into the [0, 1] interval, i.e. is not a proper probability. If True, the smallest value in y_prob is linearly mapped onto 0 and the largest one onto 1.\n\nn_bins : int, default=5 Number of bins to discretize the [0, 1] interval. A bigger number requires more data. Bins with no samples (i.e. without corresponding values in `y_prob`) will not be returned, thus the returned arrays may have less than `n_bins` values.\n\nstrategy : {'uniform', 'quantile'}, default='uniform' Strategy used to define the widths of the bins.\n\nuniform The bins have identical widths. quantile The bins have the same number of samples and depend on `y_prob`.\n##### Returns\n* **prob_true **: ndarray of shape (n_bins,) or smaller\n    The proportion of samples whose class is the positive class, in each\n    bin (fraction of positives).\n\n* **prob_pred **: ndarray of shape (n_bins,) or smaller\n    The mean predicted probability in each bin.\n\n"
}