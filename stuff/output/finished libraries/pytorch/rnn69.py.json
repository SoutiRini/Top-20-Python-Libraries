{
    "source file": "rnn69.py",
    "line number": "378",
    "func name": "pack_sequence",
    "func arg": "(sequences, enforce_sorted)",
    "comments": "Packs a list of variable length Tensors\n\n``sequences`` should be a list of Tensors of size ``L x *``, where `L` is the length of a sequence and `*` is any number of trailing dimensions, including zero.\n\nFor unsorted sequences, use `enforce_sorted = False`. If ``enforce_sorted`` is ``True``, the sequences should be sorted in the order of decreasing length. ``enforce_sorted = True`` is only necessary for ONNX export.\n\n Example: >>> from torch.nn.utils.rnn import pack_sequence >>> a = torch.tensor([1,2,3]) >>> b = torch.tensor([4,5]) >>> c = torch.tensor([6]) >>> pack_sequence([a, b, c]) PackedSequence(data=tensor([ 1,\n\n4,\n\n6,\n\n2,\n\n5,\n\n3]), batch_sizes=tensor([ 3,\n\n2,\n\n1]))\n\n Arguments: sequences (list[Tensor]): A list of sequences of decreasing length. enforce_sorted (bool, optional): if ``True``, checks that the input contains sequences sorted by length in a decreasing order. If ``False``, this condition is not checked. Default: ``True``.\n##### Returns\n* **a **: class\n\n"
}