{
    "source file": "_lowrank.py",
    "line number": "170",
    "func name": "pca_lowrank",
    "func arg": "(A, q, center, niter)",
    "comments": "Performs linear Principal Component Analysis (PCA) on a low-rank matrix, batches of such matrices, or sparse matrix.\n\nThis function returns a namedtuple ``(U, S, V)`` which is the nearly optimal approximation of a singular value decomposition of a centered matrix :math:`A` such that :math:`A = U diag(S) V^T`.\n\n.. note:: The relation of ``(U, S, V)`` to PCA is as follows:\n\n- :math:`A` is a data matrix with ``m`` samples and ``n`` features\n\n- the :math:`V` columns represent the principal directions\n\n- :math:`S ** 2 / (m\n\n- 1)` contains the eigenvalues of :math:`A^T A / (m\n\n- 1)` which is the covariance of ``A`` when ``center=True`` is provided.\n\n- ``matmul(A, V[:, :k])`` projects data to the first k principal components\n\n.. note:: Different from the standard SVD, the size of returned matrices depend on the specified rank and q values as follows:\n\n- :math:`U` is m x q matrix\n\n- :math:`S` is q-vector\n\n- :math:`V` is n x q matrix\n\n.. note:: To obtain repeatable results, reset the seed for the pseudorandom number generator\n\nArguments:\n\nA (Tensor): the input tensor of size :math:`(*, m, n)`\n\nq (int, optional): a slightly overestimated rank of :math:`A`. By default, ``q = min(6, m, n)``.\n\ncenter (bool, optional): if True, center the input tensor, otherwise, assume that the input is centered.\n\nniter (int, optional): the number of subspace iterations to conduct; niter must be a nonnegative integer, and defaults to 2.\n\nReferences::\n\n- Nathan Halko, Per-Gunnar Martinsson, and Joel Tropp, Finding structure with randomness: probabilistic algorithms for constructing approximate matrix decompositions, arXiv:0909.4061 [math.NA; math.PR], 2009 (available at `arXiv <http://arxiv.org/abs/0909.4061>`_).\n"
}