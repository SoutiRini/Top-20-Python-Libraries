{
    "source file": "functional.py",
    "line number": "650",
    "func name": "hvp",
    "func arg": "(func, inputs, v, create_graph, strict)",
    "comments": "Function that computes the dot product between the Hessian of a given scalar function and a vector ``v`` at the point given by the inputs.\n\n\n##### Args\n* **func (function)**: a Python function that takes Tensor inputs and returns\n    a Tensor with a single element.\n\n* **inputs (tuple of Tensors or Tensor)**: inputs to the function ``func``.\n\n* **v (tuple of Tensors or Tensor)**: The vector for which the Hessian vector\n    product is computed. Must be the same size as the input of\n    ``func``. This argument is optional when ``func``'s input contains\n    a single element and (if it is not provided) will be set as a\n    Tensor containing a single ``1``.\n\n* **create_graph (bool, optional)**: If ``True``, both the output and result will be\n    computed in a differentiable way. Note that when ``strict`` is\n    ``False``, the result can not require gradients or be disconnected\n    from the inputs.  Defaults to ``False``.\n\n* **strict (bool, optional)**: If ``True``, an error will be raised when we\n    detect that there exists an input such that all the outputs are\n    independent of it. If ``False``, we return a Tensor of zeros as the\n    hvp for said inputs, which is the expected mathematical value.\n    Defaults to ``False``.\n\n##### Returns\n* **func_output (tuple of Tensors or Tensor)**: output of ``func(inputs)``\n    hvp (tuple of Tensors or Tensor)\n\n* **ple**: \n\n* **>>> def pow_reducer(x)**: \n\n* **>>> def pow_adder_reducer(x, y)**: \n\n* ****: \n\n"
}