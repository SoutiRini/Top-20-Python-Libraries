{
    "source file": "fuse_modules.py",
    "line number": "156",
    "func name": "fuse_modules",
    "func arg": "(model, modules_to_fuse, inplace, fuser_func)",
    "comments": "Fuses a list of modules into a single module\n\nFuses only the following sequence of modules: conv, bn conv, bn, relu conv, relu linear, relu bn, relu All other sequences are left unchanged. For these sequences, replaces the first item in the list with the fused module, replacing the rest of the modules with identity.\n\nArguments: model: Model containing the modules to be fused modules_to_fuse: list of list of module names to fuse. Can also be a list of strings if there is only a single list of modules to fuse. inplace: bool specifying if fusion happens in place on the model, by default a new model is returned fuser_func: Function that takes in a list of modules and outputs a list of fused modules of the same length. For example, fuser_func([convModule, BNModule]) returns the list [ConvBNModule, nn.Identity()] Defaults to torch.quantization.fuse_known_modules\n##### Returns\n* **ples**: \n\n"
}