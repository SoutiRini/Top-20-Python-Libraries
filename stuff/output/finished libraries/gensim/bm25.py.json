{
    "source file": "bm25.py",
    "line number": "326",
    "func name": "get_bm25_weights",
    "func arg": "(corpus, n_jobs, k1, b, epsilon)",
    "comments": "Returns BM25 scores (weights) of documents in corpus. Each document has to be weighted with every document in given corpus.\n\nParameters ---------- corpus : list of list of str Corpus of documents. n_jobs : int The number of processes to use for computing bm25. k1 : float Constant used for influencing the term frequency saturation. After saturation is reached, additional presence for the term adds a significantly less additional score. According to [1]_, experiments suggest that 1.2 < k1 < 2 yields reasonably good results, although the optimal value depends on factors such as the type of documents or queries. b : float Constant used for influencing the effects of different document lengths relative to average document length. When b is bigger, lengthier documents (compared to average) have more impact on its effect. According to [1]_, experiments suggest that 0.5 < b < 0.8 yields reasonably good results, although the optimal value depends on factors such as the type of documents or queries. epsilon : float Constant used as floor value for idf of a document in the corpus. When epsilon is positive, it restricts negative idf values. Negative idf implies that adding a very common term to a document penalize the overall score (with 'very common' meaning that it is present in more than half of the documents). That can be undesirable as it means that an identical document would score less than an almost identical one (by removing the referred term). Increasing epsilon above 0 raises the sense of how rare a word has to be (among different documents) to receive an extra score.\n##### Returns\n* **.. sourcecode**: \n\n"
}