{
    "source file": "lsimodel.py",
    "line number": "861",
    "func name": "stochastic_svd",
    "func arg": "(corpus, rank, num_terms, chunksize, extra_dims, power_iters, dtype, eps)",
    "comments": "Run truncated Singular Value Decomposition (SVD) on a sparse input.\n\nParameters ---------- corpus : {iterable of list of (int, float), scipy.sparse} Input corpus as a stream (does not have to fit in RAM) or a sparse matrix of shape (`num_terms`, num_documents). rank : int Desired number of factors to be retained after decomposition. num_terms : int The number of features (terms) in `corpus`. chunksize :\n\nint, optional Number of documents to be used in each training chunk. extra_dims : int, optional Extra samples to be used besides the rank `k`. Can improve accuracy. power_iters: int, optional Number of power iteration steps to be used. Increasing the number of power iterations improves accuracy, but lowers performance. dtype : numpy.dtype, optional Enforces a type for elements of the decomposed matrix. eps: float, optional Percentage of the spectrum's energy to be discarded.\n\nNotes ----- The corpus may be larger than RAM (iterator of vectors), if `corpus` is a `scipy.sparse.csc` instead, it is assumed the whole corpus fits into core memory and a different (more efficient) code path is chosen. This may return less than the requested number of top `rank` factors, in case the input itself is of lower rank. The `extra_dims` (oversampling) and especially `power_iters` (power iterations) parameters affect accuracy of the decomposition.\n\nThis algorithm uses `2 + power_iters` passes over the input data. In case you can only afford a single pass, set `onepass=True` in :class:`~gensim.models.lsimodel.LsiModel` and avoid using this function directly.\n\nThe decomposition algorithm is based on `\"Finding structure with randomness: Probabilistic algorithms for constructing approximate matrix decompositions\" <https://arxiv.org/abs/0909.4061>`_.\n##### Returns\n"
}