{
    "source file": "_gcutils.py",
    "line number": "61",
    "func name": "assert_deallocated",
    "func arg": "(func, **kwargs)",
    "comments": "Context manager to check that object is deallocated\n\nThis is useful for checking that an object can be freed directly by reference counting, without requiring gc to break reference cycles. GC is disabled inside the context manager.\n\nThis check is not available on PyPy.\n\nParameters ---------- func : callable Callable to create object to check \\*args : sequence positional arguments to `func` in order to create object to check \\*\\*kwargs : dict keyword arguments to `func` in order to create object to check\n\nExamples -------- >>> class C(object): pass >>> with assert_deallocated(C) as c: ...\n\n\n\n # do something ...\n\n\n\n del c\n\n>>> class C(object): ...\n\n\n\n def __init__(self): ...\n\n\n\n\n\n\n\n self._circular = self # Make circular reference >>> with assert_deallocated(C) as c: #doctest: +IGNORE_EXCEPTION_DETAIL ...\n\n\n\n # do something ...\n\n\n\n del c Traceback (most recent call last): ... ReferenceError: Remaining reference(s) to object\n"
}