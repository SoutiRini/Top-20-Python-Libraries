{
    "source file": "_lsap.py",
    "line number": "16",
    "func name": "linear_sum_assignment",
    "func arg": "(cost_matrix, maximize)",
    "comments": "Solve the linear sum assignment problem.\n\nThe linear sum assignment problem is also known as minimum weight matching in bipartite graphs. A problem instance is described by a matrix C, where each C[i,j] is the cost of matching vertex i of the first partite set (a \"worker\") and vertex j of the second set (a \"job\"). The goal is to find a complete assignment of workers to jobs of minimal cost.\n\nFormally, let X be a boolean matrix where :math:`X[i,j] = 1` iff row i is assigned to column j. Then the optimal assignment has cost\n\n.. math:: \\min \\sum_i \\sum_j C_{i,j} X_{i,j}\n\nwhere, in the case where the matrix X is square, each row is assigned to exactly one column, and each column to exactly one row.\n\nThis function can also solve a generalization of the classic assignment problem where the cost matrix is rectangular. If it has more rows than columns, then not every row needs to be assigned to a column, and vice versa.\n\nParameters ---------- cost_matrix : array The cost matrix of the bipartite graph.\n\nmaximize : bool (default: False) Calculates a maximum weight matching if true.\n##### Returns\n* **row_ind, col_ind **: array\n    An array of row indices and one of corresponding column indices giving\n    the optimal assignment. The cost of the assignment can be computed\n    as ``cost_matrix[row_ind, col_ind].sum()``. The row indices will be\n    sorted; in the case of a square cost matrix they will be equal to\n    ``numpy.arange(cost_matrix.shape[0])``.\n\n* **.. versionadded**: \n\n* **1. https**: //en.wikipedia.org/wiki/Assignment_problem\n\n* **2. DF Crouse. On implementing 2D rectangular assignment algorithms.\n   *IEEE Transactions on Aerospace and Electronic Systems*,\n   52(4)**: 1679-1696, August 2016, https\n\n"
}