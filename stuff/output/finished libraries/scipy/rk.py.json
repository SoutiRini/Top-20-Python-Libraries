{
    "source file": "rk.py",
    "line number": "14",
    "func name": "rk_step",
    "func arg": "(fun, t, y, f, h, A, B, C, K)",
    "comments": "Perform a single Runge-Kutta step.\n\nThis function computes a prediction of an explicit Runge-Kutta method and also estimates the error of a less accurate method.\n\nNotation for Butcher tableau is as in [1]_.\n\nParameters ---------- fun : callable Right-hand side of the system. t : float Current time. y : ndarray, shape (n,) Current state. f : ndarray, shape (n,) Current value of the derivative, i.e., ``fun(x, y)``. h : float Step to use. A : ndarray, shape (n_stages, n_stages) Coefficients for combining previous RK stages to compute the next stage. For explicit methods the coefficients at and above the main diagonal are zeros. B : ndarray, shape (n_stages,) Coefficients for combining RK stages for computing the final prediction. C : ndarray, shape (n_stages,) Coefficients for incrementing time for consecutive RK stages. The value for the first stage is always zero. K : ndarray, shape (n_stages + 1, n) Storage array for putting RK stages here. Stages are stored in rows. The last row is a linear combination of the previous rows with coefficients\n##### Returns\n* **y_new **: ndarray, shape (n,)\n    Solution at t + h computed with a higher accuracy.\n\n* **f_new **: ndarray, shape (n,)\n    Derivative ``fun(t + h, y_new)``.\n\n* **.. [1] E. Hairer, S. P. Norsett G. Wanner, \"Solving Ordinary Differential\n       Equations I**: Nonstiff Problems\", Sec. II.4.\n\n"
}