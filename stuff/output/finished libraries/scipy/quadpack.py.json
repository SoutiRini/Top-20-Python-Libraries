{
    "source file": "quadpack.py",
    "line number": "694",
    "func name": "nquad",
    "func arg": "(func, ranges, args, opts, full_output)",
    "comments": "Integration over multiple variables.\n\nWraps `quad` to enable integration over multiple variables. Various options allow improved integration of discontinuous functions, as well as the use of weighted integration, and generally finer control of the integration process.\n\nParameters ---------- func : {callable, scipy.LowLevelCallable} The function to be integrated. Has arguments of ``x0, ... xn``, ``t0, ... tm``, where integration is carried out over ``x0, ... xn``, which must be floats.\n\nWhere ```t0, ... tm``` are extra arguments passed in args. Function signature should be ``func(x0, x1, ..., xn, t0, t1, ..., tm)``. Integration is carried out in order.\n\nThat is, integration over ``x0`` is the innermost integral, and ``xn`` is the outermost.\n\nIf the user desires improved integration performance, then `f` may be a `scipy.LowLevelCallable` with one of the signatures::\n\ndouble func(int n, double *xx) double func(int n, double *xx, void *user_data)\n\nwhere ``n`` is the number of variables and args.\n\nThe ``xx`` array contains the coordinates and extra arguments. ``user_data`` is the data contained in the `scipy.LowLevelCallable`. ranges : iterable object Each element of ranges may be either a sequence\n\nof 2 numbers, or else a callable that returns such a sequence. ``ranges[0]`` corresponds to integration over x0, and so on. If an element of ranges is a callable, then it will be called with all of the integration arguments available, as well as any parametric arguments. e.g., if ``func = f(x0, x1, x2, t0, t1)``, then ``ranges[0]`` may be defined as either ``(a, b)`` or else as ``(a, b) = range0(x1, x2, t0, t1)``. args : iterable object, optional Additional arguments ``t0, ..., tn``, required by `func`, `ranges`, and ``opts``. opts : iterable object or dict, optional Options to be passed to `quad`. May be empty, a dict, or a sequence of dicts or functions that return a dict. If empty, the default options from scipy.integrate.quad are used. If a dict, the same options are used for all levels of integraion. If a sequence, then each element of the sequence corresponds to a particular integration. e.g., opts[0] corresponds to integration over x0, and so on. If a callable, the signature must be the same as for ``ranges``. The available options together with their default values are:\n\n- epsabs = 1.49e-08\n\n- epsrel = 1.49e-08\n\n- limit\n\n= 50\n\n- points = None\n\n- weight = None\n\n- wvar\n\n = None\n\n- wopts\n\n= None\n\nFor more information on these options, see `quad` and `quad_explain`.\n\nfull_output : bool, optional Partial implementation of ``full_output`` from scipy.integrate.quad. The number of integrand function evaluations ``neval`` can be obtained by setting ``full_output=True`` when calling nquad.\n##### Returns\n* **result **: float\n    The result of the integration.\n\n* **abserr **: float\n    The maximum of the estimates of the absolute error in the various\n    integration results.\n\n* **out_dict **: dict, optional\n    A dict containing additional information on the integration.\n\n* **quad **: 1-D numerical integration\n\n* **dblquad, tplquad **: double and triple integrals\n\n* **fixed_quad **: fixed-order Gaussian quadrature\n\n* **quadrature **: adaptive Gaussian quadrature\n\n* **>>> func = lambda x0,x1,x2,x3 **: x0**2 + x1*x2 - x3**3 + np.sin(x0) + (\n\n* **>>> def opts0(*args, **kwargs)**: \n\n* **...     return {'points'**: [0.2*args[2] + 0.5 + 0.25*args[0]]}\n\n* **(1.5267454070738633, 2.9437360001402324e-14, {'neval'**: 388962})\n\n* **>>> def func2(x0, x1, x2, x3, t0, t1)**: \n\n* **>>> def lim0(x1, x2, x3, t0, t1)**: \n\n* **>>> def lim1(x2, x3, t0, t1)**: \n\n* **>>> def lim2(x3, t0, t1)**: \n\n* **>>> def lim3(t0, t1)**: \n\n* **>>> def opts0(x1, x2, x3, t0, t1)**: \n\n* **...     return {'points' **: [t0 - t1*x1]}\n\n* **>>> def opts1(x2, x3, t0, t1)**: \n\n* **>>> def opts2(x3, t0, t1)**: \n\n* **>>> def opts3(t0, t1)**: \n\n"
}