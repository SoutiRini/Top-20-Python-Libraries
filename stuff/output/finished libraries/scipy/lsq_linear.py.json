{
    "source file": "lsq_linear.py",
    "line number": "34",
    "func name": "lsq_linear",
    "func arg": "(A, b, bounds, method, tol, lsq_solver, lsmr_tol, max_iter, verbose)",
    "comments": "Solve a linear least-squares problem with bounds on the variables.\n\nGiven a m-by-n design matrix A and a target vector b with m elements, `lsq_linear` solves the following optimization problem::\n\nminimize 0.5 * ||A x\n\n- b||**2 subject to lb <= x <= ub\n\nThis optimization problem is convex, hence a found minimum (if iterations have converged) is guaranteed to be global.\n\nParameters ---------- A : array_like, sparse matrix of LinearOperator, shape (m, n) Design matrix. Can be `scipy.sparse.linalg.LinearOperator`. b : array_like, shape (m,) Target vector. bounds : 2-tuple of array_like, optional Lower and upper bounds on independent variables. Defaults to no bounds. Each array must have shape (n,) or be a scalar, in the latter case a bound will be the same for all variables. Use ``np.inf`` with an appropriate sign to disable bounds on all or some variables. method : 'trf' or 'bvls', optional Method to perform minimization.\n\n* 'trf' : Trust Region Reflective algorithm adapted for a linear least-squares problem. This is an interior-point-like method and the required number of iterations is weakly correlated with the number of variables. * 'bvls' : Bounded-variable least-squares algorithm. This is an active set method, which requires the number of iterations comparable to the number of variables. Can't be used when `A` is sparse or LinearOperator.\n\nDefault is 'trf'. tol : float, optional Tolerance parameter. The algorithm terminates if a relative change of the cost function is less than `tol` on the last iteration. Additionally, the first-order optimality measure is considered:\n\n* ``method='trf'`` terminates if the uniform norm of the gradient, scaled to account for the presence of the bounds, is less than `tol`. * ``method='bvls'`` terminates if Karush-Kuhn-Tucker conditions are satisfied within `tol` tolerance.\n\nlsq_solver : {None, 'exact', 'lsmr'}, optional Method of solving unbounded least-squares problems throughout iterations:\n\n* 'exact' : Use dense QR or SVD decomposition approach. Can't be used when `A` is sparse or LinearOperator. * 'lsmr' : Use `scipy.sparse.linalg.lsmr` iterative procedure which requires only matrix-vector product evaluations. Can't be used with ``method='bvls'``.\n\nIf None (default), the solver is chosen based on type of `A`. lsmr_tol : None, float or 'auto', optional Tolerance parameters 'atol' and 'btol' for `scipy.sparse.linalg.lsmr` If None (default), it is set to ``1e-2 * tol``. If 'auto', the tolerance will be adjusted based on the optimality of the current iterate, which can speed up the optimization process, but is not always reliable. max_iter : None or int, optional Maximum number of iterations before termination. If None (default), it is set to 100 for ``method='trf'`` or to the number of variables for ``method='bvls'`` (not counting iterations for 'bvls' initialization). verbose : {0, 1, 2}, optional Level of algorithm's verbosity:\n\n* 0 : work silently (default). * 1 : display a termination report. * 2 : display progress during iterations.\n##### Returns\n* **OptimizeResult with the following fields defined**: \n\n* **x **: ndarray, shape (n,)\n    Solution found.\n\n* **cost **: float\n    Value of the cost function at the solution.\n\n* **fun **: ndarray, shape (m,)\n    Vector of residuals at the solution.\n\n* **optimality **: float\n    First-order optimality measure. The exact meaning depends on `method`,\n    refer to the description of `tol` parameter.\n\n* **active_mask **: ndarray of int, shape (n,)\n    Each component shows whether a corresponding constraint is active\n    (that is, whether a variable is at the bound)\n\n* **nit **: int\n    Number of iterations. Zero if the unconstrained solution is optimal.\n\n* **status **: int\n    Reason for algorithm termination\n\n* **message **: str\n    Verbal description of the termination reason.\n\n* **success **: bool\n    True if one of the convergence criteria is satisfied (`status` > 0).\n\n* **nnls **: Linear least squares with non-negativity constraint.\n\n* **least_squares **: Nonlinear least squares with bounds on the variables.\n\n* **.. [BVLS] P. B. Start and R. L. Parker, \"Bounded-Variable Least-Squares**: an Algorithm and Applications\", Computational Statistics, 10,\n          129-141, 1995.\n\n"
}