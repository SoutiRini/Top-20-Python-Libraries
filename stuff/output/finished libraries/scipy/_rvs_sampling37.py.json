{
    "source file": "_rvs_sampling37.py",
    "line number": "5",
    "func name": "rvs_ratio_uniforms",
    "func arg": "(pdf, umax, vmin, vmax, size, c, random_state)",
    "comments": "Generate random samples from a probability density function using the ratio-of-uniforms method.\n\nParameters ---------- pdf : callable A function with signature `pdf(x)` that is proportional to the probability density function of the distribution. umax : float The upper bound of the bounding rectangle in the u-direction. vmin : float The lower bound of the bounding rectangle in the v-direction. vmax : float The upper bound of the bounding rectangle in the v-direction. size : int or tuple of ints, optional Defining number of random variates (default is 1). c : float, optional. Shift parameter of ratio-of-uniforms method, see Notes. Default is 0. random_state : {None, int, `~np.random.RandomState`, `~np.random.Generator`}, optional If `random_state` is `None` the `~np.random.RandomState` singleton is used. If `random_state` is an int, a new ``RandomState`` instance is used, seeded with random_state. If `random_state` is already a ``RandomState`` or ``Generator`` instance, then that object is used. Default is None.\n##### Returns\n* **rvs **: ndarray\n    The random variates distributed according to the probability\n    distribution defined by the pdf.\n\n* **define the set ``A = {(u, v) **: 0 < u <= sqrt(pdf(v/u + c))}``.\n\n* **>>> f = lambda x**: np.exp(-x**2 / 2)\n\n* **distributed (normality is not rejected at 5% significance level)**: \n\n* **>>> rvs = stats.rvs_ratio_uniforms(lambda x**: np.exp(-x), umax=1,\n\n"
}