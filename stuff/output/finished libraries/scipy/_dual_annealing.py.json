{
    "source file": "_dual_annealing.py",
    "line number": "427",
    "func name": "dual_annealing",
    "func arg": "(func, bounds, args, maxiter, local_search_options, initial_temp, restart_temp_ratio, visit, accept, maxfun, seed, no_local_search, callback, x0)",
    "comments": "Find the global minimum of a function using Dual Annealing.\n\nParameters ---------- func : callable The objective function to be minimized. Must be in the form ``f(x, *args)``, where ``x`` is the argument in the form of a 1-D array and ``args`` is a\n\ntuple of any additional fixed parameters needed to completely specify the function. bounds : sequence, shape (n, 2) Bounds for variables.\n\n``(min, max)`` pairs for each element in ``x``, defining bounds for the objective function parameter. args : tuple, optional Any additional fixed parameters needed to completely specify the objective function. maxiter : int, optional The maximum number of global search iterations. Default value is 1000. local_search_options : dict, optional Extra keyword arguments to be passed to the local minimizer (`minimize`). Some important options could be: ``method`` for the minimizer method to use and ``args`` for objective function additional arguments. initial_temp : float, optional The initial temperature, use higher values to facilitates a wider search of the energy landscape, allowing dual_annealing to escape local minima that it is trapped in. Default value is 5230. Range is (0.01, 5.e4]. restart_temp_ratio : float, optional During the annealing process, temperature is decreasing, when it reaches ``initial_temp * restart_temp_ratio``, the reannealing process is triggered. Default value of the ratio is 2e-5. Range is (0, 1). visit : float, optional Parameter for visiting distribution. Default value is 2.62. Higher values give the visiting distribution a heavier tail, this makes the algorithm jump to a more distant region. The value range is (0, 3]. accept : float, optional Parameter for acceptance distribution. It is used to control the probability of acceptance. The lower the acceptance parameter, the smaller the probability of acceptance. Default value is -5.0 with a range (-1e4, -5]. maxfun : int, optional Soft limit for the number of objective function calls. If the algorithm is in the middle of a local search, this number will be exceeded, the algorithm will stop just after the local search is done. Default value is 1e7. seed : {int, `~numpy.random.RandomState`, `~numpy.random.Generator`}, optional If `seed` is not specified the `~numpy.random.RandomState` singleton is used. If `seed` is an int, a new ``RandomState`` instance is used, seeded with `seed`. If `seed` is already a ``RandomState`` or ``Generator`` instance, then that instance is used. Specify `seed` for repeatable minimizations. The random numbers generated with this seed only affect the visiting distribution function and new coordinates generation. no_local_search : bool, optional If `no_local_search` is set to True, a traditional Generalized Simulated Annealing will be performed with no local search strategy applied. callback : callable, optional A callback function with signature ``callback(x, f, context)``, which will be called for all minima found. ``x`` and ``f`` are the coordinates and function value of the latest minimum found, and ``context`` has value in [0, 1, 2], with the following meaning:\n\n- 0: minimum detected in the annealing process.\n\n- 1: detection occurred in the local search process.\n\n- 2: detection done in the dual annealing process.\n\nIf the callback implementation returns True, the algorithm will stop. x0 : ndarray, shape(n,), optional Coordinates of a single N-D starting point.\n##### Returns\n* **res **: OptimizeResult\n    The optimization result represented as a `OptimizeResult` object.\n    Important attributes are\n\n* **distribution, with its shape controlled by the parameter **: math\n\n* **.. math**: \n\n* **Where **: math\n\n* **to generate a trial jump distance **: math\n\n* ****: math\n\n* **function, the acceptance probability is computed as follows**: \n\n* **The artificial temperature **: math\n\n* **.. versionadded**: \n\n* **.. [5] Xiang Y, Gubian S, Suomela B, Hoeng J. Generalized\n    Simulated Annealing for Efficient Global Optimization**: the GenSA\n    Package for R. The R Journal, Volume 5/1 (2013).\n\n* **.. [6] Mullen, K. Continuous Global Optimization in R. Journal of\n    Statistical Software, 60(6), 1 - 45, (2014). DOI**: 10.18637/jss.v060.i06\n\n* **(https**: //en.wikipedia.org/wiki/Rastrigin_function)\n\n* **>>> func = lambda x**: np.sum(x*x - 10*np.cos(2*np.pi*x)) + 10*np.size(x)\n\n"
}