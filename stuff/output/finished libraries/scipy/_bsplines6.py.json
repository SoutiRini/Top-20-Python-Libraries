{
    "source file": "_bsplines6.py",
    "line number": "854",
    "func name": "make_lsq_spline",
    "func arg": "(x, y, t, k, w, axis, check_finite)",
    "comments": "Compute the (coefficients of) an LSQ B-spline.\n\nThe result is a linear combination\n\n.. math::\n\nS(x) = \\sum_j c_j B_j(x; t)\n\nof the B-spline basis elements, :math:`B_j(x; t)`, which minimizes\n\n.. math::\n\n\\sum_{j} \\left( w_j \\times (S(x_j)\n\n- y_j) \\right)^2\n\nParameters ---------- x : array_like, shape (m,) Abscissas. y : array_like, shape (m, ...) Ordinates. t : array_like, shape (n + k + 1,). Knots. Knots and data points must satisfy Schoenberg-Whitney conditions. k : int, optional B-spline degree. Default is cubic, k=3. w : array_like, shape (n,), optional Weights for spline fitting. Must be positive. If ``None``, then weights are all equal. Default is ``None``. axis : int, optional Interpolation axis. Default is zero. check_finite : bool, optional Whether to check that the input arrays contain only finite numbers. Disabling may give a performance gain, but may result in problems (crashes, non-termination) if the inputs do contain infinities or NaNs. Default is True.\n##### Returns\n* **b **: a BSpline object of the degree `k` with knots `t`.\n\n* **Generate some noisy data**: \n\n* **Here we make the knot vector (k+1)-regular by adding boundary knots**: \n\n* **set of data**: \n\n* **Plot both**: \n\n* ****NaN handling****: If the input arrays contain ``nan`` values, the result is\n\n* **``nan``. A workaround is to use zero weights for not-a-number data points**: \n\n* **BSpline **: base class representing the B-spline objects\n\n* **make_interp_spline **: a similar factory function for interpolating splines\n\n* **LSQUnivariateSpline **: a FITPACK-based spline fitting routine\n\n* **splrep **: a FITPACK-based fitting routine\n\n"
}