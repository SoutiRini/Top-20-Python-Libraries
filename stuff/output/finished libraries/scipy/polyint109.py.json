{
    "source file": "polyint109.py",
    "line number": "649",
    "func name": "barycentric_interpolate",
    "func arg": "(xi, yi, x, axis)",
    "comments": "Convenience function for polynomial interpolation.\n\nConstructs a polynomial that passes through a given set of points, then evaluates the polynomial. For reasons of numerical stability, this function does not compute the coefficients of the polynomial.\n\nThis function uses a \"barycentric interpolation\" method that treats the problem as a special case of rational function interpolation. This algorithm is quite stable, numerically, but even in a world of exact computation, unless the `x` coordinates are chosen very carefully\n\n- Chebyshev zeros (e.g., cos(i*pi/n)) are a good choice\n\n- polynomial interpolation itself is a very ill-conditioned process due to the Runge phenomenon.\n\nParameters ---------- xi : array_like 1-D array of x coordinates of the points the polynomial should pass through yi : array_like The y coordinates of the points the polynomial should pass through. x : scalar or array_like Points to evaluate the interpolator at. axis : int, optional Axis in the yi array corresponding to the x-coordinate values.\n##### Returns\n* **y **: scalar or array_like\n    Interpolated values. Shape is determined by replacing\n    the interpolation axis in the original array with the shape of x.\n\n* **BarycentricInterpolator **: Bary centric interpolator\n\n* **We can interpolate 2D observed data using barycentric interpolation**: \n\n"
}