{
    "source file": "ndgriddata107.py",
    "line number": "86",
    "func name": "griddata",
    "func arg": "(points, values, xi, method, fill_value, rescale)",
    "comments": "Interpolate unstructured D-D data.\n\nParameters ---------- points : 2-D ndarray of floats with shape (n, D), or length D tuple of 1-D ndarrays with shape (n,). Data point coordinates. values : ndarray of float or complex, shape (n,) Data values. xi : 2-D ndarray of floats with shape (m, D), or length D tuple of ndarrays broadcastable to the same shape. Points at which to interpolate data. method : {'linear', 'nearest', 'cubic'}, optional Method of interpolation. One of\n\n``nearest`` return the value at the data point closest to the point of interpolation. See `NearestNDInterpolator` for more details.\n\n``linear`` tessellate the input point set to N-D simplices, and interpolate linearly on each simplex. See `LinearNDInterpolator` for more details.\n\n``cubic`` (1-D) return the value determined from a cubic spline.\n\n``cubic`` (2-D) return the value determined from a piecewise cubic, continuously differentiable (C1), and approximately curvature-minimizing polynomial surface. See `CloughTocher2DInterpolator` for more details. fill_value : float, optional Value used to fill in for requested points outside of the convex hull of the input points. If not provided, then the default is ``nan``. This option has no effect for the 'nearest' method. rescale : bool, optional Rescale points to unit cube before performing interpolation. This is useful if some of the input dimensions have incommensurable units and differ by many orders of magnitude.\n\n.. versionadded:: 0.14.0\n##### Returns\n* **.. versionadded**: \n\n* **>>> def func(x, y)**: \n\n* **>>> grid_x, grid_y = np.mgrid[0**: 1\n\n* **but we only know its values at 1000 data points**: \n\n* **>>> values = func(points[**: ,0], points[\n\n* **interpolation methods**: \n\n* **cubic interpolant gives the best results**: \n\n* **>>> plt.plot(points[**: ,0], points[\n\n"
}