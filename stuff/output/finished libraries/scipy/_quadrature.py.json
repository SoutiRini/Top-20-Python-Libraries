{
    "source file": "_quadrature.py",
    "line number": "866",
    "func name": "newton_cotes",
    "func arg": "(rn, equal)",
    "comments": "Return weights and error coefficient for Newton-Cotes integration.\n\nSuppose we have (N+1) samples of f at the positions x_0, x_1, ..., x_N. Then an N-point Newton-Cotes formula for the integral between x_0 and x_N is:\n\n:math:`\\int_{x_0}^{x_N} f(x)dx = \\Delta x \\sum_{i=0}^{N} a_i f(x_i) + B_N (\\Delta x)^{N+2} f^{N+1} (\\xi)`\n\nwhere :math:`\\xi \\in [x_0,x_N]` and :math:`\\Delta x = \\frac{x_N-x_0}{N}` is the average samples spacing.\n\nIf the samples are equally-spaced and N is even, then the error term is :math:`B_N (\\Delta x)^{N+3} f^{N+2}(\\xi)`.\n\nParameters ---------- rn : int The integer order for equally-spaced data or the relative positions of the samples with the first sample at 0 and the last at N, where N+1 is the length of `rn`. N is the order of the Newton-Cotes integration. equal : int, optional Set to 1 to enforce equally spaced data.\n##### Returns\n* **an **: ndarray\n    1-D array of weights to apply to the function at the provided sample\n    positions.\n\n* **B **: float\n    Error coefficient.\n\n* **Compute the integral of sin(x) in [0, **: math\n\n* **>>> def f(x)**: \n\n* **>>> for N in [2, 4, 6, 8, 10]**: \n\n* **...     print('{**: 2d}  {\n\n"
}