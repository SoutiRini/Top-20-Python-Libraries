{
    "source file": "_upfirdn44.py",
    "line number": "107",
    "func name": "upfirdn",
    "func arg": "(h, x, up, down, axis, mode, cval)",
    "comments": "Upsample, FIR filter, and downsample.\n\nParameters ---------- h : array_like 1-D FIR (finite-impulse response) filter coefficients. x : array_like Input signal array. up : int, optional Upsampling rate. Default is 1. down : int, optional Downsampling rate. Default is 1. axis : int, optional The axis of the input data array along which to apply the linear filter. The filter is applied to each subarray along this axis. Default is -1. mode : str, optional The signal extension mode to use. The set ``{\"constant\", \"symmetric\", \"reflect\", \"edge\", \"wrap\"}`` correspond to modes provided by `numpy.pad`. ``\"smooth\"`` implements a smooth extension by extending based on the slope of the last 2 points at each end of the array. ``\"antireflect\"`` and ``\"antisymmetric\"`` are anti-symmetric versions of ``\"reflect\"`` and ``\"symmetric\"``. The mode `\"line\"` extends the signal based on a linear trend defined by the first and last points along the ``axis``.\n\n.. versionadded:: 1.4.0 cval : float, optional The constant value to use when ``mode == \"constant\"``.\n\n.. versionadded:: 1.4.0\n##### Returns\n* **y **: ndarray\n    The output signal array. Dimensions will be the same as `x` except\n    for along `axis`, which will change size according to the `h`,\n    `up`,  and `down` parameters.\n\n* **.. versionadded**: \n\n* **Simple operations**: \n\n* **Apply a single filter to multiple signals**: \n\n* **Apply along the last dimension of ``x``**: \n\n* **Apply along the 0th dimension of ``x``**: \n\n"
}