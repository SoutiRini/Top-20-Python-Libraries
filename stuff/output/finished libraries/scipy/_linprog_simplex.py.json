{
    "source file": "_linprog_simplex.py",
    "line number": "438",
    "func name": "_linprog_simplex",
    "func arg": "(c, c0, A, b, callback, postsolve_args, maxiter, tol, disp, bland, **unknown_options)",
    "comments": "Minimize a linear objective function subject to linear equality and non-negativity constraints using the two phase simplex method. Linear programming is intended to solve problems of the following form\n\nMinimize::\n\nc @ x\n\nSubject to::\n\nA @ x == b x >= 0\n\nParameters ---------- c : 1-D array Coefficients of the linear objective function to be minimized. c0 : float Constant term in objective function due to fixed (and eliminated) variables. (Purely for display.) A : 2-D array 2-D array such that ``A @ x``, gives the values of the equality constraints at ``x``. b : 1-D array 1-D array of values representing the right hand side of each equality constraint (row) in ``A``. callback : callable, optional If a callback function is provided, it will be called within each iteration of the algorithm. The callback function must accept a single `scipy.optimize.OptimizeResult` consisting of the following fields:\n\nx : 1-D array Current solution vector fun : float Current value of the objective function success : bool True when an algorithm has completed successfully. slack : 1-D array The values of the slack variables. Each slack variable corresponds to an inequality constraint. If the slack is zero, the corresponding constraint is active. con : 1-D array The (nominally zero) residuals of the equality constraints, that is, ``b\n\n- A_eq @ x`` phase : int The phase of the algorithm being executed. status : int An integer representing the status of the optimization::\n\n0 : Algorithm proceeding nominally 1 : Iteration limit reached 2 : Problem appears to be infeasible 3 : Problem appears to be unbounded 4 : Serious numerical difficulties encountered nit : int The number of iterations performed. message : str A string descriptor of the exit status of the optimization. postsolve_args : tuple Data needed by _postsolve to convert the solution to the standard-form problem into the solution to the original problem.\n\nOptions ------- maxiter : int The maximum number of iterations to perform. disp : bool If True, print exit status message to sys.stdout tol : float The tolerance which determines when a solution is \"close enough\" to zero in Phase 1 to be considered a basic feasible solution or close enough to positive to serve as an optimal solution. bland : bool If True, use Bland's anti-cycling rule [3]_ to choose pivots to prevent cycling. If False, choose pivots which should lead to a converged solution more quickly. The latter method is subject to cycling (non-convergence) in rare instances. unknown_options : dict Optional arguments not used by this particular solver. If `unknown_options` is non-empty a warning is issued listing all unused options.\n##### Returns\n* **x **: 1-D array\n    Solution vector.\n\n* **status **: int\n    An integer representing the exit status of the optimization\n\n* **message **: str\n    A string descriptor of the exit status of the optimization.\n\n* **iteration **: int\n    The number of iterations taken to solve the problem.\n\n* **.. [3] Bland, Robert G. New finite pivoting rules for the simplex method.\n       Mathematics of Operations Research (2), 1977**: pp. 103-107.\n\n* **problem in standard form**: \n\n* **Minimize**: \n\n* **Subject to**: \n\n* **Whereas the top level ``linprog`` module expects a problem of form**: \n\n"
}