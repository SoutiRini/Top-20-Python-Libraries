{
    "source file": "_linprog_ip.py",
    "line number": "820",
    "func name": "_linprog_ip",
    "func arg": "(c, c0, A, b, callback, postsolve_args, maxiter, tol, disp, alpha0, beta, sparse, lstsq, sym_pos, cholesky, pc, ip, permc_spec, **unknown_options)",
    "comments": "Minimize a linear objective function subject to linear equality and non-negativity constraints using the interior point method of [4]_. Linear programming is intended to solve problems of the following form\n\nMinimize::\n\nc @ x\n\nSubject to::\n\nA @ x == b x >= 0\n\nParameters ---------- c : 1-D array Coefficients of the linear objective function to be minimized. c0 : float Constant term in objective function due to fixed (and eliminated) variables. (Purely for display.) A : 2-D array 2-D array such that ``A @ x``, gives the values of the equality constraints at ``x``. b : 1-D array 1-D array of values representing the right hand side of each equality constraint (row) in ``A``. callback : callable, optional Callback function to be executed once per iteration. postsolve_args : tuple Data needed by _postsolve to convert the solution to the standard-form problem into the solution to the original problem.\n\nOptions ------- maxiter : int (default = 1000) The maximum number of iterations of the algorithm. tol : float (default = 1e-8) Termination tolerance to be used for all termination criteria; see [4]_ Section 4.5. disp : bool (default = False) Set to ``True`` if indicators of optimization status are to be printed to the console each iteration. alpha0 : float (default = 0.99995) The maximal step size for Mehrota's predictor-corrector search direction; see :math:`\\beta_{3}` of [4]_ Table 8.1. beta : float (default = 0.1) The desired reduction of the path parameter :math:`\\mu` (see [6]_) when Mehrota's predictor-corrector is not in use (uncommon). sparse : bool (default = False) Set to ``True`` if the problem is to be treated as sparse after presolve. If either ``A_eq`` or ``A_ub`` is a sparse matrix, this option will automatically be set ``True``, and the problem will be treated as sparse even during presolve. If your constraint matrices contain mostly zeros and the problem is not very small (less than about 100 constraints or variables), consider setting ``True`` or providing ``A_eq`` and ``A_ub`` as sparse matrices. lstsq : bool (default = False) Set to ``True`` if the problem is expected to be very poorly conditioned. This should always be left ``False`` unless severe numerical difficulties are encountered. Leave this at the default unless you receive a warning message suggesting otherwise. sym_pos : bool (default = True) Leave ``True`` if the problem is expected to yield a well conditioned symmetric positive definite normal equation matrix (almost always). Leave this at the default unless you receive a warning message suggesting otherwise. cholesky : bool (default = True) Set to ``True`` if the normal equations are to be solved by explicit Cholesky decomposition followed by explicit forward/backward substitution. This is typically faster for problems that are numerically well-behaved. pc : bool (default = True) Leave ``True`` if the predictor-corrector method of Mehrota is to be used. This is almost always (if not always) beneficial. ip : bool (default = False) Set to ``True`` if the improved initial point suggestion due to [4]_ Section 4.3 is desired. Whether this is beneficial or not depends on the problem. permc_spec : str (default = 'MMD_AT_PLUS_A') (Has effect only with ``sparse = True``, ``lstsq = False``, ``sym_pos = True``, and no SuiteSparse.) A matrix is factorized in each iteration of the algorithm. This option specifies how to permute the columns of the matrix for sparsity preservation. Acceptable values are:\n\n- ``NATURAL``: natural ordering.\n\n- ``MMD_ATA``: minimum degree ordering on the structure of A^T A.\n\n- ``MMD_AT_PLUS_A``: minimum degree ordering on the structure of A^T+A.\n\n- ``COLAMD``: approximate minimum degree column ordering.\n\nThis option can impact the convergence of the interior point algorithm; test different values to determine which performs best for your problem. For more information, refer to ``scipy.sparse.linalg.splu``. unknown_options : dict Optional arguments not used by this particular solver. If `unknown_options` is non-empty a warning is issued listing all unused options.\n##### Returns\n* **x **: 1-D array\n    Solution vector.\n\n* **status **: int\n    An integer representing the exit status of the optimization\n\n* **message **: str\n    A string descriptor of the exit status of the optimization.\n\n* **iteration **: int\n    The number of iterations taken to solve the problem.\n\n* **For dense problems, solvers are tried in the following order**: \n\n* **For sparse problems**: \n\n* **problem in standard form**: \n\n* **Minimize**: \n\n* **Subject to**: \n\n* **Whereas the top level ``linprog`` module expects a problem of form**: \n\n* **.. [4] Andersen, Erling D., and Knud D. Andersen. \"The MOSEK interior point\n       optimizer for linear programming**: an implementation of the\n       homogeneous algorithm.\" High performance optimization. Springer US,\n       2000. 197-232.\n\n* **.. [6] Freund, Robert M. \"Primal-Dual Interior-Point Methods for Linear\n       Programming based on Newton's Method.\" Unpublished Course Notes,\n       March 2004. Available 2/25/2017 at\n       https**: //ocw.mit.edu/courses/sloan-school-of-management/15-084j-nonlinear-programming-spring-2004/lecture-notes/lec14_int_pt_mthd.pdf\n\n* **.. [8] Andersen, Erling D., and Knud D. Andersen. \"Presolving in linear\n       programming.\" Mathematical Programming 71.2 (1995)**: 221-245.\n\n* **.. [9] Bertsimas, Dimitris, and J. Tsitsiklis. \"Introduction to linear\n       programming.\" Athena Scientific 1 (1997)**: 997.\n\n"
}