{
    "source file": "minres100.py",
    "line number": "9",
    "func name": "minres",
    "func arg": "(A, b, x0, shift, tol, maxiter, M, callback, show, check)",
    "comments": "Use MINimum RESidual iteration to solve Ax=b\n\nMINRES minimizes norm(A*x\n\n- b) for a real symmetric matrix A.\n\nUnlike the Conjugate Gradient method, A can be indefinite or singular.\n\nIf shift != 0 then the method solves (A\n\n- shift*I)x = b\n\nParameters ---------- A : {sparse matrix, dense matrix, LinearOperator} The real symmetric N-by-N matrix of the linear system Alternatively, ``A`` can be a linear operator which can produce ``Ax`` using, e.g., ``scipy.sparse.linalg.LinearOperator``. b : {array, matrix} Right hand side of the linear system. Has shape (N,) or (N,1).\n##### Returns\n* **x **: {array, matrix}\n    The converged solution.\n\n* **info **: integer\n    Provides convergence information\n\n* **x0  **: {array, matrix}\n    Starting guess for the solution.\n\n* **tol **: float\n    Tolerance to achieve. The algorithm terminates when the relative\n    residual is below `tol`.\n\n* **maxiter **: integer\n    Maximum number of iterations.  Iteration will stop after maxiter\n    steps even if the specified tolerance has not been achieved.\n\n* **M **: {sparse matrix, dense matrix, LinearOperator}\n    Preconditioner for A.  The preconditioner should approximate the\n    inverse of A.  Effective preconditioning dramatically improves the\n    rate of convergence, which implies that fewer iterations are needed\n    to reach a given error tolerance.\n\n* **callback **: function\n    User-supplied function to call after each iteration.  It is called\n    as callback(xk), where xk is the current solution vector.\n\n* **Solution of sparse indefinite systems of linear equations,\n    C. C. Paige and M. A. Saunders (1975),\n    SIAM J. Numer. Anal. 12(4), pp. 617-629.\n    https**: //web.stanford.edu/group/SOL/software/minres/\n\n* **This file is a translation of the following MATLAB implementation**: https\n\n"
}