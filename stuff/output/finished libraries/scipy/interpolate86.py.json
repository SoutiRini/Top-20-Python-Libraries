{
    "source file": "interpolate86.py",
    "line number": "2549",
    "func name": "interpn",
    "func arg": "(points, values, xi, method, bounds_error, fill_value)",
    "comments": "Multidimensional interpolation on regular grids.\n\nParameters ---------- points : tuple of ndarray of float, with shapes (m1, ), ..., (mn, ) The points defining the regular grid in n dimensions.\n\nvalues : array_like, shape (m1, ..., mn, ...) The data on the regular grid in n dimensions.\n\nxi : ndarray of shape (..., ndim) The coordinates to sample the gridded data at\n\nmethod : str, optional The method of interpolation to perform. Supported are \"linear\" and \"nearest\", and \"splinef2d\". \"splinef2d\" is only supported for 2-dimensional data.\n\nbounds_error : bool, optional If True, when interpolated values are requested outside of the domain of the input data, a ValueError is raised. If False, then `fill_value` is used.\n\nfill_value : number, optional If provided, the value to use for points outside of the interpolation domain. If None, values outside the domain are extrapolated.\n\nExtrapolation is not supported by method \"splinef2d\".\n##### Returns\n* **values_x **: ndarray, shape xi.shape[\n\n* **.. versionadded**: \n\n* **Evaluate a simple example function on the points of a regular 3-D grid**: \n\n* **>>> def value_func_3d(x, y, z)**: \n\n* **NearestNDInterpolator **: Nearest neighbor interpolation on unstructured\n                        data in N dimensions\n\n* **LinearNDInterpolator **: Piecewise linear interpolant on unstructured data\n                       in N dimensions\n\n* **RegularGridInterpolator **: Linear and nearest-neighbor Interpolation on a\n                          regular grid in arbitrary dimensions\n\n* **RectBivariateSpline **: Bivariate spline approximation over a rectangular mesh\n\n"
}