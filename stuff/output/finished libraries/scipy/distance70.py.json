{
    "source file": "distance70.py",
    "line number": "2402",
    "func name": "cdist",
    "func arg": "(XA, XB, metric, **kwargs)",
    "comments": "Compute distance between each pair of the two collections of inputs.\n\nSee Notes for common calling conventions.\n\nParameters ---------- XA : ndarray An :math:`m_A` by :math:`n` array of :math:`m_A` original observations in an :math:`n`-dimensional space. Inputs are converted to float type. XB : ndarray An :math:`m_B` by :math:`n` array of :math:`m_B` original observations in an :math:`n`-dimensional space. Inputs are converted to float type. metric : str or callable, optional The distance metric to use.\n\nIf a string, the distance function can be 'braycurtis', 'canberra', 'chebyshev', 'cityblock', 'correlation', 'cosine', 'dice', 'euclidean', 'hamming', 'jaccard', 'jensenshannon', 'kulsinski', 'mahalanobis', 'matching', 'minkowski', 'rogerstanimoto', 'russellrao', 'seuclidean', 'sokalmichener', 'sokalsneath', 'sqeuclidean', 'wminkowski', 'yule'. *args : tuple. Deprecated. Additional arguments should be passed as keyword arguments **kwargs : dict, optional Extra arguments to `metric`: refer to each metric documentation for a list of all possible arguments.\n\nSome possible arguments:\n\np : scalar The p-norm to apply for Minkowski, weighted and unweighted. Default: 2.\n\nw : ndarray The weight vector for metrics that support weights (e.g., Minkowski).\n\nV : ndarray The variance vector for standardized Euclidean. Default: var(vstack([XA, XB]), axis=0, ddof=1)\n\nVI : ndarray The inverse of the covariance matrix for Mahalanobis. Default: inv(cov(vstack([XA, XB].T))).T\n\nout : ndarray The output array If not None, the distance matrix Y is stored in this array. Note: metric independent, it will become a regular keyword arg in a future scipy version\n##### Returns\n* **Y **: ndarray\n    A\n\n"
}