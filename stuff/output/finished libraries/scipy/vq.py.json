{
    "source file": "vq.py",
    "line number": "588",
    "func name": "kmeans2",
    "func arg": "(data, k, iter, thresh, minit, missing, check_finite)",
    "comments": "Classify a set of observations into k clusters using the k-means algorithm.\n\nThe algorithm attempts to minimize the Euclidean distance between observations and centroids. Several initialization methods are included.\n\nParameters ---------- data : ndarray A 'M' by 'N' array of 'M' observations in 'N' dimensions or a length 'M' array of 'M' 1-D observations. k : int or ndarray The number of clusters to form as well as the number of centroids to generate. If `minit` initialization string is 'matrix', or if a ndarray is given instead, it is interpreted as initial cluster to use instead. iter : int, optional Number of iterations of the k-means algorithm to run. Note that this differs in meaning from the iters parameter to the kmeans function. thresh : float, optional (not used yet) minit : str, optional Method for initialization. Available methods are 'random', 'points', '++' and 'matrix':\n\n'random': generate k centroids from a Gaussian with mean and variance estimated from the data.\n\n'points': choose k observations (rows) at random from data for the initial centroids.\n\n'++': choose k observations accordingly to the kmeans++ method (careful seeding)\n\n'matrix': interpret the k parameter as a k by M (or length k array for 1-D data) array of initial centroids. missing : str, optional Method to deal with empty clusters. Available methods are 'warn' and 'raise':\n\n'warn': give a warning and continue.\n\n'raise': raise an ClusterError and terminate the algorithm. check_finite : bool, optional Whether to check that the input matrices contain only finite numbers. Disabling may give a performance gain, but may result in problems (crashes, non-termination) if the inputs do contain infinities or NaNs. Default: True\n##### Returns\n* **centroid **: ndarray\n    A 'k' by 'N' array of centroids found at the last iteration of\n    k-means.\n\n* **label **: ndarray\n    label[i] is the code or index of the centroid the\n    ith observation is closest to.\n\n* **.. [1] D. Arthur and S. Vassilvitskii, \"k-means++**: the advantages of\n   careful seeding\", Proceedings of the Eighteenth Annual ACM-SIAM Symposium\n   on Discrete Algorithms, 2007.\n\n* **>>> plt.plot(w0[**: , 0], w0[\n\n* **>>> plt.plot(w1[**: , 0], w1[\n\n* **>>> plt.plot(w2[**: , 0], w2[\n\n* **>>> plt.plot(centroid[**: , 0], centroid[\n\n"
}