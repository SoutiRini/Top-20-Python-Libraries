{
    "source file": "arraypad.py",
    "line number": "533",
    "func name": "pad",
    "func arg": "(array, pad_width, mode, **kwargs)",
    "comments": "Pad an array.\n\nParameters ---------- array : array_like of rank N The array to pad. pad_width : {sequence, array_like, int} Number of values padded to the edges of each axis. ((before_1, after_1), ... (before_N, after_N)) unique pad widths for each axis. ((before, after),) yields same before and after pad for each axis. (pad,) or int is a shortcut for before = after = pad width for all axes. mode : str or function, optional One of the following string values or a user supplied function.\n\n'constant' (default) Pads with a constant value. 'edge' Pads with the edge values of array. 'linear_ramp' Pads with the linear ramp between end_value and the array edge value. 'maximum' Pads with the maximum value of all or part of the vector along each axis. 'mean' Pads with the mean value of all or part of the vector along each axis. 'median' Pads with the median value of all or part of the vector along each axis. 'minimum' Pads with the minimum value of all or part of the vector along each axis. 'reflect' Pads with the reflection of the vector mirrored on the first and last values of the vector along each axis. 'symmetric' Pads with the reflection of the vector mirrored along the edge of the array. 'wrap' Pads with the wrap of the vector along the axis. The first values are used to pad the end and the end values are used to pad the beginning. 'empty' Pads with undefined values.\n\n.. versionadded:: 1.17\n\n<function> Padding function, see Notes. stat_length : sequence or int, optional Used in 'maximum', 'mean', 'median', and 'minimum'.\n\nNumber of values at edge of each axis used to calculate the statistic value.\n\n((before_1, after_1), ... (before_N, after_N)) unique statistic lengths for each axis.\n\n((before, after),) yields same before and after statistic lengths for each axis.\n\n(stat_length,) or int is a shortcut for before = after = statistic length for all axes.\n\nDefault is ``None``, to use the entire axis. constant_values : sequence or scalar, optional Used in 'constant'.\n\nThe values to set the padded values for each axis.\n\n``((before_1, after_1), ... (before_N, after_N))`` unique pad constants for each axis.\n\n``((before, after),)`` yields same before and after constants for each axis.\n\n``(constant,)`` or ``constant`` is a shortcut for ``before = after = constant`` for all axes.\n\nDefault is 0. end_values : sequence or scalar, optional Used in 'linear_ramp'.\n\nThe values used for the ending value of the linear_ramp and that will form the edge of the padded array.\n\n``((before_1, after_1), ... (before_N, after_N))`` unique end values for each axis.\n\n``((before, after),)`` yields same before and after end values for each axis.\n\n``(constant,)`` or ``constant`` is a shortcut for ``before = after = constant`` for all axes.\n\nDefault is 0. reflect_type : {'even', 'odd'}, optional Used in 'reflect', and 'symmetric'.\n\nThe 'even' style is the default with an unaltered reflection around the edge value.\n\nFor the 'odd' style, the extended part of the array is created by subtracting the reflected values from two times the edge value.\n##### Returns\n* **pad **: ndarray\n    Padded array of rank equal to `array` with shape increased\n    according to `pad_width`.\n\n* **.. versionadded**: \n\n* **has the following signature**: \n\n* **where\n    vector **: ndarray\n        A rank 1 array already padded with zeros.  Padded values are\n        vector[\n\n* **>>> def pad_with(vector, pad_width, iaxis, kwargs)**: \n\n* **...     vector[**: pad_width[0]] = pad_value\n\n* **...     vector[-pad_width[1]**: ] = pad_value\n\n"
}