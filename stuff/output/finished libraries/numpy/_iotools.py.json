{
    "source file": "_iotools.py",
    "line number": "822",
    "func name": "easy_dtype",
    "func arg": "(ndtype, names, defaultfmt, **validationargs)",
    "comments": "Convenience function to create a `np.dtype` object.\n\nThe function processes the input `dtype` and matches it with the given names.\n\nParameters ---------- ndtype : var Definition of the dtype. Can be any string or dictionary recognized by the `np.dtype` function, or a sequence of types. names : str or sequence, optional Sequence of strings to use as field names for a structured dtype. For convenience, `names` can be a string of a comma-separated list of names. defaultfmt : str, optional Format string used to define missing names, such as ``\"f%i\"`` (default) or ``\"fields_%02i\"``. validationargs : optional A series of optional arguments used to initialize a `NameValidator`.\n\nExamples -------- >>> np.lib._iotools.easy_dtype(float) dtype('float64') >>> np.lib._iotools.easy_dtype(\"i4, f8\") dtype([('f0', '<i4'), ('f1', '<f8')]) >>> np.lib._iotools.easy_dtype(\"i4, f8\", defaultfmt=\"field_%03i\") dtype([('field_000', '<i4'), ('field_001', '<f8')])\n\n>>> np.lib._iotools.easy_dtype((int, float, float), names=\"a,b,c\") dtype([('a', '<i8'), ('b', '<f8'), ('c', '<f8')]) >>> np.lib._iotools.easy_dtype(float, names=\"a,b,c\") dtype([('a', '<f8'), ('b', '<f8'), ('c', '<f8')])\n"
}