{
    "source file": "audio_microfrontend_op.py",
    "line number": "34",
    "func name": "audio_microfrontend",
    "func arg": "(audio, sample_rate, window_size, window_step, num_channels, upper_band_limit, lower_band_limit, smoothing_bits, even_smoothing, odd_smoothing, min_signal_remaining, enable_pcan, pcan_strength, pcan_offset, gain_bits, enable_log, scale_shift, left_context, right_context, frame_stride, zero_padding, out_scale, out_type)",
    "comments": "Audio Microfrontend Op.\n\nThis Op converts a sequence of audio data into one or more feature vectors containing filterbanks of the input. The conversion process uses a lightweight library to perform:\n\n1. A slicing window function 2. Short-time FFTs 3. Filterbank calculations 4. Noise reduction 5. PCAN Auto Gain Control 6. Logarithmic scaling\n##### Args\n* **audio**: 1D Tensor, int16 audio data in temporal ordering.\n\n* **sample_rate**: Integer, the sample rate of the audio in Hz.\n\n* **window_size**: Integer, length of desired time frames in ms.\n\n* **window_step**: Integer, length of step size for the next frame in ms.\n\n* **num_channels**: Integer, the number of filterbank channels to use.\n\n* **upper_band_limit**: Float, the highest frequency included in the filterbanks.\n\n* **lower_band_limit**: Float, the lowest frequency included in the filterbanks.\n\n* **smoothing_bits**: Int, scale up signal by 2^(smoothing_bits) before reduction.\n\n* **even_smoothing**: Float, smoothing coefficient for even-numbered channels.\n\n* **odd_smoothing**: Float, smoothing coefficient for odd-numbered channels.\n\n* **min_signal_remaining**: Float, fraction of signal to preserve in smoothing.\n\n* **enable_pcan**: Bool, enable PCAN auto gain control.\n\n* **pcan_strength**: Float, gain normalization exponent.\n\n* **pcan_offset**: Float, positive value added in the normalization denominator.\n\n* **gain_bits**: Int, number of fractional bits in the gain.\n\n* **enable_log**: Bool, enable logarithmic scaling of filterbanks.\n\n* **scale_shift**: Integer, scale filterbanks by 2^(scale_shift).\n\n* **left_context**: Integer, number of preceding frames to attach to each frame.\n\n* **right_context**: Integer, number of preceding frames to attach to each frame.\n\n* **frame_stride**: Integer, M frames to skip over, where output[n] = frame[n*M].\n\n* **zero_padding**: Bool, if left/right context is out-of-bounds, attach frame of\n  zeroes. Otherwise, frame[0] or frame[size-1] will be copied.\n\n* **out_scale**: Integer, divide all filterbanks by this number.\n\n* **out_type**: DType, type of the output Tensor, defaults to UINT16.\n\n##### Returns\n* **filterbanks**: 2D Tensor, each row is a time frame, each column is a channel.\n\n"
}