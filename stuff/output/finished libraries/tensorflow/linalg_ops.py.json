{
    "source file": "linalg_ops.py",
    "line number": "632",
    "func name": "norm",
    "func arg": "(tensor, ord, axis, keepdims, name, keep_dims)",
    "comments": "Computes the norm of vectors, matrices, and tensors.\n\nThis function can compute several different vector norms (the 1-norm, the Euclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0) and matrix norms (Frobenius, 1-norm, 2-norm and inf-norm).\n##### Args\n* **tensor**: `Tensor` of types `float32`, `float64`, `complex64`, `complex128`\n\n* **ord**: Order of the norm. Supported values are 'fro', 'euclidean',\n  `1`, `2`, `np.inf` and any positive real number yielding the corresponding\n  p-norm. Default is 'euclidean' which is equivalent to Frobenius norm if\n  `tensor` is a matrix and equivalent to 2-norm for vectors.\n  Some restrictions apply\n\n* **axis**: If `axis` is `None` (the default), the input is considered a vector\n  and a single vector norm is computed over the entire set of values in the\n  tensor, i.e. `norm(tensor, ord=ord)` is equivalent to\n  `norm(reshape(tensor, [-1]), ord=ord)`.\n  If `axis` is a Python integer, the input is considered a batch of vectors,\n  and `axis` determines the axis in `tensor` over which to compute vector\n  norms.\n  If `axis` is a 2-tuple of Python integers it is considered a batch of\n  matrices and `axis` determines the axes in `tensor` over which to compute\n  a matrix norm.\n  Negative indices are supported. Example\n\n* **keepdims**: If True, the axis indicated in `axis` are kept with size 1.\n  Otherwise, the dimensions in `axis` are removed from the output shape.\n\n* **name**: The name of the op.\n\n* **keep_dims**: Deprecated alias for `keepdims`.\n\n##### Returns\n* **output**: A `Tensor` of the same type as tensor, containing the vector or\n  matrix norms. If `keepdims` is True then the rank of output is equal to\n  the rank of `tensor`. Otherwise, if `axis` is none the output is a scalar,\n  if `axis` is an integer, the rank of `output` is one less than the rank\n  of `tensor`, if `axis` is a 2-tuple the rank of `output` is two less\n  than the rank of `tensor`.\n\n"
}