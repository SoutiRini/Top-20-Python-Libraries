{
    "source file": "snapshot.py",
    "line number": "258",
    "func name": "snapshot",
    "func arg": "(path, compression, reader_func, shard_func)",
    "comments": "API to persist the output of the input dataset.\n\nThe snapshot API allows users to transparently persist the output of their preprocessing pipeline to disk, and materialize the pre-processed data on a different training run.\n\nThis API enables repeated preprocessing steps to be consolidated, and allows re-use of already processed data, trading off disk storage and network bandwidth for freeing up more valuable CPU resources and accelerator compute time.\n\nhttps://github.com/tensorflow/community/blob/master/rfcs/20200107-tf-data-snapshot.md has detailed design documentation of this feature.\n\nUsers can specify various options to control the behavior of snapshot, including how snapshots are read from and written to by passing in user-defined functions to the `reader_func` and `shard_func` parameters.\n\n`shard_func` is a user specified function that maps input elements to snapshot shards.\n\nUsers may want to specify this function to control how snapshot files should be written to disk. Below is an example of how a potential shard_func could be written.\n\n```python dataset = ... dataset = dataset.enumerate() dataset = dataset.apply(tf.data.experimental.snapshot(\"/path/to/snapshot/dir\", shard_func=lambda x, y: x % NUM_SHARDS, ...)) dataset = dataset.map(lambda x, y: y) ```\n\n`reader_func` is a user specified function that accepts a single argument: (1) a Dataset of Datasets, each representing a \"split\" of elements of the original dataset. The cardinality of the input dataset matches the number of the shards specified in the `shard_func` (see above). The function should return a Dataset of elements of the original dataset.\n\nUsers may want specify this function to control how snapshot files should be read from disk, including the amount of shuffling and parallelism.\n\nHere is an example of a standard reader function a user can define. This function enables both dataset shuffling and parallel reading of datasets:\n\n```python def user_reader_func(datasets): # shuffle the datasets splits datasets = datasets.shuffle(NUM_CORES) # read datasets in parallel and interleave their elements return datasets.interleave(lambda x: x, num_parallel_calls=AUTOTUNE)\n\ndataset = dataset.apply(tf.data.experimental.snapshot(\"/path/to/snapshot/dir\", reader_func=user_reader_func)) ```\n\nBy default, snapshot parallelizes reads by the number of cores available on the system, but will not attempt to shuffle the data.\n##### Args\n* **path**: Required. A directory to use for storing / loading the snapshot to /\n  from.\n\n* **compression**: Optional. The type of compression to apply to the snapshot\n  written to disk. Supported options are `GZIP`, `SNAPPY`, `AUTO` or None.\n  Defaults to AUTO, which attempts to pick an appropriate compression\n  algorithm for the dataset.\n\n* **reader_func**: Optional. A function to control how to read data from snapshot\n  shards.\n\n* **shard_func**: Optional. A function to control how to shard data when writing a\n  snapshot.\n\n##### Returns\n"
}