{
    "source file": "random_seed1.py",
    "line number": "199",
    "func name": "set_seed",
    "func arg": "(seed)",
    "comments": "Sets the global random seed.\n\nOperations that rely on a random seed actually derive it from two seeds: the global and operation-level seeds. This sets the global seed.\n\nIts interactions with operation-level seeds is as follows:\n\n1. If neither the global seed nor the operation seed is set: A randomly picked seed is used for this op. 2. If the graph-level seed is set, but the operation seed is not: The system deterministically picks an operation seed in conjunction with the graph-level seed so that it gets a unique random sequence. Within the same version of tensorflow and user code, this sequence is deterministic. However across different versions, this sequence might change. If the code depends on particular seeds to work, specify both graph-level and operation-level seeds explicitly. 3. If the operation seed is set, but the global seed is not set: A default global seed and the specified operation seed are used to determine the random sequence. 4. If both the global and the operation seed are set: Both seeds are used in conjunction to determine the random sequence.\n\nTo illustrate the user-visible effects, consider these examples:\n\nIf neither the global seed nor the operation seed is set, we get different results for every call to the random op and every re-run of the program:\n\n```python print(tf.random.uniform([1]))\n\n# generates 'A1' print(tf.random.uniform([1]))\n\n# generates 'A2' ```\n\n(now close the program and run it again)\n\n```python print(tf.random.uniform([1]))\n\n# generates 'A3' print(tf.random.uniform([1]))\n\n# generates 'A4' ```\n\nIf the global seed is set but the operation seed is not set, we get different results for every call to the random op, but the same sequence for every re-run of the program:\n\n```python tf.random.set_seed(1234) print(tf.random.uniform([1]))\n\n# generates 'A1' print(tf.random.uniform([1]))\n\n# generates 'A2' ```\n\n(now close the program and run it again)\n\n```python tf.random.set_seed(1234) print(tf.random.uniform([1]))\n\n# generates 'A1' print(tf.random.uniform([1]))\n\n# generates 'A2' ```\n\nThe reason we get 'A2' instead 'A1' on the second call of `tf.random.uniform` above is because the second call uses a different operation seed.\n\nNote that `tf.function` acts like a re-run of a program in this case. When the global seed is set but operation seeds are not set, the sequence of random numbers are the same for each `tf.function`. For example:\n\n```python tf.random.set_seed(1234)\n\n@tf.function def f(): a = tf.random.uniform([1]) b = tf.random.uniform([1]) return a, b\n\n@tf.function def g(): a = tf.random.uniform([1]) b = tf.random.uniform([1]) return a, b\n\nprint(f())\n\n# prints '(A1, A2)' print(g())\n\n# prints '(A1, A2)' ```\n\nIf the operation seed is set, we get different results for every call to the random op, but the same sequence for every re-run of the program:\n\n```python print(tf.random.uniform([1], seed=1))\n\n# generates 'A1' print(tf.random.uniform([1], seed=1))\n\n# generates 'A2' ```\n\n(now close the program and run it again)\n\n```python print(tf.random.uniform([1], seed=1))\n\n# generates 'A1' print(tf.random.uniform([1], seed=1))\n\n# generates 'A2' ```\n\nThe reason we get 'A2' instead 'A1' on the second call of `tf.random.uniform` above is because the same `tf.random.uniform` kernel (i.e. internal representation) is used by TensorFlow for all calls of it with the same arguments, and the kernel maintains an internal counter which is incremented every time it is executed, generating different results.\n\nCalling `tf.random.set_seed` will reset any such counters:\n\n```python tf.random.set_seed(1234) print(tf.random.uniform([1], seed=1))\n\n# generates 'A1' print(tf.random.uniform([1], seed=1))\n\n# generates 'A2' tf.random.set_seed(1234) print(tf.random.uniform([1], seed=1))\n\n# generates 'A1' print(tf.random.uniform([1], seed=1))\n\n# generates 'A2' ```\n\nWhen multiple identical random ops are wrapped in a `tf.function`, their behaviors change because the ops no long share the same counter. For example:\n\n```python @tf.function def foo(): a = tf.random.uniform([1], seed=1) b = tf.random.uniform([1], seed=1) return a, b print(foo())\n\n# prints '(A1, A1)' print(foo())\n\n# prints '(A2, A2)'\n\n@tf.function def bar(): a = tf.random.uniform([1]) b = tf.random.uniform([1]) return a, b print(bar())\n\n# prints '(A1, A2)' print(bar())\n\n# prints '(A3, A4)' ```\n\nThe second call of `foo` returns '(A2, A2)' instead of '(A1, A1)' because `tf.random.uniform` maintains an internal counter. If you want `foo` to return '(A1, A1)' every time, use the stateless random ops such as `tf.random.stateless_uniform`. Also see `tf.random.experimental.Generator` for a new set of stateful random ops that use external variables to manage their states.\n##### Args\n* **seed**: integer.\n\n"
}