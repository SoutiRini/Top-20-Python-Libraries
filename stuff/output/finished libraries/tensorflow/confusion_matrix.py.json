{
    "source file": "confusion_matrix.py",
    "line number": "209",
    "func name": "confusion_matrix_v1",
    "func arg": "(labels, predictions, num_classes, dtype, name, weights)",
    "comments": "Computes the confusion matrix from predictions and labels.\n\nThe matrix columns represent the prediction labels and the rows represent the real labels. The confusion matrix is always a 2-D array of shape `[n, n]`, where `n` is the number of valid labels for a given classification task. Both prediction and labels must be 1-D arrays of the same shape in order for this function to work.\n\nIf `num_classes` is `None`, then `num_classes` will be set to one plus the maximum value in either predictions or labels. Class labels are expected to start at 0. For example, if `num_classes` is 3, then the possible labels would be `[0, 1, 2]`.\n\nIf `weights` is not `None`, then each prediction contributes its corresponding weight to the total value of the confusion matrix cell.\n\nFor example:\n\n```python tf.math.confusion_matrix([1, 2, 4], [2, 2, 4]) ==> [[0 0 0 0 0] [0 0 1 0 0] [0 0 1 0 0] [0 0 0 0 0] [0 0 0 0 1]] ```\n\nNote that the possible labels are assumed to be `[0, 1, 2, 3, 4]`, resulting in a 5x5 confusion matrix.\n##### Args\n* **labels**: 1-D `Tensor` of real labels for the classification task.\n\n* **predictions**: 1-D `Tensor` of predictions for a given classification.\n\n* **num_classes**: The possible number of labels the classification task can have.\n  If this value is not provided, it will be calculated using both\n  predictions and labels array.\n\n* **dtype**: Data type of the confusion matrix.\n\n* **name**: Scope name.\n\n* **weights**: An optional `Tensor` whose shape matches `predictions`.\n\n##### Returns\n"
}