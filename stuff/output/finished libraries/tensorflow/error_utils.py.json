{
    "source file": "error_utils.py",
    "line number": "34",
    "func name": "_stack_trace_inside_mapped_code",
    "func arg": "(tb, source_map, converter_filename)",
    "comments": "Summarizes inner traceback frames up to the call to a given function.\n\nThis functions locates the innermost (i.e. most recent) frame that corresponds to code that can be mapped by source_map originated from, and returns a translated stack trace ending at that frame. If no such frame is found, the entire stack trace is summarized.\n\nFor example, the following code:\n\ndef f(): for i in tf.range(1): z = y + i\n\n# z only defined here\n\nWould generate this traceback:\n\n<converted code> ag__.for_stmt(...) <for_stmt> return _known_len_tf_for_stmt(iter_, extra_test, body, init_state) <_known_len_tf_for_stmt> _disallow_undefs_into_loop(*init_state) <_disallow_undefs_into_loop> raise ...\n\nWhich is then processed into:\n\n<f> for i in tf.range(1): <for_stmt> return _known_len_tf_for_stmt(iter_, extra_test, body, init_state) <_known_len_tf_for_stmt> _disallow_undefs_into_loop(*init_state) <_disallow_undefs_into_loop> raise ...\n##### Args\n* **tb**: traceback.FrameSummary, The traceback corresponding to an error.\n  Typically, the output of traceback.Summary.extract(capture_locals=True).\n\n* **source_map**: Dict[LineLocation, OriginInfo], a source map as created by\n  origin_info.create_source_map.\n\n* **converter_filename**: str, the file path of the converted module. Call frames\n  corresponding to this module are elided and their preceding frames are\n  marked as allowlisted. Note that frames enclosing converted code are\n  dropped using a different mechanism.\n\n##### Returns\n"
}