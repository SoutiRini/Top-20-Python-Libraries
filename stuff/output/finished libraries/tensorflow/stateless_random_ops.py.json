{
    "source file": "stateless_random_ops.py",
    "line number": "625",
    "func name": "stateless_parameterized_truncated_normal",
    "func arg": "(shape, seed, means, stddevs, minvals, maxvals, name)",
    "comments": "Outputs random values from a truncated normal distribution.\n\nThe generated values follow a normal distribution with specified mean and standard deviation, except that values whose magnitude is more than 2 standard deviations from the mean are dropped and re-picked.\n\n Examples:\n\nSample from a Truncated normal, with deferring shape parameters that broadcast.\n\n>>> means = 0. >>> stddevs = tf.math.exp(tf.random.uniform(shape=[2, 3])) >>> minvals = [-1., -2., -1000.] >>> maxvals = [[10000.], [1.]] >>> y = tf.random.stateless_parameterized_truncated_normal( ...\n\n shape=[10, 2, 3], seed=[7, 17], ...\n\n means=means, stddevs=stddevs, minvals=minvals, maxvals=maxvals) >>> y.shape TensorShape([10, 2, 3])\n##### Args\n* **shape**: A 1-D integer `Tensor` or Python array. The shape of the output\n  tensor.\n\n* **seed**: A shape [2] Tensor, the seed to the random number generator. Must have\n  dtype `int32` or `int64`. (When using XLA, only `int32` is allowed.)\n\n* **means**: A `Tensor` or Python value of type `dtype`. The mean of the truncated\n  normal distribution. This must broadcast with `stddevs`, `minvals` and\n  `maxvals`, and the broadcasted shape must be dominated by `shape`.\n\n* **stddevs**: A `Tensor` or Python value of type `dtype`. The standard deviation\n  of the truncated normal distribution. This must broadcast with `means`,\n  `minvals` and `maxvals`, and the broadcasted shape must be dominated by\n  `shape`.\n\n* **minvals**: A `Tensor` or Python value of type `dtype`. The minimum value of\n  the truncated normal distribution. This must broadcast with `means`,\n  `stddevs` and `maxvals`, and the broadcasted shape must be dominated by\n  `shape`.\n\n* **maxvals**: A `Tensor` or Python value of type `dtype`. The maximum value of\n  the truncated normal distribution. This must broadcast with `means`,\n  `stddevs` and `minvals`, and the broadcasted shape must be dominated by\n  `shape`.\n\n* **name**: A name for the operation (optional).\n\n##### Returns\n"
}