{
    "source file": "nest.py",
    "line number": "400",
    "func name": "map_structure_up_to",
    "func arg": "(shallow_tree, func)",
    "comments": "Applies a function or op to a number of partially flattened inputs.\n\nThe `inputs` are flattened up to `shallow_tree` before being mapped.\n\nUse Case:\n\nSometimes we wish to apply a function to a partially flattened sequence (for example when the function itself takes sequence inputs). We achieve this by specifying a shallow structure, `shallow_tree` we wish to flatten up to.\n\nThe `inputs`, can be thought of as having the same structure as `shallow_tree`, but with leaf nodes that are themselves tree structures.\n\nThis function, therefore, will return something with the same base structure as `shallow_tree`.\n\nExamples:\n\n```python ab_tuple = collections.namedtuple(\"ab_tuple\", \"a, b\") op_tuple = collections.namedtuple(\"op_tuple\", \"add, mul\") inp_val = ab_tuple(a=2, b=3) inp_ops = ab_tuple(a=op_tuple(add=1, mul=2), b=op_tuple(add=2, mul=3)) out = map_structure_up_to(inp_val, lambda val, ops: (val + ops.add) * ops.mul, inp_val, inp_ops)\n\n# Output is: ab_tuple(a=6, b=15) ```\n\n```python data_list = [[2, 4, 6, 8], [[1, 3, 5, 7, 9], [3, 5, 7]]] name_list = ['evens', ['odds', 'primes']] out = map_structure_up_to( name_list, lambda name, sec: \"first_{}_{}\".format(len(sec), name), name_list, data_list)\n\n# Output is: ['first_4_evens', ['first_5_odds', 'first_3_primes']] ```\n##### Args\n* **shallow_tree**: a shallow tree, common to all the inputs.\n\n* **func**: callable which will be applied to each input individually.\n\n* ***inputs**: arbitrarily nested combination of objects that are compatible with\n    shallow_tree. The function `func` is applied to corresponding\n    partially flattened elements of each input, so the function must support\n    arity of `len(inputs)`.\n\n##### Returns\n"
}