{
    "source file": "partitioned_variables.py",
    "line number": "244",
    "func name": "create_partitioned_variables",
    "func arg": "(shape, slicing, initializer, dtype, trainable, collections, name, reuse)",
    "comments": "Create a list of partitioned variables according to the given `slicing`.\n\nCurrently only one dimension of the full variable can be sliced, and the full variable can be reconstructed by the concatenation of the returned list along that dimension.\n##### Args\n* **shape**: List of integers.  The shape of the full variable.\n\n* **slicing**: List of integers.  How to partition the variable.\n  Must be of the same length as `shape`.  Each value\n  indicate how many slices to create in the corresponding\n  dimension.  Presently only one of the values can be more than 1;\n  that is, the variable can only be sliced along one dimension.\n  For convenience, The requested number of partitions does not have to\n  divide the corresponding dimension evenly.  If it does not, the\n  shapes of the partitions are incremented by 1 starting from partition\n  0 until all slack is absorbed.  The adjustment rules may change in the\n  future, but as you can save/restore these variables with different\n  slicing specifications this should not be a problem.\n\n* **initializer**: A `Tensor` of shape `shape` or a variable initializer\n  function.  If a function, it will be called once for each slice,\n  passing the shape and data type of the slice as parameters.  The\n  function must return a tensor with the same shape as the slice.\n\n* **dtype**: Type of the variables. Ignored if `initializer` is a `Tensor`.\n\n* **trainable**: If True also add all the variables to the graph collection\n  `GraphKeys.TRAINABLE_VARIABLES`.\n\n* **collections**: List of graph collections keys to add the variables to.\n  Defaults to `[GraphKeys.GLOBAL_VARIABLES]`.\n\n* **name**: Optional name for the full variable.  Defaults to\n  `\"PartitionedVariable\"` and gets uniquified automatically.\n\n* **reuse**: Boolean or `None`; if `True` and name is set, it would reuse\n  previously created variables. if `False` it will create new variables.\n  if `None`, it would inherit the parent scope reuse.\n\n##### Returns\n"
}