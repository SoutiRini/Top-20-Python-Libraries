{
    "source file": "saver.py",
    "line number": "1637",
    "func name": "saver_from_object_based_checkpoint",
    "func arg": "(checkpoint_path, var_list, builder, names_to_keys, cached_saver)",
    "comments": "Return a `Saver` which reads from an object-based checkpoint.\n\nThis function validates that all variables in the variables list are remapped in the object-based checkpoint (or `names_to_keys` dict if provided). A saver will be created with the list of remapped variables.\n\nThe `cached_saver` argument allows the user to pass in a previously created saver, so multiple `saver.restore()` calls don't pollute the graph when graph building. This assumes that keys are consistent, meaning that the 1) `checkpoint_path` checkpoint, and 2) checkpoint used to create the `cached_saver` are the same type of object-based checkpoint. If this argument is set, this function will simply validate that all variables have been remapped by the checkpoint at `checkpoint_path`.\n\nNote that in general, `tf.train.Checkpoint` should be used to restore/save an object-based checkpoint.\n##### Args\n* **checkpoint_path**: string, path to object-based checkpoint\n\n* **var_list**: list of `Variables` that appear in the checkpoint. If `None`,\n  `var_list` will be set to all saveable objects.\n\n* **builder**: a `BaseSaverBuilder` instance. If `None`, a new `BulkSaverBuilder`\n  will be created.\n\n* **names_to_keys**: dict mapping string tensor names to checkpoint keys. If\n  `None`, this dict will be generated from the checkpoint file.\n\n* **cached_saver**: Cached `Saver` object with remapped variables.\n\n##### Returns\n"
}