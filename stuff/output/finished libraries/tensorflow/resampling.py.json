{
    "source file": "resampling.py",
    "line number": "230",
    "func name": "_calculate_acceptance_probs_with_mixing",
    "func arg": "(initial_probs, target_probs)",
    "comments": "Calculates the acceptance probabilities and mixing ratio.\n\nIn this case, we assume that we can *either* sample from the original data distribution with probability `m`, or sample from a reshaped distribution that comes from rejection sampling on the original distribution. This rejection sampling is done on a per-class basis, with `a_i` representing the probability of accepting data from class `i`.\n\nThis method is based on solving the following analysis for the reshaped distribution:\n\nLet F be the probability of a rejection (on any example). Let p_i be the proportion of examples in the data in class i (init_probs) Let a_i is the rate the rejection sampler should *accept* class i Let t_i is the target proportion in the minibatches for class i (target_probs)\n\n``` F = sum_i(p_i * (1-a_i)) = 1\n\n- sum_i(p_i * a_i)\n\n\n\n using sum_i(p_i) = 1 ```\n\nAn example with class `i` will be accepted if `k` rejections occur, then an example with class `i` is seen by the rejector, and it is accepted. This can be written as follows:\n\n``` t_i = sum_k=0^inf(F^k * p_i * a_i) = p_i * a_j / (1\n\n- F)\n\n\n\nusing geometric series identity, since 0 <= F < 1 = p_i * a_i / sum_j(p_j * a_j)\n\n\n\n\n\n\n\nusing F from above ```\n\nNote that the following constraints hold: ``` 0 <= p_i <= 1, sum_i(p_i) = 1 0 <= a_i <= 1 0 <= t_i <= 1, sum_i(t_i) = 1 ```\n\nA solution for a_i in terms of the other variables is the following: ```a_i = (t_i / p_i) / max_i[t_i / p_i]```\n\nIf we try to minimize the amount of data rejected, we get the following:\n\nM_max = max_i [ t_i / p_i ] M_min = min_i [ t_i / p_i ]\n\nThe desired probability of accepting data if it comes from class `i`:\n\na_i = (t_i/p_i\n\n- m) / (M_max\n\n- m)\n\nThe desired probability of pulling a data element from the original dataset, rather than the filtered one:\n\nm = M_min\n##### Args\n* **initial_probs**: A Tensor of the initial probability distribution, given or\n  estimated.\n\n* **target_probs**: A Tensor of the corresponding classes.\n\n##### Returns\n"
}