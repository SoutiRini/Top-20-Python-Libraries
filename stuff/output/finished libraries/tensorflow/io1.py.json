{
    "source file": "io1.py",
    "line number": "146",
    "func name": "load",
    "func arg": "(path, element_spec, compression, reader_func)",
    "comments": "Loads a previously saved dataset.\n\nExample usage:\n\n>>> import tempfile >>> path = os.path.join(tempfile.gettempdir(), \"saved_data\") >>> # Save a dataset >>> dataset = tf.data.Dataset.range(2) >>> tf.data.experimental.save(dataset, path) >>> new_dataset = tf.data.experimental.load(path, ...\n\n\n\n tf.TensorSpec(shape=(), dtype=tf.int64)) >>> for elem in new_dataset: ...\n\n print(elem) tf.Tensor(0, shape=(), dtype=int64) tf.Tensor(1, shape=(), dtype=int64)\n\n Note that to load a previously saved dataset, you need to specify `element_spec` -- a type signature of the elements of the saved dataset, which can be obtained via `tf.data.Dataset.element_spec`. This requirement exists so that shape inference of the loaded dataset does not need to perform I/O.\n\nIf the default option of sharding the saved dataset was used, the element order of the saved dataset will be preserved when loading it.\n\nThe `reader_func` argument can be used to specify a custom order in which elements should be loaded from the individual shards. The `reader_func` is expected to take a single argument -- a dataset of datasets, each containing elements of one of the shards -- and return a dataset of elements. For example, the order of shards can be shuffled when loading them as follows:\n\n```python def custom_reader_func(datasets): datasets = datasets.shuffle(NUM_SHARDS) return datasets.interleave(lambda x: x, num_parallel_calls=AUTOTUNE)\n\ndataset = tf.data.experimental.load( path=\"/path/to/data\", ..., reader_func=custom_reader_func) ```\n##### Args\n* **path**: Required. A path pointing to a previously saved dataset.\n\n* **element_spec**: Required. A nested structure of `tf.TypeSpec` objects matching\n  the structure of an element of the saved dataset and specifying the type\n  of individual element components.\n\n* **compression**: Optional. The algorithm to use to decompress the data when\n  reading it. Supported options are `GZIP` and `NONE`. Defaults to `NONE`.\n\n* **reader_func**: Optional. A function to control how to read data from shards.\n  If present, the function will be traced and executed as graph computation.\n\n##### Returns\n"
}