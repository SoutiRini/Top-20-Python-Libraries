{
    "source file": "_json1.py",
    "line number": "350",
    "func name": "read_json",
    "func arg": "(path_or_buf, orient, typ, dtype, convert_axes, convert_dates, keep_default_dates, numpy, precise_float, date_unit, encoding, lines, chunksize, compression)",
    "comments": "Convert a JSON string to pandas object.\n\nParameters ---------- path_or_buf : a valid JSON str, path object or file-like object Any valid string path is acceptable. The string could be a URL. Valid URL schemes include http, ftp, s3, and file. For file URLs, a host is expected. A local file could be: ``file://localhost/path/to/table.json``.\n\nIf you want to pass in a path object, pandas accepts any ``os.PathLike``.\n\nBy file-like object, we refer to objects with a ``read()`` method, such as a file handler (e.g. via builtin ``open`` function) or ``StringIO``. orient : str Indication of expected JSON string format. Compatible JSON strings can be produced by ``to_json()`` with a corresponding orient value. The set of possible orients is:\n\n- ``'split'`` : dict like ``{index -> [index], columns -> [columns], data -> [values]}``\n\n- ``'records'`` : list like ``[{column -> value}, ... , {column -> value}]``\n\n- ``'index'`` : dict like ``{index -> {column -> value}}``\n\n- ``'columns'`` : dict like ``{column -> {index -> value}}``\n\n- ``'values'`` : just the values array\n\nThe allowed and default values depend on the value of the `typ` parameter.\n\n* when ``typ == 'series'``,\n\n- allowed orients are ``{'split','records','index'}``\n\n- default is ``'index'``\n\n- The Series index must be unique for orient ``'index'``.\n\n* when ``typ == 'frame'``,\n\n- allowed orients are ``{'split','records','index', 'columns','values', 'table'}``\n\n- default is ``'columns'``\n\n- The DataFrame index must be unique for orients ``'index'`` and ``'columns'``.\n\n- The DataFrame columns must be unique for orients ``'index'``, ``'columns'``, and ``'records'``.\n\n.. versionadded:: 0.23.0 'table' as an allowed value for the ``orient`` argument\n\ntyp : {'frame', 'series'}, default 'frame' The type of object to recover.\n\ndtype : bool or dict, default None If True, infer dtypes; if a dict of column to dtype, then use those; if False, then don't infer dtypes at all, applies only to the data.\n\nFor all ``orient`` values except ``'table'``, default is True.\n\n.. versionchanged:: 0.25.0\n\nNot applicable for ``orient='table'``.\n\nconvert_axes : bool, default None Try to convert the axes to the proper dtypes.\n\nFor all ``orient`` values except ``'table'``, default is True.\n\n.. versionchanged:: 0.25.0\n\nNot applicable for ``orient='table'``.\n\nconvert_dates : bool or list of str, default True List of columns to parse for dates. If True, then try to parse datelike columns. A column label is datelike if\n\n* it ends with ``'_at'``,\n\n* it ends with ``'_time'``,\n\n* it begins with ``'timestamp'``,\n\n* it is ``'modified'``, or\n\n* it is ``'date'``.\n\nkeep_default_dates : bool, default True If parsing dates, then parse the default datelike columns.\n\nnumpy : bool, default False Direct decoding to numpy arrays. Supports numeric data only, but non-numeric column and index labels are supported. Note also that the JSON ordering MUST be the same for each term if numpy=True.\n\n.. deprecated:: 1.0.0\n\nprecise_float : bool, default False Set to enable usage of higher precision (strtod) function when decoding string to double values. Default (False) is to use fast but less precise builtin functionality.\n\ndate_unit : str, default None The timestamp unit to detect if converting dates. The default behaviour is to try and detect the correct precision, but if this is not desired then pass one of 's', 'ms', 'us' or 'ns' to force parsing only seconds, milliseconds, microseconds or nanoseconds respectively.\n\nencoding : str, default is 'utf-8' The encoding to use to decode py3 bytes.\n\nlines : bool, default False Read the file as a json object per line.\n\nchunksize : int, optional Return JsonReader object for iteration. See the `line-delimited json docs <https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#line-delimited-json>`_ for more information on ``chunksize``. This can only be passed if `lines=True`. If this is None, the file will be read into memory all at once.\n\n.. versionadded:: 0.21.0\n\ncompression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}, default 'infer' For on-the-fly decompression of on-disk data. If 'infer', then use gzip, bz2, zip or xz if path_or_buf is a string ending in '.gz', '.bz2', '.zip', or 'xz', respectively, and no decompression otherwise. If using 'zip', the ZIP file must contain only one data file to be read in. Set to None for no decompression.\n\n.. versionadded:: 0.21.0\n##### Returns\n* **DataFrame.to_json **: Convert a DataFrame to a JSON string.\n\n* **Series.to_json **: Convert a Series to a JSON string.\n\n* **Specific to ``orient='table'``, if a **: class\n\n* ****: func\n\n* **subsequent read operation will incorrectly set the **: class\n\n* **``None``. This is because `index` is also used by **: func\n\n* **to denote a missing **: class\n\n* **limitation is encountered with a **: class\n\n* **Encoding/decoding a Dataframe using ``'split'`` formatted JSON**: \n\n* **'{\"columns\"**: [\"col 1\",\"col 2\"],\n  \"index\"\n\n* **Encoding/decoding a Dataframe using ``'index'`` formatted JSON**: \n\n* **'{\"row 1\"**: {\"col 1\"\n\n* **'[{\"col 1\"**: \"a\",\"col 2\"\n\n* **'{\"schema\"**: {\"fields\"\n\n"
}