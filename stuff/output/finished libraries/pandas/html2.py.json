{
    "source file": "html2.py",
    "line number": "926",
    "func name": "read_html",
    "func arg": "(io, match, flavor, header, index_col, skiprows, attrs, parse_dates, thousands, encoding, decimal, converters, na_values, keep_default_na, displayed_only)",
    "comments": "Read HTML tables into a ``list`` of ``DataFrame`` objects.\n\nParameters ---------- io : str, path object or file-like object A URL, a file-like object, or a raw string containing HTML. Note that lxml only accepts the http, ftp and file url protocols. If you have a URL that starts with ``'https'`` you might try removing the ``'s'``.\n\nmatch : str or compiled regular expression, optional The set of tables containing text matching this regex or string will be returned. Unless the HTML is extremely simple you will probably need to pass a non-empty string here. Defaults to '.+' (match any non-empty string). The default value will return all tables contained on a page. This value is converted to a regular expression so that there is consistent behavior between Beautiful Soup and lxml.\n\nflavor : str or None The parsing engine to use. 'bs4' and 'html5lib' are synonymous with each other, they are both there for backwards compatibility. The default of ``None`` tries to use ``lxml`` to parse and if that fails it falls back on ``bs4`` + ``html5lib``.\n\nheader : int or list-like or None, optional The row (or list of rows for a :class:`~pandas.MultiIndex`) to use to make the columns headers.\n\nindex_col : int or list-like or None, optional The column (or list of columns) to use to create the index.\n\nskiprows : int or list-like or slice or None, optional Number of rows to skip after parsing the column integer. 0-based. If a sequence of integers or a slice is given, will skip the rows indexed by that sequence.\n\nNote that a single element sequence means 'skip the nth row' whereas an integer means 'skip n rows'.\n\nattrs : dict or None, optional This is a dictionary of attributes that you can pass to use to identify the table in the HTML. These are not checked for validity before being passed to lxml or Beautiful Soup. However, these attributes must be valid HTML table attributes to work correctly. For example, ::\n\nattrs = {'id': 'table'}\n\nis a valid attribute dictionary because the 'id' HTML tag attribute is a valid HTML attribute for *any* HTML tag as per `this document <http://www.w3.org/TR/html-markup/global-attributes.html>`__. ::\n\nattrs = {'asdf': 'table'}\n\nis *not* a valid attribute dictionary because 'asdf' is not a valid HTML attribute even if it is a valid XML attribute.\n\nValid HTML 4.01 table attributes can be found `here <http://www.w3.org/TR/REC-html40/struct/tables.html#h-11.2>`__. A working draft of the HTML 5 spec can be found `here <http://www.w3.org/TR/html-markup/table.html>`__. It contains the latest information on table attributes for the modern web.\n\nparse_dates : bool, optional See :func:`~read_csv` for more details.\n\nthousands : str, optional Separator to use to parse thousands. Defaults to ``','``.\n\nencoding : str or None, optional The encoding used to decode the web page. Defaults to ``None``.``None`` preserves the previous encoding behavior, which depends on the underlying parser library (e.g., the parser library will try to use the encoding provided by the document).\n\ndecimal : str, default '.' Character to recognize as decimal point (e.g. use ',' for European data).\n\nconverters : dict, default None Dict of functions for converting values in certain columns. Keys can either be integers or column labels, values are functions that take one input argument, the cell (not column) content, and return the transformed content.\n\nna_values : iterable, default None Custom NA values.\n\nkeep_default_na : bool, default True If na_values are specified and keep_default_na is False the default NaN values are overridden, otherwise they're appended to.\n\ndisplayed_only : bool, default True Whether elements with \"display: none\" should be parsed.\n##### Returns\n* **Before using this function you should read the **: ref\n\n* **the body (by putting rows with only ``<th>`` elements into the header).\n    .. versionadded**: \n\n* **Similar to **: func\n\n* **This function will *always* return a list of **: class\n\n* **See the **: ref\n\n"
}