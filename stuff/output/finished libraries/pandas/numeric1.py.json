{
    "source file": "numeric1.py",
    "line number": "19",
    "func name": "to_numeric",
    "func arg": "(arg, errors, downcast)",
    "comments": "Convert argument to a numeric type.\n\nThe default return dtype is `float64` or `int64` depending on the data supplied. Use the `downcast` parameter to obtain other dtypes.\n\nPlease note that precision loss may occur if really large numbers are passed in. Due to the internal limitations of `ndarray`, if numbers smaller than `-9223372036854775808` (np.iinfo(np.int64).min) or larger than `18446744073709551615` (np.iinfo(np.uint64).max) are passed in, it is very likely they will be converted to float so that they can stored in an `ndarray`. These warnings apply similarly to `Series` since it internally leverages `ndarray`.\n\nParameters ---------- arg : scalar, list, tuple, 1-d array, or Series errors : {'ignore', 'raise', 'coerce'}, default 'raise'\n\n- If 'raise', then invalid parsing will raise an exception.\n\n- If 'coerce', then invalid parsing will be set as NaN.\n\n- If 'ignore', then invalid parsing will return the input. downcast : {'integer', 'signed', 'unsigned', 'float'}, default None If not None, and if the data has been successfully cast to a numerical dtype (or if the data was numeric to begin with), downcast that resulting data to the smallest numerical dtype possible according to the following rules:\n\n- 'integer' or 'signed': smallest signed int dtype (min.: np.int8)\n\n- 'unsigned': smallest unsigned int dtype (min.: np.uint8)\n\n- 'float': smallest float dtype (min.: np.float32)\n\nAs this behaviour is separate from the core conversion to numeric values, any errors raised during the downcasting will be surfaced regardless of the value of the 'errors' input.\n\nIn addition, downcasting will only occur if the size of the resulting data's dtype is strictly larger than the dtype it is to be cast to, so if none of the dtypes checked satisfy that specification, no downcasting will be performed on the data.\n##### Returns\n* **ret **: numeric if parsing succeeded.\n    Return type depends on input.  Series if Series, otherwise ndarray.\n\n* **DataFrame.astype **: Cast argument to a specified dtype.\n\n* **to_datetime **: Convert argument to datetime.\n\n* **to_timedelta **: Convert argument to timedelta.\n\n* **numpy.ndarray.astype **: Cast a numpy array to a specified type.\n\n* **convert_dtypes **: Convert dtypes.\n\n* **dtype**: float64\n\n"
}