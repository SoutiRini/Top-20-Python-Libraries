{
    "source file": "melt1.py",
    "line number": "195",
    "func name": "wide_to_long",
    "func arg": "(df, stubnames, i, j, sep, suffix)",
    "comments": "Wide panel to long format. Less flexible but more user-friendly than melt.\n\nWith stubnames ['A', 'B'], this function expects to find one or more group of columns with format A-suffix1, A-suffix2,..., B-suffix1, B-suffix2,... You specify what you want to call this suffix in the resulting long format with `j` (for example `j='year'`)\n\nEach row of these wide variables are assumed to be uniquely identified by `i` (can be a single column name or a list of column names)\n\nAll remaining variables in the data frame are left intact.\n\nParameters ---------- df : DataFrame The wide-format DataFrame. stubnames : str or list-like The stub name(s). The wide format variables are assumed to start with the stub names. i : str or list-like Column(s) to use as id variable(s). j : str The name of the sub-observation variable. What you wish to name your suffix in the long format. sep : str, default \"\" A character indicating the separation of the variable names in the wide format, to be stripped from the names in the long format. For example, if your column names are A-suffix1, A-suffix2, you can strip the hyphen by specifying `sep='-'`. suffix : str, default '\\\\d+' A regular expression capturing the wanted suffixes. '\\\\d+' captures numeric suffixes. Suffixes with no numbers could be specified with the negated character class '\\\\D+'. You can also further disambiguate suffixes, for example, if your wide variables are of the form A-one, B-two,.., and you have an unrelated column A-rating, you can ignore the last one by specifying `suffix='(!?one|two)'`.\n\n.. versionchanged:: 0.23.0 When all suffixes are numeric, they are cast to int64/float64.\n##### Returns\n* **>>> df = pd.DataFrame({\"A1970\" **: {0\n\n* **...                    \"A1980\" **: {0\n\n* **...                    \"B1970\" **: {0\n\n* **...                    \"B1980\" **: {0\n\n* **...                    \"X\"     **: dict(zip(range(3), np.random.randn(3)))\n\n* **... # doctest**: +NORMALIZE_WHITESPACE\n                  ht\n\n* **...     'famid'**: [1, 1, 1, 2, 2, 2, 3, 3, 3],\n\n* **...     'birth'**: [1, 2, 3, 1, 2, 3, 1, 2, 3],\n\n* **...     'ht1'**: [2.8, 2.9, 2.2, 2, 1.8, 1.9, 2.2, 2.3, 2.1],\n\n* **...     'ht2'**: [3.4, 3.8, 2.9, 3.2, 2.8, 2.4, 3.3, 3.4, 2.9]\n\n* **>>> df = pd.DataFrame({'A(weekly)-2010'**: np.random.rand(3),\n\n* **...                    'A(weekly)-2011'**: np.random.rand(3),\n\n* **...                    'B(weekly)-2010'**: np.random.rand(3),\n\n* **...                    'B(weekly)-2011'**: np.random.rand(3),\n\n* **...                    'X' **: np.random.randint(3, size=3)})\n\n* **>>> df # doctest**: +NORMALIZE_WHITESPACE, +ELLIPSIS\n   A(weekly)-2010  A(weekly)-2011  B(weekly)-2010  B(weekly)-2011  X  id\n\n* **...     'ht_one'**: [2.8, 2.9, 2.2, 2, 1.8, 1.9, 2.2, 2.3, 2.1],\n\n* **...     'ht_two'**: [3.4, 3.8, 2.9, 3.2, 2.8, 2.4, 3.3, 3.4, 2.9]\n\n"
}