{
    "source file": "eval1.py",
    "line number": "170",
    "func name": "eval",
    "func arg": "(expr, parser, engine, truediv, local_dict, global_dict, resolvers, level, target, inplace)",
    "comments": "Evaluate a Python expression as a string using various backends.\n\nThe following arithmetic operations are supported: ``+``, ``-``, ``*``, ``/``, ``**``, ``%``, ``//`` (python engine only) along with the following boolean operations: ``|`` (or), ``&`` (and), and ``~`` (not). Additionally, the ``'pandas'`` parser allows the use of :keyword:`and`, :keyword:`or`, and :keyword:`not` with the same semantics as the corresponding bitwise operators.\n\n:class:`~pandas.Series` and :class:`~pandas.DataFrame` objects are supported and behave as they would with plain ol' Python evaluation.\n\nParameters ---------- expr : str The expression to evaluate. This string cannot contain any Python `statements <https://docs.python.org/3/reference/simple_stmts.html#simple-statements>`__, only Python `expressions <https://docs.python.org/3/reference/simple_stmts.html#expression-statements>`__. parser : {'pandas', 'python'}, default 'pandas' The parser to use to construct the syntax tree from the expression. The default of ``'pandas'`` parses code slightly different than standard Python. Alternatively, you can parse an expression using the ``'python'`` parser to retain strict Python semantics.\n\nSee the :ref:`enhancing performance <enhancingperf.eval>` documentation for more details. engine : {'python', 'numexpr'}, default 'numexpr'\n\nThe engine used to evaluate the expression. Supported engines are\n\n- None\n\n\n\n\n\n\n\n : tries to use ``numexpr``, falls back to ``python``\n\n- ``'numexpr'``: This default engine evaluates pandas objects using numexpr for large speed ups in complex expressions with large frames.\n\n- ``'python'``: Performs operations as if you had ``eval``'d in top level python. This engine is generally not that useful.\n\nMore backends may be available in the future.\n\ntruediv : bool, optional Whether to use true division, like in Python >= 3. deprecated:: 1.0.0\n\nlocal_dict : dict or None, optional A dictionary of local variables, taken from locals() by default. global_dict : dict or None, optional A dictionary of global variables, taken from globals() by default. resolvers : list of dict-like or None, optional A list of objects implementing the ``__getitem__`` special method that you can use to inject an additional collection of namespaces to use for variable lookup. For example, this is used in the :meth:`~DataFrame.query` method to inject the ``DataFrame.index`` and ``DataFrame.columns`` variables that refer to their respective :class:`~pandas.DataFrame` instance attributes. level : int, optional The number of prior stack frames to traverse and add to the current scope. Most users will **not** need to change this parameter. target : object, optional, default None This is the target object for assignment. It is used when there is variable assignment in the expression. If so, then `target` must support item assignment with string keys, and if a copy is being returned, it must also support `.copy()`. inplace : bool, default False If `target` is provided, and the expression mutates `target`, whether to modify `target` inplace. Otherwise, return a copy of `target` with the mutation.\n##### Returns\n"
}