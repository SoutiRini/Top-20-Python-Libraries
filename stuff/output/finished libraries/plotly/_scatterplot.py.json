{
    "source file": "_scatterplot.py",
    "line number": "840",
    "func name": "create_scatterplotmatrix",
    "func arg": "(df, index, endpts, diag, height, width, size, title, colormap, colormap_type, dataframe, headers, index_vals, **kwargs)",
    "comments": "Returns data for a scatterplot matrix; **deprecated**, use instead the plotly.graph_objects trace :class:`plotly.graph_objects.Splom`.\n\nparam (array) df: array of the data with column headers :param (str) index: name of the index column in data array :param (list|tuple) endpts: takes an increasing sequece of numbers that defines intervals on the real line. They are used to group the entries in an index of numbers into their corresponding interval and therefore can be treated as categorical data :param (str) diag: sets the chart type for the main diagonal plots. The options are 'scatter', 'histogram' and 'box'. :param (int|float) height: sets the height of the chart :param (int|float) width: sets the width of the chart :param (float) size: sets the marker size (in px) :param (str) title: the title label of the scatterplot matrix :param (str|tuple|list|dict) colormap: either a plotly scale name, an rgb or hex color, a color tuple, a list of colors or a dictionary. An rgb color is of the form 'rgb(x, y, z)' where x, y and z belong to the interval [0, 255] and a color tuple is a tuple of the form (a, b, c) where a, b and c belong to [0, 1]. If colormap is a list, it must contain valid color types as its members. If colormap is a dictionary, all the string entries in the index column must be a key in colormap. In this case, the colormap_type is forced to 'cat' or categorical :param (str) colormap_type: determines how colormap is interpreted. Valid choices are 'seq' (sequential) and 'cat' (categorical). If 'seq' is selected, only the first two colors in colormap will be considered (when colormap is a list) and the index values will be linearly interpolated between those two colors. This option is forced if all index values are numeric. If 'cat' is selected, a color from colormap will be assigned to each category from index, including the intervals if endpts is being used :param (dict) **kwargs: a dictionary of scatterplot arguments The only forbidden parameters are 'size', 'color' and 'colorscale' in 'marker'\n\nExample 1: Vanilla Scatterplot Matrix\n\n>>> from plotly.graph_objs import graph_objs >>> from plotly.figure_factory import create_scatterplotmatrix\n\n>>> import numpy as np >>> import pandas as pd\n\n>>> # Create dataframe >>> df = pd.DataFrame(np.random.randn(10, 2), ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n columns=['Column 1', 'Column 2'])\n\n>>> # Create scatterplot matrix >>> fig = create_scatterplotmatrix(df) >>> fig.show()\n\n Example 2: Indexing a Column\n\n>>> from plotly.graph_objs import graph_objs >>> from plotly.figure_factory import create_scatterplotmatrix\n\n>>> import numpy as np >>> import pandas as pd\n\n>>> # Create dataframe with index >>> df = pd.DataFrame(np.random.randn(10, 2), ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncolumns=['A', 'B'])\n\n>>> # Add another column of strings to the dataframe >>> df['Fruit'] = pd.Series(['apple', 'apple', 'grape', 'apple', 'apple', ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'grape', 'pear', 'pear', 'apple', 'pear'])\n\n>>> # Create scatterplot matrix >>> fig = create_scatterplotmatrix(df, index='Fruit', size=10) >>> fig.show()\n\n Example 3: Styling the Diagonal Subplots\n\n>>> from plotly.graph_objs import graph_objs >>> from plotly.figure_factory import create_scatterplotmatrix\n\n>>> import numpy as np >>> import pandas as pd\n\n>>> # Create dataframe with index >>> df = pd.DataFrame(np.random.randn(10, 4), ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncolumns=['A', 'B', 'C', 'D'])\n\n>>> # Add another column of strings to the dataframe >>> df['Fruit'] = pd.Series(['apple', 'apple', 'grape', 'apple', 'apple', ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'grape', 'pear', 'pear', 'apple', 'pear'])\n\n>>> # Create scatterplot matrix >>> fig = create_scatterplotmatrix(df, diag='box', index='Fruit', height=1000, ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwidth=1000) >>> fig.show()\n\n Example 4: Use a Theme to Style the Subplots\n\n>>> from plotly.graph_objs import graph_objs >>> from plotly.figure_factory import create_scatterplotmatrix\n\n>>> import numpy as np >>> import pandas as pd\n\n>>> # Create dataframe with random data >>> df = pd.DataFrame(np.random.randn(100, 3), ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncolumns=['A', 'B', 'C'])\n\n>>> # Create scatterplot matrix using a built-in >>> # Plotly palette scale and indexing column 'A' >>> fig = create_scatterplotmatrix(df, diag='histogram', index='A', ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncolormap='Blues', height=800, width=800) >>> fig.show()\n\n Example 5: Example 4 with Interval Factoring\n\n>>> from plotly.graph_objs import graph_objs >>> from plotly.figure_factory import create_scatterplotmatrix\n\n>>> import numpy as np >>> import pandas as pd\n\n>>> # Create dataframe with random data >>> df = pd.DataFrame(np.random.randn(100, 3), ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncolumns=['A', 'B', 'C'])\n\n>>> # Create scatterplot matrix using a list of 2 rgb tuples >>> # and endpoints at -1, 0 and 1 >>> fig = create_scatterplotmatrix(df, diag='histogram', index='A', ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncolormap=['rgb(140, 255, 50)', ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'rgb(170, 60, 115)', '#6c4774', ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(0.5, 0.1, 0.8)], ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nendpts=[-1, 0, 1], height=800, width=800) >>> fig.show()\n\n Example 6: Using the colormap as a Dictionary\n\n>>> from plotly.graph_objs import graph_objs >>> from plotly.figure_factory import create_scatterplotmatrix\n\n>>> import numpy as np >>> import pandas as pd >>> import random\n\n>>> # Create dataframe with random data >>> df = pd.DataFrame(np.random.randn(100, 3), ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncolumns=['Column A', ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n 'Column B', ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n 'Column C'])\n\n>>> # Add new color column to dataframe >>> new_column = [] >>> strange_colors = ['turquoise', 'limegreen', 'goldenrod']\n\n>>> for j in range(100): ...\n\n\n\n new_column.append(random.choice(strange_colors)) >>> df['Colors'] = pd.Series(new_column, index=df.index)\n\n>>> # Create scatterplot matrix using a dictionary of hex color values >>> # which correspond to actual color names in 'Colors' column >>> fig = create_scatterplotmatrix( ...\n\n\n\n df, diag='box', index='Colors', ...\n\n\n\n colormap= dict( ...\n\n\n\n\n\n\n\n turquoise = '#00F5FF', ...\n\n\n\n\n\n\n\n limegreen = '#32CD32', ...\n\n\n\n\n\n\n\n goldenrod = '#DAA520' ...\n\n\n\n ), ...\n\n\n\n colormap_type='cat', ...\n\n\n\n height=800, width=800 ... ) >>> fig.show()\n"
}