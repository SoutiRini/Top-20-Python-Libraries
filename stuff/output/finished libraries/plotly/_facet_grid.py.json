{
    "source file": "_facet_grid.py",
    "line number": "653",
    "func name": "create_facet_grid",
    "func arg": "(df, x, y, facet_row, facet_col, color_name, colormap, color_is_cat, facet_row_labels, facet_col_labels, height, width, trace_type, scales, dtick_x, dtick_y, show_boxes, ggplot2, binsize, **kwargs)",
    "comments": "Returns figure for facet grid; **this function is deprecated**, since plotly.express functions should be used instead, for example\n\n>>> import plotly.express as px >>> tips = px.data.tips() >>> fig = px.scatter(tips, ...\n\n\n\n x='total_bill', ...\n\n\n\n y='tip', ...\n\n\n\n facet_row='sex', ...\n\n\n\n facet_col='smoker', ...\n\n\n\n color='size')\n\n :param (pd.DataFrame) df: the dataframe of columns for the facet grid. :param (str) x: the name of the dataframe column for the x axis data. :param (str) y: the name of the dataframe column for the y axis data. :param (str) facet_row: the name of the dataframe column that is used to facet the grid into row panels. :param (str) facet_col: the name of the dataframe column that is used to facet the grid into column panels. :param (str) color_name: the name of your dataframe column that will function as the colormap variable. :param (str|list|dict) colormap: the param that determines how the color_name column colors the data. If the dataframe contains numeric data, then a dictionary of colors will group the data categorically while a Plotly Colorscale name or a custom colorscale will treat it numerically. To learn more about colors and types of colormap, run `help(plotly.colors)`. :param (bool) color_is_cat: determines whether a numerical column for the colormap will be treated as categorical (True) or sequential (False). Default = False. :param (str|dict) facet_row_labels: set to either 'name' or a dictionary of all the unique values in the faceting row mapped to some text to show up in the label annotations. If None, labeling works like usual. :param (str|dict) facet_col_labels: set to either 'name' or a dictionary of all the values in the faceting row mapped to some text to show up in the label annotations. If None, labeling works like usual. :param (int) height: the height of the facet grid figure. :param (int) width: the width of the facet grid figure. :param (str) trace_type: decides the type of plot to appear in the facet grid. The options are 'scatter', 'scattergl', 'histogram', 'bar', and 'box'. Default = 'scatter'. :param (str) scales: determines if axes have fixed ranges or not. Valid settings are 'fixed' (all axes fixed), 'free_x' (x axis free only), 'free_y' (y axis free only) or 'free' (both axes free). :param (float) dtick_x: determines the distance between each tick on the x-axis. Default is None which means dtick_x is set automatically. :param (float) dtick_y: determines the distance between each tick on the y-axis. Default is None which means dtick_y is set automatically. :param (bool) show_boxes: draws grey boxes behind the facet titles. :param (bool) ggplot2: draws the facet grid in the style of `ggplot2`. See http://ggplot2.tidyverse.org/reference/facet_grid.html for reference. Default = False :param (int) binsize: groups all data into bins of a given length. :param (dict) kwargs: a dictionary of scatterplot arguments.\n\nExamples 1: One Way Faceting\n\n>>> import plotly.figure_factory as ff >>> import pandas as pd >>> mpg = pd.read_table('https://raw.githubusercontent.com/plotly/datasets/master/mpg_2017.txt')\n\n>>> fig = ff.create_facet_grid( ...\n\n\n\n mpg, ...\n\n\n\n x='displ', ...\n\n\n\n y='cty', ...\n\n\n\n facet_col='cyl', ... ) >>> fig.show()\n\nExample 2: Two Way Faceting\n\n>>> import plotly.figure_factory as ff\n\n>>> import pandas as pd\n\n>>> mpg = pd.read_table('https://raw.githubusercontent.com/plotly/datasets/master/mpg_2017.txt')\n\n>>> fig = ff.create_facet_grid( ...\n\n\n\n mpg, ...\n\n\n\n x='displ', ...\n\n\n\n y='cty', ...\n\n\n\n facet_row='drv', ...\n\n\n\n facet_col='cyl', ... ) >>> fig.show()\n\nExample 3: Categorical Coloring\n\n>>> import plotly.figure_factory as ff >>> import pandas as pd >>> mtcars = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/mtcars.csv') >>> mtcars.cyl = mtcars.cyl.astype(str) >>> fig = ff.create_facet_grid( ...\n\n\n\n mtcars, ...\n\n\n\n x='mpg', ...\n\n\n\n y='wt', ...\n\n\n\n facet_col='cyl', ...\n\n\n\n color_name='cyl', ...\n\n\n\n color_is_cat=True, ... ) >>> fig.show()\n"
}