{
    "source file": "_streamline.py",
    "line number": "39",
    "func name": "create_streamline",
    "func arg": "(x, y, u, v, density, angle, arrow_scale, **kwargs)",
    "comments": "Returns data for a streamline plot.\n\nparam (list|ndarray) x: 1 dimensional, evenly spaced list or array :param (list|ndarray) y: 1 dimensional, evenly spaced list or array :param (ndarray) u: 2 dimensional array :param (ndarray) v: 2 dimensional array :param (float|int) density: controls the density of streamlines in plot. This is multiplied by 30 to scale similiarly to other available streamline functions such as matplotlib. Default = 1 :param (angle in radians) angle: angle of arrowhead. Default = pi/9 :param (float in [0,1]) arrow_scale: value to scale length of arrowhead Default = .09 :param kwargs: kwargs passed through plotly.graph_objs.Scatter for more information on valid kwargs call help(plotly.graph_objs.Scatter)\n\n:rtype (dict): returns a representation of streamline figure.\n\nExample 1: Plot simple streamline and increase arrow size\n\n>>> from plotly.figure_factory import create_streamline >>> import plotly.graph_objects as go >>> import numpy as np >>> import math\n\n>>> # Add data >>> x = np.linspace(-3, 3, 100) >>> y = np.linspace(-3, 3, 100) >>> Y, X = np.meshgrid(x, y) >>> u = -1\n\n- X**2 + Y >>> v = 1 + X\n\n- Y**2 >>> u = u.T\n\n# Transpose >>> v = v.T\n\n# Transpose\n\n>>> # Create streamline >>> fig = create_streamline(x, y, u, v, arrow_scale=.1) >>> fig.show()\n\nExample 2: from nbviewer.ipython.org/github/barbagroup/AeroPython\n\n>>> from plotly.figure_factory import create_streamline >>> import numpy as np >>> import math\n\n>>> # Add data >>> N = 50 >>> x_start, x_end = -2.0, 2.0 >>> y_start, y_end = -1.0, 1.0 >>> x = np.linspace(x_start, x_end, N) >>> y = np.linspace(y_start, y_end, N) >>> X, Y = np.meshgrid(x, y) >>> ss = 5.0 >>> x_s, y_s = -1.0, 0.0\n\n>>> # Compute the velocity field on the mesh grid >>> u_s = ss/(2*np.pi) * (X-x_s)/((X-x_s)**2 + (Y-y_s)**2) >>> v_s = ss/(2*np.pi) * (Y-y_s)/((X-x_s)**2 + (Y-y_s)**2)\n\n>>> # Create streamline >>> fig = create_streamline(x, y, u_s, v_s, density=2, name='streamline')\n\n>>> # Add source point >>> point = go.Scatter(x=[x_s], y=[y_s], mode='markers', ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmarker_size=14, name='source point')\n\n>>> fig.add_trace(point) # doctest: +SKIP >>> fig.show()\n"
}