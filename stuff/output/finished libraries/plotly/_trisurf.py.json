{
    "source file": "_trisurf.py",
    "line number": "247",
    "func name": "create_trisurf",
    "func arg": "(x, y, z, simplices, colormap, show_colorbar, scale, color_func, title, plot_edges, showbackground, backgroundcolor, gridcolor, zerolinecolor, edges_color, height, width, aspectratio)",
    "comments": "Returns figure for a triangulated surface plot\n\nparam (array) x: data values of x in a 1D array :param (array) y: data values of y in a 1D array :param (array) z: data values of z in a 1D array :param (array) simplices: an array of shape (ntri, 3) where ntri is the number of triangles in the triangularization. Each row of the array contains the indicies of the verticies of each triangle :param (str|tuple|list) colormap: either a plotly scale name, an rgb or hex color, a color tuple or a list of colors. An rgb color is of the form 'rgb(x, y, z)' where x, y, z belong to the interval [0, 255] and a color tuple is a tuple of the form (a, b, c) where a, b and c belong to [0, 1]. If colormap is a list, it must contain the valid color types aforementioned as its members :param (bool) show_colorbar: determines if colorbar is visible :param (list|array) scale: sets the scale values to be used if a non- linearly interpolated colormap is desired. If left as None, a linear interpolation between the colors will be excecuted :param (function|list) color_func: The parameter that determines the coloring of the surface. Takes either a function with 3 arguments x, y, z or a list/array of color values the same length as simplices. If None, coloring will only depend on the z axis :param (str) title: title of the plot :param (bool) plot_edges: determines if the triangles on the trisurf are visible :param (bool) showbackground: makes background in plot visible :param (str) backgroundcolor: color of background. Takes a string of the form 'rgb(x,y,z)' x,y,z are between 0 and 255 inclusive :param (str) gridcolor: color of the gridlines besides the axes. Takes a string of the form 'rgb(x,y,z)' x,y,z are between 0 and 255 inclusive :param (str) zerolinecolor: color of the axes. Takes a string of the form 'rgb(x,y,z)' x,y,z are between 0 and 255 inclusive :param (str) edges_color: color of the edges, if plot_edges is True :param (int|float) height: the height of the plot (in pixels) :param (int|float) width: the width of the plot (in pixels) :param (dict) aspectratio: a dictionary of the aspect ratio values for the x, y and z axes. 'x', 'y' and 'z' take (int|float) values\n\nExample 1: Sphere\n\n>>> # Necessary Imports for Trisurf >>> import numpy as np >>> from scipy.spatial import Delaunay\n\n>>> from plotly.figure_factory import create_trisurf >>> from plotly.graph_objs import graph_objs\n\n>>> # Make data for plot >>> u = np.linspace(0, 2*np.pi, 20) >>> v = np.linspace(0, np.pi, 20) >>> u,v = np.meshgrid(u,v) >>> u = u.flatten() >>> v = v.flatten()\n\n>>> x = np.sin(v)*np.cos(u) >>> y = np.sin(v)*np.sin(u) >>> z = np.cos(v)\n\n>>> points2D = np.vstack([u,v]).T >>> tri = Delaunay(points2D) >>> simplices = tri.simplices\n\n>>> # Create a figure >>> fig1 = create_trisurf(x=x, y=y, z=z, colormap=\"Rainbow\", ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n simplices=simplices)\n\nExample 2: Torus\n\n>>> # Necessary Imports for Trisurf >>> import numpy as np >>> from scipy.spatial import Delaunay\n\n>>> from plotly.figure_factory import create_trisurf >>> from plotly.graph_objs import graph_objs\n\n>>> # Make data for plot >>> u = np.linspace(0, 2*np.pi, 20) >>> v = np.linspace(0, 2*np.pi, 20) >>> u,v = np.meshgrid(u,v) >>> u = u.flatten() >>> v = v.flatten()\n\n>>> x = (3 + (np.cos(v)))*np.cos(u) >>> y = (3 + (np.cos(v)))*np.sin(u) >>> z = np.sin(v)\n\n>>> points2D = np.vstack([u,v]).T >>> tri = Delaunay(points2D) >>> simplices = tri.simplices\n\n>>> # Create a figure >>> fig1 = create_trisurf(x=x, y=y, z=z, colormap=\"Viridis\", ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n simplices=simplices)\n\nExample 3: Mobius Band\n\n>>> # Necessary Imports for Trisurf >>> import numpy as np >>> from scipy.spatial import Delaunay\n\n>>> from plotly.figure_factory import create_trisurf >>> from plotly.graph_objs import graph_objs\n\n>>> # Make data for plot >>> u = np.linspace(0, 2*np.pi, 24) >>> v = np.linspace(-1, 1, 8) >>> u,v = np.meshgrid(u,v) >>> u = u.flatten() >>> v = v.flatten()\n\n>>> tp = 1 + 0.5*v*np.cos(u/2.) >>> x = tp*np.cos(u) >>> y = tp*np.sin(u) >>> z = 0.5*v*np.sin(u/2.)\n\n>>> points2D = np.vstack([u,v]).T >>> tri = Delaunay(points2D) >>> simplices = tri.simplices\n\n>>> # Create a figure >>> fig1 = create_trisurf(x=x, y=y, z=z, colormap=[(0.2, 0.4, 0.6), (1, 1, 1)], ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n simplices=simplices)\n\nExample 4: Using a Custom Colormap Function with Light Cone\n\n>>> # Necessary Imports for Trisurf >>> import numpy as np >>> from scipy.spatial import Delaunay\n\n>>> from plotly.figure_factory import create_trisurf >>> from plotly.graph_objs import graph_objs\n\n>>> # Make data for plot >>> u=np.linspace(-np.pi, np.pi, 30) >>> v=np.linspace(-np.pi, np.pi, 30) >>> u,v=np.meshgrid(u,v) >>> u=u.flatten() >>> v=v.flatten()\n\n>>> x = u >>> y = u*np.cos(v) >>> z = u*np.sin(v)\n\n>>> points2D = np.vstack([u,v]).T >>> tri = Delaunay(points2D) >>> simplices = tri.simplices\n\n>>> # Define distance function >>> def dist_origin(x, y, z): ...\n\n\n\n return np.sqrt((1.0 * x)**2 + (1.0 * y)**2 + (1.0 * z)**2)\n\n>>> # Create a figure >>> fig1 = create_trisurf(x=x, y=y, z=z, ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n colormap=['#FFFFFF', '#E4FFFE', ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n '#A4F6F9', '#FF99FE', ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n '#BA52ED'], ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n scale=[0, 0.6, 0.71, 0.89, 1], ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n simplices=simplices, ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n color_func=dist_origin)\n\nExample 5: Enter color_func as a list of colors\n\n>>> # Necessary Imports for Trisurf >>> import numpy as np >>> from scipy.spatial import Delaunay >>> import random\n\n>>> from plotly.figure_factory import create_trisurf >>> from plotly.graph_objs import graph_objs\n\n>>> # Make data for plot >>> u=np.linspace(-np.pi, np.pi, 30) >>> v=np.linspace(-np.pi, np.pi, 30) >>> u,v=np.meshgrid(u,v) >>> u=u.flatten() >>> v=v.flatten()\n\n>>> x = u >>> y = u*np.cos(v) >>> z = u*np.sin(v)\n\n>>> points2D = np.vstack([u,v]).T >>> tri = Delaunay(points2D) >>> simplices = tri.simplices\n\n >>> colors = [] >>> color_choices = ['rgb(0, 0, 0)', '#6c4774', '#d6c7dd']\n\n>>> for index in range(len(simplices)): ...\n\n\n\n colors.append(random.choice(color_choices))\n\n>>> fig = create_trisurf( ...\n\n\n\n x, y, z, simplices, ...\n\n\n\n color_func=colors, ...\n\n\n\n show_colorbar=True, ...\n\n\n\n edges_color='rgb(2, 85, 180)', ...\n\n\n\n title=' Modern Art' ... )\n"
}