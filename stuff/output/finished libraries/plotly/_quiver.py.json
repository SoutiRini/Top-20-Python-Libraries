{
    "source file": "_quiver.py",
    "line number": "10",
    "func name": "create_quiver",
    "func arg": "(x, y, u, v, scale, arrow_scale, angle, scaleratio, **kwargs)",
    "comments": "Returns data for a quiver plot.\n\nparam (list|ndarray) x: x coordinates of the arrow locations :param (list|ndarray) y: y coordinates of the arrow locations :param (list|ndarray) u: x components of the arrow vectors :param (list|ndarray) v: y components of the arrow vectors :param (float in [0,1]) scale: scales size of the arrows(ideally to avoid overlap). Default = .1 :param (float in [0,1]) arrow_scale: value multiplied to length of barb to get length of arrowhead. Default = .3 :param (angle in radians) angle: angle of arrowhead. Default = pi/9 :param (positive float) scaleratio: the ratio between the scale of the y-axis and the scale of the x-axis (scale_y / scale_x). Default = None, the scale ratio is not fixed. :param kwargs: kwargs passed through plotly.graph_objs.Scatter for more information on valid kwargs call help(plotly.graph_objs.Scatter)\n\n:rtype (dict): returns a representation of quiver figure.\n\nExample 1: Trivial Quiver\n\n>>> from plotly.figure_factory import create_quiver >>> import math\n\n>>> # 1 Arrow from (0,0) to (1,1) >>> fig = create_quiver(x=[0], y=[0], u=[1], v=[1], scale=1) >>> fig.show()\n\n Example 2: Quiver plot using meshgrid\n\n>>> from plotly.figure_factory import create_quiver\n\n>>> import numpy as np >>> import math\n\n>>> # Add data >>> x,y = np.meshgrid(np.arange(0, 2, .2), np.arange(0, 2, .2)) >>> u = np.cos(x)*y >>> v = np.sin(x)*y\n\n>>> #Create quiver >>> fig = create_quiver(x, y, u, v) >>> fig.show()\n\n Example 3: Styling the quiver plot\n\n>>> from plotly.figure_factory import create_quiver >>> import numpy as np >>> import math\n\n>>> # Add data >>> x, y = np.meshgrid(np.arange(-np.pi, math.pi, .5), ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnp.arange(-math.pi, math.pi, .5)) >>> u = np.cos(x)*y >>> v = np.sin(x)*y\n\n>>> # Create quiver >>> fig = create_quiver(x, y, u, v, scale=.2, arrow_scale=.3, angle=math.pi/6, ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n name='Wind Velocity', line=dict(width=1))\n\n>>> # Add title to layout >>> fig.update_layout(title='Quiver Plot') # doctest: +SKIP >>> fig.show()\n\n Example 4: Forcing a fix scale ratio to maintain the arrow length\n\n>>> from plotly.figure_factory import create_quiver >>> import numpy as np\n\n>>> # Add data >>> x,y = np.meshgrid(np.arange(0.5, 3.5, .5), np.arange(0.5, 4.5, .5)) >>> u = x >>> v = y >>> angle = np.arctan(v / u) >>> norm = 0.25 >>> u = norm * np.cos(angle) >>> v = norm * np.sin(angle)\n\n>>> # Create quiver with a fix scale ratio >>> fig = create_quiver(x, y, u, v, scale = 1, scaleratio = 0.5) >>> fig.show()\n"
}