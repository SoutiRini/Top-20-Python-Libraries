{
    "source file": "kde.py",
    "line number": "373",
    "func name": "kdensityfft",
    "func arg": "(X, kernel, bw, weights, gridsize, adjust, clip, cut, retgrid)",
    "comments": "Rosenblatt-Parzen univariate kernel density estimator\n\nParameters ---------- X : array_like The variable for which the density estimate is desired. kernel : str ONLY GAUSSIAN IS CURRENTLY IMPLEMENTED. \"bi\" for biweight \"cos\" for cosine \"epa\" for Epanechnikov, default \"epa2\" for alternative Epanechnikov \"gau\" for Gaussian. \"par\" for Parzen \"rect\" for rectangular \"tri\" for triangular bw : str, float \"scott\"\n\n- 1.059 * A * nobs ** (-1/5.), where A is min(std(X),IQR/1.34) \"silverman\"\n\n- .9 * A * nobs ** (-1/5.), where A is min(std(X),IQR/1.34) If a float is given, it is the bandwidth. weights : array or None WEIGHTS ARE NOT CURRENTLY IMPLEMENTED. Optional\n\nweights. If the X value is clipped, then this weight is also dropped. gridsize : int If gridsize is None, min(len(X), 512) is used. Note that the provided number is rounded up to the next highest power of 2. adjust : float An adjustment factor for the bw. Bandwidth becomes bw * adjust. clip : tuple Observations in X that are outside of the range given by clip are dropped. The number of observations in X is then shortened. cut : float Defines the length of the grid past the lowest and highest values of X so that the kernel goes to zero. The end points are -/+ cut*bw*{X.min() or X.max()} retgrid : bool Whether or not to return the grid over which the density is estimated.\n##### Returns\n* **density **: ndarray\n    The densities estimated at the grid points.\n\n* **grid **: ndarray, optional\n    The grid points at which the density is estimated.\n\n* **Jones, M.C. and H.W. Lotwick. (1984) `Remark AS R50**: A Remark on Algorithm\n    AS 176. Kernal Density Estimation Using the Fast Fourier Transform`.\n    Journal of the Royal Statistical Society. Series C. 33.1, 120-2.\n\n"
}