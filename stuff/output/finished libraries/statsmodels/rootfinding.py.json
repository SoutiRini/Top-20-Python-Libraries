{
    "source file": "rootfinding.py",
    "line number": "20",
    "func name": "brentq_expanding",
    "func arg": "(func, low, upp, args, xtol, start_low, start_upp, increasing, max_it, maxiter_bq, factor, full_output)",
    "comments": "find the root of a function in one variable by expanding and brentq\n\nAssumes function ``func`` is monotonic.\n\nParameters ---------- func : callable function for which we find the root ``x`` such that ``func(x) = 0`` low : float or None lower bound for brentq upp : float or None upper bound for brentq args : tuple optional additional arguments for ``func`` xtol : float parameter x tolerance given to brentq start_low : float (positive) or None starting bound for expansion with increasing ``x``. It needs to be positive. If None, then it is set to 1. start_upp : float (negative) or None starting bound for expansion with decreasing ``x``. It needs to be negative. If None, then it is set to -1. increasing : bool or None If None, then the function is evaluated at the initial bounds to determine wether the function is increasing or not. If increasing is True (False), then it is assumed that the function is monotonically increasing (decreasing). max_it : int maximum number of expansion steps. maxiter_bq : int maximum number of iterations of brentq. factor : float expansion factor for step of shifting the bounds interval, default is 10. full_output : bool, optional If full_output is False, the root is returned. If full_output is True, the return value is (x, r), where x is the root, and r is a RootResults object.\n##### Returns\n* **x **: float\n    root of the function, value at which ``func(x) = 0``.\n\n* **info **: RootResult (optional)\n    returned if ``full_output`` is True.\n    attributes\n\n"
}