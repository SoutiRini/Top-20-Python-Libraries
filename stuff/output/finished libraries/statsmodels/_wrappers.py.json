{
    "source file": "_wrappers.py",
    "line number": "13",
    "func name": "rotate_factors",
    "func arg": "(A, method, **algorithm_kwargs)",
    "comments": "Subroutine for orthogonal and oblique rotation of the matrix :math:`A`. For orthogonal rotations :math:`A` is rotated to :math:`L` according to\n\n.. math::\n\nL =\n\nAT,\n\nwhere :math:`T` is an orthogonal matrix. And, for oblique rotations :math:`A` is rotated to :math:`L` according to\n\n.. math::\n\nL =\n\nA(T^*)^{-1},\n\nwhere :math:`T` is a normal matrix.\n\nParameters ---------- A : numpy matrix (default None) non rotated factors method : str should be one of the methods listed below method_args : list additional arguments that should be provided with each method algorithm_kwargs : dictionary algorithm : str (default gpa) should be one of:\n\n* 'gpa': a numerical method * 'gpa_der_free': a derivative free numerical method * 'analytic' : an analytic method\n\nDepending on the algorithm, there are algorithm specific keyword arguments. For the gpa and gpa_der_free, the following keyword arguments are available:\n\nmax_tries : int (default 501) maximum number of iterations\n\ntol : float stop criterion, algorithm stops if Frobenius norm of gradient is smaller then tol\n\nFor analytic, the supported arguments depend on the method, see above.\n\nSee the lower level functions for more details.\n##### Returns\n* **The tuple **: math\n\n* **Below,\n    * **: math\n\n* **oblimin **: orthogonal or oblique rotation that minimizes\n    .. math\n\n* **orthomax **: orthogonal rotation that minimizes\n    .. math\n\n* **CF **: Crawford-Ferguson family for orthogonal and oblique rotation which\n\n* **minimizes**: .. math\n\n* **quartimax **: orthogonal rotation method\n    minimizes the orthomax objective with\n\n* **biquartimax **: orthogonal rotation method\n    minimizes the orthomax objective with\n\n* **varimax **: orthogonal rotation method\n    minimizes the orthomax objective with\n\n* **equamax **: orthogonal rotation method\n    minimizes the orthomax objective with\n\n* **parsimax **: orthogonal rotation method\n    minimizes the Crawford-Ferguson family objective with\n\n* **parsimony **: orthogonal rotation method\n    minimizes the Crawford-Ferguson family objective with\n\n* **quartimin **: oblique rotation method that minimizes\n    minimizes the oblimin objective with\n\n* **target **: orthogonal or oblique rotation that rotates towards a target\n\n* **matrix **: math\n\n* **partial_target **: orthogonal (default) or oblique rotation that partially\n\n* **rotates towards a target matrix **: math\n\n"
}