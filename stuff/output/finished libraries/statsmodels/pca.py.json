{
    "source file": "pca.py",
    "line number": "800",
    "func name": "pca",
    "func arg": "(data, ncomp, standardize, demean, normalize, gls, weights, method)",
    "comments": "Perform Principal Component Analysis (PCA).\n\nParameters ---------- data : ndarray Variables in columns, observations in rows. ncomp : int, optional Number of components to return.\n\nIf None, returns the as many as the smaller to the number of rows or columns of data. standardize : bool, optional Flag indicating to use standardized data with mean 0 and unit variance.\n\nstandardized being True implies demean. demean : bool, optional Flag indicating whether to demean data before computing principal components.\n\ndemean is ignored if standardize is True. normalize : bool , optional Indicates whether th normalize the factors to have unit inner product.\n\nIf False, the loadings will have unit inner product. gls : bool, optional Flag indicating to implement a two-step GLS estimator where in the first step principal components are used to estimate residuals, and then the inverse residual variance is used as a set of weights to estimate the final principal components weights : ndarray, optional Series weights to use after transforming data according to standardize or demean when computing the principal components. method : str, optional Determines the linear algebra routine uses.\n\n'eig', the default, uses an eigenvalue decomposition. 'svd' uses a singular value decomposition.\n##### Returns\n* **factors **: {ndarray, DataFrame}\n    Array (nobs, ncomp)of of principal components (also known as scores).\n\n* **loadings **: {ndarray, DataFrame}\n    Array (ncomp, nvar) of  principal component loadings for constructing\n    the factors.\n\n* **projection **: {ndarray, DataFrame}\n    Array (nobs, nvar) containing the projection of the data onto the ncomp\n    estimated factors.\n\n* **rsquare **: {ndarray, Series}\n    Array (ncomp,) where the element in the ith position is the R-square\n    of including the fist i principal components.  The values are\n    calculated on the transformed data, not the original data.\n\n* **ic **: {ndarray, DataFrame}\n    Array (ncomp, 3) containing the Bai and Ng (2003) Information\n    criteria.  Each column is a different criteria, and each row\n    represents the number of included factors.\n\n* **eigenvals **: {ndarray, Series}\n    Array of eigenvalues (nvar,).\n\n* **eigenvecs **: {ndarray, DataFrame}\n    Array of eigenvectors. (nvar, nvar).\n\n"
}