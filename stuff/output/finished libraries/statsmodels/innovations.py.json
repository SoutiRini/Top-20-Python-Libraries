{
    "source file": "innovations.py",
    "line number": "89",
    "func name": "innovations_mle",
    "func arg": "(endog, order, seasonal_order, demean, enforce_invertibility, start_params, minimize_kwargs)",
    "comments": "Estimate SARIMA parameters by MLE using innovations algorithm.\n\nParameters ---------- endog : array_like Input time series array. order : tuple, optional The (p,d,q) order of the model for the number of AR parameters, differences, and MA parameters. Default is (0, 0, 0). seasonal_order : tuple, optional The (P,D,Q,s) order of the seasonal component of the model for the AR parameters, differences, MA parameters, and periodicity. Default is (0, 0, 0, 0). demean : bool, optional Whether to estimate and remove the mean from the process prior to fitting the SARIMA coefficients. Default is True. enforce_invertibility : bool, optional Whether or not to transform the MA parameters to enforce invertibility in the moving average component of the model. Default is True. start_params : array_like, optional Initial guess of the solution for the loglikelihood maximization. The AR polynomial must be stationary. If `enforce_invertibility=True` the MA poylnomial must be invertible. If not provided, default starting parameters are computed using the Hannan-Rissanen method. minimize_kwargs : dict, optional Arguments to pass to scipy.optimize.minimize.\n##### Returns\n* **parameters **: SARIMAXParams object\n\n* **other_results **: Bunch\n    Includes four components\n\n* **Note**: we do not include `enforce_stationarity` as an argument, because this\n\n* **TODO**: add support for secondary optimization that does not enforce\n      stationarity / invertibility, starting from first step's parameters\n\n"
}