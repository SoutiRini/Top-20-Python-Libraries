{
    "source file": "inter_rater.py",
    "line number": "268",
    "func name": "cohens_kappa",
    "func arg": "(table, weights, return_results, wt)",
    "comments": "Compute Cohen's kappa with variance and equal-zero test\n\nParameters ---------- table : array_like, 2-Dim square array with results of two raters, one rater in rows, second rater in columns weights : array_like The interpretation of weights depends on the wt argument. If both are None, then the simple kappa is computed. see wt for the case when wt is not None If weights is two dimensional, then it is directly used as a weight matrix. For computing the variance of kappa, the maximum of the weights is assumed to be smaller or equal to one. TODO: fix conflicting definitions in the 2-Dim case for wt : {None, str} If wt and weights are None, then the simple kappa is computed. If wt is given, but weights is None, then the weights are set to be [0, 1, 2, ..., k]. If weights is a one-dimensional array, then it is used to construct the weight matrix given the following options.\n\nwt in ['linear', 'ca' or None] : use linear weights, Cicchetti-Allison actual weights are linear in the score \"weights\" difference wt in ['quadratic', 'fc'] : use linear weights, Fleiss-Cohen actual weights are squared in the score \"weights\" difference wt = 'toeplitz' : weight matrix is constructed as a toeplitz matrix from the one dimensional weights.\n\nreturn_results : bool If True (default), then an instance of KappaResults is returned. If False, then only kappa is computed and returned.\n##### Returns\n* **example**: \n\n"
}