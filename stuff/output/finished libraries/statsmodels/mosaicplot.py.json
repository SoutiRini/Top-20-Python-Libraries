{
    "source file": "mosaicplot.py",
    "line number": "468",
    "func name": "mosaic",
    "func arg": "(data, index, ax, horizontal, gap, properties, labelizer, title, statistic, axes_label, label_rotation)",
    "comments": "Create a mosaic plot from a contingency table.\n\nIt allows to visualize multivariate categorical data in a rigorous and informative way.\n\nParameters ---------- data : {dict, Series, ndarray, DataFrame} The contingency table that contains the data. Each category should contain a non-negative number with a tuple as index.\n\nIt expects that all the combination of keys to be represents; if that is not true, will automatically consider the missing values as 0.\n\nThe order of the keys will be the same as the one of insertion. If a dict of a Series (or any other dict like object) is used, it will take the keys as labels.\n\nIf a np.ndarray is provided, it will generate a simple numerical labels. index : list, optional Gives the preferred order for the category ordering. If not specified will default to the given order.\n\nIt does not support named indexes for hierarchical Series.\n\nIf a DataFrame is provided, it expects a list with the name of the columns. ax : Axes, optional The graph where display the mosaic. If not given, will create a new figure horizontal : bool, optional The starting direction of the split (by default along the horizontal axis) gap : {float, sequence[float]} The list of gaps to be applied on each subdivision. If the length of the given array is less of the number of subcategories (or if it's a single number) it will extend it with exponentially decreasing gaps properties : dict[str, callable], optional A function that for each tile in the mosaic take the key of the tile and returns the dictionary of properties of the generated Rectangle, like color, hatch or similar. A default properties set will be provided fot the keys whose color has not been defined, and will use color variation to help visually separates the various categories. It should return None to indicate that it should use the default property for the tile. A dictionary of the properties for each key can be passed, and it will be internally converted to the correct function labelizer : dict[str, callable], optional A function that generate the text to display at the center of each tile base on the key of that tile title : str, optional The title of the axis statistic : bool, optional If true will use a crude statistical model to give colors to the plot. If the tile has a constraint that is more than 2 standard deviation from the expected value under independence hypothesis, it will go from green to red (for positive deviations, blue otherwise) and will acquire an hatching when crosses the 3 sigma. axes_label : bool, optional Show the name of each value of each category on the axis (default) or hide them. label_rotation : {float, list[float]} The rotation of the axis label (if present). If a list is given each axis can have a different rotation\n##### Returns\n* **fig **: Figure\n    The figure containing the plot.\n\n* **rects **: dict\n    A dictionary that has the same keys of the original\n    dataset, that holds a reference to the coordinates of the\n    tile and the Rectangle that represent it.\n\n* **>>> data = {'a'**: 10, 'b'\n\n* **>>> data = {('a', 'b')**: 1, ('a', 'c')\n\n* **>>> props = lambda key**: {'color'\n\n* **>>> labelizer = lambda k**: {('a',)\n\n* **...                        ('c',)**: 'third'}[k]\n\n* **>>> data = pd.DataFrame({'gender'**: gender, 'pet'\n\n* **.. plot **: \n\n"
}